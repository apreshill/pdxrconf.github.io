<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rOpenSci Tutorials on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tutorials/</link>
    <description>Recent content in rOpenSci Tutorials on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 13 Jul 2017 22:00:37 -0700</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://ropensci.org/tutorials/alm_vignette/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/alm_vignette/</guid>
      <description>
        
        

&lt;p&gt;%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{alm vignette}
&amp;ndash;&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## Error in eval(expr, envir, enclos): object &#39;opts_chunk&#39; not found
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;alm-tutorial&#34;&gt;alm tutorial&lt;/h1&gt;

&lt;h2 id=&#34;what-are-article-level-metrics&#34;&gt;What are article level metrics?&lt;/h2&gt;

&lt;p&gt;Glad you asked. The canonical URL for this is perhaps &lt;a href=&#34;http://altmetrics.org/manifesto/&#34;&gt;altmetrics.org&lt;/a&gt;. Basically it is a metric that measures something about an article. This is in stark contrast to journal level metrics, like the Journal Impact Factor.&lt;/p&gt;

&lt;h2 id=&#34;are-there-other-altmetrics-data-providers&#34;&gt;Are there other altmetrics data providers?&lt;/h2&gt;

&lt;p&gt;Yes indeedy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://impactstory.it/&#34;&gt;ImpactStory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://altmetric.com/&#34;&gt;Altmetric.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.plumanalytics.com/&#34;&gt;PlumAnalytics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;You are required to use an API key to access any Lagoota ALM API.&lt;/p&gt;

&lt;p&gt;Get your API key for each service at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://alm.plos.org/&#34;&gt;PLOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://det.labs.crossref.org/&#34;&gt;Crossref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lagotto.svr.elifesciences.org/&#34;&gt;eLife&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pkp-alm.lib.sfu.ca/&#34;&gt;PKP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://alm.pensoft.net:81/&#34;&gt;Pensoft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put your API key in your &lt;code&gt;.Rprofile&lt;/code&gt; file using exactly this:
options(PlosApiKey = &amp;ldquo;YOUalmAPIKEY&amp;rdquo;),
and the functions within this package will be able to use your API key without you having to enter it every time you run a search.&lt;/p&gt;

&lt;p&gt;Or just pss in your key using the &lt;code&gt;key&lt;/code&gt; parameter in function calls. Or keep your key as a system variable, named &lt;code&gt;ALM_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course you need a different key for each Lagotta instance (e.g., what works for PLOS does not work for Crossref). So just pass in your key with the &lt;code&gt;key&lt;/code&gt; parameter. You can still store your keys in options, but just pass them on in the function call.&lt;/p&gt;

&lt;h2 id=&#34;help&#34;&gt;Help&lt;/h2&gt;

&lt;p&gt;If you are having trouble with this R package, contact &lt;a href=&#34;mailto:myrmecocystus@gmail.com&#34;&gt;the maintainer, Scott&lt;/a&gt;. If you are having trouble with the API itself, there is a newish discussion forum for the Lagotto service at &lt;a href=&#34;http://discuss.lagotto.io/&#34;&gt;http://discuss.lagotto.io/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;install-and-load&#34;&gt;Install and load&lt;/h2&gt;

&lt;p&gt;Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;alm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/alm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Load &lt;code&gt;alm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(alm)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-default-call-with-either-doi-pmid-pmcid-or-mdid-without-specifying-an-argument-for-info&#34;&gt;The default call with either doi, pmid, pmcid, or mdid without specifying an argument for info&lt;/h2&gt;

&lt;p&gt;(We&amp;rsquo;ll not print a few columns so the table prints nicely)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(doi=&amp;quot;10.1371/journal.pone.0029797&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $meta
##   total total_pages page error
## 1     1           1    1    NA
## 
## $data
##                       .id  pdf  html readers comments likes  total
## 1               citeulike   NA    NA       1       NA    NA      1
## 2                crossref   NA    NA      NA       NA    NA      8
## 3                  nature   NA    NA      NA       NA    NA      4
## 4                  pubmed   NA    NA      NA       NA    NA      2
## 5                  scopus   NA    NA      NA       NA    NA      8
## 6                 counter 2524 30801      NA       NA    NA  33443
## 7        researchblogging   NA    NA      NA       NA    NA      1
## 8                     wos   NA    NA      NA       NA    NA      7
## 9                     pmc   78   534      NA       NA    NA    612
## 10               facebook   NA    NA     149       22    60    231
## 11               mendeley   NA    NA      80       NA    NA     80
## 12                twitter   NA    NA      NA       12    NA     12
## 13              wikipedia   NA    NA      NA       NA    NA     50
## 14          scienceseeker   NA    NA      NA       NA    NA      0
## 15         relativemetric   NA    NA      NA       NA    NA 157436
## 16                  f1000   NA    NA      NA       NA    NA      0
## 17               figshare    0    21      NA       NA     0     21
## 18              pmceurope   NA    NA      NA       NA    NA      4
## 19          pmceuropedata   NA    NA      NA       NA    NA     49
## 20            openedition   NA    NA      NA       NA    NA      0
## 21              wordpress   NA    NA      NA       NA    NA      0
## 22                 reddit   NA    NA      NA        0     0      0
## 23               datacite   NA    NA      NA       NA    NA      0
## 24             copernicus   NA    NA      NA       NA    NA      0
## 25        articlecoverage   NA    NA      NA        0    NA      0
## 26 articlecoveragecurated   NA    NA      NA        0    NA      0
## 27          plos_comments   NA    NA      NA       11    NA     16
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;details-for-a-single-doi&#34;&gt;Details for a single DOI&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out &amp;lt;- alm_ids(doi=&#39;10.1371/journal.pone.0029797&#39;, info=&#39;detail&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;info&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$data$info
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                            doi
## 1 10.1371/journal.pone.0029797
##                                                                             title
## 1 Ecological Guild Evolution and the Discovery of the World&#39;s Smallest Vertebrate
##                                                                canonical_url
## 1 http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0029797
##       pmid   pmcid                        mendeley_uuid
## 1 22253785 3256195 897fbbd6-5a23-3552-8077-97251b82c1e1
##            update_date     issued
## 1 2014-11-12T21:41:48Z 2012-01-11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sign posts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$data$signposts
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                            doi viewed saved discussed cited
## 1 10.1371/journal.pone.0029797  34055    81       243     8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;totals&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$data$totals
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                       .id  pdf  html readers comments likes  total
## 1               citeulike   NA    NA       1       NA    NA      1
## 2                crossref   NA    NA      NA       NA    NA      8
## 3                  nature   NA    NA      NA       NA    NA      4
## 4                  pubmed   NA    NA      NA       NA    NA      2
## 5                  scopus   NA    NA      NA       NA    NA      8
## 6                 counter 2524 30801      NA       NA    NA  33443
## 7        researchblogging   NA    NA      NA       NA    NA      1
## 8                     wos   NA    NA      NA       NA    NA      7
## 9                     pmc   78   534      NA       NA    NA    612
## 10               facebook   NA    NA     149       22    60    231
## 11               mendeley   NA    NA      80       NA    NA     80
## 12                twitter   NA    NA      NA       12    NA     12
## 13              wikipedia   NA    NA      NA       NA    NA     50
## 14          scienceseeker   NA    NA      NA       NA    NA      0
## 15         relativemetric   NA    NA      NA       NA    NA 157436
## 16                  f1000   NA    NA      NA       NA    NA      0
## 17               figshare    0    21      NA       NA     0     21
## 18              pmceurope   NA    NA      NA       NA    NA      4
## 19          pmceuropedata   NA    NA      NA       NA    NA     49
## 20            openedition   NA    NA      NA       NA    NA      0
## 21              wordpress   NA    NA      NA       NA    NA      0
## 22                 reddit   NA    NA      NA        0     0      0
## 23               datacite   NA    NA      NA       NA    NA      0
## 24             copernicus   NA    NA      NA       NA    NA      0
## 25        articlecoverage   NA    NA      NA        0    NA      0
## 26 articlecoveragecurated   NA    NA      NA        0    NA      0
## 27          plos_comments   NA    NA      NA       11    NA     16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;history&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$data$sum_metrics
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                .id year month day total X[[1L]]
## 1        citeulike 2012     1  12     1      NA
## 2           nature 2012     1  11     1      NA
## 3           nature 2012     1  12     1      NA
## 4           nature 2012     2   1     1      NA
## 5 researchblogging   NA    NA  NA    NA      NA
## 6    plos_comments 2012     1  11     1      NA
## 7    plos_comments 2012     1  12     7      NA
## 8    plos_comments 2012     1  13     1      NA
## 9    plos_comments 2012     1  14     1      NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;search-using-various-identifiers-including-pubmed-id-pmc-id-and-mendeley-id&#34;&gt;Search using various identifiers, including pubmed id, pmc id, and mendeley id&lt;/h2&gt;

&lt;p&gt;A single PubMed ID (pmid)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(pmid=22590526)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $meta
##   total total_pages page error
## 1     1           1    1    NA
## 
## $data
##                       .id  pdf  html readers comments likes total
## 1               citeulike   NA    NA       5       NA    NA     5
## 2                crossref   NA    NA      NA       NA    NA     5
## 3                  nature   NA    NA      NA       NA    NA     1
## 4                  pubmed   NA    NA      NA       NA    NA     5
## 5                  scopus   NA    NA      NA       NA    NA     9
## 6                 counter 1169 16238      NA       NA    NA 17455
## 7        researchblogging   NA    NA      NA       NA    NA     1
## 8                     wos   NA    NA      NA       NA    NA     7
## 9                     pmc   65   196      NA       NA    NA   261
## 10               facebook   NA    NA      72       57    56   185
## 11               mendeley   NA    NA      70       NA    NA    70
## 12                twitter   NA    NA      NA      161    NA   161
## 13              wikipedia   NA    NA      NA       NA    NA     0
## 14          scienceseeker   NA    NA      NA       NA    NA     0
## 15         relativemetric   NA    NA      NA       NA    NA 43647
## 16                  f1000   NA    NA      NA       NA    NA     0
## 17               figshare    0     0      NA       NA     0     0
## 18              pmceurope   NA    NA      NA       NA    NA     5
## 19          pmceuropedata   NA    NA      NA       NA    NA     0
## 20            openedition   NA    NA      NA       NA    NA     0
## 21              wordpress   NA    NA      NA       NA    NA     0
## 22                 reddit   NA    NA      NA        0     0     0
## 23               datacite   NA    NA      NA       NA    NA     0
## 24             copernicus   NA    NA      NA       NA    NA     0
## 25        articlecoverage   NA    NA      NA        0    NA     0
## 26 articlecoveragecurated   NA    NA      NA        0    NA     0
## 27          plos_comments   NA    NA      NA        3    NA     4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A single PubMed Central ID (pmcid)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(pmcid=212692)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $meta
##   total total_pages page error
## 1     1           1    1    NA
## 
## $data
##                       .id  pdf  html readers comments likes   total
## 1               citeulike   NA    NA       8       NA    NA       8
## 2                crossref   NA    NA      NA       NA    NA     164
## 3                  nature   NA    NA      NA       NA    NA       0
## 4                  pubmed   NA    NA      NA       NA    NA     172
## 5                  scopus   NA    NA      NA       NA    NA     342
## 6                 counter 2701 21593      NA       NA    NA   24458
## 7        researchblogging   NA    NA      NA       NA    NA       0
## 8                     wos   NA    NA      NA       NA    NA     323
## 9                     pmc 2387  5119      NA       NA    NA    7506
## 10               facebook   NA    NA       0        0     0       0
## 11               mendeley   NA    NA     127       NA    NA     127
## 12                twitter   NA    NA      NA        0    NA       0
## 13              wikipedia   NA    NA      NA       NA    NA       0
## 14          scienceseeker   NA    NA      NA       NA    NA       0
## 15         relativemetric   NA    NA      NA       NA    NA 1570821
## 16                  f1000   NA    NA      NA       NA    NA       0
## 17               figshare    1    10      NA       NA     0      11
## 18              pmceurope   NA    NA      NA       NA    NA     212
## 19          pmceuropedata   NA    NA      NA       NA    NA      56
## 20            openedition   NA    NA      NA       NA    NA       0
## 21              wordpress   NA    NA      NA       NA    NA       0
## 22                 reddit   NA    NA      NA        0     0       0
## 23               datacite   NA    NA      NA       NA    NA       0
## 24             copernicus   NA    NA      NA       NA    NA       0
## 25        articlecoverage   NA    NA      NA        0    NA       0
## 26 articlecoveragecurated   NA    NA      NA        0    NA       0
## 27          plos_comments   NA    NA      NA        0    NA       0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;search-on-many-identifiers&#34;&gt;Search on many identifiers&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dois &amp;lt;- c(&#39;10.1371/journal.pone.0001543&#39;,&#39;10.1371/journal.pone.0040117&#39;,
	&#39;10.1371/journal.pone.0029797&#39;,&#39;10.1371/journal.pone.0039395&#39;)
out &amp;lt;- alm_ids(doi=dois)
lapply(out$data, head)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $`10.1371/journal.pone.0040117`
##         .id pdf html readers comments likes total
## 1 citeulike  NA   NA       0       NA    NA     0
## 2  crossref  NA   NA      NA       NA    NA     6
## 3    nature  NA   NA      NA       NA    NA     0
## 4    pubmed  NA   NA      NA       NA    NA     5
## 5    scopus  NA   NA      NA       NA    NA    12
## 6   counter 402 2055      NA       NA    NA  2482
## 
## $`10.1371/journal.pone.0039395`
##         .id pdf html readers comments likes total
## 1 citeulike  NA   NA       0       NA    NA     0
## 2  crossref  NA   NA      NA       NA    NA     1
## 3    nature  NA   NA      NA       NA    NA     0
## 4    pubmed  NA   NA      NA       NA    NA     1
## 5    scopus  NA   NA      NA       NA    NA     3
## 6   counter 240 1373      NA       NA    NA  1642
## 
## $`10.1371/journal.pone.0029797`
##         .id  pdf  html readers comments likes total
## 1 citeulike   NA    NA       1       NA    NA     1
## 2  crossref   NA    NA      NA       NA    NA     8
## 3    nature   NA    NA      NA       NA    NA     4
## 4    pubmed   NA    NA      NA       NA    NA     2
## 5    scopus   NA    NA      NA       NA    NA     8
## 6   counter 2524 30801      NA       NA    NA 33443
## 
## $`10.1371/journal.pone.0001543`
##         .id pdf html readers comments likes total
## 1 citeulike  NA   NA       0       NA    NA     0
## 2  crossref  NA   NA      NA       NA    NA     7
## 3    nature  NA   NA      NA       NA    NA     0
## 4    pubmed  NA   NA      NA       NA    NA     7
## 5    scopus  NA   NA      NA       NA    NA    12
## 6   counter 453 2742      NA       NA    NA  3243
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-altmetrics-by-year&#34;&gt;Get altmetrics by year&lt;/h2&gt;

&lt;p&gt;You can also get metrics by day (&lt;code&gt;sum_metrics=&#39;day&#39;&lt;/code&gt;) or month (&lt;code&gt;sum_metrics=&#39;month&#39;&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(doi=&#39;10.1371/journal.pone.0036240&#39;, sum_metrics=&#39;year&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $meta
##   total total_pages page error
## 1     1           1    1    NA
## 
## $data
##               .id year total pdf  html
## 1       citeulike 2012     5  NA    NA
## 2        crossref 2014     5  NA    NA
## 3          nature 2012     1  NA    NA
## 4          pubmed 2014     5  NA    NA
## 5          scopus 2014     9  NA    NA
## 6         counter 2012    NA 699 10502
## 7         counter 2013    NA 299  3605
## 8         counter 2014    NA 171  2131
## 9             wos 2014     7  NA    NA
## 10            pmc 2012    NA  16    53
## 11            pmc 2013    NA  13    66
## 12            pmc 2014    NA  36    77
## 13       facebook 2014   185  NA    NA
## 14       mendeley 2014    70  NA    NA
## 15        twitter 2012   103  NA    NA
## 16        twitter 2013    33  NA    NA
## 17        twitter 2014    25  NA    NA
## 18 relativemetric 2014 43647  NA    NA
## 19      pmceurope 2014     5  NA    NA
## 20  plos_comments 2012     2  NA    NA
## 21  plos_comments 2014     1  NA    NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output-an-easy-to-combine-with-other-results-data-frame&#34;&gt;Output an-easy-to-combine-with-other-results data.frame&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(doi=&#39;10.1371/journal.pone.0035869&#39;, total_details=TRUE)$data[,3:7]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   citeulike_pdf citeulike_html citeulike_readers citeulike_comments
## 1            NA             NA                27                 NA
##   citeulike_likes
## 1              NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-detailed-data-for-altmetrics-using-almevents&#34;&gt;Get detailed data for altmetrics using &lt;code&gt;almevents&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out &amp;lt;- alm_events(doi=&amp;quot;10.1371/journal.pone.0029797&amp;quot;)
names(out)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;citeulike&amp;quot;        &amp;quot;crossref&amp;quot;         &amp;quot;nature&amp;quot;          
##  [4] &amp;quot;pubmed&amp;quot;           &amp;quot;scopus&amp;quot;           &amp;quot;counter&amp;quot;         
##  [7] &amp;quot;researchblogging&amp;quot; &amp;quot;pmc&amp;quot;              &amp;quot;facebook&amp;quot;        
## [10] &amp;quot;mendeley&amp;quot;         &amp;quot;twitter&amp;quot;          &amp;quot;wikipedia&amp;quot;       
## [13] &amp;quot;relativemetric&amp;quot;   &amp;quot;figshare&amp;quot;         &amp;quot;pmceuropedata&amp;quot;   
## [16] &amp;quot;plos_comments&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the results for PubMed Central&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# remove those with no data
out &amp;lt;- out[!out %in% c(&amp;quot;sorry, no events content yet&amp;quot;,&amp;quot;parser not written yet&amp;quot;)]
out[[&amp;quot;pmc&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $events_url
## [1] &amp;quot;http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3256195&amp;quot;
## 
## $events
##    scanned.page.browse month cited.by abstract full.text unique.ip pdf
## 1                    0     1        0        1        51        42   8
## 2                    0     2        0        0        15        11   4
## 3                    0     3        0        0        11        12   4
## 4                    0     4        0        1         6         6   2
## 5                    0     5        0        0         5         5   1
## 6                    0     6        0        0         7         9   2
## 7                    0     7        0        1         6         8   3
## 8                    0     8        0        1         5         4   0
## 9                    0     9        0        0        14        13   5
## 10                   0    10        0        1        20        16   4
## 11                   0    12        0        0        13        12   1
## 12                   0     1        0        0        13        14   7
## 13                   0     3        0        1        22        20   2
## 14                   0     2        0        0        13        10   2
## 15                   0     4        1        1        45        24   4
## 16                   0    11        0        1        10         9   1
## 17                   0     5        0        0        18        21   5
## 18                   0     6        0        0        12        11   1
## 19                   0     7        0        0        27        14   1
## 20                   0     8        0        0        21        13   0
## 21                   0     9        0        0        14        13   0
## 22                   0    10        0        0        14        15   3
## 23                   0    11        0        6        18        16   2
## 24                   0    12        0        0        14         9   1
## 25                   0     1        0        0        22        16   1
## 26                   0     2        0        0        13        12   1
## 27                   0     3        0        0        11        10   1
## 28                   0     5        0        0        15        12   0
## 29                   0     6        0        0        12        12   2
## 30                   0     4        0        0         8         9   1
## 31                   0     8        0        0        18        14   3
## 32                   0     9        0        0        18        20   2
## 33                   0    10        0        0        23        18   4
##    year figure scanned.summary supp.data
## 1  2012      9               0         0
## 2  2012     11               0         2
## 3  2012      0               0         0
## 4  2012      0               0         0
## 5  2012      0               0         0
## 6  2012      2               0         0
## 7  2012      3               0         0
## 8  2012      0               0         0
## 9  2012      3               0         0
## 10 2012      1               0         0
## 11 2012      1               0         0
## 12 2013      0               0         0
## 13 2013      0               0         0
## 14 2013      0               0         0
## 15 2013      3               0         1
## 16 2012      0               0         0
## 17 2013      0               0         1
## 18 2013      0               0         1
## 19 2013      0               0         0
## 20 2013      0               0         0
## 21 2013      0               0         1
## 22 2013      2               0         0
## 23 2013      0               0         0
## 24 2013      0               0         0
## 25 2014      0               0         0
## 26 2014      0               0         0
## 27 2014      2               0         0
## 28 2014      0               0         1
## 29 2014      0               0         0
## 30 2014      0               0         1
## 31 2014      0               0         0
## 32 2014      0               0         0
## 33 2014      0               0         0
## 
## $csl
## list()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the results for twitter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$twitter$events[1:3,]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                   id
## 1 237088032224849920
## 2 237088322290331648
## 3 263798980054487041
##                                                                                                                                    text
## 1                           #PLOS: Ecological Guild Evolution and the Discovery of the World&#39;s Smallest Vertebrate http://t.co/yEGLyWTf
## 2                           #PLOS: Ecological Guild Evolution and the Discovery of the World&#39;s Smallest Vertebrate http://t.co/497NRrMR
## 3 Happy #Halloween from Maria @PLOSONE, dressed as a tiny frog, complete with dime for scale! http://t.co/YWcdPoGP http://t.co/lAxWAHOG
##             created_at            user      user_name
## 1 2012-08-19T07:26:06Z        opdebult Jan ten Hoopen
## 2 2012-08-19T07:27:15Z      forestalis forestalis.org
## 3 2012-11-01T00:25:53Z multidiscipl1ne Lindsay Kelley
##                                                                                        user_profile_image
## 1                                          http://a0.twimg.com/profile_images/1741153180/Tidan_normal.jpg
## 2                                   http://a0.twimg.com/profile_images/654250700/ForestalisIco_normal.jpg
## 3 http://a0.twimg.com/profile_images/1910116023/261235_920680811178_6708085_43508969_7138379_n_normal.jpg
##                                                      event_url
## 1        http://twitter.com/opdebult/status/237088032224849920
## 2      http://twitter.com/forestalis/status/237088322290331648
## 3 http://twitter.com/multidiscipl1ne/status/263798980054487041
##             event_time
## 1 2012-08-19T07:26:06Z
## 2 2012-08-19T07:27:15Z
## 3 2012-11-01T00:25:53Z
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;retrieve-and-plot-plos-article-level-metrics-signposts&#34;&gt;Retrieve and plot PLOS article-level metrics signposts.&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat &amp;lt;- alm_signposts(doi=&amp;quot;10.1371/journal.pone.0029797&amp;quot;)
plot_signposts(input=dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Using doi as id variables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figure/unnamed-chunk-16-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-16&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or plot many identifiers gives a line chart&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dois &amp;lt;- c(&#39;10.1371/journal.pone.0001543&#39;,&#39;10.1371/journal.pone.0040117&#39;,&#39;10.1371/journal.pone.0029797&#39;,&#39;10.1371/journal.pone.0039395&#39;)
dat &amp;lt;- alm_signposts(doi=dois)
plot_signposts(input=dat) + theme_grey(base_size = 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Using doi as id variables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figure/unnamed-chunk-17-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-17&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or make an interactive chart by doing &lt;code&gt;plot_signposts(input=dat, type=&amp;quot;multiBarChart&amp;quot;)&lt;/code&gt;. Try it out! It should open in your browser and you can interact with it.&lt;/p&gt;

&lt;h2 id=&#34;density-and-histogram-plots-from-plos-article-level-metrics-data&#34;&gt;Density and histogram plots from PLOS Article Level Metrics data&lt;/h2&gt;

&lt;p&gt;Note: Do you the key below in the &lt;code&gt;searchplos&lt;/code&gt; call in this example, but if you plan to use rplos more, get your own API key &lt;a href=&#34;http://api.plos.org/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;rplos&#39;)
library(&#39;plyr&#39;)
dois &amp;lt;- searchplos(q=&#39;science&#39;, fl=&amp;quot;id&amp;quot;, fq=list(&#39;cross_published_journal_key:PLoSONE&#39;, &#39;doc_type:full&#39;, &#39;publication_date:[2010-01-01T00:00:00Z TO 2010-12-31T23:59:59Z]&#39;), limit=75)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove non-full article DOIs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dois &amp;lt;- dois$data$id
dois &amp;lt;- dois[!grepl(&amp;quot;annotation&amp;quot;, dois)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Collect altmetrics data and combine to a &lt;code&gt;data.frame&lt;/code&gt; with &lt;code&gt;ldply&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm &amp;lt;- alm_ids(doi=dois, total_details=TRUE)
alm &amp;lt;- ldply(alm$data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default plot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(alm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figure/unnamed-chunk-21-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-21&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can change the color of the density plot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(alm, color=&amp;quot;#EFA5A5&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figure/unnamed-chunk-22-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-22&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pass in a title or description subtending the title&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(alm, title=&amp;quot;Scopus citations from 2010&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figure/unnamed-chunk-23-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-23&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Plot a particular source&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(alm, source=&amp;quot;crossref_total&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figure/unnamed-chunk-24-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-24&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Plot many sources in different panels in the same plot, and pass in colors just for fun&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(input=alm, source=c(&amp;quot;counter_html&amp;quot;,&amp;quot;crossref_total&amp;quot;,&amp;quot;pubmed_total&amp;quot;,&amp;quot;scopus_total&amp;quot;), color=c(&amp;quot;#83DFB4&amp;quot;,&amp;quot;#EFA5A5&amp;quot;,&amp;quot;#CFD470&amp;quot;,&amp;quot;#B2C9E4&amp;quot;)) + theme_grey(base_size = 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## No id variables; using all as measure variables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;figure/unnamed-chunk-25-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-25&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;crossref-article-level-metrics&#34;&gt;CrossRef article level metrics&lt;/h2&gt;

&lt;p&gt;Remember to get your api key from CrossRef, pass it in in the key parameter. Notice that we are passing the base url for the Crossref API, whereas the default is for the PLOS url &lt;a href=&#34;http://alm.plos.org/api/v3/articles&#34;&gt;http://alm.plos.org/api/v3/articles&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;http://alm.labs.crossref.org/api/v5/articles&amp;quot;
dois &amp;lt;- c(&amp;quot;10.1371/journal.pone.0086859&amp;quot;, &amp;quot;10.1038/nature12990&amp;quot;, &amp;quot;10.5860/choice.51-3037&amp;quot;)
alm_ids(doi=dois, url = url, key=getOption(&amp;quot;crossrefalmkey&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $meta
##   total total_pages page error
## 1     3           1    1    NA
## 
## $data
## $data$`10.1038/nature12990`
##              .id pdf html readers comments likes total
## 1       crossref  NA   NA      NA       NA    NA     0
## 2       mendeley  NA   NA      NA       NA    NA     0
## 3       facebook  NA   NA      NA       NA    NA     0
## 4            pmc  NA   NA      NA       NA    NA     0
## 5      citeulike  NA   NA      NA       NA    NA     0
## 6         pubmed  NA   NA      NA       NA    NA     0
## 7      wordpress  NA   NA      NA       NA    NA     0
## 8         reddit  NA   NA      NA       NA    NA     0
## 9      wikipedia  NA   NA      NA       NA    NA     6
## 10      datacite  NA   NA      NA       NA    NA     0
## 11     pmceurope  NA   NA      NA       NA    NA     0
## 12 pmceuropedata  NA   NA      NA       NA    NA     0
## 
## $data$`10.1371/journal.pone.0086859`
##              .id pdf html readers comments likes total
## 1       crossref  NA   NA      NA       NA    NA     0
## 2       mendeley  NA   NA      NA       NA    NA     0
## 3       facebook  NA   NA      NA       NA    NA     0
## 4            pmc  NA   NA      NA       NA    NA     0
## 5      citeulike  NA   NA      NA       NA    NA     0
## 6         pubmed  NA   NA      NA       NA    NA     0
## 7      wordpress  NA   NA      NA       NA    NA     0
## 8         reddit  NA   NA      NA       NA    NA     0
## 9      wikipedia  NA   NA      NA       NA    NA     2
## 10      datacite  NA   NA      NA       NA    NA     0
## 11     pmceurope  NA   NA      NA       NA    NA     0
## 12 pmceuropedata  NA   NA      NA       NA    NA     0
## 
## $data$`10.5860/choice.51-3037`
##              .id pdf html readers comments likes total
## 1       crossref  NA   NA      NA       NA    NA     0
## 2       mendeley  NA   NA      NA       NA    NA     0
## 3       facebook  NA   NA      NA       NA    NA     0
## 4            pmc  NA   NA      NA       NA    NA     0
## 5      citeulike  NA   NA      NA       NA    NA     0
## 6         pubmed  NA   NA      NA       NA    NA     0
## 7      wordpress  NA   NA      NA       NA    NA     0
## 8         reddit  NA   NA      NA       NA    NA     0
## 9      wikipedia  NA   NA      NA       NA    NA     0
## 10      datacite  NA   NA      NA       NA    NA     0
## 11     pmceurope  NA   NA      NA       NA    NA     0
## 12 pmceuropedata  NA   NA      NA       NA    NA     0
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>AntWeb tutorial</title>
      <link>https://ropensci.org/tutorials/antweb_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/antweb_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;a href=&#34;http://www.antweb.org/&#34;&gt;AntWeb&lt;/a&gt; is a repository that boasts a wealth of natural history data, digital images, and specimen records on ant species from a large community of museum curators.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;AntWeb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or you can install the latest development version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;devtools&amp;quot;)
install_github(&amp;quot;ropensci/AntWeb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;h4 id=&#34;searching-through-the-database&#34;&gt;Searching through the database&lt;/h4&gt;

&lt;p&gt;As with most of our packages, there are several ways to search through an API. In the case of AntWeb, you can search by a genus or full species name or by other taxonomic ranks like sub-phylum.&lt;/p&gt;

&lt;p&gt;To obtain data on any taxonomic group, you can make a request using the &lt;code&gt;aw_data()&lt;/code&gt; function. It&amp;rsquo;s possible to search easily by a taxonomic rank (e.g. a genus) or by passing a complete scientific name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Searching by Genus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get data on an ant genus found widely through Central and South America&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;AntWeb&amp;quot;)
leaf_cutter_ants  &amp;lt;- aw_data(genus = &amp;quot;acromyrmex&amp;quot;)
leaf_cutter_ants$count
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] 964
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Searching by species&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can request data on any particular species&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(acanthognathus_df &amp;lt;- aw_data(scientific_name = &amp;quot;acanthognathus brevicornis&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [Total results on the server]: 4
#&amp;gt; [Args]:
#&amp;gt; genus = acanthognathus
#&amp;gt; species = brevicornis
#&amp;gt; [Dataset]: [4 x 16]
#&amp;gt; [Data preview] :
#&amp;gt;                                                               url
#&amp;gt; 1 http://antweb.org/api/v2/?occurrenceId=CAS:ANTWEB:casent0280684
#&amp;gt; 2 http://antweb.org/api/v2/?occurrenceId=CAS:ANTWEB:casent0637708
#&amp;gt;   catalogNumber     family  subfamily          genus specificEpithet
#&amp;gt; 1 casent0280684 formicidae myrmicinae Acanthognathus     brevicornis
#&amp;gt; 2 casent0637708 formicidae myrmicinae Acanthognathus     brevicornis
#&amp;gt;              scientific_name typeStatus stateProvince  country
#&amp;gt; 1 acanthognathus brevicornis                          Colombia
#&amp;gt; 2 acanthognathus brevicornis            Madre de Dios     Peru
#&amp;gt;   dateIdentified                             habitat
#&amp;gt; 1
#&amp;gt; 2     2013-09-12 Bamboo forest ex sifted leaf litter
#&amp;gt;   minimumElevationInMeters geojson.type decimal_latitude decimal_longitude
#&amp;gt; 1                       NA         &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;
#&amp;gt; 2                      252        point        -13.14142           -69.623
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also limit queries to observation records that have been geoferenced&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(acanthognathus_df_geo &amp;lt;- aw_data(genus = &amp;quot;acanthognathus&amp;quot;, species = &amp;quot;brevicornis&amp;quot;, georeferenced = TRUE))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [Total results on the server]: 3
#&amp;gt; [Args]:
#&amp;gt; genus = acanthognathus
#&amp;gt; species = brevicornis
#&amp;gt; georeferenced = TRUE
#&amp;gt; [Dataset]: [3 x 16]
#&amp;gt; [Data preview] :
#&amp;gt;                                                               url
#&amp;gt; 1 http://antweb.org/api/v2/?occurrenceId=CAS:ANTWEB:casent0637708
#&amp;gt; 2 http://antweb.org/api/v2/?occurrenceId=CAS:ANTWEB:casent0914659
#&amp;gt;   catalogNumber     family  subfamily          genus specificEpithet
#&amp;gt; 1 casent0637708 formicidae myrmicinae Acanthognathus     brevicornis
#&amp;gt; 2 casent0914659 formicidae myrmicinae Acanthognathus     brevicornis
#&amp;gt;              scientific_name typeStatus stateProvince country
#&amp;gt; 1 acanthognathus brevicornis            Madre de Dios    Peru
#&amp;gt; 2 acanthognathus brevicornis                   Darien  Panama
#&amp;gt;   dateIdentified                             habitat
#&amp;gt; 1     2013-09-12 Bamboo forest ex sifted leaf litter
#&amp;gt; 2
#&amp;gt;   minimumElevationInMeters geojson.type decimal_latitude decimal_longitude
#&amp;gt; 1                      252        point        -13.14142           -69.623
#&amp;gt; 2                      500        point          7.71667             -77.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s also possible to search for records around any location by specifying a search radius.&lt;/p&gt;

&lt;p&gt;This will search for data on a 2 km radius around that latitude/longitude&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data_by_loc &amp;lt;- aw_coords(coord = &amp;quot;37.76,-122.45&amp;quot;, r = 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;mapping-ant-specimen-data&#34;&gt;Mapping ant specimen data&lt;/h4&gt;

&lt;p&gt;As with the previous ecoengine package, you can also visualize location data for any set of species. Adding &lt;code&gt;georeferenced = TRUE&lt;/code&gt; to a data retrieval call will filter out any data points without location information. Once retrieved the data are mapped with the open source &lt;a href=&#34;http://leafletjs.com/&#34;&gt;Leaflet.js&lt;/a&gt; and pushed to your default browser. Maps and associated &lt;code&gt;geoJSON&lt;/code&gt; files are also saved to a location specified (or defaults to your &lt;code&gt;/tmp&lt;/code&gt; folder). This feature is only available on the development version on GitHub (&lt;code&gt;0.5.2&lt;/code&gt; or greater; see above on how to install) and will be available from CRAN in version &lt;code&gt;0.6&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acd &amp;lt;- aw_data(genus = &amp;quot;acanthognathus&amp;quot;)
aw_map(acd)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/antweb/leafletmap.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;p&gt;To cite &lt;code&gt;AntWeb&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;Karthik Ram&amp;rsquo; (2014). AntWeb: programmatic interface to the AntWeb. R package version 0.6.1. &lt;a href=&#34;http://CRAN.R-project.org/package=AntWeb&#34;&gt;http://CRAN.R-project.org/package=AntWeb&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://creativecommons.org/choose/zero/&#34;&gt;CC0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/AntWeb/issues?state=open&#34;&gt;our Github repo for AntWeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Guide to using the ecoengine R package</title>
      <link>https://ropensci.org/tutorials/ecoengine_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/ecoengine_tutorial/</guid>
      <description>
        
        

&lt;p&gt;The Berkeley Ecoengine (&lt;a href=&#34;http://ecoengine.berkeley.edu&#34;&gt;http://ecoengine.berkeley.edu&lt;/a&gt;) provides an open API to a wealth of museum data contained in the &lt;a href=&#34;https://bnhm.berkeley.edu/&#34;&gt;Berkeley natural history museums&lt;/a&gt;. This R package provides a programmatic interface to this rich repository of data allowing for the data to be easily analyzed and visualized or brought to bear in other contexts. This vignette provides a brief overview of the packages capabilities.&lt;/p&gt;

&lt;p&gt;The API documentation is available at &lt;a href=&#34;http://ecoengine.berkeley.edu/developers/&#34;&gt;http://ecoengine.berkeley.edu/developers/&lt;/a&gt;. As with most APIs it is possible to query all the available endpoints that are accessible through the API itself. Ecoengine has something similar.&lt;/p&gt;

&lt;p&gt;&lt;section id=&#34;installation&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ecoengine&amp;quot;)
# or install the development version
devtools::install_github(&amp;quot;ropensci/ecoengine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;section id=&#34;usage&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ecoengine)
ee_about()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                                  type
## 1  wieslander_vegetation_type_mapping
## 2  wieslander_vegetation_type_mapping
## 3  wieslander_vegetation_type_mapping
## 4  wieslander_vegetation_type_mapping
## 5                                data
## 6                                data
## 7                                data
## 8                                data
## 9                             actions
## 10                          meta-data
## 11                          meta-data
## 12                          meta-data
##                                                endpoint
## 1    https://ecoengine.berkeley.edu/api/vtmplots_trees/
## 2          https://ecoengine.berkeley.edu/api/vtmplots/
## 3  https://ecoengine.berkeley.edu/api/vtmplots_brushes/
## 4            https://ecoengine.berkeley.edu/api/vtmveg/
## 5        https://ecoengine.berkeley.edu/api/checklists/
## 6           https://ecoengine.berkeley.edu/api/sensors/
## 7      https://ecoengine.berkeley.edu/api/observations/
## 8            https://ecoengine.berkeley.edu/api/photos/
## 9            https://ecoengine.berkeley.edu/api/search/
## 10           https://ecoengine.berkeley.edu/api/layers/
## 11           https://ecoengine.berkeley.edu/api/rstore/
## 12          https://ecoengine.berkeley.edu/api/sources/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-ecoengine-class&#34;&gt;The ecoengine class&lt;/h2&gt;

&lt;p&gt;The data functions in the package include ones that query obervations, checklists, photos, vegetation records, and a variety of measurements from sensors. These data are all formatted as a common &lt;code&gt;S3&lt;/code&gt; class called &lt;code&gt;ecoengine&lt;/code&gt;. The class includes 4 slots.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[&lt;code&gt;Total results&lt;/code&gt;] A total result count (not necessarily the results in this particular object but the total number available for a particlar query)&lt;/li&gt;
&lt;li&gt;[&lt;code&gt;Args&lt;/code&gt;] The arguments  (So a reader can replicate the results or rerun the query using other tools.)&lt;/li&gt;
&lt;li&gt;[&lt;code&gt;Type&lt;/code&gt;] The type (&lt;code&gt;photos&lt;/code&gt;, &lt;code&gt;observation&lt;/code&gt;, &lt;code&gt;checklist&lt;/code&gt;, or &lt;code&gt;sensor&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;[&lt;code&gt;data&lt;/code&gt;] The data. Data are most often coerced into a &lt;code&gt;data.frame&lt;/code&gt;. To access the data simply use &lt;code&gt;result_object$data&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default &lt;code&gt;print&lt;/code&gt; method for the class will summarize the object.&lt;/p&gt;

&lt;h2 id=&#34;notes-on-downloading-large-data-requests&#34;&gt;Notes on downloading large data requests&lt;/h2&gt;

&lt;p&gt;For the sake of speed, results are paginated at &lt;code&gt;25&lt;/code&gt; results per page. It is possible to request all pages for any query by specifying &lt;code&gt;page = all&lt;/code&gt; in any function that retrieves data. However, this option should be used if the request is reasonably sized (&lt;code&gt;1,000&lt;/code&gt; or fewer records). With larger requests, there is a chance that the query might become interrupted and you could lose any data that may have been partially downloaded. In such cases the recommended practice is to use the returned observations to split the request. You can always check the number of requests you&amp;rsquo;ll need to retreive data for any query by running &lt;code&gt;ee_pages(obj)&lt;/code&gt; where &lt;code&gt;obj&lt;/code&gt; is an object of class &lt;code&gt;ecoengine&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;request &amp;lt;- ee_photos(county = &amp;quot;Santa Clara County&amp;quot;, quiet = TRUE, progress = FALSE)
# Use quiet to suppress messages. Use progress = FALSE to suppress progress bars which can clutter up documents.
ee_pages(request)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Now it&#39;s simple to parallelize this request
# You can parallelize across number of cores by passing a vector of pages from 1 through the total available.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;specimen-observations&#34;&gt;Specimen Observations&lt;/h3&gt;

&lt;p&gt;The database contains over 2 million records (3386177 total). Many of these have already been georeferenced. There are two ways to obtain observations. One is to query the database directly based on a partial or exact taxonomic match. For example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pinus_observations &amp;lt;- ee_observations(scientific_name = &amp;quot;Pinus&amp;quot;, page = 1, quiet = TRUE, progress = FALSE)
pinus_observations
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [Total results on the server]: 58875
## [Args]:
## country = United States
## scientific_name = Pinus
## extra = last_modified
## georeferenced = FALSE
## page_size = 1000
## page = 1
## [Type]: FeatureCollection
## [Number of results retrieved]: 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional fields upon which to query, simply look through the help for &lt;code&gt;?ee_observations&lt;/code&gt;. In addition to narrowing data by taxonomic group, it&amp;rsquo;s also possible to add a bounding box (add argument &lt;code&gt;bbox&lt;/code&gt;) or request only data that have been georeferenced (set &lt;code&gt;georeferenced = TRUE&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lynx_data &amp;lt;- ee_observations(genus = &amp;quot;Lynx&amp;quot;,georeferenced = TRUE, quiet = TRUE, progress = FALSE)
lynx_data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [Total results on the server]: 725
## [Args]:
## country = United States
## genus = Lynx
## extra = last_modified
## georeferenced = True
## page_size = 1000
## page = 1
## [Type]: FeatureCollection
## [Number of results retrieved]: 725
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Notice that we only for the first 25 rows.
# But since 795 is not a big request, we can obtain this all in one go.
lynx_data &amp;lt;- ee_observations(genus = &amp;quot;Lynx&amp;quot;, georeferenced = TRUE, page = &amp;quot;all&amp;quot;, progress = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Search contains 725 observations (downloading 1 of 1 pages)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lynx_data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [Total results on the server]: 725
## [Args]:
## country = United States
## genus = Lynx
## extra = last_modified
## georeferenced = True
## page_size = 1000
## page = all
## [Type]: FeatureCollection
## [Number of results retrieved]: 725
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Other search examples&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;animalia &amp;lt;- ee_observations(kingdom = &amp;quot;Animalia&amp;quot;)
Artemisia &amp;lt;- ee_observations(scientific_name = &amp;quot;Artemisia douglasiana&amp;quot;)
asteraceae &amp;lt;- ee_observationss(family = &amp;quot;asteraceae&amp;quot;)
vulpes &amp;lt;- ee_observations(genus = &amp;quot;vulpes&amp;quot;)
Anas &amp;lt;- ee_observations(scientific_name = &amp;quot;Anas cyanoptera&amp;quot;, page = &amp;quot;all&amp;quot;)
loons &amp;lt;- ee_observations(scientific_name = &amp;quot;Gavia immer&amp;quot;, page = &amp;quot;all&amp;quot;)
plantae &amp;lt;- ee_observations(kingdom = &amp;quot;plantae&amp;quot;)
# grab first 10 pages (250 results)
plantae &amp;lt;- ee_observations(kingdom = &amp;quot;plantae&amp;quot;, page = 1:10)
chordata &amp;lt;- ee_observations(phylum = &amp;quot;chordata&amp;quot;)
# Class is clss since the former is a reserved keyword in SQL.
aves &amp;lt;- ee_observations(clss = &amp;quot;aves&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Mapping observations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The development version of the package includes a new function &lt;code&gt;ee_map()&lt;/code&gt; that allows users to generate interactive maps from observation queries using Leaflet.js.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lynx_data &amp;lt;- ee_observations(genus = &amp;quot;Lynx&amp;quot;, georeferenced = TRUE, page = &amp;quot;all&amp;quot;, quiet = TRUE)
ee_map(lynx_data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/ecoengine/map.png&#34; alt=&#34;Map of Lynx observations across North America&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;photos&#34;&gt;Photos&lt;/h3&gt;

&lt;p&gt;The ecoengine also contains a large number of photos from various sources. It&amp;rsquo;s easy to query the photo database using similar arguments as above. One can search by taxa, location, source, collection and much more.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;photos &amp;lt;- ee_photos(quiet = TRUE, progress = FALSE)
photos
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [Total results on the server]: 72454
## [Args]:
## page_size = 1000
## georeferenced = 0
## page = 1
## [Type]: photos
## [Number of results retrieved]: 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The database currently holds 72454 photos. Photos can be searched by state province, county, genus, scientific name, authors along with date bounds. For additional options see &lt;code&gt;?ee_photos&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;searching-photos-by-author&#34;&gt;Searching photos by author&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;charles_results &amp;lt;- ee_photos(author = &amp;quot;Charles Webber&amp;quot;, quiet = TRUE, progress = FALSE)
charles_results
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [Total results on the server]: 4907
## [Args]:
## page_size = 1000
## authors = Charles Webber
## georeferenced = FALSE
## page = 1
## [Type]: photos
## [Number of results retrieved]: 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Let&#39;s examine a couple of rows of the data
charles_results$data[1:2, ]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                                                                                url
## 1 https://ecoengine.berkeley.edu/api/photos/CalPhotos%3A8076%2B3101%2B2933%2B0025/
## 2 https://ecoengine.berkeley.edu/api/photos/CalPhotos%3A8076%2B3101%2B0667%2B0107/
##                          record        authors
## 1 CalPhotos:8076+3101+2933+0025 Charles Webber
## 2 CalPhotos:8076+3101+0667+0107 Charles Webber
##                                 locality          county photog_notes
## 1    Yosemite National Park, Badger Pass Mariposa County      Tan Oak
## 2 Yosemite National Park, Yosemite Falls Mariposa County         &amp;lt;NA&amp;gt;
##   begin_date end_date collection_code              scientific_name
## 1       &amp;lt;NA&amp;gt;     &amp;lt;NA&amp;gt;      CalAcademy Notholithocarpus densiflorus
## 2       &amp;lt;NA&amp;gt;     &amp;lt;NA&amp;gt;      CalAcademy     Rhododendron occidentale
##                                                                                          url
## 1 https://ecoengine.berkeley.edu/api/observations/CalPhotos%3A8076%2B3101%2B2933%2B0025%3A1/
## 2 https://ecoengine.berkeley.edu/api/observations/CalPhotos%3A8076%2B3101%2B0667%2B0107%3A1/
##           license
## 1 CC BY-NC-SA 3.0
## 2 CC BY-NC-SA 3.0
##                                                             media_url
## 1 http://calphotos.berkeley.edu/imgs/512x768/8076_3101/2933/0025.jpeg
## 2 http://calphotos.berkeley.edu/imgs/512x768/8076_3101/0667/0107.jpeg
##                                                   remote_resource
## 1 http://calphotos.berkeley.edu/cgi/img_query?seq_num=21272&amp;amp;one=T
## 2 http://calphotos.berkeley.edu/cgi/img_query?seq_num=14468&amp;amp;one=T
##                                          source geojson.type   longitude
## 1 https://ecoengine.berkeley.edu/api/sources/9/        Point -119.657387
## 2 https://ecoengine.berkeley.edu/api/sources/9/        Point -119.597389
##    latitude
## 1 37.663724
## 2 37.753851
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;browsing-these-photos&#34;&gt;Browsing these photos&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;view_photos(charles_results)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will launch your default browser and render a page with thumbnails of all images returned by the search query. You can do this with any &lt;code&gt;ecoengine&lt;/code&gt; object of type &lt;code&gt;photos&lt;/code&gt;. Suggestions for improving the photo browser are welcome.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/ecoengine/browse_photos.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Other photo search examples&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# All the photos in the CDGA collection
all_cdfa &amp;lt;- ee_photos(collection_code = &amp;quot;CDFA&amp;quot;, page = &amp;quot;all&amp;quot;, progress = FALSE)
# All Racoon pictures
racoons &amp;lt;- ee_photos(scientific_name = &amp;quot;Procyon lotor&amp;quot;, quiet = TRUE, progress = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;species-checklists&#34;&gt;Species checklists&lt;/h3&gt;

&lt;p&gt;There is a wealth of checklists from all the source locations. To get all available checklists from the engine, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all_lists  &amp;lt;- ee_checklists()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Returning 52 checklists
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(all_lists[, c(&amp;quot;footprint&amp;quot;, &amp;quot;subject&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                                                         footprint
## 1   https://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
## 2   https://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
## 3   https://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
## 4 https://ecoengine.berkeley.edu/api/footprints/hastings-reserve/
## 5   https://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
## 6 https://ecoengine.berkeley.edu/api/footprints/hastings-reserve/
##      subject
## 1    Mammals
## 2     Mosses
## 3    Beetles
## 4    Spiders
## 5 Amphibians
## 6       Ants
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently there are 52 lists available. We can drill deeper into any list to get all the available data. We can also narrow our checklist search to groups of interest (see &lt;code&gt;unique(all_lists$subject)&lt;/code&gt;). For example, to get the list of Spiders:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spiders  &amp;lt;- ee_checklists(subject = &amp;quot;Spiders&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Returning 1 checklists
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spiders
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                 record
## 4 bigcb:specieslist:15
##                                                         footprint
## 4 https://ecoengine.berkeley.edu/api/footprints/hastings-reserve/
##                                                                       url
## 4 https://ecoengine.berkeley.edu/api/checklists/bigcb%3Aspecieslist%3A15/
##                                           source subject
## 4 https://ecoengine.berkeley.edu/api/sources/18/ Spiders
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can drill deep into each list. For this tutorial I&amp;rsquo;ll just retrieve data from the the two lists returned above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(plyr)
spider_details &amp;lt;- ldply(spiders$url, checklist_details)
names(spider_details)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;url&amp;quot;                              &amp;quot;observation_type&amp;quot;
##  [3] &amp;quot;scientific_name&amp;quot;                  &amp;quot;collection_code&amp;quot;
##  [5] &amp;quot;institution_code&amp;quot;                 &amp;quot;country&amp;quot;
##  [7] &amp;quot;state_province&amp;quot;                   &amp;quot;county&amp;quot;
##  [9] &amp;quot;locality&amp;quot;                         &amp;quot;begin_date&amp;quot;
## [11] &amp;quot;end_date&amp;quot;                         &amp;quot;kingdom&amp;quot;
## [13] &amp;quot;phylum&amp;quot;                           &amp;quot;clss&amp;quot;
## [15] &amp;quot;order&amp;quot;                            &amp;quot;family&amp;quot;
## [17] &amp;quot;genus&amp;quot;                            &amp;quot;specific_epithet&amp;quot;
## [19] &amp;quot;infraspecific_epithet&amp;quot;            &amp;quot;source&amp;quot;
## [21] &amp;quot;remote_resource&amp;quot;                  &amp;quot;earliest_period_or_lowest_system&amp;quot;
## [23] &amp;quot;latest_period_or_highest_system&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unique(spider_details$scientific_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Holocnemus pluchei&amp;quot;        &amp;quot;Oecobius navus&amp;quot;
##  [3] &amp;quot;Uloborus diversus&amp;quot;         &amp;quot;Neriene litigiosa&amp;quot;
##  [5] &amp;quot;Theridion &amp;quot;                &amp;quot;Tidarren &amp;quot;
##  [7] &amp;quot;Dictyna &amp;quot;                  &amp;quot;Mallos &amp;quot;
##  [9] &amp;quot;Yorima &amp;quot;                   &amp;quot;Hahnia sanjuanensis&amp;quot;
## [11] &amp;quot;Cybaeus &amp;quot;                  &amp;quot;Zanomys &amp;quot;
## [13] &amp;quot;Anachemmis &amp;quot;               &amp;quot;Titiotus &amp;quot;
## [15] &amp;quot;Oxyopes scalaris&amp;quot;          &amp;quot;Zora hespera&amp;quot;
## [17] &amp;quot;Drassinella &amp;quot;              &amp;quot;Phrurotimpus mateonus&amp;quot;
## [19] &amp;quot;Scotinella &amp;quot;               &amp;quot;Castianeira luctifera&amp;quot;
## [21] &amp;quot;Meriola californica&amp;quot;       &amp;quot;Drassyllus insularis&amp;quot;
## [23] &amp;quot;Herpyllus propinquus&amp;quot;      &amp;quot;Micaria utahna&amp;quot;
## [25] &amp;quot;Trachyzelotes lyonneti&amp;quot;    &amp;quot;Ebo evansae&amp;quot;
## [27] &amp;quot;Habronattus oregonensis&amp;quot;   &amp;quot;Metaphidippus &amp;quot;
## [29] &amp;quot;Platycryptus californicus&amp;quot; &amp;quot;Calymmaria &amp;quot;
## [31] &amp;quot;Frontinella communis&amp;quot;      &amp;quot;Undetermined &amp;quot;
## [33] &amp;quot;Latrodectus hesperus&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our resulting dataset now contains 33 unique spider species.&lt;/p&gt;

&lt;h3 id=&#34;searching-the-engine&#34;&gt;Searching the engine&lt;/h3&gt;

&lt;p&gt;The search is elastic by default. One can search for any field in &lt;code&gt;ee_observations()&lt;/code&gt; across all available resources. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The search function runs an automatic elastic search across all resources available through the engine.
lynx_results &amp;lt;- ee_search(query = &amp;quot;genus:Lynx&amp;quot;)
lynx_results[, -3]
# This gives you a breakdown of what&#39;s available allowing you dig deeper.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                                          field results
## state_province.2                    California     282
## state_province.21                       Nevada      70
## state_province.3                        Alaska      51
## state_province.4              British Columbia      34
## state_province.5                       Arizona      24
## state_province.6                       Montana      14
## state_province.7           Baja California Sur      13
## state_province.8               Baja California      12
## state_province.9                     Zacatecas      10
## state_province.10                   New Mexico       8
## kingdom                               animalia     562
## genus                                     lynx     578
## resource                          Observations     578
## family                                 felidae     563
## scientific_name.2      Lynx rufus californicus     232
## scientific_name.21          Lynx rufus baileyi      93
## scientific_name.3   Lynx canadensis canadensis      93
## scientific_name.4        Lynx rufus pallescens      76
## scientific_name.5                   Lynx rufus      16
## scientific_name.6      Lynx rufus peninsularis      15
## scientific_name.7              Lynx canadensis      13
## scientific_name.8             Lynx rufus rufus      11
## scientific_name.9         Lynx rufus fasciatus      11
## scientific_name.10       Lynx rufus escuinapae      10
## country.2                        United States     495
## country.21                              Mexico      45
## country.3                               Canada      34
## country.4                                 None       4
## clss                                  mammalia     562
## order                                carnivora     561
## phylum                                chordata     559
## georeferenced.2                           true     525
## georeferenced.21                         false      53
## observation_type.2                    specimen     557
## observation_type.21                      photo      16
## observation_type.3                      fossil       4
## observation_type.4                   checklist       1
## decade.2                             1931-1940     132
## decade.21                            1921-1930      91
## decade.3                             1911-1920      74
## decade.4                             1901-1910      66
## decade.5                             1971-1980      62
## decade.6                             1941-1950      46
## decade.7                             1961-1970      35
## decade.8                             1951-1960      34
## decade.9                             2001-2010       9
## decade.10                            1991-2000       4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly it&amp;rsquo;s possible to search through the observations in a detailed manner as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all_lynx_data &amp;lt;- ee_search_obs(query  = &amp;quot;Lynx&amp;quot;, page = &amp;quot;all&amp;quot;, progress = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Search contains 644 observations (downloading 1 of 1 pages)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all_lynx_data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [Total results on the server]: 644
## [Args]:
## q = Lynx
## page_size = 1000
## page = all
## [Type]: observations
## [Number of results retrieved]: 644
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;miscellaneous-functions&#34;&gt;Miscellaneous functions&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Footprints&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ee_footprints()&lt;/code&gt; provides a list of all the footprints.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;footprints &amp;lt;- ee_footprints()
footprints[, -3] # To keep the table from spilling over
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                     name
## 1         Angelo Reserve
## 2        Sagehen Reserve
## 3       Hastings Reserve
## 4 Blue Oak Ranch Reserve
##                                                                     url
## 1         https://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
## 2        https://ecoengine.berkeley.edu/api/footprints/sagehen-reserve/
## 3       https://ecoengine.berkeley.edu/api/footprints/hastings-reserve/
## 4 https://ecoengine.berkeley.edu/api/footprints/blue-oak-ranch-reserve/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Data sources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ee_sources()&lt;/code&gt; provides a list of data sources for the specimens contained in the museum.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;source_list &amp;lt;- ee_sources()
unique(source_list$name)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                                 name
## 1               UCANR Drought images
## 2         LACM Vertebrate Collection
## 3                         CAS Botany
## 4                    CAS Entomology
## 5                MVZ Herp Collection
## 6               VTM plot coordinates
## 7                    CAS Herpetology
## 8                      VTM plot data
## 9                    CAS Ornithology
## 10 Consortium of California Herbaria
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;section id=&#34;citing&#34;&gt;&lt;/p&gt;

&lt;p&gt;To cite package &lt;code&gt;ecoengine&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;p&gt;Karthik Ram (2014). ecoengine: Programmatic interface to the API
  serving UC Berkeley&amp;rsquo;s Natural History Data. R package version 1.3.
  &lt;a href=&#34;http://CRAN.R-project.org/package=ecoengine&#34;&gt;http://CRAN.R-project.org/package=ecoengine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A BibTeX entry for LaTeX users is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @Manual{,
    title = {ecoengine: Programmatic interface to the API serving UC Berkeley&#39;s Natural
History Data},
    author = {Karthik Ram},
    year = {2014},
    note = {R package version 1.9.2},
    url = {http://CRAN.R-project.org/package=ecoengine},
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;section id=&#34;license_bugs&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://creativecommons.org/choose/zero/&#34;&gt;CC0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/ecoengine/issues?state=open&#34;&gt;our Github repo for Ecoengine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>RNeXML tutorial</title>
      <link>https://ropensci.org/tutorials/rnexml_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/rnexml_tutorial/</guid>
      <description>
        
        

&lt;p&gt;An R package for reading, writing, integrating and publishing data using the Ecological Metadata Language (EML) format.&lt;/p&gt;

&lt;p&gt;An extensive and rapidly growing collection of richly annotated phylogenetics data is now available in the NeXML format. NeXML relies on state-of-the-art data exchange technology to provide a format that can be both validated and extended, providing a data quality assurance and and adaptability to the future that is lacking in other formats &lt;a href=&#34;http://doi.org/10.1093/sysbio/sys025&#34; title=&#34;NeXML: Rich, Extensible, and Verifiable Representation of Comparative Data and Metadata.&#34;&gt;Vos et al 2012&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;section id=&#34;installation&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;The stable version is on CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;RNeXML&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The development version of RNeXML is &lt;a href=&#34;https://github.com/ropensci/RNeXML&#34;&gt;available on Github&lt;/a&gt;.  With the &lt;code&gt;devtools&lt;/code&gt; package installed on your system, RNeXML can be installed using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/RNeXML&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;section id=&#34;usage&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;understanding-the-nexml-s4-object&#34;&gt;Understanding the &lt;code&gt;nexml&lt;/code&gt; S4 object&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;RNeXML&lt;/code&gt; package provides many convenient functions to add and extract
information from &lt;code&gt;nexml&lt;/code&gt; objects in the R environment without requiring
the reader to understand the details of the NeXML data structure and
making it less likely that a user will generate invalid NeXML syntax
that could not be read by other parsers. The &lt;code&gt;nexml&lt;/code&gt; object we have been using
in all of the examples is built on R&amp;rsquo;s S4 mechanism. Advanced users may
sometimes prefer to interact with the data structure more directly using
R&amp;rsquo;s S4 class mechanism and subsetting methods. Many R users are more familiar
with the S3 class mechanism (such as in the &lt;code&gt;ape&lt;/code&gt; package phylo objects)
rather than the S4 class mechanism used in phylogenetics packages such as
&lt;code&gt;ouch&lt;/code&gt; and &lt;code&gt;phylobase&lt;/code&gt;. The &lt;code&gt;phylobase&lt;/code&gt; vignette provides an excellent introduction
to these data structures.  Users already familiar with subsetting lists and other
S3 objects in R are likely familar with the use of the &lt;code&gt;$&lt;/code&gt; operator, such as
&lt;code&gt;phy$edge&lt;/code&gt;. S4 objects simply use an &lt;code&gt;@&lt;/code&gt; operator instead (but cannot be subset
using numeric arguments such as &lt;code&gt;phy[[1]]&lt;/code&gt; or named arguments such as phy[[&amp;ldquo;edge&amp;rdquo;]]).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;nexml&lt;/code&gt; object is an S4 object, as are all of its components (slots).  Its
hierarchical structure corresponds exactly with the XML tree of a NeXML file, with
the single exception that both XML attributes and children are represented as slots.
S4 objects have constructor functions to initialize them.  We create a new &lt;code&gt;nexml&lt;/code&gt;
object with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nex &amp;lt;- new(&amp;quot;nexml&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see a list of slots contained in this object with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slotNames(nex)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; [1] &amp;quot;version&amp;quot;            &amp;quot;generator&amp;quot;          &amp;quot;xsi:schemaLocation&amp;quot;
 [4] &amp;quot;namespaces&amp;quot;         &amp;quot;otus&amp;quot;               &amp;quot;trees&amp;quot;
 [7] &amp;quot;characters&amp;quot;         &amp;quot;meta&amp;quot;               &amp;quot;about&amp;quot;
[10] &amp;quot;xsi:type&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some of these slots have already been populated for us, for instance, the schema version and default namespaces:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nex@version
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] &amp;quot;0.9&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nex@namespaces
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                                             nex
                     &amp;quot;http://www.nexml.org/2009&amp;quot;
                                             xsi
     &amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
                                             xml
          &amp;quot;http://www.w3.org/XML/1998/namespace&amp;quot;
                                            cdao
       &amp;quot;http://purl.obolibrary.org/obo/cdao.owl&amp;quot;
                                             xsd
             &amp;quot;http://www.w3.org/2001/XMLSchema#&amp;quot;
                                              dc
              &amp;quot;http://purl.org/dc/elements/1.1/&amp;quot;
                                         dcterms
                     &amp;quot;http://purl.org/dc/terms/&amp;quot;
                                             ter
                     &amp;quot;http://purl.org/dc/terms/&amp;quot;
                                           prism
&amp;quot;http://prismstandard.org/namespaces/1.2/basic/&amp;quot;
                                              cc
                &amp;quot;http://creativecommons.org/ns#&amp;quot;
                                            ncbi
         &amp;quot;http://www.ncbi.nlm.nih.gov/taxonomy#&amp;quot;
                                              tc
 &amp;quot;http://rs.tdwg.org/ontology/voc/TaxonConcept#&amp;quot;

                     &amp;quot;http://www.nexml.org/2009&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recognize that &lt;code&gt;nex@namespaces&lt;/code&gt; serves the same role as &lt;code&gt;get_namespaces&lt;/code&gt;
function, but provides direct access to the slot data.  For instance,
with this syntax we could also overwrite the existing namespaces with
&lt;code&gt;nex@namespaces &amp;lt;- NULL&lt;/code&gt;.  Changing the namespace in this way is not
advised.&lt;/p&gt;

&lt;p&gt;Some slots can contain multiple elements of the same type, such as
&lt;code&gt;trees&lt;/code&gt;, &lt;code&gt;characters&lt;/code&gt;, and &lt;code&gt;otus&lt;/code&gt;.  For instance, we see that&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(nex@characters)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] &amp;quot;ListOfcharacters&amp;quot;
attr(,&amp;quot;package&amp;quot;)
[1] &amp;quot;RNeXML&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is an object of class &lt;code&gt;ListOfcharacters&lt;/code&gt;, and is currently empty,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(nex@characters)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to assign an object to a slot, it must match the class definition
of the slot.  We can create a new element of any given class with the
&lt;code&gt;new&lt;/code&gt; function,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nex@characters &amp;lt;- new(&amp;quot;ListOfcharacters&amp;quot;, list(new(&amp;quot;characters&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and now we have a length-1 list of character matrices,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(nex@characters)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and we access the first character matrix using the list notation,
&lt;code&gt;[[1]]&lt;/code&gt;. Here we check the class is a &lt;code&gt;characters&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(nex@characters[[1]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1] &amp;quot;characters&amp;quot;
attr(,&amp;quot;package&amp;quot;)
[1] &amp;quot;RNeXML&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Direct subsetting has two primary use cases: (a) useful in looking up
(and possibly editing) a specific value of an element, or (b) when adding
metadata annotations to specific elements. Consider the example file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;trees.xml&amp;quot;, package=&amp;quot;RNeXML&amp;quot;)
nex &amp;lt;- nexml_read(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can look up the species label of the first &lt;code&gt;otu&lt;/code&gt; in the first &lt;code&gt;otus&lt;/code&gt; block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nex@otus[[1]]@otu[[1]]@label
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;      label
&amp;quot;species 1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add metadata to this particular OTU using this subsetting format&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nex@otus[[1]]@otu[[1]]@meta &amp;lt;-
  c(meta(&amp;quot;skos:note&amp;quot;,
          &amp;quot;This species was incorrectly identified&amp;quot;),
         nex@otus[[1]]@otu[[1]]@meta)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we use the &lt;code&gt;c&lt;/code&gt; operator to append this element to any existing meta annotations to this otu.&lt;/p&gt;

&lt;h3 id=&#34;writing-nexml-metadata&#34;&gt;Writing NeXML metadata&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;add_basic_meta()&lt;/code&gt; function takes as input an existing &lt;code&gt;nexml&lt;/code&gt; object
(like the other &lt;code&gt;add_&lt;/code&gt; functions, if none is provided it will create one), and at the time
of this writing any of the following
parameters: &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;creator&lt;/code&gt;, &lt;code&gt;pubdate&lt;/code&gt;, &lt;code&gt;rights&lt;/code&gt;, &lt;code&gt;publisher&lt;/code&gt;,
&lt;code&gt;citation&lt;/code&gt;.  Other metadata elements and corresponding parameters may
be added in the future.&lt;/p&gt;

&lt;p&gt;Load data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(bird.orders)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create an &lt;code&gt;nexml&lt;/code&gt; object for the phylogeny &lt;code&gt;bird.orders&lt;/code&gt; and add appropriate metadata:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(&amp;quot;bird.orders&amp;quot;)
birds &amp;lt;- add_trees(bird.orders)
birds &amp;lt;- add_basic_meta(
  title = &amp;quot;Phylogeny of the Orders of Birds From Sibley and Ahlquist&amp;quot;,

  description = &amp;quot;This data set describes the phylogenetic relationships of the
     orders of birds as reported by Sibley and Ahlquist (1990). Sibley
     and Ahlquist inferred this phylogeny from an extensive number of
     DNA/DNA hybridization experiments. The ``tapestry&#39;&#39; reported by
     these two authors (more than 1000 species out of the ca. 9000
     extant bird species) generated a lot of debates.

     The present tree is based on the relationships among orders. The
     branch lengths were calculated from the values of Delta T50H as
     found in Sibley and Ahlquist (1990, fig. 353).&amp;quot;,

  citation = &amp;quot;Sibley, C. G. and Ahlquist, J. E. (1990) Phylogeny and
     classification of birds: a study in molecular evolution. New
     Haven: Yale University Press.&amp;quot;,

  creator = &amp;quot;Sibley, C. G. and Ahlquist, J. E.&amp;quot;,
    nexml=birds)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of a literal string, citations can also be provided in R&amp;rsquo;s
&lt;code&gt;bibentry&lt;/code&gt; type, which is the one in which R package citations are obtained:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;birds &amp;lt;- add_basic_meta(citation = citation(&amp;quot;ape&amp;quot;), nexml = birds)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;taxonomic-identifiers&#34;&gt;Taxonomic identifiers&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;taxize_nexml()&lt;/code&gt; function uses the R package &lt;code&gt;taxize&lt;/code&gt;
[@Chamberlain_2013] to check each taxon label against the NCBI database.
If a unique match is found, a metadata annotation is added to the taxon
providing the NCBI identification number to the taxonomic unit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;birds &amp;lt;- taxize_nexml(birds, &amp;quot;NCBI&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If no match is found, the user is warned to check for possible typographic
errors in the taxonomic labels provided. If multiple matches are found,
the user will be prompted to choose between them.&lt;/p&gt;

&lt;h4 id=&#34;custom-metadata-extensions&#34;&gt;Custom metadata extensions&lt;/h4&gt;

&lt;p&gt;We can get a list of namespaces along with their prefixes from the &lt;code&gt;nexml&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;prefixes &amp;lt;- get_namespaces(birds)
prefixes[&amp;quot;dc&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                                dc
&amp;quot;http://purl.org/dc/elements/1.1/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We create a &lt;code&gt;meta&lt;/code&gt; element containing this annotation using the &lt;code&gt;meta&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modified &amp;lt;- meta(property = &amp;quot;prism:modificationDate&amp;quot;, content = &amp;quot;2013-10-04&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add this annotation to our existing &lt;code&gt;birds&lt;/code&gt; NeXML file using the
&lt;code&gt;add_meta()&lt;/code&gt; function.  Because we do not specify a level, it is added to
the root node, referring to the NeXML file as a whole.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;birds &amp;lt;- add_meta(modified, birds)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The built-in vocabularies are just the tip of the iceberg of established
vocabularies. Here we add an annotation from the &lt;code&gt;skos&lt;/code&gt; namespace which
describes the history of where the data comes from:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;history &amp;lt;- meta(property = &amp;quot;skos:historyNote&amp;quot;,
  content = &amp;quot;Mapped from the bird.orders data in the ape package using RNeXML&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because &lt;code&gt;skos&lt;/code&gt; is not in the current namespace list, we add it with a
url when adding this meta element.  We also specify that this annotation
be placed at the level of the &lt;code&gt;trees&lt;/code&gt; sub-node in the NeXML file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;birds &amp;lt;- add_meta(history,
                birds,
                level = &amp;quot;trees&amp;quot;,
                namespaces = c(skos = &amp;quot;http://www.w3.org/2004/02/skos/core#&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For finer control of the level at which a &lt;code&gt;meta&lt;/code&gt; element is added,
we will manipulate the &lt;code&gt;nexml&lt;/code&gt; R object directly using S4 sub-setting,
as shown in the supplement.&lt;/p&gt;

&lt;p&gt;Much richer metadata annotation is possible. Later we illustrate how
metadata annotation can be used to extend the base NeXML format to
represent new forms of data while maintaining compatibility with any
NeXML parser. The &lt;code&gt;RNeXML&lt;/code&gt; package can be easily extended to support
helper functions such as &lt;code&gt;taxize_nexml&lt;/code&gt; to add additional metadata
without imposing a large burden on the user.&lt;/p&gt;

&lt;h4 id=&#34;reading-nexml-metadata&#34;&gt;Reading NeXML metadata&lt;/h4&gt;

&lt;p&gt;A call to the &lt;code&gt;nexml&lt;/code&gt; object prints some metadata summarizing the data structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;birds
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;A nexml object representing:
 	 1 phylogenetic tree blocks, where:
 	 block 1 contains 1 phylogenetic trees
 	 46 meta elements
 	 0 character matrices
 	 23 taxonomic units
 Taxa: 	 Struthioniformes, Tinamiformes, Craciformes, Galliformes, Anseriformes, Turniciformes ...

 NeXML generated by RNeXML using schema version: 0.9
 size: 372.7 Kb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can extract all metadata pertaining to the NeXML document as a whole
(annotations of the XML root node, &lt;code&gt;&amp;lt;nexml&amp;gt;&lt;/code&gt;) with the command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meta &amp;lt;- get_metadata(birds)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returns a data.frame of available metadata. We can see the kinds
of metadata recorded from the names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [10 x 7]

    meta                      property   datatype
   (chr)                         (chr)      (chr)
1     m2                      dc:title xsd:string
2     m3                    dc:creator xsd:string
3     m4                dc:description xsd:string
4     m5                            NA         NA
5     m6 dcterms:bibliographicCitation xsd:string
6     m7                    dc:creator xsd:string
7     m8                    dc:pubdate xsd:string
8     m9                            NA         NA
9    m20 dcterms:bibliographicCitation xsd:string
10   m44        prism:modificationDate xsd:string
Variables not shown: content (chr), xsi.type (chr), rel (chr), href (chr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also access a table of taxonomic metadata:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_taxa(birds)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [23 x 5]

     otu            label about xsi.type  otus
   (chr)            (chr) (chr)    (lgl) (chr)
1    ou1 Struthioniformes  #ou1       NA   os1
2    ou2     Tinamiformes  #ou2       NA   os1
3    ou3      Craciformes  #ou3       NA   os1
4    ou4      Galliformes  #ou4       NA   os1
5    ou5     Anseriformes  #ou5       NA   os1
6    ou6    Turniciformes  #ou6       NA   os1
7    ou7       Piciformes  #ou7       NA   os1
8    ou8    Galbuliformes  #ou8       NA   os1
9    ou9   Bucerotiformes  #ou9       NA   os1
10  ou10      Upupiformes #ou10       NA   os1
..   ...              ...   ...      ...   ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which returns text from the otu element labels, typically used to define
taxonomic names, rather than text from explicit meta elements.&lt;/p&gt;

&lt;p&gt;We can also access metadata at a specific level (or use &lt;code&gt;level=all&lt;/code&gt;
to extract all meta elements in a list).  Here we show only the first
few results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;otu_meta &amp;lt;- get_metadata(birds, level=&amp;quot;otus/otu&amp;quot;)
otu_meta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [23 x 9]

    meta property datatype content     xsi.type        rel
   (chr)    (lgl)    (lgl)   (lgl)        (chr)      (chr)
1    m21       NA       NA      NA ResourceMeta tc:toTaxon
2    m22       NA       NA      NA ResourceMeta tc:toTaxon
3    m23       NA       NA      NA ResourceMeta tc:toTaxon
4    m24       NA       NA      NA ResourceMeta tc:toTaxon
5    m25       NA       NA      NA ResourceMeta tc:toTaxon
6    m26       NA       NA      NA ResourceMeta tc:toTaxon
7    m27       NA       NA      NA ResourceMeta tc:toTaxon
8    m28       NA       NA      NA ResourceMeta tc:toTaxon
9    m29       NA       NA      NA ResourceMeta tc:toTaxon
10   m30       NA       NA      NA ResourceMeta tc:toTaxon
..   ...      ...      ...     ...          ...        ...
Variables not shown: href (chr), otu (chr), otus (chr)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;merging-metadata-tables&#34;&gt;Merging metadata tables&lt;/h4&gt;

&lt;p&gt;We often want to combine metadata from multiple tables.  For instance, in this exercise we want to include the taxonomic identifier and id value for each species returned in the character table.  This helps us more precisely identify the species whose traits are described by the table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;dplyr&amp;quot;)
library(&amp;quot;geiger&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To begin, let&amp;rsquo;s generate a &lt;code&gt;NeXML&lt;/code&gt; file using the tree and trait data from the &lt;code&gt;geiger&lt;/code&gt; package&amp;rsquo;s &amp;ldquo;primates&amp;rdquo; data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(&amp;quot;primates&amp;quot;)
add_trees(primates$phy) %&amp;gt;%
  add_characters(primates$dat, ., append=TRUE) %&amp;gt;%
  taxize_nexml() -&amp;gt; nex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that we&amp;rsquo;ve used &lt;code&gt;dplyr&lt;/code&gt;&amp;rsquo;s cute pipe syntax, but unfortunately our &lt;code&gt;add_&lt;/code&gt; methods take the &lt;code&gt;nexml&lt;/code&gt; object as the &lt;em&gt;second&lt;/em&gt;
argument instead of the first, so this isn&amp;rsquo;t as elegant since we need the stupid &lt;code&gt;.&lt;/code&gt; to show where the piped output should go&amp;hellip;)&lt;/p&gt;

&lt;p&gt;We now read in the three tables of interest.  Note that we tell &lt;code&gt;get_characters&lt;/code&gt; to give us species labels as there own column, rather than as rownames.  The latter is the default only because this plays more nicely with the default format for character matrices that is expected by &lt;code&gt;geiger&lt;/code&gt; and other phylogenetics packages, but is in general a silly choice for data manipulation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;otu_meta &amp;lt;- get_metadata(nex, &amp;quot;otus/otu&amp;quot;)
taxa &amp;lt;- get_taxa(nex)
char &amp;lt;- get_characters(nex, rownames_as_col = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can take a peek at what the tables look like, just to orient ourselves:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;otu_meta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [216 x 9]

    meta property datatype content     xsi.type        rel
   (chr)    (lgl)    (lgl)   (lgl)        (chr)      (chr)
1    m49       NA       NA      NA ResourceMeta tc:toTaxon
2    m50       NA       NA      NA ResourceMeta tc:toTaxon
3    m51       NA       NA      NA ResourceMeta tc:toTaxon
4    m52       NA       NA      NA ResourceMeta tc:toTaxon
5    m53       NA       NA      NA ResourceMeta tc:toTaxon
6    m54       NA       NA      NA ResourceMeta tc:toTaxon
7    m55       NA       NA      NA ResourceMeta tc:toTaxon
8    m56       NA       NA      NA ResourceMeta tc:toTaxon
9    m57       NA       NA      NA ResourceMeta tc:toTaxon
10   m58       NA       NA      NA ResourceMeta tc:toTaxon
..   ...      ...      ...     ...          ...        ...
Variables not shown: href (chr), otu (chr), otus (chr)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;taxa
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [233 x 5]

     otu                       label about xsi.type  otus
   (chr)                       (chr) (chr)    (lgl) (chr)
1   ou24 Allenopithecus_nigroviridis #ou24       NA   os2
2   ou25         Allocebus_trichotis #ou25       NA   os2
3   ou26           Alouatta_belzebul #ou26       NA   os2
4   ou27             Alouatta_caraya #ou27       NA   os2
5   ou28          Alouatta_coibensis #ou28       NA   os2
6   ou29              Alouatta_fusca #ou29       NA   os2
7   ou30           Alouatta_palliata #ou30       NA   os2
8   ou31              Alouatta_pigra #ou31       NA   os2
9   ou32               Alouatta_sara #ou32       NA   os2
10  ou33          Alouatta_seniculus #ou33       NA   os2
..   ...                         ...   ...      ...   ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(char)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [6 x 2]

                         taxa        x
                        (chr)    (dbl)
1 Allenopithecus_nigroviridis 8.465900
2         Allocebus_trichotis 4.368181
3           Alouatta_belzebul 8.729074
4             Alouatta_caraya 8.628735
5          Alouatta_coibensis 8.764053
6              Alouatta_fusca 8.554489
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have nice &lt;code&gt;data.frame&lt;/code&gt; objects for all our data, it&amp;rsquo;s easy to join them into the desired table with a few obvious &lt;code&gt;dplyr&lt;/code&gt; commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;taxa %&amp;gt;%
  left_join(char, by = c(&amp;quot;label&amp;quot; = &amp;quot;taxa&amp;quot;)) %&amp;gt;%
  left_join(otu_meta, by = &amp;quot;otu&amp;quot;) %&amp;gt;%
  select(otu, label, x, href)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Source: local data frame [233 x 4]

     otu                       label        x
   (chr)                       (chr)    (dbl)
1   ou24 Allenopithecus_nigroviridis 8.465900
2   ou25         Allocebus_trichotis 4.368181
3   ou26           Alouatta_belzebul 8.729074
4   ou27             Alouatta_caraya 8.628735
5   ou28          Alouatta_coibensis 8.764053
6   ou29              Alouatta_fusca 8.554489
7   ou30           Alouatta_palliata 8.791790
8   ou31              Alouatta_pigra 8.881836
9   ou32               Alouatta_sara 8.796339
10  ou33          Alouatta_seniculus 8.767173
..   ...                         ...      ...
Variables not shown: href (chr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because these are all from the same otus block anyway, we haven&amp;rsquo;t selected that column, but were it of interest it is also available in the taxa table.&lt;/p&gt;

&lt;p&gt;&lt;section id=&#34;citing&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;citing&#34;&gt;Citing&lt;/h2&gt;

&lt;p&gt;To cite &lt;code&gt;RNeXML&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Carl Boettiger, Scott Chamberlain, Hilmar Lapp, Kseniia Shumelchyk and Rutger Vos (2015). RNeXML: Implement semantically rich I/O for NeXML format. R package version 2.0.4. &lt;a href=&#34;http://CRAN.R-project.org/package=RNeXML&#34;&gt;http://CRAN.R-project.org/package=RNeXML&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;section id=&#34;license_bugs&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;License: BSD 3&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/RNeXML/issues?state=open&#34;&gt;our Github repo for alm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>aRxiv tutorial</title>
      <link>https://ropensci.org/tutorials/arxiv_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/arxiv_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;a href=&#34;http://arxiv.org&#34;&gt;arXiv&lt;/a&gt; is a repository of electronic preprints for
computer science, mathematics, physics, quantitative biology,
quantitative finance, and statistics. The
&lt;a href=&#34;https://github.com/ropensci/aRxiv&#34;&gt;aRxiv package&lt;/a&gt; provides an
&lt;a href=&#34;http://www.r-project.org&#34;&gt;R&lt;/a&gt; interface to the
&lt;a href=&#34;http://arxiv.org/help/api/index&#34;&gt;arXiv API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that the arXiv API &lt;em&gt;does not&lt;/em&gt; require an API key.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;aRxiv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Development version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/aRxiv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Basic use&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;arxiv_search()&lt;/code&gt; to search &lt;a href=&#34;http://arxiv.org&#34;&gt;arXiv&lt;/a&gt;,
&lt;code&gt;arxiv_count()&lt;/code&gt; to get a simple count of manuscripts matching a
query, and &lt;code&gt;arxiv_open()&lt;/code&gt; to open the abstract pages for a set of
results from &lt;code&gt;arxiv_search()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll get to the details in a moment. For now, let&amp;rsquo;s look at a few
examples.&lt;/p&gt;

&lt;p&gt;Suppose we wanted to identify all arXiv manuscripts with &amp;ldquo;&lt;code&gt;Peter
Hall&lt;/code&gt;&amp;rdquo; as an author. It is best to first get a count, so that we have
a sense of how many records the search will return. (Peter Hall is
&amp;ldquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/Peter_Gavin_Hall&#34;&gt;among the world&amp;rsquo;s most prolific and highly cited authors in both probability and statistics&lt;/a&gt;.&amp;rdquo;)
We first use &lt;code&gt;library()&lt;/code&gt; to load the aRxiv package and then
&lt;code&gt;arxiv_count()&lt;/code&gt; to get the count.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(aRxiv)
arxiv_count(&#39;au:&amp;quot;Peter Hall&amp;quot;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 56
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;au:&lt;/code&gt; part indicates to search the author field; we use double
quotes to search for a &lt;em&gt;phrase&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To obtain the actual records matching the query, use &lt;code&gt;arxiv_search()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rec &amp;lt;- arxiv_search(&#39;au:&amp;quot;Peter Hall&amp;quot;&#39;)
nrow(rec)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default is to grab no more than 10 records; this limit can be
changed with the &lt;code&gt;limit&lt;/code&gt; argument. But note that the arXiv API will
not let you download more than 50,000 or so records, and even in that
case it&amp;rsquo;s best to do so in batches; more on this below.&lt;/p&gt;

&lt;p&gt;Also note that the result of &lt;code&gt;arxiv_search()&lt;/code&gt; has an attribute
&lt;code&gt;&amp;quot;total_results&amp;quot;&lt;/code&gt; containing the total count of search results; this
is the same as what &lt;code&gt;arxiv_count()&lt;/code&gt; provides.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attr(rec, &amp;quot;total_results&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 56
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following will get us all 56
records.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rec &amp;lt;- arxiv_search(&#39;au:&amp;quot;Peter Hall&amp;quot;&#39;, limit=50)
nrow(rec)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;arxiv_search()&lt;/code&gt; returns a data frame with each row being a single
manuscript. The columns are the different fields (e.g., &lt;code&gt;authors&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;,
&lt;code&gt;abstract&lt;/code&gt;, etc.). Fields like &lt;code&gt;authors&lt;/code&gt; that
contain multiple items will be a single character string with the
multiple items separated by a vertical bar (&lt;code&gt;|&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We might be interested in a more restrictive search, such as for Peter
Hall&amp;rsquo;s arXiv manuscripts that have &lt;code&gt;deconvolution&lt;/code&gt; in the title. We
use &lt;code&gt;ti:&lt;/code&gt; to search the title field, and combine the two with &lt;code&gt;AND&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;deconv &amp;lt;- arxiv_search(&#39;au:&amp;quot;Peter Hall&amp;quot; AND ti:deconvolution&#39;)
nrow(deconv)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s display just the authors and title for the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;deconv[, c(&#39;title&#39;, &#39;authors&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                                                                             title
## 1                                     A ridge-parameter approach to deconvolution
## 2                                     On deconvolution with repeated measurements
## 3 Estimation of distributions, moments and quantiles in deconvolution\n  problems
## 4   Kernel methods and minimum contrast estimators for empirical\n  deconvolution
##                                        authors
## 1                 Peter Hall|Alexander Meister
## 2 Aurore Delaigle|Peter Hall|Alexander Meister
## 3               Peter Hall|Soumendra N. Lahiri
## 4                   Aurore Delaigle|Peter Hall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can open the abstract pages for these 4 manuscripts
using &lt;code&gt;arxiv_open()&lt;/code&gt;. It takes, as input, the output of
&lt;code&gt;arxiv_search()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_open(deconv)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;forming-queries&#34;&gt;Forming queries&lt;/h3&gt;

&lt;p&gt;The two basic arguments to &lt;code&gt;arxiv_count()&lt;/code&gt; and &lt;code&gt;arxiv_search()&lt;/code&gt; are
&lt;code&gt;query&lt;/code&gt;, a
character string representing the search, and &lt;code&gt;id_list&lt;/code&gt;, a list of
&lt;a href=&#34;http://arxiv.org/help/arxiv_identifier&#34;&gt;arXiv manuscript identifiers&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If only &lt;code&gt;query&lt;/code&gt; is provided, manuscripts matching that query are
returned.&lt;/li&gt;
&lt;li&gt;If only &lt;code&gt;id_list&lt;/code&gt; is provided, manuscripts in the list are
returned.&lt;/li&gt;
&lt;li&gt;If both are provided, manuscripts in &lt;code&gt;id_list&lt;/code&gt; that match &lt;code&gt;query&lt;/code&gt;
will be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;query&lt;/code&gt; may be a single character string or a vector of character
strings. If it is a vector, the elements are pasted together with
&lt;code&gt;AND&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;id_list&lt;/code&gt; may be a vector of character strings or a single
comma-separated character string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search terms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generally, one would ignore &lt;code&gt;id_list&lt;/code&gt; and focus on forming the &lt;code&gt;query&lt;/code&gt;
argument. The aRxiv package includes a dataset &lt;code&gt;query_terms&lt;/code&gt; that
lists the terms (like &lt;code&gt;au&lt;/code&gt;) that you can use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;query_terms
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##               term                                      description
## 1               ti                                            Title
## 2               au                                           Author
## 3              abs                                         Abstract
## 4               co                                          Comment
## 5               jr                                Journal Reference
## 6              cat                                 Subject Category
## 7               rn                                    Report Number
## 8              all                                 All of the above
## 9    submittedDate Date/time of initial submission, as YYYYMMDDHHMM
## 10 lastUpdatedDate        Date/time of last update, as YYYYMMDDHHMM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use a colon (&lt;code&gt;:&lt;/code&gt;) to separate the query term from the actual query.
Multiple queries can be combined with &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, and &lt;code&gt;ANDNOT&lt;/code&gt;. The
default is &lt;code&gt;OR&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;au:Peter au:Hall&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 20400
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;au:Peter OR au:Hall&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 20400
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;au:Peter AND au:Hall&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 92
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;au:Hall ANDNOT au:Peter&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 1723
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It appears that in the author field (and many other fields) you must
search full words, and that wild cards not allowed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;au:P* AND au:Hall&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;au:P AND au:Hall&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 825
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;au:&amp;quot;P Hall&amp;quot;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Subject classifications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;arXiv has a set of 127 subject classifications,
searchable with the prefix &lt;code&gt;cat:&lt;/code&gt;. The aRxiv package contains a
dataset &lt;code&gt;arxiv_cats&lt;/code&gt; containing the abbreviations and descriptions.
Here are the statistics categories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_cats[grep(&#39;^stat&#39;, arxiv_cats$abbreviation),]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   abbreviation                   description
## 1      stat.AP     Statistics - Applications
## 2      stat.CO      Statistics - Computation
## 3      stat.ML Statistics - Machine Learning
## 4      stat.ME      Statistics - Methodology
## 5      stat.TH           Statistics - Theory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To search these categories, you need to include either the full term
or use the &lt;code&gt;*&lt;/code&gt; wildcard.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;cat:stat&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;cat:stat.AP&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 5999
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;cat:stat*&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 33888
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Dates and ranges of dates&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The terms &lt;code&gt;submittedDate&lt;/code&gt; (date/time of first submission) and
&lt;code&gt;lastUpdatedDate&lt;/code&gt; (date/time of last revision) are particularly
useful for limiting a search with &lt;em&gt;many&lt;/em&gt; results, so that you may
combine multiple searches together, each within some window of time,
to get the full results.&lt;/p&gt;

&lt;p&gt;The date/time information is of the form &lt;code&gt;YYYYMMDDHHMMSS&lt;/code&gt;, for
example &lt;code&gt;20071018122534&lt;/code&gt; for &lt;code&gt;2007-10-18 12:25:34&lt;/code&gt;. You can use &lt;code&gt;*&lt;/code&gt;
for a wildcard for the times. For example, to get all manuscripts
with initial submission on 2007-10-18:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;submittedDate:20071018*&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 196
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you can&amp;rsquo;t use the wildcard within the &lt;em&gt;dates&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;submittedDate:2007*&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get a count of all manuscripts with original submission in 2007,
use a date range, like &lt;code&gt;[from_date TO to_date]&lt;/code&gt;. (If you give a partial
date, it&amp;rsquo;s treated as the earliest date/time that matches, and the
range appears to be up to but not including the second date/time.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&#39;submittedDate:[2007 TO 2008]&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 55749
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Search results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The output of &lt;code&gt;arxiv_search()&lt;/code&gt; is a data frame with the following
columns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- arxiv_search(&#39;au:&amp;quot;Terry Speed&amp;quot;&#39;)
names(res)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;id&amp;quot;               &amp;quot;submitted&amp;quot;        &amp;quot;updated&amp;quot;         
##  [4] &amp;quot;title&amp;quot;            &amp;quot;abstract&amp;quot;         &amp;quot;authors&amp;quot;         
##  [7] &amp;quot;affiliations&amp;quot;     &amp;quot;link_abstract&amp;quot;    &amp;quot;link_pdf&amp;quot;        
## [10] &amp;quot;link_doi&amp;quot;         &amp;quot;comment&amp;quot;          &amp;quot;journal_ref&amp;quot;     
## [13] &amp;quot;doi&amp;quot;              &amp;quot;primary_category&amp;quot; &amp;quot;categories&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The columns are described in the help file for &lt;code&gt;arxiv_search()&lt;/code&gt;. Try
&lt;code&gt;?arxiv_search&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A few short notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each field is a single character string. &lt;code&gt;authors&lt;/code&gt;, &lt;code&gt;link_doi&lt;/code&gt;, and
&lt;code&gt;categories&lt;/code&gt; may contain multiple items, separated by a vertical bar
(&lt;code&gt;|&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Missing entries will have an empty character string (&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;categories&lt;/code&gt; column may contain not just the aRxiv categories
(e.g., &lt;code&gt;stat.AP&lt;/code&gt;) but also codes for the
&lt;a href=&#34;http://www.ams.org/mathscinet/msc/msc2010.html&#34;&gt;Mathematical Subject Classification (MSC)&lt;/a&gt; (e.g., 14J60)
and the
&lt;a href=&#34;http://www.acm.org/about/class/1998/&#34;&gt;ACM Computing Classification System&lt;/a&gt;
(e.g., F.2.2). These are not searchable with &lt;code&gt;cat:&lt;/code&gt; but are
searchable with a general search.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&amp;quot;cat:14J60&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;arxiv_count(&amp;quot;14J60&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 490
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Sorting results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;arxiv_search()&lt;/code&gt; function has two arguments for sorting the results,
&lt;code&gt;sort_by&lt;/code&gt; (taking values &lt;code&gt;&amp;quot;submitted&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;updated&amp;quot;&lt;/code&gt;, or
&lt;code&gt;&amp;quot;relevance&amp;quot;&lt;/code&gt;) and &lt;code&gt;ascending&lt;/code&gt; (&lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;). If &lt;code&gt;id_list&lt;/code&gt; is
provided, these sorting arguments are ignored and the results are
presented according to the order in &lt;code&gt;id_list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example, to sort the results by the date the manuscripts
were last updated, in descending order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- arxiv_search(&#39;au:&amp;quot;Terry Speed&amp;quot;&#39;, sort_by=&amp;quot;updated&amp;quot;,
                    ascending=FALSE)
res$updated
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2012-01-31 05:54:46&amp;quot; &amp;quot;2008-06-27 08:25:01&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;technical-details&#34;&gt;Technical details&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Metadata limitations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://arxiv.org/help/prep&#34;&gt;arXiv metadata&lt;/a&gt; has a number of
limitations, the key issue being that it is author-supplied and so not
necessarily consistent between records.&lt;/p&gt;

&lt;p&gt;Authors&amp;rsquo; names may vary between records (e.g., T. P. Speed vs. Terry
Speed vs. Terence P. Speed). Further, arXiv provides no ability to
distinguish multiple individuals with the same name (c.f.,
&lt;a href=&#34;http://orcid.org&#34;&gt;ORCID&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Authors&amp;rsquo; institutional affiliations are mostly missing.  The arXiv
submission form does not include an affiliation field; affiliations
are entered within the author field, in parentheses.  The
&lt;a href=&#34;http://arxiv.org/help/prep#author&#34;&gt;metadata instructions&lt;/a&gt; may not be
widely read.&lt;/p&gt;

&lt;p&gt;There are no key words; you are stuck with searching the free text in
the titles and abstracts.&lt;/p&gt;

&lt;p&gt;Subject classifications are provided by the authors and may be
incomplete or inappropriate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Limit time between search requests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Care should be taken to avoid multiple requests to the arXiv API in a
short period of time. The
&lt;a href=&#34;http://arxiv.org/help/api/user-manual&#34;&gt;arXiv API user manual&lt;/a&gt; states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In cases where the API needs to be called multiple times in a row,
we encourage you to play nice and incorporate a 3 second delay in
your code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The aRxiv package institutes a delay between requests, with the time
period for the delay configurable with the R option
&lt;code&gt;&amp;quot;aRxiv_delay&amp;quot;&lt;/code&gt; (in seconds). The default is 3 seconds.&lt;/p&gt;

&lt;p&gt;To reduce the delay to 1 second, use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(aRxiv_delay=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t&lt;/strong&gt; do searches in parallel (e.g., via the parallel
package). You may be locked out from the arXiv API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Limit number of items returned&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The arXiv API returns only complete records (including the entire
abstracts); searches returning large numbers of records can be very
slow.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s best to use &lt;code&gt;arxiv_count()&lt;/code&gt; before &lt;code&gt;arxiv_search()&lt;/code&gt;, so that you have
a sense of how many records you will receive. If the count is large,
you may wish to refine your query.&lt;/p&gt;

&lt;p&gt;arXiv has a hard limit of around 50,000 records; for a query that
matches more than 50,000 manuscripts, there is no way to receive the
full results. The simplest solution to this problem is to break the
query into smaller pieces, for example using slices of time, with a
range of dates for &lt;code&gt;submittedDate&lt;/code&gt; or &lt;code&gt;lastUpdatedDate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;limit&lt;/code&gt; argument to &lt;code&gt;arxiv_search()&lt;/code&gt; (with default &lt;code&gt;limit=10&lt;/code&gt;)
limits the number of records to be returned. If you wish to receive
more than 10 records, you must specify a larger limit (e.g., &lt;code&gt;limit=100&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To avoid accidental searches that may return a very large number of
records, &lt;code&gt;arxiv_search()&lt;/code&gt; uses an R option, &lt;code&gt;aRxiv_toomany&lt;/code&gt; (with a
default of 15,000), and refuses to attempt a search that will return
results above that limit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make requests in batches&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even for searches that return a moderate number of records (say
2,000), it may be best to make the requests in batches: Use a smaller
value for the &lt;code&gt;limit&lt;/code&gt; argument (say 100), and make multiple requests
with different offsets, indicated with the &lt;code&gt;start&lt;/code&gt; argument, for the
initial record to return.&lt;/p&gt;

&lt;p&gt;This is done automatically with the &lt;code&gt;batchsize&lt;/code&gt; argument to
&lt;code&gt;arxiv_search()&lt;/code&gt;.  A search is split into multiple calls, with no more
than &lt;code&gt;batchsize&lt;/code&gt; records to be returned by each, and then the results
are combined.&lt;/p&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;p&gt;To cite &lt;code&gt;aRxiv&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Karthik Ram and Karl Broman (2015). aRxiv: Interface to the arXiv API. R package version 0.5.10.
  &lt;a href=&#34;https://cran.rstudio.com/package=aRxiv&#34;&gt;https://cran.rstudio.com/package=aRxiv&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/aRxiv/issues?state=open&#34;&gt;our Github repo for aRxiv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>alm tutorial</title>
      <link>https://ropensci.org/tutorials/alm_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/alm_tutorial/</guid>
      <description>
        
        

&lt;blockquote&gt;
&lt;p&gt;Note: the vignette in the package wasn&amp;rsquo;t updated, but this tutorial is updated and works with &lt;code&gt;v0.3.1&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;what-are-article-level-metrics&#34;&gt;What are article level metrics?&lt;/h2&gt;

&lt;p&gt;Glad you asked. The canonical URL for this is perhaps &lt;a href=&#34;http://altmetrics.org/manifesto/&#34;&gt;altmetrics.org&lt;/a&gt;. Basically it is a metric that measures something about an article. This is in stark contrast to journal level metrics, like the Journal Impact Factor.&lt;/p&gt;

&lt;h2 id=&#34;are-there-other-altmetrics-data-providers&#34;&gt;Are there other altmetrics data providers?&lt;/h2&gt;

&lt;p&gt;Yes indeedy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://impactstory.it/&#34;&gt;ImpactStory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://altmetric.com/&#34;&gt;Altmetric.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.plumanalytics.com/&#34;&gt;PlumAnalytics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;You are required to use an API key to access any Lagoota ALM API.&lt;/p&gt;

&lt;p&gt;Get your API key for each service at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://alm.plos.org/&#34;&gt;PLOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://det.labs.crossref.org/&#34;&gt;Crossref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lagotto.svr.elifesciences.org/&#34;&gt;eLife&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pkp-alm.lib.sfu.ca/&#34;&gt;PKP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://alm.pensoft.net:81/&#34;&gt;Pensoft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put your API key in your &lt;code&gt;.Rprofile&lt;/code&gt; file using exactly this:
options(PlosApiKey = &amp;ldquo;YOUalmAPIKEY&amp;rdquo;),
and the functions within this package will be able to use your API key without you having to enter it every time you run a search.&lt;/p&gt;

&lt;p&gt;Or just pss in your key using the &lt;code&gt;key&lt;/code&gt; parameter in function calls. Or keep your key as a system variable, named &lt;code&gt;ALM_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course you need a different key for each Lagotta instance (e.g., what works for PLOS does not work for Crossref). So just pass in your key with the &lt;code&gt;key&lt;/code&gt; parameter. You can still store your keys in options, but just pass them on in the function call.&lt;/p&gt;

&lt;h2 id=&#34;help&#34;&gt;Help&lt;/h2&gt;

&lt;p&gt;If you are having trouble with this R package, contact &lt;a href=&#34;mailto:myrmecocystus@gmail.com&#34;&gt;the maintainer, Scott&lt;/a&gt;. If you are having trouble with the API itself, there is a newish discussion forum for the Lagotto service at &lt;a href=&#34;http://discuss.lagotto.io/&#34;&gt;http://discuss.lagotto.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;section id=&#34;installation&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;alm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/alm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Load &lt;code&gt;alm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(alm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;section id=&#34;usage&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h2 id=&#34;get-data&#34;&gt;Get data&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(doi=&amp;quot;10.1371/journal.pone.0029797&amp;quot;)
#&amp;gt; $meta
#&amp;gt;   total total_pages page error
#&amp;gt; 1     1           1    1    NA
#&amp;gt;
#&amp;gt; $data
#&amp;gt;                       .id  pdf  html readers comments likes  total
#&amp;gt; 1               citeulike   NA    NA       1       NA    NA      1
#&amp;gt; 2                crossref   NA    NA      NA       NA    NA      8
#&amp;gt; 3                  nature   NA    NA      NA       NA    NA      4
#&amp;gt; 4                  pubmed   NA    NA      NA       NA    NA      2
#&amp;gt; 5                  scopus   NA    NA      NA       NA    NA      8
#&amp;gt; 6                 counter 2524 30801      NA       NA    NA  33443
#&amp;gt; 7        researchblogging   NA    NA      NA       NA    NA      1
#&amp;gt; 8                     wos   NA    NA      NA       NA    NA      7
#&amp;gt; 9                     pmc   78   534      NA       NA    NA    612
#&amp;gt; 10               facebook   NA    NA     149       22    60    231
#&amp;gt; 11               mendeley   NA    NA      80       NA    NA     80
#&amp;gt; 12                twitter   NA    NA      NA       12    NA     12
#&amp;gt; 13              wikipedia   NA    NA      NA       NA    NA     50
#&amp;gt; 14          scienceseeker   NA    NA      NA       NA    NA      0
#&amp;gt; 15         relativemetric   NA    NA      NA       NA    NA 157436
#&amp;gt; 16                  f1000   NA    NA      NA       NA    NA      0
#&amp;gt; 17               figshare    0    21      NA       NA     0     21
#&amp;gt; 18              pmceurope   NA    NA      NA       NA    NA      4
#&amp;gt; 19          pmceuropedata   NA    NA      NA       NA    NA     49
#&amp;gt; 20            openedition   NA    NA      NA       NA    NA      0
#&amp;gt; 21              wordpress   NA    NA      NA       NA    NA      0
#&amp;gt; 22                 reddit   NA    NA      NA        0     0      0
#&amp;gt; 23               datacite   NA    NA      NA       NA    NA      0
#&amp;gt; 24             copernicus   NA    NA      NA       NA    NA      0
#&amp;gt; 25        articlecoverage   NA    NA      NA        0    NA      0
#&amp;gt; 26 articlecoveragecurated   NA    NA      NA        0    NA      0
#&amp;gt; 27          plos_comments   NA    NA      NA       11    NA     16
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;details-for-a-single-doi&#34;&gt;Details for a single DOI&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out &amp;lt;- alm_ids(doi=&#39;10.1371/journal.pone.0029797&#39;, info=&#39;detail&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;info&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$data$info
#&amp;gt;                            doi
#&amp;gt; 1 10.1371/journal.pone.0029797
#&amp;gt;                                                                             title
#&amp;gt; 1 Ecological Guild Evolution and the Discovery of the World&#39;s Smallest Vertebrate
#&amp;gt;                                                                canonical_url
#&amp;gt; 1 http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0029797
#&amp;gt;       pmid   pmcid                        mendeley_uuid
#&amp;gt; 1 22253785 3256195 897fbbd6-5a23-3552-8077-97251b82c1e1
#&amp;gt;            update_date     issued
#&amp;gt; 1 2014-11-12T21:41:48Z 2012-01-11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sign posts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$data$signposts
#&amp;gt;                            doi viewed saved discussed cited
#&amp;gt; 1 10.1371/journal.pone.0029797  34055    81       243     8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;totals&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$data$totals
#&amp;gt;                       .id  pdf  html readers comments likes  total
#&amp;gt; 1               citeulike   NA    NA       1       NA    NA      1
#&amp;gt; 2                crossref   NA    NA      NA       NA    NA      8
#&amp;gt; 3                  nature   NA    NA      NA       NA    NA      4
#&amp;gt; 4                  pubmed   NA    NA      NA       NA    NA      2
#&amp;gt; 5                  scopus   NA    NA      NA       NA    NA      8
#&amp;gt; 6                 counter 2524 30801      NA       NA    NA  33443
#&amp;gt; 7        researchblogging   NA    NA      NA       NA    NA      1
#&amp;gt; 8                     wos   NA    NA      NA       NA    NA      7
#&amp;gt; 9                     pmc   78   534      NA       NA    NA    612
#&amp;gt; 10               facebook   NA    NA     149       22    60    231
#&amp;gt; 11               mendeley   NA    NA      80       NA    NA     80
#&amp;gt; 12                twitter   NA    NA      NA       12    NA     12
#&amp;gt; 13              wikipedia   NA    NA      NA       NA    NA     50
#&amp;gt; 14          scienceseeker   NA    NA      NA       NA    NA      0
#&amp;gt; 15         relativemetric   NA    NA      NA       NA    NA 157436
#&amp;gt; 16                  f1000   NA    NA      NA       NA    NA      0
#&amp;gt; 17               figshare    0    21      NA       NA     0     21
#&amp;gt; 18              pmceurope   NA    NA      NA       NA    NA      4
#&amp;gt; 19          pmceuropedata   NA    NA      NA       NA    NA     49
#&amp;gt; 20            openedition   NA    NA      NA       NA    NA      0
#&amp;gt; 21              wordpress   NA    NA      NA       NA    NA      0
#&amp;gt; 22                 reddit   NA    NA      NA        0     0      0
#&amp;gt; 23               datacite   NA    NA      NA       NA    NA      0
#&amp;gt; 24             copernicus   NA    NA      NA       NA    NA      0
#&amp;gt; 25        articlecoverage   NA    NA      NA        0    NA      0
#&amp;gt; 26 articlecoveragecurated   NA    NA      NA        0    NA      0
#&amp;gt; 27          plos_comments   NA    NA      NA       11    NA     16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;history&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$data$sum_metrics
#&amp;gt;                .id year month day total X[[1L]]
#&amp;gt; 1        citeulike 2012     1  12     1      NA
#&amp;gt; 2           nature 2012     1  11     1      NA
#&amp;gt; 3           nature 2012     1  12     1      NA
#&amp;gt; 4           nature 2012     2   1     1      NA
#&amp;gt; 5 researchblogging   NA    NA  NA    NA      NA
#&amp;gt; 6    plos_comments 2012     1  11     1      NA
#&amp;gt; 7    plos_comments 2012     1  12     7      NA
#&amp;gt; 8    plos_comments 2012     1  13     1      NA
#&amp;gt; 9    plos_comments 2012     1  14     1      NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;search-using-various-identifiers-including-pubmed-id-pmc-id-and-mendeley-id&#34;&gt;Search using various identifiers, including pubmed id, pmc id, and mendeley id&lt;/h2&gt;

&lt;p&gt;A single PubMed ID (pmid)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(pmid=22590526)
#&amp;gt; $meta
#&amp;gt;   total total_pages page error
#&amp;gt; 1     1           1    1    NA
#&amp;gt;
#&amp;gt; $data
#&amp;gt;                       .id  pdf  html readers comments likes total
#&amp;gt; 1               citeulike   NA    NA       5       NA    NA     5
#&amp;gt; 2                crossref   NA    NA      NA       NA    NA     5
#&amp;gt; 3                  nature   NA    NA      NA       NA    NA     1
#&amp;gt; 4                  pubmed   NA    NA      NA       NA    NA     5
#&amp;gt; 5                  scopus   NA    NA      NA       NA    NA     9
#&amp;gt; 6                 counter 1169 16238      NA       NA    NA 17455
#&amp;gt; 7        researchblogging   NA    NA      NA       NA    NA     1
#&amp;gt; 8                     wos   NA    NA      NA       NA    NA     7
#&amp;gt; 9                     pmc   65   196      NA       NA    NA   261
#&amp;gt; 10               facebook   NA    NA      72       57    56   185
#&amp;gt; 11               mendeley   NA    NA      70       NA    NA    70
#&amp;gt; 12                twitter   NA    NA      NA      161    NA   161
#&amp;gt; 13              wikipedia   NA    NA      NA       NA    NA     0
#&amp;gt; 14          scienceseeker   NA    NA      NA       NA    NA     0
#&amp;gt; 15         relativemetric   NA    NA      NA       NA    NA 43647
#&amp;gt; 16                  f1000   NA    NA      NA       NA    NA     0
#&amp;gt; 17               figshare    0     0      NA       NA     0     0
#&amp;gt; 18              pmceurope   NA    NA      NA       NA    NA     5
#&amp;gt; 19          pmceuropedata   NA    NA      NA       NA    NA     0
#&amp;gt; 20            openedition   NA    NA      NA       NA    NA     0
#&amp;gt; 21              wordpress   NA    NA      NA       NA    NA     0
#&amp;gt; 22                 reddit   NA    NA      NA        0     0     0
#&amp;gt; 23               datacite   NA    NA      NA       NA    NA     0
#&amp;gt; 24             copernicus   NA    NA      NA       NA    NA     0
#&amp;gt; 25        articlecoverage   NA    NA      NA        0    NA     0
#&amp;gt; 26 articlecoveragecurated   NA    NA      NA        0    NA     0
#&amp;gt; 27          plos_comments   NA    NA      NA        3    NA     4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A single PubMed Central ID (pmcid)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(pmcid=212692)
#&amp;gt; $meta
#&amp;gt;   total total_pages page error
#&amp;gt; 1     1           1    1    NA
#&amp;gt;
#&amp;gt; $data
#&amp;gt;                       .id  pdf  html readers comments likes   total
#&amp;gt; 1               citeulike   NA    NA       8       NA    NA       8
#&amp;gt; 2                crossref   NA    NA      NA       NA    NA     164
#&amp;gt; 3                  nature   NA    NA      NA       NA    NA       0
#&amp;gt; 4                  pubmed   NA    NA      NA       NA    NA     172
#&amp;gt; 5                  scopus   NA    NA      NA       NA    NA     342
#&amp;gt; 6                 counter 2701 21593      NA       NA    NA   24458
#&amp;gt; 7        researchblogging   NA    NA      NA       NA    NA       0
#&amp;gt; 8                     wos   NA    NA      NA       NA    NA     323
#&amp;gt; 9                     pmc 2387  5119      NA       NA    NA    7506
#&amp;gt; 10               facebook   NA    NA       0        0     0       0
#&amp;gt; 11               mendeley   NA    NA     127       NA    NA     127
#&amp;gt; 12                twitter   NA    NA      NA        0    NA       0
#&amp;gt; 13              wikipedia   NA    NA      NA       NA    NA       0
#&amp;gt; 14          scienceseeker   NA    NA      NA       NA    NA       0
#&amp;gt; 15         relativemetric   NA    NA      NA       NA    NA 1570821
#&amp;gt; 16                  f1000   NA    NA      NA       NA    NA       0
#&amp;gt; 17               figshare    1    10      NA       NA     0      11
#&amp;gt; 18              pmceurope   NA    NA      NA       NA    NA     212
#&amp;gt; 19          pmceuropedata   NA    NA      NA       NA    NA      56
#&amp;gt; 20            openedition   NA    NA      NA       NA    NA       0
#&amp;gt; 21              wordpress   NA    NA      NA       NA    NA       0
#&amp;gt; 22                 reddit   NA    NA      NA        0     0       0
#&amp;gt; 23               datacite   NA    NA      NA       NA    NA       0
#&amp;gt; 24             copernicus   NA    NA      NA       NA    NA       0
#&amp;gt; 25        articlecoverage   NA    NA      NA        0    NA       0
#&amp;gt; 26 articlecoveragecurated   NA    NA      NA        0    NA       0
#&amp;gt; 27          plos_comments   NA    NA      NA        0    NA       0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;search-on-many-identifiers&#34;&gt;Search on many identifiers&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dois &amp;lt;- c(&#39;10.1371/journal.pone.0001543&#39;,&#39;10.1371/journal.pone.0040117&#39;,
	&#39;10.1371/journal.pone.0029797&#39;,&#39;10.1371/journal.pone.0039395&#39;)
out &amp;lt;- alm_ids(doi=dois)
lapply(out$data, head)
#&amp;gt; $`10.1371/journal.pone.0040117`
#&amp;gt;         .id pdf html readers comments likes total
#&amp;gt; 1 citeulike  NA   NA       0       NA    NA     0
#&amp;gt; 2  crossref  NA   NA      NA       NA    NA     6
#&amp;gt; 3    nature  NA   NA      NA       NA    NA     0
#&amp;gt; 4    pubmed  NA   NA      NA       NA    NA     5
#&amp;gt; 5    scopus  NA   NA      NA       NA    NA    12
#&amp;gt; 6   counter 402 2055      NA       NA    NA  2482
#&amp;gt;
#&amp;gt; $`10.1371/journal.pone.0039395`
#&amp;gt;         .id pdf html readers comments likes total
#&amp;gt; 1 citeulike  NA   NA       0       NA    NA     0
#&amp;gt; 2  crossref  NA   NA      NA       NA    NA     1
#&amp;gt; 3    nature  NA   NA      NA       NA    NA     0
#&amp;gt; 4    pubmed  NA   NA      NA       NA    NA     1
#&amp;gt; 5    scopus  NA   NA      NA       NA    NA     3
#&amp;gt; 6   counter 240 1373      NA       NA    NA  1642
#&amp;gt;
#&amp;gt; $`10.1371/journal.pone.0029797`
#&amp;gt;         .id  pdf  html readers comments likes total
#&amp;gt; 1 citeulike   NA    NA       1       NA    NA     1
#&amp;gt; 2  crossref   NA    NA      NA       NA    NA     8
#&amp;gt; 3    nature   NA    NA      NA       NA    NA     4
#&amp;gt; 4    pubmed   NA    NA      NA       NA    NA     2
#&amp;gt; 5    scopus   NA    NA      NA       NA    NA     8
#&amp;gt; 6   counter 2524 30801      NA       NA    NA 33443
#&amp;gt;
#&amp;gt; $`10.1371/journal.pone.0001543`
#&amp;gt;         .id pdf html readers comments likes total
#&amp;gt; 1 citeulike  NA   NA       0       NA    NA     0
#&amp;gt; 2  crossref  NA   NA      NA       NA    NA     7
#&amp;gt; 3    nature  NA   NA      NA       NA    NA     0
#&amp;gt; 4    pubmed  NA   NA      NA       NA    NA     7
#&amp;gt; 5    scopus  NA   NA      NA       NA    NA    12
#&amp;gt; 6   counter 453 2742      NA       NA    NA  3243
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-altmetrics-by-year&#34;&gt;Get altmetrics by year&lt;/h2&gt;

&lt;p&gt;You can also get metrics by day (&lt;code&gt;sum_metrics=&#39;day&#39;&lt;/code&gt;) or month (&lt;code&gt;sum_metrics=&#39;month&#39;&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(doi=&#39;10.1371/journal.pone.0036240&#39;, sum_metrics=&#39;year&#39;)
#&amp;gt; $meta
#&amp;gt;   total total_pages page error
#&amp;gt; 1     1           1    1    NA
#&amp;gt;
#&amp;gt; $data
#&amp;gt;               .id year total pdf  html
#&amp;gt; 1       citeulike 2012     5  NA    NA
#&amp;gt; 2        crossref 2014     5  NA    NA
#&amp;gt; 3          nature 2012     1  NA    NA
#&amp;gt; 4          pubmed 2014     5  NA    NA
#&amp;gt; 5          scopus 2014     9  NA    NA
#&amp;gt; 6         counter 2012    NA 699 10502
#&amp;gt; 7         counter 2013    NA 299  3605
#&amp;gt; 8         counter 2014    NA 171  2131
#&amp;gt; 9             wos 2014     7  NA    NA
#&amp;gt; 10            pmc 2012    NA  16    53
#&amp;gt; 11            pmc 2013    NA  13    66
#&amp;gt; 12            pmc 2014    NA  36    77
#&amp;gt; 13       facebook 2014   185  NA    NA
#&amp;gt; 14       mendeley 2014    70  NA    NA
#&amp;gt; 15        twitter 2012   103  NA    NA
#&amp;gt; 16        twitter 2013    33  NA    NA
#&amp;gt; 17        twitter 2014    25  NA    NA
#&amp;gt; 18 relativemetric 2014 43647  NA    NA
#&amp;gt; 19      pmceurope 2014     5  NA    NA
#&amp;gt; 20  plos_comments 2012     2  NA    NA
#&amp;gt; 21  plos_comments 2014     1  NA    NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;output-an-easy-to-combine-with-other-results-data-frame&#34;&gt;Output an-easy-to-combine-with-other-results data.frame&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm_ids(doi=&#39;10.1371/journal.pone.0035869&#39;, total_details=TRUE)$data[,3:7]
#&amp;gt;   citeulike_pdf citeulike_html citeulike_readers citeulike_comments
#&amp;gt; 1            NA             NA                27                 NA
#&amp;gt;   citeulike_likes
#&amp;gt; 1              NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-detailed-data-for-altmetrics-using-almevents&#34;&gt;Get detailed data for altmetrics using &lt;code&gt;almevents&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out &amp;lt;- alm_events(doi=&amp;quot;10.1371/journal.pone.0029797&amp;quot;)
names(out)
#&amp;gt;  [1] &amp;quot;citeulike&amp;quot;        &amp;quot;crossref&amp;quot;         &amp;quot;nature&amp;quot;
#&amp;gt;  [4] &amp;quot;pubmed&amp;quot;           &amp;quot;scopus&amp;quot;           &amp;quot;counter&amp;quot;
#&amp;gt;  [7] &amp;quot;researchblogging&amp;quot; &amp;quot;pmc&amp;quot;              &amp;quot;facebook&amp;quot;
#&amp;gt; [10] &amp;quot;mendeley&amp;quot;         &amp;quot;twitter&amp;quot;          &amp;quot;wikipedia&amp;quot;
#&amp;gt; [13] &amp;quot;relativemetric&amp;quot;   &amp;quot;figshare&amp;quot;         &amp;quot;pmceuropedata&amp;quot;
#&amp;gt; [16] &amp;quot;plos_comments&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the results for PubMed Central&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# remove those with no data
out &amp;lt;- out[!out %in% c(&amp;quot;sorry, no events content yet&amp;quot;,&amp;quot;parser not written yet&amp;quot;)]
out[[&amp;quot;pmc&amp;quot;]]
#&amp;gt; $events_url
#&amp;gt; [1] &amp;quot;http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3256195&amp;quot;
#&amp;gt;
#&amp;gt; $events
#&amp;gt;    scanned.page.browse month cited.by abstract full.text unique.ip pdf
#&amp;gt; 1                    0     1        0        1        51        42   8
#&amp;gt; 2                    0     2        0        0        15        11   4
#&amp;gt; 3                    0     3        0        0        11        12   4
#&amp;gt; 4                    0     4        0        1         6         6   2
#&amp;gt; 5                    0     5        0        0         5         5   1
#&amp;gt; 6                    0     6        0        0         7         9   2
#&amp;gt; 7                    0     7        0        1         6         8   3
#&amp;gt; 8                    0     8        0        1         5         4   0
#&amp;gt; 9                    0     9        0        0        14        13   5
#&amp;gt; 10                   0    10        0        1        20        16   4
#&amp;gt; 11                   0    12        0        0        13        12   1
#&amp;gt; 12                   0     1        0        0        13        14   7
#&amp;gt; 13                   0     3        0        1        22        20   2
#&amp;gt; 14                   0     2        0        0        13        10   2
#&amp;gt; 15                   0     4        1        1        45        24   4
#&amp;gt; 16                   0    11        0        1        10         9   1
#&amp;gt; 17                   0     5        0        0        18        21   5
#&amp;gt; 18                   0     6        0        0        12        11   1
#&amp;gt; 19                   0     7        0        0        27        14   1
#&amp;gt; 20                   0     8        0        0        21        13   0
#&amp;gt; 21                   0     9        0        0        14        13   0
#&amp;gt; 22                   0    10        0        0        14        15   3
#&amp;gt; 23                   0    11        0        6        18        16   2
#&amp;gt; 24                   0    12        0        0        14         9   1
#&amp;gt; 25                   0     1        0        0        22        16   1
#&amp;gt; 26                   0     2        0        0        13        12   1
#&amp;gt; 27                   0     3        0        0        11        10   1
#&amp;gt; 28                   0     5        0        0        15        12   0
#&amp;gt; 29                   0     6        0        0        12        12   2
#&amp;gt; 30                   0     4        0        0         8         9   1
#&amp;gt; 31                   0     8        0        0        18        14   3
#&amp;gt; 32                   0     9        0        0        18        20   2
#&amp;gt; 33                   0    10        0        0        23        18   4
#&amp;gt;    year figure scanned.summary supp.data
#&amp;gt; 1  2012      9               0         0
#&amp;gt; 2  2012     11               0         2
#&amp;gt; 3  2012      0               0         0
#&amp;gt; 4  2012      0               0         0
#&amp;gt; 5  2012      0               0         0
#&amp;gt; 6  2012      2               0         0
#&amp;gt; 7  2012      3               0         0
#&amp;gt; 8  2012      0               0         0
#&amp;gt; 9  2012      3               0         0
#&amp;gt; 10 2012      1               0         0
#&amp;gt; 11 2012      1               0         0
#&amp;gt; 12 2013      0               0         0
#&amp;gt; 13 2013      0               0         0
#&amp;gt; 14 2013      0               0         0
#&amp;gt; 15 2013      3               0         1
#&amp;gt; 16 2012      0               0         0
#&amp;gt; 17 2013      0               0         1
#&amp;gt; 18 2013      0               0         1
#&amp;gt; 19 2013      0               0         0
#&amp;gt; 20 2013      0               0         0
#&amp;gt; 21 2013      0               0         1
#&amp;gt; 22 2013      2               0         0
#&amp;gt; 23 2013      0               0         0
#&amp;gt; 24 2013      0               0         0
#&amp;gt; 25 2014      0               0         0
#&amp;gt; 26 2014      0               0         0
#&amp;gt; 27 2014      2               0         0
#&amp;gt; 28 2014      0               0         1
#&amp;gt; 29 2014      0               0         0
#&amp;gt; 30 2014      0               0         1
#&amp;gt; 31 2014      0               0         0
#&amp;gt; 32 2014      0               0         0
#&amp;gt; 33 2014      0               0         0
#&amp;gt;
#&amp;gt; $csl
#&amp;gt; list()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the results for twitter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$twitter$events[1:3,]
#&amp;gt;                   id
#&amp;gt; 1 237088032224849920
#&amp;gt; 2 237088322290331648
#&amp;gt; 3 263798980054487041
#&amp;gt;                                                                                                                                    text
#&amp;gt; 1                           #PLOS: Ecological Guild Evolution and the Discovery of the World&#39;s Smallest Vertebrate http://t.co/yEGLyWTf
#&amp;gt; 2                           #PLOS: Ecological Guild Evolution and the Discovery of the World&#39;s Smallest Vertebrate http://t.co/497NRrMR
#&amp;gt; 3 Happy #Halloween from Maria @PLOSONE, dressed as a tiny frog, complete with dime for scale! http://t.co/YWcdPoGP http://t.co/lAxWAHOG
#&amp;gt;             created_at            user      user_name
#&amp;gt; 1 2012-08-19T07:26:06Z        opdebult Jan ten Hoopen
#&amp;gt; 2 2012-08-19T07:27:15Z      forestalis forestalis.org
#&amp;gt; 3 2012-11-01T00:25:53Z multidiscipl1ne Lindsay Kelley
#&amp;gt;                                                                                        user_profile_image
#&amp;gt; 1                                          http://a0.twimg.com/profile_images/1741153180/Tidan_normal.jpg
#&amp;gt; 2                                   http://a0.twimg.com/profile_images/654250700/ForestalisIco_normal.jpg
#&amp;gt; 3 http://a0.twimg.com/profile_images/1910116023/261235_920680811178_6708085_43508969_7138379_n_normal.jpg
#&amp;gt;                                                      event_url
#&amp;gt; 1        http://twitter.com/opdebult/status/237088032224849920
#&amp;gt; 2      http://twitter.com/forestalis/status/237088322290331648
#&amp;gt; 3 http://twitter.com/multidiscipl1ne/status/263798980054487041
#&amp;gt;             event_time
#&amp;gt; 1 2012-08-19T07:26:06Z
#&amp;gt; 2 2012-08-19T07:27:15Z
#&amp;gt; 3 2012-11-01T00:25:53Z
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;retrieve-and-plot-plos-article-level-metrics-signposts&#34;&gt;Retrieve and plot PLOS article-level metrics signposts.&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat &amp;lt;- alm_signposts(doi=&amp;quot;10.1371/journal.pone.0029797&amp;quot;)
plot_signposts(input=dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/alm/unnamed-chunk-16-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-16&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or plot many identifiers gives a line chart&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dois &amp;lt;- c(&#39;10.1371/journal.pone.0001543&#39;,&#39;10.1371/journal.pone.0040117&#39;,&#39;10.1371/journal.pone.0029797&#39;,&#39;10.1371/journal.pone.0039395&#39;)
dat &amp;lt;- alm_signposts(doi=dois)
plot_signposts(input=dat) + theme_grey(base_size = 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/alm/unnamed-chunk-17-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-17&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or make an interactive chart by doing &lt;code&gt;plot_signposts(input=dat, type=&amp;quot;multiBarChart&amp;quot;)&lt;/code&gt;. Try it out! It should open in your browser and you can interact with it.&lt;/p&gt;

&lt;h2 id=&#34;density-and-histogram-plots-from-plos-article-level-metrics-data&#34;&gt;Density and histogram plots from PLOS Article Level Metrics data&lt;/h2&gt;

&lt;p&gt;Note: Do you the key below in the &lt;code&gt;searchplos&lt;/code&gt; call in this example, but if you plan to use rplos more, get your own API key &lt;a href=&#34;http://api.plos.org/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;rplos&#39;)
library(&#39;plyr&#39;)
dois &amp;lt;- searchplos(q=&#39;science&#39;, fl=&amp;quot;id&amp;quot;, fq=list(&#39;cross_published_journal_key:PLoSONE&#39;, &#39;doc_type:full&#39;, &#39;publication_date:[2010-01-01T00:00:00Z TO 2010-12-31T23:59:59Z]&#39;), limit=75)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove non-full article DOIs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dois &amp;lt;- dois$data$id
dois &amp;lt;- dois[!grepl(&amp;quot;annotation&amp;quot;, dois)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Collect altmetrics data and combine to a &lt;code&gt;data.frame&lt;/code&gt; with &lt;code&gt;ldply&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;alm &amp;lt;- alm_ids(doi=dois, total_details=TRUE)
alm &amp;lt;- ldply(alm$data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default plot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(alm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/alm/unnamed-chunk-21-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-21&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can change the color of the density plot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(alm, color=&amp;quot;#EFA5A5&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/alm/unnamed-chunk-22-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-22&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pass in a title or description subtending the title&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(alm, title=&amp;quot;Scopus citations from 2010&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/alm/unnamed-chunk-23-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-23&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Plot a particular source&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(alm, source=&amp;quot;crossref_total&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/alm/unnamed-chunk-24-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-24&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Plot many sources in different panels in the same plot, and pass in colors just for fun&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_density(input=alm, source=c(&amp;quot;counter_html&amp;quot;,&amp;quot;crossref_total&amp;quot;,&amp;quot;pubmed_total&amp;quot;,&amp;quot;scopus_total&amp;quot;), color=c(&amp;quot;#83DFB4&amp;quot;,&amp;quot;#EFA5A5&amp;quot;,&amp;quot;#CFD470&amp;quot;,&amp;quot;#B2C9E4&amp;quot;)) + theme_grey(base_size = 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/alm/unnamed-chunk-25-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-25&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;crossref-article-level-metrics&#34;&gt;CrossRef article level metrics&lt;/h2&gt;

&lt;p&gt;Remember to get your api key from CrossRef, pass it in in the key parameter. Notice that we are passing the base url for the Crossref API, whereas the default is for the PLOS url &lt;a href=&#34;http://alm.plos.org/api/v3/articles&#34;&gt;http://alm.plos.org/api/v3/articles&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;http://alm.labs.crossref.org/api/v5/articles&amp;quot;
dois &amp;lt;- c(&amp;quot;10.1371/journal.pone.0086859&amp;quot;, &amp;quot;10.1038/nature12990&amp;quot;, &amp;quot;10.5860/choice.51-3037&amp;quot;)
alm_ids(doi=dois, url = url, key=getOption(&amp;quot;crossrefalmkey&amp;quot;))
#&amp;gt; $meta
#&amp;gt;   total total_pages page error
#&amp;gt; 1     3           1    1    NA
#&amp;gt;
#&amp;gt; $data
#&amp;gt; $data$`10.1038/nature12990`
#&amp;gt;              .id pdf html readers comments likes total
#&amp;gt; 1       crossref  NA   NA      NA       NA    NA     0
#&amp;gt; 2       mendeley  NA   NA      NA       NA    NA     0
#&amp;gt; 3       facebook  NA   NA      NA       NA    NA     0
#&amp;gt; 4            pmc  NA   NA      NA       NA    NA     0
#&amp;gt; 5      citeulike  NA   NA      NA       NA    NA     0
#&amp;gt; 6         pubmed  NA   NA      NA       NA    NA     0
#&amp;gt; 7      wordpress  NA   NA      NA       NA    NA     0
#&amp;gt; 8         reddit  NA   NA      NA       NA    NA     0
#&amp;gt; 9      wikipedia  NA   NA      NA       NA    NA     6
#&amp;gt; 10      datacite  NA   NA      NA       NA    NA     0
#&amp;gt; 11     pmceurope  NA   NA      NA       NA    NA     0
#&amp;gt; 12 pmceuropedata  NA   NA      NA       NA    NA     0
#&amp;gt;
#&amp;gt; $data$`10.1371/journal.pone.0086859`
#&amp;gt;              .id pdf html readers comments likes total
#&amp;gt; 1       crossref  NA   NA      NA       NA    NA     0
#&amp;gt; 2       mendeley  NA   NA      NA       NA    NA     0
#&amp;gt; 3       facebook  NA   NA      NA       NA    NA     0
#&amp;gt; 4            pmc  NA   NA      NA       NA    NA     0
#&amp;gt; 5      citeulike  NA   NA      NA       NA    NA     0
#&amp;gt; 6         pubmed  NA   NA      NA       NA    NA     0
#&amp;gt; 7      wordpress  NA   NA      NA       NA    NA     0
#&amp;gt; 8         reddit  NA   NA      NA       NA    NA     0
#&amp;gt; 9      wikipedia  NA   NA      NA       NA    NA     2
#&amp;gt; 10      datacite  NA   NA      NA       NA    NA     0
#&amp;gt; 11     pmceurope  NA   NA      NA       NA    NA     0
#&amp;gt; 12 pmceuropedata  NA   NA      NA       NA    NA     0
#&amp;gt;
#&amp;gt; $data$`10.5860/choice.51-3037`
#&amp;gt;              .id pdf html readers comments likes total
#&amp;gt; 1       crossref  NA   NA      NA       NA    NA     0
#&amp;gt; 2       mendeley  NA   NA      NA       NA    NA     0
#&amp;gt; 3       facebook  NA   NA      NA       NA    NA     0
#&amp;gt; 4            pmc  NA   NA      NA       NA    NA     0
#&amp;gt; 5      citeulike  NA   NA      NA       NA    NA     0
#&amp;gt; 6         pubmed  NA   NA      NA       NA    NA     0
#&amp;gt; 7      wordpress  NA   NA      NA       NA    NA     0
#&amp;gt; 8         reddit  NA   NA      NA       NA    NA     0
#&amp;gt; 9      wikipedia  NA   NA      NA       NA    NA     0
#&amp;gt; 10      datacite  NA   NA      NA       NA    NA     0
#&amp;gt; 11     pmceurope  NA   NA      NA       NA    NA     0
#&amp;gt; 12 pmceuropedata  NA   NA      NA       NA    NA     0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;section id=&#34;citing&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;citing&#34;&gt;Citing&lt;/h2&gt;

&lt;p&gt;To cite &lt;code&gt;alm&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scott Chamberlain, Carl Boettiger, Karthik Ram and Fenner Martin (2014). alm: R Client for the Lagotto Altmetrics API Platform.. R package version 0.3.1. &lt;a href=&#34;https://github.com/ropensci/alm&#34;&gt;https://github.com/ropensci/alm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;section id=&#34;license_bugs&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/alm/issues?state=open&#34;&gt;our Github repo for alm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>assertr tutorial</title>
      <link>https://ropensci.org/tutorials/assertr_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/assertr_tutorial/</guid>
      <description>
        
        

&lt;p&gt;In data analysis workflows that depend on un-sanitized data sets from external
sources, it’s very common that errors in data bring an analysis to a
screeching halt. Oftentimes, these errors occur late in the analysis and
provide no clear indication of which datum caused the error.&lt;/p&gt;

&lt;p&gt;On occasion, the error resulting from bad data won’t even appear to be a
data error at all. Still worse, errors in data will pass through analysis
without error, remain undetected, and produce inaccurate results.&lt;/p&gt;

&lt;p&gt;The solution to the problem is to provide as much information as you can about
how you expect the data to look up front so that any deviation from this
expectation can be dealt with immediately. This is what the &lt;code&gt;assertr&lt;/code&gt; package
tries to make dead simple.&lt;/p&gt;

&lt;p&gt;Essentially, &lt;code&gt;assertr&lt;/code&gt; provides a suite of functions designed to verify
assumptions about data early in an analysis pipeline. This package needn&amp;rsquo;t
be used with the &lt;code&gt;magrittr&lt;/code&gt;/&lt;code&gt;dplyr&lt;/code&gt; piping mechanism but the examples in this
vignette will use them to enhance clarity.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;assertr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&amp;quot;devtools&amp;quot;)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropenscilabs/assertr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;assertr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;concrete-data-errors&#34;&gt;concrete data errors&lt;/h4&gt;

&lt;p&gt;Let’s say, for example, that the R’s built-in car dataset, &lt;code&gt;mtcars&lt;/code&gt;, was not
built-in but rather procured from an external source that was known for making
errors in data entry or coding.&lt;/p&gt;

&lt;p&gt;In particular, the mtcars dataset looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(mtcars)
#&amp;gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
#&amp;gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
#&amp;gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
#&amp;gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
#&amp;gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#&amp;gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
#&amp;gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But let&amp;rsquo;s pretend that the data we got accidentally negated the 5th mpg value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;our.data &amp;lt;- mtcars
our.data$mpg[5] &amp;lt;- our.data$mpg[5] * -1
our.data[4:6,]
#&amp;gt;                     mpg cyl disp  hp drat    wt  qsec vs am gear carb
#&amp;gt; Hornet 4 Drive     21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
#&amp;gt; Hornet Sportabout -18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
#&amp;gt; Valiant            18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoops!&lt;/p&gt;

&lt;p&gt;If we wanted to find the average miles per gallon for each number of engine
cylinders, we might do so like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)

our.data %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl  avg.mpg
#&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4 26.66364
#&amp;gt; 2     6 19.74286
#&amp;gt; 3     8 12.42857
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This indicates that the average miles per gallon for a 8 cylinder car is a lowly
12.43. However, in the correct dataset it&amp;rsquo;s really just over 15. Data errors
like that are extremely easy to miss because it doesn&amp;rsquo;t cause an error, and the
results look reasonable.&lt;/p&gt;

&lt;h4 id=&#34;enter-assertr&#34;&gt;enter assertr&lt;/h4&gt;

&lt;p&gt;To combat this, we might want to use assertr&amp;rsquo;s &lt;code&gt;verify&lt;/code&gt; function to make sure
that &lt;code&gt;mpg&lt;/code&gt; is a positive number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(assertr)

our.data %&amp;gt;%
  verify(mpg &amp;gt;= 0) %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; verification [mpg &amp;gt;= 0] failed! (1 failure)
#&amp;gt; Error: assertr stopped execution
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we had done this, we would have caught this data error.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;verify&lt;/code&gt; function takes a data frame (its first argument is provided by
the &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator), and a logical (boolean) expression. Then, &lt;code&gt;verify&lt;/code&gt;
evaluates that expression using the scope of the provided data frame. If any
of the logical values of the expression&amp;rsquo;s result are &lt;code&gt;FALSE&lt;/code&gt;, &lt;code&gt;verify&lt;/code&gt; will
raise an error that terminates any further processing of the pipeline.&lt;/p&gt;

&lt;p&gt;We could have also written this assertion using &lt;code&gt;assertr&lt;/code&gt;&amp;rsquo;s &lt;code&gt;assert&lt;/code&gt; function&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;our.data %&amp;gt;%
  assert(within_bounds(0,Inf), mpg) %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; Column &#39;mpg&#39; violates assertion &#39;within_bounds(0, Inf)&#39; 1 time
#&amp;gt;   index value
#&amp;gt; 1     5 -18.7
#&amp;gt; Error: assertr stopped execution
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;assert&lt;/code&gt; function takes a data frame, a predicate function, and an arbitrary
number of columns to apply the predicate function to. The predicate function
(a function that returns a logical/boolean value) is then applied to every
element of the columns selected, and will raise an error when if it finds
violations.&lt;/p&gt;

&lt;p&gt;Internally, the &lt;code&gt;assert&lt;/code&gt; function uses &lt;code&gt;dplyr&lt;/code&gt;&amp;rsquo;s &lt;code&gt;select&lt;/code&gt; function to extract
the columns to test the predicate function on. This allows for complex
assertions. Let&amp;rsquo;s say we wanted to make sure that all values in the dataset
are &lt;em&gt;greater&lt;/em&gt; than zero (except &lt;code&gt;mpg&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(assertr)

our.data %&amp;gt;%
  assert(within_bounds(0,Inf, include.lower=FALSE), -mpg) %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; Column &#39;vs&#39; violates assertion &#39;within_bounds(0, Inf, include.lower = FALSE)&#39; 18 times
#&amp;gt;   index value
#&amp;gt; 1     1     0
#&amp;gt; 2     2     0
#&amp;gt; 3     5     0
#&amp;gt; 4     7     0
#&amp;gt; 5    12     0
#&amp;gt;   [omitted 13 rows]
#&amp;gt;
#&amp;gt; Column &#39;am&#39; violates assertion &#39;within_bounds(0, Inf, include.lower = FALSE)&#39; 19 times
#&amp;gt;   index value
#&amp;gt; 1     4     0
#&amp;gt; 2     5     0
#&amp;gt; 3     6     0
#&amp;gt; 4     7     0
#&amp;gt; 5     8     0
#&amp;gt;   [omitted 14 rows]
#&amp;gt; Error: assertr stopped execution
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;verify-vs-assert&#34;&gt;verify vs. assert&lt;/h4&gt;

&lt;p&gt;The first noticable difference between &lt;code&gt;verify&lt;/code&gt; and &lt;code&gt;assert&lt;/code&gt; is that &lt;code&gt;verify&lt;/code&gt;
takes an expression, and &lt;code&gt;assert&lt;/code&gt; takes a predicate and columns to apply it to.
This might make the &lt;code&gt;verify&lt;/code&gt; function look more elegant&amp;ndash;but there&amp;rsquo;s an
important drawback. &lt;code&gt;verify&lt;/code&gt; has to evaluate the entire expression first, and
&lt;em&gt;then&lt;/em&gt; check if there were any violations. Because of this, &lt;code&gt;verify&lt;/code&gt; can&amp;rsquo;t
tell you the offending datum.&lt;/p&gt;

&lt;p&gt;One important drawback to &lt;code&gt;assert&lt;/code&gt;, and a consequence of its application of
the predicate to &lt;em&gt;columns&lt;/em&gt;, is that &lt;code&gt;assert&lt;/code&gt; can&amp;rsquo;t confirm assertions about
the data structure &lt;em&gt;itself&lt;/em&gt;. For example, let&amp;rsquo;s say we were reading a dataset
from disk that we know has more than 100 observations; we could write a check
of that assumption like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat &amp;lt;- read.csv(&amp;quot;a-data-file.csv&amp;quot;)
dat %&amp;gt;%
  verify(nrow(.) &amp;gt; 100) %&amp;gt;%
  ....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a powerful advantage over &lt;code&gt;assert&lt;/code&gt;&amp;hellip; but &lt;code&gt;assert&lt;/code&gt; has one more
advantage of its own that we heretofore ignored.&lt;/p&gt;

&lt;h4 id=&#34;assertr-s-predicates&#34;&gt;assertr&amp;rsquo;s predicates&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;assertr&lt;/code&gt;&amp;rsquo;s predicates, both built-in and custom, make &lt;code&gt;assert&lt;/code&gt; very powerful.
The predicates that are built in to &lt;code&gt;assertr&lt;/code&gt; are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;not_na&lt;/code&gt; - that checks if an element is not NA&lt;/li&gt;
&lt;li&gt;&lt;code&gt;within_bounds&lt;/code&gt; - that returns a predicate function that checks if a numeric
value falls within the bounds supplied, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in_set&lt;/code&gt; - that returns a predicate function that checks if an element is
a member of the set supplied.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_uniq&lt;/code&gt; - that checks to see if each element appears only once&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ve already seen &lt;code&gt;within_bounds&lt;/code&gt; in action&amp;hellip; let&amp;rsquo;s use the &lt;code&gt;in_set&lt;/code&gt; function
to make sure that there are only 0s and 1s (automatic and manual, respectively)
values in the &lt;code&gt;am&lt;/code&gt; column&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;our.data %&amp;gt;%
  assert(in_set(0,1), am) %&amp;gt;%
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we were reading a dataset that contained a column representing boroughs of
New York City (named &lt;code&gt;BORO&lt;/code&gt;), we can verify that there are no mis-spelled
or otherwise unexpected boroughs like so&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boroughs &amp;lt;- c(&amp;quot;Bronx&amp;quot;, &amp;quot;Manhattan&amp;quot;, &amp;quot;Queens&amp;quot;, &amp;quot;Brooklyn&amp;quot;, &amp;quot;Staten Island&amp;quot;)

read.csv(&amp;quot;a-dataset.csv&amp;quot;) %&amp;gt;%
  assert(in_set(boroughs), BORO) %&amp;gt;%
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rad!&lt;/p&gt;

&lt;h4 id=&#34;custom-predicates&#34;&gt;custom predicates&lt;/h4&gt;

&lt;p&gt;A convenient feature of &lt;code&gt;assertr&lt;/code&gt; is that it makes the construction of custom
predicate functions easy.&lt;/p&gt;

&lt;p&gt;In order to make a custom predicate, you only have to specify cases where the
predicate should return FALSE. Let&amp;rsquo;s say that a dataset has an ID column
(named &lt;code&gt;ID&lt;/code&gt;) that we want to check is not an empty string. We can create a
predicate like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;not.empty.p &amp;lt;- function(x) if(x==&amp;quot;&amp;quot;) return(FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and apply it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;read.csv(&amp;quot;another-dataset.csv&amp;quot;) %&amp;gt;%
  assert(not.empty.p, ID) %&amp;gt;%
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s say that the ID column is always a 7-digit number. We can confirm that
all the IDs are 7-digits by defining the following predicate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;seven.digit.p &amp;lt;- function(x) nchar(x)==7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A powerful consequence of this easy creation of predicates is that the
&lt;code&gt;assert&lt;/code&gt; function lends itself to use with lambda predicates (unnamed
predicates that are only used once). The check above might be better written as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;read.csv(&amp;quot;another-dataset.csv&amp;quot;) %&amp;gt;%
  assert(function(x) nchar(x)==7, ID) %&amp;gt;%
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat-o!&lt;/p&gt;

&lt;h4 id=&#34;enter-insist-and-predicate-generators&#34;&gt;enter &lt;code&gt;insist&lt;/code&gt; and predicate &amp;lsquo;generators&amp;rsquo;&lt;/h4&gt;

&lt;p&gt;Very often, there is a need to dynamically determine the predicate function
to be used based on the vector being checked.&lt;/p&gt;

&lt;p&gt;For example, to check to see if every element of a vector is within &lt;em&gt;n&lt;/em&gt;
standard deviations of the mean, you need to create a &lt;code&gt;within_bounds&lt;/code&gt;
predicate &lt;em&gt;after&lt;/em&gt; dynamically determining the bounds by reading and computing
on the vector itself.&lt;/p&gt;

&lt;p&gt;To this end, the &lt;code&gt;assert&lt;/code&gt; function is no good; it just applies a raw predicate
to a vector. We need a function like &lt;code&gt;assert&lt;/code&gt; that will apply predicate
&lt;em&gt;generators&lt;/em&gt; to vectors, return predicates, and &lt;em&gt;then&lt;/em&gt; perform &lt;code&gt;assert&lt;/code&gt;-like
functionality by checking each element of the vectors with its respective custom
predicate. This is precisely what &lt;code&gt;insist&lt;/code&gt; does.&lt;/p&gt;

&lt;p&gt;This is all much simpler than it may sound. Hopefully, the examples will clear
up any confusion.&lt;/p&gt;

&lt;p&gt;The primary use case for &lt;code&gt;insist&lt;/code&gt; is in conjunction with the &lt;code&gt;within_n_sds&lt;/code&gt; or
&lt;code&gt;within_n_mads&lt;/code&gt; predicate generator.&lt;/p&gt;

&lt;p&gt;Suppose we wanted to check that every &lt;code&gt;mpg&lt;/code&gt; value in the &lt;code&gt;mtcars&lt;/code&gt; data set was
within 3 standard deviations of the mean before finding the average miles
per gallon for each number of engine cylinders. We could write something
like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
mtcars %&amp;gt;%
  insist(within_n_sds(3), mpg) %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl  avg.mpg
#&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4 26.66364
#&amp;gt; 2     6 19.74286
#&amp;gt; 3     8 15.10000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice what happens when we drop that z-score to 2 standard deviations
from the mean&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;%
  insist(within_n_sds(2), mpg) %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; Column &#39;mpg&#39; violates assertion &#39;within_n_sds(2)&#39; 2 times
#&amp;gt;   index value
#&amp;gt; 1    18  32.4
#&amp;gt; 2    20  33.9
#&amp;gt; Error: assertr stopped execution
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execution of the pipeline was halted. But now we know exactly which data point
violated the predicate that &lt;code&gt;within_n_sds(2)(mtcars$mpg)&lt;/code&gt;
returned.&lt;/p&gt;

&lt;p&gt;Now that&amp;rsquo;s an efficient car!&lt;/p&gt;

&lt;p&gt;After the predicate generator, &lt;code&gt;insist&lt;/code&gt; takes an arbitrary number of columns
just like &lt;code&gt;assert&lt;/code&gt; using the syntax of &lt;code&gt;dplyr&lt;/code&gt;&amp;rsquo;s &lt;code&gt;select&lt;/code&gt; function. If you
wanted to check that everything in mtcars is within 10 standard deviations
of the mean (of each column vector), you can do so like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;%
  insist(within_n_sds(10), mpg:carb) %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl  avg.mpg
#&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4 26.66364
#&amp;gt; 2     6 19.74286
#&amp;gt; 3     8 15.10000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aces!&lt;/p&gt;

&lt;p&gt;I chose to use &lt;code&gt;within_n_sds&lt;/code&gt; in this example because people are familiar
z-scores. However, for most practical purposes, the related predicate generator
&lt;code&gt;within_n_mads&lt;/code&gt; is more useful.&lt;/p&gt;

&lt;p&gt;The problem with &lt;code&gt;within_n_sds&lt;/code&gt; is the mean and standard deviation are so
heavily influenced by outliers, their very presence will compromise attempts
to identify them using these statistics. In contrast with &lt;code&gt;within_n_sds&lt;/code&gt;,
&lt;code&gt;within_n_mads&lt;/code&gt; uses the robust statistics, median and median absolute
deviation, to identify potentially erroneous data points.&lt;/p&gt;

&lt;p&gt;For example, the vector &lt;code&gt;&amp;lt;7.4, 7.1, 7.2, 72.1&amp;gt;&lt;/code&gt; almost certainly has an erroneous
data point, but &lt;code&gt;within_n_sds(2)&lt;/code&gt; will fail to detect it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;example.vector &amp;lt;- c(7.4, 7.1, 7.2, 72.1)
within_n_sds(2)(example.vector)(example.vector)
#&amp;gt; [1] TRUE TRUE TRUE TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;whereas &lt;code&gt;within_n_mads&lt;/code&gt; will detect it at even lower levels of power&amp;hellip;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;example.vector &amp;lt;- c(7.4, 7.1, 7.2, 72.1)
within_n_mads(2)(example.vector)(example.vector)
#&amp;gt; [1]  TRUE  TRUE  TRUE FALSE
within_n_mads(1)(example.vector)(example.vector)
#&amp;gt; [1]  TRUE  TRUE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tubular!&lt;/p&gt;

&lt;h4 id=&#34;row-wise-assertions-and-row-reduction-functions&#34;&gt;row-wise assertions and row reduction functions&lt;/h4&gt;

&lt;p&gt;As cool as it&amp;rsquo;s been so far, this still isn&amp;rsquo;t enough to constitute a complete
grammar of data integrity checking. To see why, check out the following
small example data set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;example.data &amp;lt;- data.frame(x=c(8, 9, 6, 5, 9, 5, 6, 7,
                             8, 9, 6, 5, 5, 6, 7),
                         y=c(82, 91, 61, 49, 40, 49, 57,
                             74, 78, 90, 61, 49, 51, 62, 68))
(example.data)
#&amp;gt;    x  y
#&amp;gt; 1  8 82
#&amp;gt; 2  9 91
#&amp;gt; 3  6 61
#&amp;gt; 4  5 49
#&amp;gt; 5  9 40
#&amp;gt; 6  5 49
#&amp;gt; 7  6 57
#&amp;gt; 8  7 74
#&amp;gt; 9  8 78
#&amp;gt; 10 9 90
#&amp;gt; 11 6 61
#&amp;gt; 12 5 49
#&amp;gt; 13 5 51
#&amp;gt; 14 6 62
#&amp;gt; 15 7 68
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you spot the brazen outlier? You&amp;rsquo;re certainly not going to find it by
checking the distribution of each &lt;em&gt;column&lt;/em&gt;! All elements from both columns are
within 2 standard deviations of their respective means.&lt;/p&gt;

&lt;p&gt;Unless you have a &lt;em&gt;really&lt;/em&gt; good eye, the only way you&amp;rsquo;re going to catch this
mistake is by plotting the data set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(example.data$x, example.data$y, xlab=&amp;quot;&amp;quot;, ylab=&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/assertr/unnamed-chunk-24-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-24&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, so all the &lt;code&gt;y&lt;/code&gt;s are roughly 10 times the &lt;code&gt;x&lt;/code&gt;s except the outlying data
point.&lt;/p&gt;

&lt;p&gt;The problem having to plot data sets to catch anomalies is that it is &lt;em&gt;really&lt;/em&gt;
hard to visualize 4-dimensions at once, and it is near impossible with
high-dimensional data.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s no way of catching this anomaly by looking at each individual
column separately; the only way to catch it is to view each row as a complete
observation and compare it to the rest.&lt;/p&gt;

&lt;p&gt;To this end, &lt;code&gt;assertr&lt;/code&gt; provides two functions that take a data frame, and
reduce each row into a single value. We&amp;rsquo;ll call them &lt;em&gt;row reduction functions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The first one we&amp;rsquo;ll look at is called &lt;code&gt;maha_dist&lt;/code&gt;. It computes the average
mahalanobis distance (kind of like multivariate z-scoring for outlier
detection) of each row from the whole data set. The big idea is that in the
resultant vector, big/distant values are potential anomalous entries. Let&amp;rsquo;s
look at the distribution of mahalanobis distances for this data set&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;maha_dist(example.data)
#&amp;gt;  [1]  1.28106379  3.10992407  0.25081851  1.35993969 12.81898913
#&amp;gt;  [6]  1.35993969  0.26181283  0.47714597  0.87804987  2.95741956
#&amp;gt; [11]  0.25081851  1.35993969  1.29208587  0.28235776  0.05969507

maha_dist(example.data) %&amp;gt;% hist(main=&amp;quot;&amp;quot;, xlab=&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/assertr/unnamed-chunk-25-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-25&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s no question here as to whether there&amp;rsquo;s an anomalous entry! But how do
you check for this sort of thing using &lt;code&gt;assertr&lt;/code&gt; constructs?&lt;/p&gt;

&lt;p&gt;Well, &lt;code&gt;maha_dist&lt;/code&gt; will typically be used with the &lt;code&gt;insist_rows&lt;/code&gt; function.
&lt;code&gt;insist_rows&lt;/code&gt; takes a data frame, a row reduction function, a
predicate-generating function, and an arbitrary number of columns to apply
the predicate function to. The row reduction function (&lt;code&gt;maha_dist&lt;/code&gt; in this case)
is applied to the data frame, and returns a value for each row. The
predicate-generating function is then applied to the vector returned from
the row reduction function and the resultant predicate is applied to each
element of that vector. It will raise an error if it finds any violations.&lt;/p&gt;

&lt;p&gt;As always, this undoubtedly sounds far more confusing than it really is. Here&amp;rsquo;s
an example of it in use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;example.data %&amp;gt;%
  insist_rows(maha_dist, within_n_mads(3), dplyr::everything())
#&amp;gt; Data frame row reduction &#39;maha_dist&#39; violates predicate &#39;within_n_mads(3)&#39; 1 time
#&amp;gt;   rownumber
#&amp;gt; 1         5
#&amp;gt; Error: assertr stopped execution
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check that out! To be clear, this function is running the supplied data frame
through the &lt;code&gt;maha_dist&lt;/code&gt; function which returns a value for each row
corresponding to its mahalanobis distance. (The whole data frame is used because
we used the &lt;code&gt;everything()&lt;/code&gt; selection function from the &lt;code&gt;dplyr&lt;/code&gt; package.)
Then, &lt;code&gt;within_n_mads(3)&lt;/code&gt; computes on that vector and returns a bounds
checking predicate. The bounds checking predicate checks to see that all
mahalanobis distances are within 3 median absolute deviations
of each other. They are not, and the pipeline errors out.&lt;/p&gt;

&lt;p&gt;This is probably the most powerful construct in &lt;code&gt;assertr&lt;/code&gt;&amp;ndash;it can find a whole
lot of nasty errors that would be very difficult to check for by hand.&lt;/p&gt;

&lt;p&gt;Part of what makes it so powerful is how flexible &lt;code&gt;maha_dist&lt;/code&gt; is. We only used
it, so far, on a data frame of numerics, but it can handle all sorts of data
frames. To really see it shine, let&amp;rsquo;s use it on the iris data set, that contains
a categorical variable in its right-most column&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(iris)
#&amp;gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
#&amp;gt; 1          5.1         3.5          1.4         0.2  setosa
#&amp;gt; 2          4.9         3.0          1.4         0.2  setosa
#&amp;gt; 3          4.7         3.2          1.3         0.2  setosa
#&amp;gt; 4          4.6         3.1          1.5         0.2  setosa
#&amp;gt; 5          5.0         3.6          1.4         0.2  setosa
#&amp;gt; 6          5.4         3.9          1.7         0.4  setosa

iris %&amp;gt;% maha_dist %&amp;gt;% hist(main=&amp;quot;&amp;quot;, xlab=&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/assertr/unnamed-chunk-27-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-27&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Looks ok, but what happens when we accidentally enter a row as a different
species&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mistake &amp;lt;- iris
(mistake[149,5])
#&amp;gt; [1] virginica
#&amp;gt; Levels: setosa versicolor virginica
mistake[149,5] &amp;lt;- &amp;quot;setosa&amp;quot;

mistake %&amp;gt;% maha_dist %&amp;gt;% hist(main=&amp;quot;&amp;quot;, xlab=&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/assertr/unnamed-chunk-28-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-28&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
mistake %&amp;gt;% maha_dist %&amp;gt;% which.max
#&amp;gt; [1] 149
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at that! This mistake can easily be picked up by any reasonable bounds
checker&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mistake %&amp;gt;% insist_rows(maha_dist, within_n_mads(7), dplyr::everything())
#&amp;gt; Data frame row reduction &#39;maha_dist&#39; violates predicate &#39;within_n_mads(7)&#39; 1 time
#&amp;gt;   rownumber
#&amp;gt; 1       149
#&amp;gt; Error: assertr stopped execution
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;insist&lt;/code&gt; and &lt;code&gt;insist_rows&lt;/code&gt; are both similar in that they both take predicate
generators and not actual predicates. What makes &lt;code&gt;insist_rows&lt;/code&gt; different is
its usage of a row-reduce data frame.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;assert&lt;/code&gt; has a row-oriented counterpart, too; it&amp;rsquo;s called &lt;code&gt;assert_rows&lt;/code&gt;.
&lt;code&gt;insist&lt;/code&gt; is to &lt;code&gt;assert&lt;/code&gt; as &lt;code&gt;insist_rows&lt;/code&gt; is to &lt;code&gt;assert_rows&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;assert_rows&lt;/code&gt; works the same as &lt;code&gt;insist_rows&lt;/code&gt;, except that instead of using
a predicate generator on the row-reduced data frame, it uses a regular-old
predicate.&lt;/p&gt;

&lt;p&gt;For an example of a &lt;code&gt;assert_rows&lt;/code&gt; use case, let&amp;rsquo;s say that we got a data set
(&lt;code&gt;another-dataset.csv&lt;/code&gt;) from the web and we don&amp;rsquo;t want to continue processing
the data set if any row contains more than two missing values (NAs). You
can use the row reduction function &lt;code&gt;num_row_NAs&lt;/code&gt; to reduce all the rows into
the number of NAs they contain. Then, a simple bounds checker will suffice for
ensuring that no element is higher than 2&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;read.csv(&amp;quot;another-dataset.csv&amp;quot;) %&amp;gt;%
  assert_rows(num_row_NAs, within_bounds(0,2), dplyr::everything()) %&amp;gt;%
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;assert_rows&lt;/code&gt; can be used for anomaly detection as well. A future version of
&lt;code&gt;assertr&lt;/code&gt; may contain a cosine distance row reduction function. Since all
cosine distances are constained from -1 to 1, it is easy to use a non-dynamic
predicate to disallow certain values.&lt;/p&gt;

&lt;h4 id=&#34;success-and-error-functions&#34;&gt;success and error functions&lt;/h4&gt;

&lt;p&gt;The behavior of functions like &lt;code&gt;assert&lt;/code&gt;, &lt;code&gt;assert_rows&lt;/code&gt;,
&lt;code&gt;insist&lt;/code&gt;, &lt;code&gt;insist_rows&lt;/code&gt;, &lt;code&gt;verify&lt;/code&gt; when the assertion
passes or fails is configurable via the &lt;code&gt;success_fun&lt;/code&gt;
and &lt;code&gt;error_fun&lt;/code&gt; parameters, respectively.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;success_fun&lt;/code&gt; parameter takes a function that takes
the data passed to the assertion function as a parameter. You can
write your own success handler function, but there are two
provided by this package:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;success_continue&lt;/code&gt; - just returns the data that was passed into the
assertion function (this is default)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;success_logical&lt;/code&gt; - returns TRUE&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;error_fun&lt;/code&gt; parameter takes a function that takes
the data passed to the assertion function as a parameter. You can
write your own error handler function, but there are a few
provided by this package:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;error_stop&lt;/code&gt; - Prints a summary of the errors and
                        halts execution (default)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;error_report&lt;/code&gt; - Prints &lt;em&gt;all&lt;/em&gt; the information available
                          about the errors and halts execution.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;error_append&lt;/code&gt; - Attaches the errors to a special
attribute of &lt;code&gt;data&lt;/code&gt; and returns the data. This is chiefly
to allow assertr errors to be accumulated in a pipeline so that
all assertions can have a chance to be checked and so that all
the errors can be displayed at the end of the chain.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;error_logical&lt;/code&gt; - returns FALSE&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;just_warn&lt;/code&gt; - Prints a summary of the errors but does
not halt execution, it just issues a warning.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;warn_report&lt;/code&gt; - Prints all the information available
about the errors but does not halt execution, it just issues a warning.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;combining-chains-of-assertions&#34;&gt;combining chains of assertions&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s say that as part of an automated pipeline that grabs mtcars from an
untrusted source and finds the average miles per gallon for each number of
engine cylinders, we want to perform the following checks&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;that it has the columns &amp;ldquo;mpg&amp;rdquo;, &amp;ldquo;vs&amp;rdquo;, and &amp;ldquo;am&amp;rdquo;&lt;/li&gt;
&lt;li&gt;that the dataset contains more than 10 observations&lt;/li&gt;
&lt;li&gt;that the column for &amp;lsquo;miles per gallon&amp;rsquo; (mpg) is a positive number&lt;/li&gt;
&lt;li&gt;that the column for &amp;lsquo;miles per gallon&amp;rsquo; (mpg) does not contain a
datum that is outside 4 standard deviations from its mean, and&lt;/li&gt;
&lt;li&gt;that the am and vs columns (automatic/manual and v/straight engine,
respectively) contain 0s and 1s only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This could be written thusly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;%
  verify(has_all_names(&amp;quot;mpg&amp;quot;, &amp;quot;vs&amp;quot;, &amp;quot;am&amp;quot;)) %&amp;gt;%
  verify(nrow(mtcars) &amp;gt; 10) %&amp;gt;%
  verify(mpg &amp;gt; 0) %&amp;gt;%
  insist(within_n_sds(4), mpg) %&amp;gt;%
  assert(in_set(0,1), am, vs) %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl  avg.mpg
#&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4 26.66364
#&amp;gt; 2     6 19.74286
#&amp;gt; 3     8 15.10000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In an assertr chain with default options, &lt;code&gt;assert&lt;/code&gt;, &lt;code&gt;assert_rows&lt;/code&gt;,
&lt;code&gt;insist&lt;/code&gt;, &lt;code&gt;insist_rows&lt;/code&gt;, and &lt;code&gt;verify&lt;/code&gt; will stop at the
first assertion that yields an error and not go on to process the
assertions further down in the chain. For some needs, this is sensible
behavior. There are times, however, when we might like to get a report
of all assertion violations. For example, one might want to write an R
program to download some dataset from the internet and get a detailed
report of all deviations from expectation.&lt;/p&gt;

&lt;p&gt;The best thing to do for this use case, is to use the &lt;code&gt;chain_start&lt;/code&gt;,
and &lt;code&gt;chain_end&lt;/code&gt; functions at the beginning and end of a chain of
assertr assertions. When &lt;code&gt;chain_start&lt;/code&gt; gets called with data, the
data gets a special tag that tells the assertr assertions that follow
to override their &lt;code&gt;success_fun&lt;/code&gt; and &lt;code&gt;error_fun&lt;/code&gt; values and
replace them with &lt;code&gt;success_continue&lt;/code&gt; (which passes the data along
if the test passes) and &lt;code&gt;error_append&lt;/code&gt; (which we&amp;rsquo;ve just discussed).
After all relevant verifications, &lt;code&gt;chain_end&lt;/code&gt; will receive the
data (possibly with accumulated error messages attached) and, by default,
print a report of all the errors that have been found since the start of
the chain.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see it in action!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;%
  chain_start %&amp;gt;%
  verify(nrow(mtcars) &amp;gt; 10) %&amp;gt;%
  verify(mpg &amp;gt; 0) %&amp;gt;%
  insist(within_n_sds(4), mpg) %&amp;gt;%
  assert(in_set(0,1), am, vs) %&amp;gt;%
  chain_end %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl  avg.mpg
#&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4 26.66364
#&amp;gt; 2     6 19.74286
#&amp;gt; 3     8 15.10000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;em&gt;all&lt;/em&gt; assertions will be checked and reported.&lt;/p&gt;

&lt;p&gt;Tip: we can make this whole thing look a lot better by abstracting out
all the assertions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;check_me &amp;lt;- . %&amp;gt;%
  chain_start %&amp;gt;%
  verify(nrow(mtcars) &amp;gt; 10) %&amp;gt;%
  verify(mpg &amp;gt; 0) %&amp;gt;%
  insist(within_n_sds(4), mpg) %&amp;gt;%
  assert(in_set(0,1), am, vs)
  chain_end

mtcars %&amp;gt;%
  check_me %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome! Now we can add an arbitrary number of assertions, as the need arises,
without touching the real logic.&lt;/p&gt;

&lt;h4 id=&#34;advanced-send-email-reports-using-custom-error-functions&#34;&gt;advanced: send email reports using custom error functions&lt;/h4&gt;

&lt;p&gt;One particularly cool application of &lt;code&gt;assertr&lt;/code&gt; is to use it as a data integrity
checker for frequently updated data sources. A script can download new data as
it becomes available, and then run &lt;code&gt;assertr&lt;/code&gt; checks on it. This makes &lt;code&gt;assertr&lt;/code&gt;
into a sort of &amp;ldquo;continuous integration&amp;rdquo; tool (but for data,
not code.)&lt;/p&gt;

&lt;p&gt;In an unsupervised &amp;ldquo;continuous integration&amp;rdquo; environment, you need a way to
discover that the assertions failed. In CI-as-a-service in the software world,
failed automated checks often send an email of reporting the maintainer of a
botched build; why not bring that functionality to &lt;code&gt;assertr&lt;/code&gt;?!&lt;/p&gt;

&lt;p&gt;As we learned in the last sections, all assertion verbs in &lt;code&gt;assertr&lt;/code&gt;
support a custom error function. &lt;code&gt;chain_end&lt;/code&gt; similarly supports custom
error functions. By default, this is &lt;code&gt;error_stop&lt;/code&gt; (or &lt;code&gt;error_report&lt;/code&gt; in the
case of &lt;code&gt;chain_end&lt;/code&gt;) which prints a summary of the errors and halts execution.&lt;/p&gt;

&lt;p&gt;You can specify your own, though, to hijack this behavior and redirect
flow-of-control wherever you want.&lt;/p&gt;

&lt;p&gt;Your custom error function must take, as its first argument,
a list of &lt;code&gt;assertr_error&lt;/code&gt; S3 objects. The second argument must be the
&lt;code&gt;data.frame&lt;/code&gt; that the verb is computing on. Every error function must
take this because there may be some other errors that are attached to the
&lt;code&gt;data.frame&lt;/code&gt;&amp;rsquo;s &lt;code&gt;assertr_errors&lt;/code&gt; attribute leftover from other previous
assertions.&lt;/p&gt;

&lt;p&gt;Below we are going to build a function that takes a list of &lt;code&gt;assertr_errors&lt;/code&gt;,
gets a string representation of the errors and emails it to someone before
halting execution. We will use the &lt;code&gt;mailR&lt;/code&gt; package to send the mail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
library(mailR)

email_me &amp;lt;- function(list_of_errors, data=NULL, ...){
  # we are checking to see if there are any errors that
  # are still attached to the data.frame
  if(!is.null(data) &amp;amp;&amp;amp; !is.null(attr(data, &amp;quot;assertr_errors&amp;quot;)))
    errors &amp;lt;- append(attr(data, &amp;quot;assertr_errors&amp;quot;), errors)

  num.of.errors &amp;lt;- length(list_of_errors)

  preface &amp;lt;- sprintf(&amp;quot;There %s %d error%s:\n&amp;quot;,
                     ifelse(num.of.errors==1,&amp;quot;is&amp;quot;, &amp;quot;are&amp;quot;),
                     num.of.errors,
                     ifelse(num.of.errors==1,&amp;quot;&amp;quot;, &amp;quot;s&amp;quot;))

  # all `assertr_error` S3 objects have `print` and `summary` methods
  # here, we will call `print` on all of the errors since `print`
  # will give us the complete/unabridged error report
  error_string &amp;lt;- capture.output(tmp &amp;lt;- lapply(list_of_errors,
                                               function(x){
                                                 cat(&amp;quot;\n- &amp;quot;);
                                                 print(x);
                                                 return();}))
  error_string &amp;lt;- c(preface, error_string)
  error_string &amp;lt;- error_string %&amp;gt;% paste0(collapse=&amp;quot;\n&amp;quot;)

  send.mail(from=&amp;quot;assertr@gmail.com&amp;quot;, to=&amp;quot;YOU@gmail.com&amp;quot;,
            subject=&amp;quot;error from assertr&amp;quot;, body=error_string,
            smtp = list(host.name=&amp;quot;aspmx.l.google.com&amp;quot;, port=25),
            authenticate = FALSE, send=TRUE)
  stop(&amp;quot;assertr stopped execution&amp;quot;, call.=FALSE)
}

questionable_mtcars %&amp;gt;%
  chain_start %&amp;gt;%
  verify(nrow(.) &amp;gt; 10) %&amp;gt;%
  insist(within_n_sds(4), mpg) %&amp;gt;%
  # ...
  chain_end(error_fun=email.me)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(this particular &lt;code&gt;send.mail&lt;/code&gt; formulation will only work for gmail
recipients; see the &lt;code&gt;mailR&lt;/code&gt; documentation for more information)&lt;/p&gt;

&lt;p&gt;Now you&amp;rsquo;ll get notified of &lt;s&gt;any&lt;/s&gt; all failed assertions via email. Groovy!&lt;/p&gt;

&lt;h4 id=&#34;advanced-creating-your-own-predicate-generators-for-insist&#34;&gt;advanced: creating your own predicate generators for &lt;code&gt;insist&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;assertr&lt;/code&gt; is build with robustness, correctness, and extensibility in mind.
Just like &lt;code&gt;assertr&lt;/code&gt; makes it easy to create your own custom predicates, so
too does this package make it easy to create your own custom predicate
generators.&lt;/p&gt;

&lt;p&gt;Okay&amp;hellip; so its, perhaps, not &lt;em&gt;easy&lt;/em&gt; because predicate generators by nature
are functions that return functions. But it&amp;rsquo;s possible!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you wanted to create a predicate generator that checks if all
elements of a vector are within 3 times the vector&amp;rsquo;s interquartile range from
the median. We need to create a function that looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;within_3_iqrs &amp;lt;- function(a_vector){
  the_median &amp;lt;- median(a_vector)
  the_iqr &amp;lt;- IQR(a_vector)
  within_bounds((the_median-the_iqr*3), (the_median+the_iqr*3))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can use it on &lt;code&gt;mpg&lt;/code&gt; from &lt;code&gt;mtcars&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;%
  insist(within_3_iqrs, mpg) %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl  avg.mpg
#&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4 26.66364
#&amp;gt; 2     6 19.74286
#&amp;gt; 3     8 15.10000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two problems with this, though&amp;hellip;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We may want to abstract this so that we can supply an arbitrary number
of IQRs to create the bounds with&lt;/li&gt;
&lt;li&gt;We lose the ability to choose what optional arguments (if any) that we
give to the returned &lt;code&gt;within_bounds&lt;/code&gt; predicate.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we have to write a function that returns a function that returns
a function&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;within_n_iqrs &amp;lt;- function(n, ...){
  function(a_vector){
    the_median &amp;lt;- median(a_vector)
    the_iqr &amp;lt;- IQR(a_vector)
    within_bounds((the_median-the_iqr*n), (the_median+the_iqr*n), ...)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much better! Now, if we want to check that every &lt;code&gt;mpg&lt;/code&gt; from &lt;code&gt;mtcars&lt;/code&gt; is
within 5 IQRs of the median and &lt;em&gt;not allow NA values&lt;/em&gt; we can do so like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;%
  insist(within_n_iqrs(5), mpg) %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  summarise(avg.mpg=mean(mpg))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     cyl  avg.mpg
#&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4 26.66364
#&amp;gt; 2     6 19.74286
#&amp;gt; 3     8 15.10000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Super!&lt;/p&gt;

&lt;h4 id=&#34;advanced-programming-with-assertion-functions&#34;&gt;advanced: programming with assertion functions&lt;/h4&gt;

&lt;p&gt;These assertion functions use the &lt;a href=&#34;https://rpubs.com/hadley/dplyr-programming&#34;&gt;tidyeval&lt;/a&gt; framework.  In the past,
programming in a tidyverse-like setting was accomplished through
standard evaluation versions of verbs, which used functions postfixed
with an underscore: &lt;code&gt;insist_&lt;/code&gt; instead of &lt;code&gt;insist&lt;/code&gt;, for example.  However,
when tidyeval was made popular with &lt;code&gt;dplyr&lt;/code&gt; 0.7.0, this usage became deprecated,
and therefore underscore-postfixed functions are no longer part of &lt;code&gt;assertr&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tony Fischetti (2017). assertr: Assertive Programming for R Analysis Pipelines. R package version
  2.0.2.2. &lt;a href=&#34;https://cran.rstudio.com/package=assertr&#34;&gt;https://cran.rstudio.com/package=assertr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/assertr/issues?state=open&#34;&gt;our GitHub repo for assertr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>binomen tutorial</title>
      <link>https://ropensci.org/tutorials/binomen_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/binomen_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;code&gt;binomen&lt;/code&gt; provides various taxonomic classes for defining a single taxon, multiple taxa, and a taxonomic data.frame&lt;/p&gt;

&lt;p&gt;It is sort of a companion to &lt;a href=&#34;https://github.com/ropensci/taxize&#34;&gt;taxize&lt;/a&gt;, where you can get taxonomic data on taxonomic names from the web.&lt;/p&gt;

&lt;p&gt;The classes (S3):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;taxon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taxonref&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taxonrefs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binomial&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grouping&lt;/code&gt; (i.e., classification)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The verbs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gethier()&lt;/code&gt; - get hierarchy from a &lt;code&gt;taxon&lt;/code&gt; class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scatter()&lt;/code&gt; - make each row in taxonomic data.frame (&lt;code&gt;taxondf&lt;/code&gt;) a separate &lt;code&gt;taxon&lt;/code&gt; object within a single &lt;code&gt;taxa&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assemble()&lt;/code&gt; - make a &lt;code&gt;taxa&lt;/code&gt; object into a &lt;code&gt;taxondf&lt;/code&gt; data.frame&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pick()&lt;/code&gt; - pick out one or more taxonomic groups&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop()&lt;/code&gt; - pop out (drop) one or more taxonomic groups&lt;/li&gt;
&lt;li&gt;&lt;code&gt;span()&lt;/code&gt; - pick a range between two taxonomic groups (inclusive)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strain()&lt;/code&gt; - filter by taxonomic groups, like dplyr&amp;rsquo;s filter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name()&lt;/code&gt; - get the taxon name for each &lt;code&gt;taxonref&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uri()&lt;/code&gt; - get the reference uri for each &lt;code&gt;taxonref&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rank()&lt;/code&gt; - get the taxonomic rank for each &lt;code&gt;taxonref&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id()&lt;/code&gt; - get the reference uri for each &lt;code&gt;taxonref&lt;/code&gt; object&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Install and load &lt;code&gt;binomen&lt;/code&gt; into the R session. Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;binomen&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or development version from Github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/binomen&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;binomen&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;h4 id=&#34;make-a-taxon&#34;&gt;Make a taxon&lt;/h4&gt;

&lt;p&gt;Make a taxon object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(obj &amp;lt;- make_taxon(genus=&amp;quot;Poa&amp;quot;, epithet=&amp;quot;annua&amp;quot;, authority=&amp;quot;L.&amp;quot;,
  family=&#39;Poaceae&#39;, clazz=&#39;Poales&#39;, kingdom=&#39;Plantae&#39;, variety=&#39;annua&#39;))
#&amp;gt; &amp;lt;taxon&amp;gt;
#&amp;gt;   binomial: Poa annua
#&amp;gt;   grouping: 
#&amp;gt;     kingdom: Plantae
#&amp;gt;     clazz: Poales
#&amp;gt;     family: Poaceae
#&amp;gt;     genus: Poa
#&amp;gt;     species: Poa annua
#&amp;gt;     variety: annua
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Index to various parts of the object&lt;/p&gt;

&lt;p&gt;The binomial&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obj$binomial
#&amp;gt; &amp;lt;binomial&amp;gt;
#&amp;gt;   genus: Poa
#&amp;gt;   epithet: annua
#&amp;gt;   canonical: Poa annua
#&amp;gt;   species: Poa annua L.
#&amp;gt;   authority: L.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The authority&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obj$binomial$authority
#&amp;gt; [1] &amp;quot;L.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The classification&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obj$grouping
#&amp;gt; &amp;lt;grouping&amp;gt;
#&amp;gt;   kingdom: Plantae
#&amp;gt;   clazz: Poales
#&amp;gt;   family: Poaceae
#&amp;gt;   genus: Poa
#&amp;gt;   species: Poa annua
#&amp;gt;   variety: annua
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The family&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obj$grouping$family
#&amp;gt; &amp;lt;taxonref&amp;gt;
#&amp;gt;   rank: family
#&amp;gt;   name: Poaceae
#&amp;gt;   id: none
#&amp;gt;   uri: none
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;subset-taxon-objects&#34;&gt;Subset taxon objects&lt;/h4&gt;

&lt;p&gt;Get one or more ranks via &lt;code&gt;pick()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obj %&amp;gt;% pick(family)
#&amp;gt; &amp;lt;taxon&amp;gt;
#&amp;gt;   binomial: Poa annua
#&amp;gt;   grouping: 
#&amp;gt;     family: Poaceae
obj %&amp;gt;% pick(family, genus)
#&amp;gt; &amp;lt;taxon&amp;gt;
#&amp;gt;   binomial: Poa annua
#&amp;gt;   grouping: 
#&amp;gt;     family: Poaceae
#&amp;gt;     genus: Poa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Drop one or more ranks via &lt;code&gt;pop()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obj %&amp;gt;% pop(family)
#&amp;gt; &amp;lt;taxon&amp;gt;
#&amp;gt;   binomial: Poa annua
#&amp;gt;   grouping: 
#&amp;gt;     kingdom: Plantae
#&amp;gt;     clazz: Poales
#&amp;gt;     genus: Poa
#&amp;gt;     species: Poa annua
#&amp;gt;     variety: annua
obj %&amp;gt;% pop(family, genus)
#&amp;gt; &amp;lt;taxon&amp;gt;
#&amp;gt;   binomial: Poa annua
#&amp;gt;   grouping: 
#&amp;gt;     kingdom: Plantae
#&amp;gt;     clazz: Poales
#&amp;gt;     species: Poa annua
#&amp;gt;     variety: annua
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a range of ranks via &lt;code&gt;span()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obj %&amp;gt;% span(kingdom, family)
#&amp;gt; &amp;lt;taxon&amp;gt;
#&amp;gt;   binomial: Poa annua
#&amp;gt;   grouping: 
#&amp;gt;     kingdom: Plantae
#&amp;gt;     clazz: Poales
#&amp;gt;     family: Poaceae
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extract classification as a &lt;code&gt;data.frame&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gethier(obj)
#&amp;gt;      rank      name
#&amp;gt; 1 kingdom   Plantae
#&amp;gt; 2   clazz    Poales
#&amp;gt; 3  family   Poaceae
#&amp;gt; 4   genus       Poa
#&amp;gt; 5 species Poa annua
#&amp;gt; 6 variety     annua
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;taxonomic-data-frame-s&#34;&gt;Taxonomic data.frame&amp;rsquo;s&lt;/h4&gt;

&lt;p&gt;Make one&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(order = c(&#39;Asterales&#39;,&#39;Asterales&#39;,&#39;Fagales&#39;,&#39;Poales&#39;,&#39;Poales&#39;,&#39;Poales&#39;),
  family = c(&#39;Asteraceae&#39;,&#39;Asteraceae&#39;,&#39;Fagaceae&#39;,&#39;Poaceae&#39;,&#39;Poaceae&#39;,&#39;Poaceae&#39;),
  genus = c(&#39;Helianthus&#39;,&#39;Helianthus&#39;,&#39;Quercus&#39;,&#39;Poa&#39;,&#39;Festuca&#39;,&#39;Holodiscus&#39;),
  stringsAsFactors = FALSE)
(df2 &amp;lt;- taxon_df(df))
#&amp;gt;       order     family      genus
#&amp;gt; 1 Asterales Asteraceae Helianthus
#&amp;gt; 2 Asterales Asteraceae Helianthus
#&amp;gt; 3   Fagales   Fagaceae    Quercus
#&amp;gt; 4    Poales    Poaceae        Poa
#&amp;gt; 5    Poales    Poaceae    Festuca
#&amp;gt; 6    Poales    Poaceae Holodiscus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parse - get rank order via &lt;code&gt;pick()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2 %&amp;gt;% pick(order)
#&amp;gt;       order
#&amp;gt; 1 Asterales
#&amp;gt; 2 Asterales
#&amp;gt; 3   Fagales
#&amp;gt; 4    Poales
#&amp;gt; 5    Poales
#&amp;gt; 6    Poales
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;get ranks order, family, and genus via &lt;code&gt;pick()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2 %&amp;gt;% pick(order, family, genus)
#&amp;gt;       order     family      genus
#&amp;gt; 1 Asterales Asteraceae Helianthus
#&amp;gt; 2 Asterales Asteraceae Helianthus
#&amp;gt; 3   Fagales   Fagaceae    Quercus
#&amp;gt; 4    Poales    Poaceae        Poa
#&amp;gt; 5    Poales    Poaceae    Festuca
#&amp;gt; 6    Poales    Poaceae Holodiscus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;get range of names via &lt;code&gt;span()&lt;/code&gt;, from rank &lt;code&gt;X&lt;/code&gt; to rank &lt;code&gt;Y&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2 %&amp;gt;% span(family, genus)
#&amp;gt;       family      genus
#&amp;gt; 1 Asteraceae Helianthus
#&amp;gt; 2 Asteraceae Helianthus
#&amp;gt; 3   Fagaceae    Quercus
#&amp;gt; 4    Poaceae        Poa
#&amp;gt; 5    Poaceae    Festuca
#&amp;gt; 6    Poaceae Holodiscus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Separate each row into a &lt;code&gt;taxon&lt;/code&gt; class (many &lt;code&gt;taxon&lt;/code&gt; objects are a &lt;code&gt;taxa&lt;/code&gt; class)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;scatter(df2)
#&amp;gt; [[1]]
#&amp;gt; &amp;lt;taxon&amp;gt;
#&amp;gt;   binomial: Helianthus none
#&amp;gt;   grouping: 
#&amp;gt;     order: Asterales
#&amp;gt;     family: Asteraceae
#&amp;gt;     genus: Helianthus
#&amp;gt;     species: Helianthus none
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; &amp;lt;taxon&amp;gt;
#&amp;gt;   binomial: Helianthus none
#&amp;gt;   grouping: 
#&amp;gt;     order: Asterales
#&amp;gt;     family: Asteraceae
#&amp;gt;     genus: Helianthus
#&amp;gt;     species: Helianthus none
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt; &amp;lt;taxon&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can re-assemble a data.frame from the output of &lt;code&gt;scatter()&lt;/code&gt; with &lt;code&gt;assemble()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out &amp;lt;- scatter(df2)
assemble(out)
#&amp;gt;       order     family      genus         species
#&amp;gt; 1 Asterales Asteraceae Helianthus Helianthus none
#&amp;gt; 2 Asterales Asteraceae Helianthus Helianthus none
#&amp;gt; 3   Fagales   Fagaceae    Quercus    Quercus none
#&amp;gt; 4    Poales    Poaceae        Poa        Poa none
#&amp;gt; 5    Poales    Poaceae    Festuca    Festuca none
#&amp;gt; 6    Poales    Poaceae Holodiscus Holodiscus none
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;p&gt;To cite &lt;code&gt;binomen&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scott Chamberlain (2016). binomen: &amp;lsquo;Taxonomic&amp;rsquo; Specification and Parsing Methods. &lt;a href=&#34;https://github.com/ropensci/binomen&#34;&gt;https://github.com/ropensci/binomen&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/binomen/issues?state=open&#34;&gt;our Github repo for rnoaa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>bold tutorial</title>
      <link>https://ropensci.org/tutorials/bold_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/bold_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;code&gt;bold&lt;/code&gt; is an R package to connect to &lt;a href=&#34;http://www.boldsystems.org/&#34;&gt;BOLD Systems&lt;/a&gt; via their API. Functions in &lt;code&gt;bold&lt;/code&gt; let you search for sequence data, specimen data, sequence + specimen data, and download raw trace files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;bold&lt;/code&gt; info&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boldsystems.org/&#34;&gt;BOLD home page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://v4.boldsystems.org/index.php/api_home&#34;&gt;BOLD API docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;You can install the stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;bold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or the development version from Github&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/bold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then load the package into the R sesssion&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;bold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;h4 id=&#34;search-for-taxonomic-names-via-names&#34;&gt;Search for taxonomic names via names&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;bold_tax_name&lt;/code&gt; searches for names with names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_tax_name(name = &#39;Diplura&#39;)
#&amp;gt;    taxid   taxon tax_rank tax_division parentid       parentname
#&amp;gt; 1 603673 Diplura    genus     Protists    53974 Scytosiphonaceae
#&amp;gt; 2 734358 Diplura    class      Animals       20       Arthropoda
#&amp;gt;   specimenrecords taxonrep     representitive_image.image
#&amp;gt; 1               6     &amp;lt;NA&amp;gt;                           &amp;lt;NA&amp;gt;
#&amp;gt; 2             204  Diplura GBARA/GBOL14725+1435775798.jpg
#&amp;gt;   representitive_image.apectratio   input
#&amp;gt; 1                              NA Diplura
#&amp;gt; 2                           2.219 Diplura
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_tax_name(name = c(&#39;Diplura&#39;, &#39;Osmia&#39;))
#&amp;gt;    taxid   taxon tax_rank tax_division parentid       parentname
#&amp;gt; 1 603673 Diplura    genus     Protists    53974 Scytosiphonaceae
#&amp;gt; 2 734358 Diplura    class      Animals       20       Arthropoda
#&amp;gt; 3   4940   Osmia    genus      Animals     4962     Megachilinae
#&amp;gt;   specimenrecords taxonrep     representitive_image.image
#&amp;gt; 1               6     &amp;lt;NA&amp;gt;                           &amp;lt;NA&amp;gt;
#&amp;gt; 2             204  Diplura GBARA/GBOL14725+1435775798.jpg
#&amp;gt; 3            2172    Osmia              BUSA/IMG_3061.jpg
#&amp;gt;   representitive_image.apectratio   input
#&amp;gt; 1                              NA Diplura
#&amp;gt; 2                           2.219 Diplura
#&amp;gt; 3                           1.486   Osmia
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;search-for-taxonomic-names-via-bold-identifiers&#34;&gt;Search for taxonomic names via BOLD identifiers&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;bold_tax_id&lt;/code&gt; searches for names with BOLD identifiers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_tax_id(id = 88899)
#&amp;gt;   input taxid   taxon tax_rank tax_division parentid parentname
#&amp;gt; 1 88899 88899 Momotus    genus      Animals    88898  Momotidae
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_tax_id(id = c(88899, 125295))
#&amp;gt;    input  taxid      taxon tax_rank tax_division parentid  parentname
#&amp;gt; 1  88899  88899    Momotus    genus      Animals    88898   Momotidae
#&amp;gt; 2 125295 125295 Helianthus    genus       Plants   151101 Asteroideae
#&amp;gt;     taxonrep
#&amp;gt; 1       &amp;lt;NA&amp;gt;
#&amp;gt; 2 Helianthus
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;search-for-sequence-data-only&#34;&gt;Search for sequence data only&lt;/h4&gt;

&lt;p&gt;The BOLD sequence API gives back sequence data, with a bit of metadata.&lt;/p&gt;

&lt;p&gt;The default is to get a list back&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_seq(taxon = &#39;Coelioxys&#39;)[1:2]
#&amp;gt; [[1]]
#&amp;gt; [[1]]$id
#&amp;gt; [1] &amp;quot;BBHYL404-10&amp;quot;
#&amp;gt; 
#&amp;gt; [[1]]$name
#&amp;gt; [1] &amp;quot;Coelioxys rufitarsis&amp;quot;
#&amp;gt; 
#&amp;gt; [[1]]$gene
#&amp;gt; [1] &amp;quot;BBHYL404-10&amp;quot;
#&amp;gt; 
#&amp;gt; [[1]]$sequence
#&amp;gt; [1] &amp;quot;TATAATATATATAATTTTTGCAATATGATCAGGTATAATTGGATCATCTTTAAGAATAATTATTCGAATAGAATTAAGAATCCCAGGTTCATGAATTAGAAATGATCAAATTTATAATTCTTTTATTACAGCACATGCATTTTTAATAATTTTTTTTTTAGTTATGCCTTTTCTAATTGGGGGATTTGGTAATTGATTAACACCATTAATACTTGGAGCTCCTGATATAGCTTTCCCCCGAATAAACAATATTAGATTTTGACTACTCCCACCTTCTTTATTACTTTTATTATCAAGAAATTTAATTAATCCAAGACCAGGAACAGGATGAACTGTTTATCCACCATTATCCTCTTATACATATCATCCATCTCCTTCTGTAGATTTAGCAATTTTTTCTTTACATTTATCAGGAATTTCCTCAATTATTGGATCAATAAATTTTATTGTTACAATTTTAATAATAAAAAATTATTCAATAAATTATAATCAAATACCATTATTCCCATGATCAGTTTTAATTACTACAATTTTATTATTACTATCACTTCCAGTATTAGCAGGAGCAATTACAATATTATTATTTGATCGAAATTTAAATTCTTCTTTTTTTGACCCAATAGGAGGAGGAGACCCAATTTTATATCAACATTTATTT\r&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; [[2]]$id
#&amp;gt; [1] &amp;quot;BCT004-06&amp;quot;
#&amp;gt; 
#&amp;gt; [[2]]$name
#&amp;gt; [1] &amp;quot;Coelioxys modesta&amp;quot;
#&amp;gt; 
#&amp;gt; [[2]]$gene
#&amp;gt; [1] &amp;quot;BCT004-06&amp;quot;
#&amp;gt; 
#&amp;gt; [[2]]$sequence
#&amp;gt; [1] &amp;quot;-ATATTATATATAATTTTTGCAATATGATCAGGTATAATTGGATCATCTTTAAGAATAATTATTCGCATAGAATTAAGAATCCCAGGTTCTTGAATTAACAATGATCAAATTTATAATTCTTTTATTACAGCTCATGCCTTTTTAATAATTTTTTTCCTAGTGATACCCTTTTTAATTGGTGGATTTGGTAATTGATTAGTACCCTTAATAATTGGAGCTCCAGATATAGCCTTTCCACGAATAAATAATATTAGATTTTGACTTTTACCCCCTTCTTTATTACTTTTATTATCAAGAAATTTAATTAATCCTAGACCTGGTACCGGATGAACAGTTTACCCACCTTTATCTTTATATAATTTTCATCCTTCTCCTTCAGTTGATTTAGCTATTTTTTCATTACATTTATCTGGAATTTCATCTATTATTGGATCAATAAATTTTATTGTTACTATTTTAATAATAAAAAATTTTTCATTAAATTATAGACAAATACCTTTATTTCCATGATCAGTTATAATTACTACAATCTTATTATTATTATCTTTACCAGTATTAGCAGGAGCAATCACAATATTATTATTTGATCGAAATTTTAATTCTTCATTTTTTGACCCTATAGGAGGAGGAGACCCAATTTTATATCAACACTTATTT\r&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can optionally get back the &lt;code&gt;httr&lt;/code&gt; response object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- bold_seq(taxon = &#39;Coelioxys&#39;, response = TRUE)
res$headers
#&amp;gt; NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can do geographic searches&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_seq(geo = &amp;quot;USA&amp;quot;)
#&amp;gt; [[1]]
#&amp;gt; [[1]]$id
#&amp;gt; [1] &amp;quot;GBAN1777-08&amp;quot;
#&amp;gt; 
#&amp;gt; [[1]]$name
#&amp;gt; [1] &amp;quot;Macrobdella decora&amp;quot;
#&amp;gt; 
#&amp;gt; [[1]]$gene
#&amp;gt; [1] &amp;quot;GBAN1777-08&amp;quot;
#&amp;gt; 
#&amp;gt; [[1]]$sequence
#&amp;gt; [1] &amp;quot;---------------------------------ATTGGAATCTTGTATTTCTTATTAGGTACATGATCTGCTATAGTAGGGACCTCTATA---AGAATAATTATTCGAATTGAATTAGCTCAACCTGGGTCGTTTTTAGGAAAT---GATCAAATTTACAATACTATTGTTACTGCTCATGGATTAATTATAATTTTTTTTATAGTAATACCTATTTTAATTGGAGGGTTTGGTAATTGATTAATTCCGCTAATA---ATTGGTTCTCCTGATATAGCTTTTCCACGTCTTAATAATTTAAGATTTTGATTACTTCCGCCATCTTTAACTATACTTTTTTGTTCATCTATAGTCGAAAATGGAGTAGGTACTGGATGGACTATTTACCCTCCTTTAGCAGATAACATTGCTCATTCTGGACCTTCTGTAGATATA---GCAATTTTTTCACTTCATTTAGCTGGTGCTTCTTCTATTTTAGGTTCATTAAATTTTATTACTACTGTAGTTAATATACGATGACCAGGGATATCTATAGAGCGAATTCCTTTATTTATTTGATCCGTAATTATTACTACTGTATTGCTATTATTATCTTTACCAGTATTAGCAGCT---GCTATTTCAATATTATTAACAGATCGTAACTTAAATACTAGATTTTTTGACCCAATAGGAGGAGGGGATCCTATTTTATTCCAACATTTATTTTGATTTTTTGGCCACCCTGAAGTTTATATTTTAATTTTACCAGGATTTGGAGCTATTTCTCATGTAGTAAGTCATAACTCT---AAAAAATTAGAACCGTTTGGATCATTAGGGATATTATATGCAATAATTGGAATTGCAATTTTAGGTTTTATTGTTTGAGCACATCATATATTTACAGTAGGTCTTGATGTAGATACACGAGCTTATTTTACAGCAGCTACAATAGTTATTGCTGTTCCTACAGGAATTAAAGTATTTAGGTGATTG---GCAACT\r&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; [[2]]$id
#&amp;gt; [1] &amp;quot;GBAN1780-08&amp;quot;
#&amp;gt; 
#&amp;gt; [[2]]$name
#&amp;gt; [1] &amp;quot;Haemopis terrestris&amp;quot;
#&amp;gt; 
#&amp;gt; [[2]]$gene
#&amp;gt; [1] &amp;quot;GBAN1780-08&amp;quot;
#&amp;gt; 
#&amp;gt; [[2]]$sequence
#&amp;gt; [1] &amp;quot;---------------------------------ATTGGAACWTTWTATTTTATTTTNGGNGCTTGATCTGCTATATTNGGGATCTCAATA---AGGAATATTATTCGAATTGAGCCATCTCAACCTGGGAGATTATTAGGAAAT---GATCAATTATATAATTCATTAGTAACAGCTCATGGATTAATTATAATTTTCTTTATGGTTATGCCTATTTTGATTGGTGGGTTTGGTAATTGATTACTACCTTTAATA---ATTGGAGCCCCTGATATAGCTTTTCCTCGATTAAATAATTTAAGTTTTTGATTATTACCACCTTCATTAATTATATTGTTAAGATCCTCTATTATTGAAAGAGGGGTAGGTACAGGTTGAACCTTATATCCTCCTTTAGCAGATAGATTATTTCATTCAGGTCCATCGGTAGATATA---GCTATTTTTTCATTACATATAGCTGGAGCATCATCTATTTTAGGCTCATTAAACTTTATTTCTACAATTATTAATATACGAATTAAAGGTATAAGATCTGATCGAGTACCTTTATTTGTATGATCAGTTGTTATTACAACAGTTCTGTTATTATTGTCTTTACCTGTTTTAGCTGCA---GCTATTACTATATTATTAACAGATCGTAATTTAAATACTACTTTTTTTGATCCTATAGGAGGTGGAGATCCAGTATTGTTTCAACACTTATTTTGATTTTTTGGTCATCCAGAAGTATATATTTTGATTTTACCAGGATTTGGAGCAATTTCTCATATTATTACAAATAATTCT---AAAAAATTGGAACCTTTTGGATCTCTTGGTATAATTTATGCTATAATTGGAATTGCAGTTTTAGGGTTTATTGTATGAGCCCATCATATATTTACTGTAGGATTAGATGTTGATACTCGAGCTTATTTTACAGCAGCTACTATAGTTATTGCTGTTCCTACTGGTATTAAAGTTTTTAGGTGATTA---GCAACA\r&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt; [[3]]$id
#&amp;gt; [1] &amp;quot;GBNM0293-06&amp;quot;
#&amp;gt; 
#&amp;gt; [[3]]$name
#&amp;gt; [1] &amp;quot;Steinernema carpocapsae&amp;quot;
#&amp;gt; 
#&amp;gt; [[3]]$gene
#&amp;gt; [1] &amp;quot;GBNM0293-06&amp;quot;
#&amp;gt; 
#&amp;gt; [[3]]$sequence
#&amp;gt; [1] &amp;quot;---------------------------------------------------------------------------------ACAAGATTATCTCTTATTATTCGTTTAGAGTTGGCTCAACCTGGTCTTCTTTTGGGTAAT---GGTCAATTATATAATTCTATTATTACTGCTCATGCTATTCTTATAATTTTTTTCATAGTTATACCTAGAATAATTGGTGGTTTTGGTAATTGAATATTACCTTTAATATTGGGGGCTCCTGATATAAGTTTTCCACGTTTGAATAATTTAAGTTTTTGATTGCTACCAACTGCTATATTTTTGATTTTAGATTCTTGTTTTGTTGACACTGGTTGTGGTACTAGTTGAACTGTTTATCCTCCTTTGAGG---ACTTTAGGTCACCCTGGYAGAAGTGTAGATTTAGCTATTTTTAGTCTTCATTGTGCAGGAATTAGCTCAATTTTAGGGGCTATTAATTTTATATGTACTACAAAAAATCTTCGTAGTAGTTCTATTTCTTTGGAACATATAAGACTTTTTGTTTGGGCTGTTTTTGTTACTGTTTTTTTATTAGTTTTATCTTTACCTGTTTTAGCTGGTGCTATTACTATGCTTTTAACAGACCGTAATTTAAATACTTCTTTTTTT------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[4]]
#&amp;gt; [[4]]$id
#&amp;gt; [1] &amp;quot;NEONV108-11&amp;quot;
#&amp;gt; 
#&amp;gt; [[4]]$name
#&amp;gt; [1] &amp;quot;Aedes thelcter&amp;quot;
#&amp;gt; 
#&amp;gt; [[4]]$gene
#&amp;gt; [1] &amp;quot;NEONV108-11&amp;quot;
#&amp;gt; 
#&amp;gt; [[4]]$sequence
#&amp;gt; [1] &amp;quot;AACTTTATACTTCATCTTCGGAGTTTGATCAGGAATAGTTGGTACATCATTAAGAATTTTAATTCGTGCTGAATTAAGTCAACCAGGTATATTTATTGGAAATGACCAAATTTATAATGTAATTGTTACAGCTCATGCTTTTATTATAATTTTCTTTATAGTTATACCTATTATAATTGGAGGATTTGGAAATTGACTAGTTCCTCTAATATTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAATAATATAAGTTTTTGAATACTACCTCCCTCATTAACTCTTCTACTTTCAAGTAGTATAGTAGAAAATGGATCAGGAACAGGATGAACAGTTTATCCACCTCTTTCATCTGGAACTGCTCATGCAGGAGCCTCTGTTGATTTAACTATTTTTTCTCTTCATTTAGCCGGAGTTTCATCAATTTTAGGGGCTGTAAATTTTATTACTACTGTAATTAATATACGATCTGCAGGAATTACTCTTGATCGACTACCTTTATTCGTTTGATCTGTAGTAATTACAGCTGTTTTATTACTTCTTTCACTTCCTGTATTAGCTGGAGCTATTACAATACTATTAACTGATCGAAATTTAAATACATCTTTCTTTGATCCAATTGGAGGAGGAGACCCAATTTTATACCAACATTTATTT\r&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[5]]
#&amp;gt; [[5]]$id
#&amp;gt; [1] &amp;quot;NEONV109-11&amp;quot;
#&amp;gt; 
#&amp;gt; [[5]]$name
#&amp;gt; [1] &amp;quot;Aedes thelcter&amp;quot;
#&amp;gt; 
#&amp;gt; [[5]]$gene
#&amp;gt; [1] &amp;quot;NEONV109-11&amp;quot;
#&amp;gt; 
#&amp;gt; [[5]]$sequence
#&amp;gt; [1] &amp;quot;AACTTTATACTTCATCTTCGGAGTTTGATCAGGAATAGTTGGTACATCATTAAGAATTTTAATTCGTGCTGAATTAAGTCAACCAGGTATATTTATTGGAAATGACCAAATTTATAATGTAATTGTTACAGCTCATGCTTTTATTATAATTTTCTTTATAGTTATACCTATTATAATTGGAGGATTTGGAAATTGACTAGTTCCTCTAATATTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAATAATATAAGTTTTTGAATACTACCTCCCTCATTAACTCTTCTACTTTCAAGTAGTATAGTAGAAAATGGGTCAGGAACAGGATGAACAGTTTATCCACCTCTTTCATCTGGAACTGCTCATGCAGGAGCCTCTGTTGATTTAACTATTTTTTCTCTTCATTTAGCCGGAGTTTCATCAATTTTAGGGGCTGTAAATTTTATTACTACTGTAATTAATATACGATCTGCAGGAATTACTCTTGATCGACTACCTTTATTCGTTTGATCTGTAGTAATTACAGCTGTTTTATTACTTCTTTCACTTCCTGTATTAGCTGGAGCTATTACAATACTATTAACTGATCGAAATTTAAATACATCTTTCTTTGACCCAATTGGAGGGGGAGACCCAATTTTATACCAACATTTATTT\r&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can search by researcher name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_seq(researchers = &#39;Thibaud Decaens&#39;)[[1]]
#&amp;gt; $id
#&amp;gt; [1] &amp;quot;ECHUB386-11&amp;quot;
#&amp;gt; 
#&amp;gt; $name
#&amp;gt; [1] &amp;quot;Haplotaxida&amp;quot;
#&amp;gt; 
#&amp;gt; $gene
#&amp;gt; [1] &amp;quot;ECHUB386-11&amp;quot;
#&amp;gt; 
#&amp;gt; $sequence
#&amp;gt; [1] &amp;quot;AACTCTATACTTTATTTTAGGGGTATGAGCAGGAATAATTGGAGCGGGAATAAGACTCCTAATCCGAATTGAACTAAGACAGCCTGGGGCATTCCTAGGAAGAGATCAATTATATAACACCATTGTTACTGCACATGCATTCCTAATAATCTTCTTCTTGGTAATACCAGTATTTATTGGAGGGTTCGGAAACTGACTCCTACCTCTAATACTGGGTGCGCCCGACATAGCATTTCCACGACTAAACAACATAAGATTTTGACTTCTACCACCATCACTAATTCTTTTAATCTCATCTGCCGCCGTAGAAAAAGGAGCGGGGACAGGATGAACTGTCTATCCCCCGTTAGCAAGAAACATAGCCCACGCAGGTCCATCAGTAGATCTGGCAATTTTCTCACTACATTTAGCCGGAGCCTCATCAATTCTAGGGGCAATTAATTTTATCACCACAGTGGTAAATATACGATGAAGAGGTTTGAAACTGGAACGAGTATCACTTTTCGTGTGAGCGGTAATAATCACAGTAGTATTACTACTACTCTCACTTCCAGTTCTTGCTGGTGCCATTACCATACTATTAACTGACCGAAACCTTAATACATCATTCTTCGACCCCGCAGGAGGCGGAGATCCGATCCTTTATCAACACCTATTC\r&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;by taxon IDs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_seq(ids = c(&#39;ACRJP618-11&#39;, &#39;ACRJP619-11&#39;))
#&amp;gt; [[1]]
#&amp;gt; [[1]]$id
#&amp;gt; [1] &amp;quot;ACRJP618-11&amp;quot;
#&amp;gt; 
#&amp;gt; [[1]]$name
#&amp;gt; [1] &amp;quot;Lepidoptera&amp;quot;
#&amp;gt; 
#&amp;gt; [[1]]$gene
#&amp;gt; [1] &amp;quot;ACRJP618-11&amp;quot;
#&amp;gt; 
#&amp;gt; [[1]]$sequence
#&amp;gt; [1] &amp;quot;------------------------TTGAGCAGGCATAGTAGGAACTTCTCTTAGTCTTATTATTCGAACAGAATTAGGAAATCCAGGATTTTTAATTGGAGATGATCAAATCTACAATACTATTGTTACGGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGGAGGATTTGGTAATTGATTAGTTCCCCTTATACTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAACAATATAAGTTTTTGGCTTCTTCCCCCTTCACTATTACTTTTAATTTCCAGAAGAATTGTTGAAAATGGAGCTGGAACTGGATGAACAGTTTATCCCCCACTGTCATCTAATATTGCCCATAGAGGTACATCAGTAGATTTAGCTATTTTTTCTTTACATTTAGCAGGTATTTCCTCTATTTTAGGAGCGATTAATTTTATTACTACAATTATTAATATACGAATTAACAGTATAAATTATGATCAAATACCACTATTTGTGTGATCAGTAGGAATTACTGCTTTACTCTTATTACTTTCTCTTCCAGTATTAGCAGGTGCTATCACTATATTATTAACGGATCGAAATTTAAATACATCATTTTTTGATCCTGCAGGAGGAGGAGATCCAATTTTATATCAACATTTATTT\r&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; [[2]]$id
#&amp;gt; [1] &amp;quot;ACRJP619-11&amp;quot;
#&amp;gt; 
#&amp;gt; [[2]]$name
#&amp;gt; [1] &amp;quot;Lepidoptera&amp;quot;
#&amp;gt; 
#&amp;gt; [[2]]$gene
#&amp;gt; [1] &amp;quot;ACRJP619-11&amp;quot;
#&amp;gt; 
#&amp;gt; [[2]]$sequence
#&amp;gt; [1] &amp;quot;AACTTTATATTTTATTTTTGGTATTTGAGCAGGCATAGTAGGAACTTCTCTTAGTCTTATTATTCGAACAGAATTAGGAAATCCAGGATTTTTAATTGGAGATGATCAAATCTACAATACTATTGTTACGGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGGAGGATTTGGTAATTGATTAGTTCCCCTTATACTAGGAGCCCCAGATATAGCTTTCCCTCGAATAAACAATATAAGTTTTTGGCTTCTTCCCCCTTCACTATTACTTTTAATTTCCAGAAGAATTGTTGAAAATGGAGCTGGAACTGGATGAACAGTTTATCCCCCACTGTCATCTAATATTGCCCATAGAGGTACATCAGTAGATTTAGCTATTTTTTCTTTACATTTAGCAGGTATTTCCTCTATTTTAGGAGCGATTAATTTTATTACTACAATTATTAATATACGAATTAACAGTATAAATTATGATCAAATACCACTATTTGTGTGATCAGTAGGAATTACTGCTTTACTCTTATTACTTTCTCTTCCAGTATTAGCAGGTGCTATCACTATATTATTAACGGATCGAAATTTAAATACATCATTTTTTGATCCTGCAGGAGGAGGAGATCCAATTTTATATCAACATTTATTT\r&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;by container (containers include project codes and dataset codes)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_seq(container = &#39;ACRJP&#39;)[[1]]
#&amp;gt; $id
#&amp;gt; [1] &amp;quot;ACRJP003-09&amp;quot;
#&amp;gt; 
#&amp;gt; $name
#&amp;gt; [1] &amp;quot;Lepidoptera&amp;quot;
#&amp;gt; 
#&amp;gt; $gene
#&amp;gt; [1] &amp;quot;ACRJP003-09&amp;quot;
#&amp;gt; 
#&amp;gt; $sequence
#&amp;gt; [1] &amp;quot;AACATTATATTTTATTTTTGGGATCTGATCTGGAATAGTAGGGACATCTTTAAGTATACTAATTCGAATAGAACTAGGAAATCCTGGATGTTTAATTGGGGATGATCAAATTTATAATACTATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCCATTATAATTGGAGGTTTTGGCAATTGACTTGTACCATTAATATTAGGAGCCCCTGATATAGCATTTCCCCGAATAAATAATATAAGATTTTGACTTCTTCCCCCCTCATTAATTTTATTAATTTCAAGAAGAATTGTTGAAAATGGAGCAGGAACAGGATGAACAGTCTATCCTCCATTATCTTCTAATATTGCGCATAGAGGATCCTCTGTTGATTTAGCTATTTTCTCACTTCATTTAGCAGGAATTTCTTCTATTTTAGGAGCAATTAATTTTATTACAACTATTATTAATATACGAATAAATAATTTACTTTTTGACCAAATACCTCTATTTGTTTGAGCAGTAGGTATTACAGCTGTTCTTCTTTTATTATCATTACCAGTATTAGCAGGAGCAATTACCATACTATTAACAGATCGTAATTTAAATACTTCTTTCTTTGATCCTGCTGGAGGAGGAGATCCAATTTTATACCAACATTTATTT\r&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;by bin (a bin is a &lt;em&gt;Barcode Index Number&lt;/em&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_seq(bin = &#39;BOLD:AAA5125&#39;)[[1]]
#&amp;gt; $id
#&amp;gt; [1] &amp;quot;ASARD6776-12&amp;quot;
#&amp;gt; 
#&amp;gt; $name
#&amp;gt; [1] &amp;quot;Lepidoptera&amp;quot;
#&amp;gt; 
#&amp;gt; $gene
#&amp;gt; [1] &amp;quot;ASARD6776-12&amp;quot;
#&amp;gt; 
#&amp;gt; $sequence
#&amp;gt; [1] &amp;quot;AACTTTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGAACTTCTTTAAGATTACTAATTCGAGCAGAATTAGGTACCCCCGGATCTTTAATTGGAGATGACCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGGAGGATTTGGAAATTGATTAGTACCCCTAATACTAGGAGCTCCTGATATAGCTTTCCCCCGAATAAATAATATAAGATTTTGACTATTACCCCCATCTTTAACCCTTTTAATTTCTAGAAGAATTGTCGAAAATGGAGCTGGAACTGGATGAACAGTTTATCCCCCCCTTTCATCTAATATTGCTCATGGAGGCTCTTCTGTTGATTTAGCTATTTTTTCCCTTCATCTAGCTGGAATCTCATCAATTTTAGGAGCTATTAATTTTATCACAACAATCATTAATATACGACTAAATAATATAATATTTGACCAAATACCTTTATTTGTATGAGCTGTTGGTATTACAGCATTTCTTTTATTGTTATCTTTACCTGTACTAGCTGGAGCTATTACTATACTTTTAACAGATCGAAACTTAAATACATCATTTTTTGACCCAGCAGGAGGAGGAGATCCTATTCTCTATCAACATTTATTT\r&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there are more ways to query, check out the docs for &lt;code&gt;?bold_seq&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;search-for-specimen-data-only&#34;&gt;Search for specimen data only&lt;/h4&gt;

&lt;p&gt;The BOLD specimen API doesn&amp;rsquo;t give back sequences, only specimen data. By default you download &lt;code&gt;tsv&lt;/code&gt; format data, which is given back to you as a &lt;code&gt;data.frame&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- bold_specimens(taxon = &#39;Osmia&#39;)
head(res[,1:8])
#&amp;gt;      processid         sampleid recordID       catalognum         fieldnum
#&amp;gt; 1  ASGCB255-13   BIOUG07489-F04  3955532                    BIOUG07489-F04
#&amp;gt; 2 BBHYA3298-12   BIOUG02688-A06  2711807   BIOUG02688-A06  L#11BIOBUS-2558
#&amp;gt; 3  BBHYL310-10     10BBCHY-3264  1769753     10BBCHY-3264   L#PC2010KT-025
#&amp;gt; 4  BBHYL365-10     10BBCHY-3319  1769808     10BBCHY-3319   L#PC2010YO-150
#&amp;gt; 5  BCHYM412-13 BC ZSM HYM 18272  3896353 BC ZSM HYM 18272 BC ZSM HYM 18272
#&amp;gt; 6    BCT023-06       06-BCT-023   240799                        06-BCT-023
#&amp;gt;                                      institution_storing collection_code
#&amp;gt; 1                      Biodiversity Institute of Ontario              NA
#&amp;gt; 2 University of Guelph, Centre for Biodiversity Genomics              NA
#&amp;gt; 3 University of Guelph, Centre for Biodiversity Genomics              NA
#&amp;gt; 4 University of Guelph, Centre for Biodiversity Genomics              NA
#&amp;gt; 5              SNSB, Zoologische Staatssammlung Muenchen              NA
#&amp;gt; 6 University of Guelph, Centre for Biodiversity Genomics              NA
#&amp;gt;        bin_uri
#&amp;gt; 1 BOLD:ABZ2181
#&amp;gt; 2 BOLD:ACF5858
#&amp;gt; 3 BOLD:AAC3295
#&amp;gt; 4 BOLD:AAC8510
#&amp;gt; 5 BOLD:AAP2416
#&amp;gt; 6 BOLD:AAB1785
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can optionally get back the data in &lt;code&gt;XML&lt;/code&gt; format&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_specimens(taxon = &#39;Osmia&#39;, format = &#39;xml&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;bold_records  xsi:noNamespaceSchemaLocation=&amp;quot;http://www.boldsystems.org/schemas/BOLDPublic_record.xsd&amp;quot;  xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
  &amp;lt;record&amp;gt;
    &amp;lt;record_id&amp;gt;1470124&amp;lt;/record_id&amp;gt;
    &amp;lt;processid&amp;gt;BOM1525-10&amp;lt;/processid&amp;gt;
    &amp;lt;bin_uri&amp;gt;BOLD:AAN3337&amp;lt;/bin_uri&amp;gt;
    &amp;lt;specimen_identifiers&amp;gt;
      &amp;lt;sampleid&amp;gt;DHB 1011&amp;lt;/sampleid&amp;gt;
      &amp;lt;catalognum&amp;gt;DHB 1011&amp;lt;/catalognum&amp;gt;
      &amp;lt;fieldnum&amp;gt;DHB1011&amp;lt;/fieldnum&amp;gt;
      &amp;lt;institution_storing&amp;gt;Marjorie Barrick Museum&amp;lt;/institution_storing&amp;gt;
    &amp;lt;/specimen_identifiers&amp;gt;
    &amp;lt;taxonomy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can choose to get the &lt;code&gt;httr&lt;/code&gt; response object back if you&amp;rsquo;d rather work with the raw data returned from the BOLD API.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- bold_specimens(taxon = &#39;Osmia&#39;, format = &#39;xml&#39;, response = TRUE)
res$url
#&amp;gt; [1] &amp;quot;http://v4.boldsystems.org/index.php/API_Public/specimen?taxon=Osmia&amp;amp;format=xml&amp;quot;
res$status_code
#&amp;gt; [1] 200
res$headers
#&amp;gt; NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;search-for-specimen-plus-sequence-data&#34;&gt;Search for specimen plus sequence data&lt;/h4&gt;

&lt;p&gt;The specimen/sequence combined API gives back specimen and sequence data. Like the specimen API, this one gives by default &lt;code&gt;tsv&lt;/code&gt; format data, which is given back to you as a &lt;code&gt;data.frame&lt;/code&gt;. Here, we&amp;rsquo;re setting &lt;code&gt;sepfasta=TRUE&lt;/code&gt; so that the sequence data is given back as a list, and taken out of the &lt;code&gt;data.frame&lt;/code&gt; returned so the &lt;code&gt;data.frame&lt;/code&gt; is more manageable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- bold_seqspec(taxon = &#39;Osmia&#39;, sepfasta = TRUE)
res$fasta[1:2]
#&amp;gt; $`ASGCB255-13`
#&amp;gt; [1] &amp;quot;-------------------------------GGAATAATTGGTTCTGCTATAAGTATTATTATTCGAATAGAATTAAGAATTCCTGGATCATTCATTTCTAATGATCAAACTTATAATTCTTTAGTAACAGCTCATGCTTTTTTAATAATTTTTTTTCTTGTAATACCATTTTTAATTGGTGGATTTGGAAATTGATTAATTCCATTAATATTAGGAATCCCAGATATAGCATTTCCTCGAATAAATAATATTAGATTTTGACTTTTACCCCCATCCTTAATAATTTTACTTTTAAGAAATTTCTTAAATCCAAGTCCAGGAACAGGTTGAACTGTATATCCCCCCCTTTCTTCTTATTTATTTCATTCTTCCCCTTCTGTTGATTTAGCTATTTTTTCTCTTCATATTTCTGGTTTATCTTCCATCATAGGTTCTTTAAATTTTATTGTTACAATTATTATAATAAAAAATATTTCATTAAAACATATTCAATTACCTTTATTTCCTTGATCCGTTTTTATTACAACTATTTTACTATTATTTTCTTTACCTGTTCTAGCAGGAGCTATTACTATATTATTATTTGATCGAAACTTTAATACTTCATTTTTTGATCCAACTGGAGGAGGAGATCCAATTTTATATCAACATTTATTC&amp;quot;
#&amp;gt; 
#&amp;gt; $`BBHYA3298-12`
#&amp;gt; [1] &amp;quot;AATTTTATACATAATTTTTGCTATATGATCAGGAATAATTGGTTCAGCAATAAGTATTATTATTCGTATAGAACTAAGTATTCCTGGTTCATGAATTTCAAATGATCAAACCTATAACTCTTTAGTAACCGCACATGCTTTTTTAATAATTTTTTTTTTAGTAATACCATTTTTAATTGGAGGATTTGGAAATTGATTAGTTCCTTTAATATTAGGAATTCCGGACATAGCTTTTCCACGAATAAATAATATTAGATTTTGACTTTTACCCCCTTCCCTAATAATATTACTTTTAAGAAATTTTCTTAATCCAAGACCTGGAACAGGATGAACTGTATATCCTCCTCTTTCTTCACATTTATTTCATTCTTCTCCTTCAGTTGATATAGCTATTTTTTCTTTACATATTTCTGGTTTATCTTCAATTATAGGATCATTAAATTTTATTGTTACTATTATTATAATAAAAAATATTTCTTTAAAACATATTCAATTACCTTTATTTCCATGATCTGTTTTTATTACTACTATTTTATTACTTTTTTCTTTACCTGTTTTAGCAGGTGCAATTACTATATTATTATTTGATCGAAATTTTAATACTTCATTTTTTGATCCAACAGGAGGAGGAGATCCTATTTTATATCAACATTTATTT&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can index to a specific sequence like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res$fasta[&#39;GBAH0293-06&#39;]
#&amp;gt; $`GBAH0293-06`
#&amp;gt; [1] &amp;quot;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------TTAATGTTAGGGATTCCAGATATAGCTTTTCCACGAATAAATAATATTAGATTTTGACTGTTACCTCCATCTTTAATATTATTACTTTTAAGAAATTTTTTAAATCCAAGTCCTGGAACAGGATGAACAGTTTATCCTCCTTTATCATCAAATTTATTTCATTCTTCTCCTTCAGTTGATTTAGCAATTTTTTCTTTACATATTTCAGGTTTATCTTCTATTATAGGTTCATTAAATTTTATTGTTACAATTATTATAATAAAAAATATTTCTTTAAAATATATTCAATTACCTTTATTTTCTTGATCTGTATTTATTACTACTATTCTTTTATTATTTTCTTTACCTGTATTAGCTGGAGCTATTACTATATTATTATTTGATCGAAATTTTAATACATCTTTTTTTGATCCAACAGGAGGGGGAGATCCAATTCTTTATCAACATTTATTTTGATTTTTTGGTCATCCTGAAGTTTATATTTTAATTTTACCTGGATTTGGATTAATTTCTCAAATTATTTCTAATGAAAGAGGAAAAAAAGAAACTTTTGGAAATATTGGTATAATTTATGCTATATTAAGAATTGGACTTTTAGGTTTTATTGTT---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;get-trace-files&#34;&gt;Get trace files&lt;/h4&gt;

&lt;p&gt;This function downloads files to your machine - it does not load them into your R session - but prints out where the files are for your information.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bold_trace(taxon=&#39;Osmia&#39;, quiet=TRUE)
#&amp;gt; Downloading: 51 MB
#&amp;gt; &amp;lt;bold trace files&amp;gt;
#&amp;gt;
#&amp;gt; .../bold/bold_trace_files/BBHYL361-10[LepF1,LepR1]_F.ab1
#&amp;gt; .../bold/bold_trace_files/BBHYL361-10[LepF1,LepR1]_R.ab1
#&amp;gt; .../bold/bold_trace_files/BBHYL363-10[LepF1,LepR1]_F.ab1
#&amp;gt; .../bold/bold_trace_files/BBHYL363-10[LepF1,LepR1]_R.ab1
#&amp;gt; .../bold/bold_trace_files/BBHYL365-10[LepF1,LepR1]_F.ab1
#&amp;gt; .../bold/bold_trace_files/BBHYL365-10[LepF1,LepR1]_R.ab1
#&amp;gt; .../bold/bold_trace_files/FBAPB666-09[LepF1,LepR1]_F.ab1
#&amp;gt; .../bold/bold_trace_files/FBAPB666-09[LepF1,LepR1]_R.ab1
#&amp;gt; .../bold/bold_trace_files/FBAPB667-09[LepF1,LepR1]_R.ab1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;p&gt;To cite &lt;code&gt;bold&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scott Chamberlain (2017). bold: Interface to Bold Systems API. R package version 0.5.0. &lt;a href=&#34;https://github.com/ropensci/bold&#34;&gt;https://github.com/ropensci/bold&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/bold/issues?state=open&#34;&gt;our GitHub repo for bold&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>brranching tutorial</title>
      <link>https://ropensci.org/tutorials/brranching_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/brranching_tutorial/</guid>
      <description>
        
        

&lt;p&gt;R client to fetch phylogenies from many places. Right now we only fetch phylogenies from &lt;a href=&#34;http://phylodiversity.net/phylomatic/&#34;&gt;Phylomatic&lt;/a&gt;, but we&amp;rsquo;d like to add more sources down the road.&lt;/p&gt;

&lt;p&gt;&lt;section id=&#34;installation&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Install and load &lt;code&gt;brranching&lt;/code&gt; into the R session. Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;brranching&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or development version from Github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/brranching&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;brranching&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;section id=&#34;usage&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;phylomatic&#34;&gt;Phylomatic&lt;/h3&gt;

&lt;h4 id=&#34;use-the-web-service&#34;&gt;Use the web service&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;taxa &amp;lt;- c(&amp;quot;Poa annua&amp;quot;, &amp;quot;Phlox diffusa&amp;quot;, &amp;quot;Helianthus annuus&amp;quot;)
tree &amp;lt;- phylomatic(taxa = taxa, get = &#39;POST&#39;)
plot(tree, no.margin = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/brranching/unnamed-chunk-4-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can pass in up to about 5000 names. We can use &lt;code&gt;taxize&lt;/code&gt; to get a random set of plant species names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;taxize&amp;quot;)
spp &amp;lt;- names_list(&amp;quot;species&amp;quot;, 200)
out &amp;lt;- phylomatic(taxa = spp, get = &amp;quot;POST&amp;quot;)
plot(out, show.tip.label = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/brranching/unnamed-chunk-5-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;use-phylomatic-locally&#34;&gt;Use Phylomatic locally&lt;/h4&gt;

&lt;p&gt;Phylomatic is written in &lt;code&gt;Awk&lt;/code&gt;, and the code can be downloaded to run locally on your own machine.
This approach is for the more adventurous user. The benefit of using Phylomatic locally is
that you can run larger set of names through - when using the web service it has a maximum number
of taxa it will take in as the maintainer does not want any one person taking up a large
amount of server capacity.&lt;/p&gt;

&lt;p&gt;First, download the code by doing &lt;code&gt;git clone https://github.com/camwebb/phylomatic-ws&lt;/code&gt;, which
will result in a folder &lt;code&gt;phylomatic-ws&lt;/code&gt; (or download a zip file, and uncompress it). Then
give the path to that folder in the &lt;code&gt;path&lt;/code&gt; parameter in the &lt;code&gt;phylomatic_local()&lt;/code&gt; function as
show below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;taxa &amp;lt;- c(&amp;quot;Poa annua&amp;quot;, &amp;quot;Phlox diffusa&amp;quot;, &amp;quot;Helianthus annuus&amp;quot;)
(tree &amp;lt;- phylomatic_local(taxa, path = &amp;quot;~/github/play/phylomatic-ws&amp;quot;))
#&amp;gt;
#&amp;gt; Phylogenetic tree with 3 tips and 2 internal nodes.
#&amp;gt;
#&amp;gt; Tip labels:
#&amp;gt; [1] &amp;quot;poa_annua&amp;quot;         &amp;quot;phlox_diffusa&amp;quot;     &amp;quot;helianthus_annuus&amp;quot;
#&amp;gt; Node labels:
#&amp;gt; [1] &amp;quot;poales_to_asterales&amp;quot;   &amp;quot;ericales_to_asterales&amp;quot;
#&amp;gt;
#&amp;gt; Rooted; no branch lengths.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how the path &lt;code&gt;~/github/play/phylomatic-ws&lt;/code&gt; is specific to a computer - Change it to for
your computer.&lt;/p&gt;

&lt;p&gt;Then we can plot just as above using the &lt;code&gt;phylomatic()&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(tree, no.margin = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/brranching/unnamed-chunk-7-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;citing&#34;&gt;Citing&lt;/h2&gt;

&lt;p&gt;To cite &lt;code&gt;brranching&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scott Chamberlain (2016). brranching: Fetch &amp;lsquo;Phylogenies&amp;rsquo; from Many Sources. R package version 0.2.0. &lt;a href=&#34;https://github.com/ropensci/brranching&#34;&gt;https://github.com/ropensci/brranching&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;section id=&#34;license_bugs&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/brranching/issues?state=open&#34;&gt;our Github repo for rnoaa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>ckanr tutorial</title>
      <link>https://ropensci.org/tutorials/ckanr_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/ckanr_tutorial/</guid>
      <description>
        
        

&lt;p&gt;ckanr is a general purpose R client for CKAN, the open source data portal platform
from the Open Knowledge Foundation.&lt;/p&gt;

&lt;p&gt;It is meant to be as general as possible, allowing you to work with any CKAN instance.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Install and load &lt;code&gt;ckanr&lt;/code&gt; into the R session. Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ckanr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or development version from Github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/ckanr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;ckanr&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Note: the default base CKAN URL is set to &lt;a href=&#34;http://data.techno-science.ca/&#34;&gt;http://data.techno-science.ca/&lt;/a&gt;. You can change this using &lt;code&gt;ckanr_setup()&lt;/code&gt;, or change the URL using the &lt;code&gt;url&lt;/code&gt;
parameter in each function call.&lt;/p&gt;

&lt;p&gt;To set one or both, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# restores default CKAN url to http://data.techno-science.ca/
ckanr_setup()
# Just set url
ckanr_setup(url = &amp;quot;http://data.techno-science.ca/&amp;quot;)
# set url and key
ckanr_setup(url = &amp;quot;http://data.techno-science.ca/&amp;quot;, key = &amp;quot;my-ckan-api-key&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;changes&#34;&gt;Changes&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;changes(limit = 2, as = &amp;quot;table&amp;quot;)[, 1:4]
#&amp;gt;                                user_id                  timestamp
#&amp;gt; 1 27778230-2e90-4818-9f00-bbf778c8fa09 2016-06-14T21:31:28.306231
#&amp;gt; 2 27778230-2e90-4818-9f00-bbf778c8fa09 2016-06-14T21:30:26.594125
#&amp;gt;                              object_id
#&amp;gt; 1 99f457c9-ea24-48a1-87be-b52385825b6a
#&amp;gt; 2 99f457c9-ea24-48a1-87be-b52385825b6a
#&amp;gt;                            revision_id
#&amp;gt; 1 e2d9463d-e97c-48f5-a816-7fe26ee60dcd
#&amp;gt; 2 9d846213-1389-4dab-bfe5-77dd3256995a
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;list-datasets&#34;&gt;List datasets&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;package_list(as = &amp;quot;table&amp;quot;)
#&amp;gt;  [1] &amp;quot;artifact-data-agriculture&amp;quot;                                  
#&amp;gt;  [2] &amp;quot;artifact-data-aviation&amp;quot;                                     
#&amp;gt;  [3] &amp;quot;artifact-data-bookbinding&amp;quot;                                  
#&amp;gt;  [4] &amp;quot;artifact-data-chemistry&amp;quot;                                    
#&amp;gt;  [5] &amp;quot;artifact-data-communications&amp;quot;                               
#&amp;gt;  [6] &amp;quot;artifact-data-computing-technology&amp;quot;                         
#&amp;gt;  [7] &amp;quot;artifact-data-domestic-technology&amp;quot;                          
#&amp;gt;  [8] &amp;quot;artifact-data-energy-electric&amp;quot;                              
#&amp;gt;  [9] &amp;quot;artifact-data-exploration-and-survey&amp;quot;                       
#&amp;gt; [10] &amp;quot;artifact-data-fisheries&amp;quot;                                    
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;list-tags&#34;&gt;List tags&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tag_list(&#39;aviation&#39;, as = &#39;table&#39;)
#&amp;gt;   vocabulary_id                     display_name
#&amp;gt; 1            NA                         Aviation
#&amp;gt; 2            NA Canada Aviation and Space Museum
#&amp;gt;                                     id                             name
#&amp;gt; 1 cc1db2db-b08b-4888-897f-a17eade2461b                         Aviation
#&amp;gt; 2 8d05a650-bc7b-4b89-bcc8-c10177e60119 Canada Aviation and Space Museum
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;show-tags&#34;&gt;Show tags&lt;/h4&gt;

&lt;p&gt;Subset for readme brevity&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tag_show(&#39;Aviation&#39;)
#&amp;gt; &amp;lt;CKAN Tag&amp;gt; cc1db2db-b08b-4888-897f-a17eade2461b 
#&amp;gt;   Name: Aviation
#&amp;gt;   Display name: Aviation
#&amp;gt;   Vocabulary id: 
#&amp;gt;   No. Packages: 2
#&amp;gt;   Packages (up to 5): artifact-data-aviation, cstmc-smstc-artifacts-artefact
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;list-groups&#34;&gt;List groups&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;group_list(as = &#39;table&#39;)[, 1:3]
#&amp;gt;                         display_name description
#&amp;gt; 1                     Communications            
#&amp;gt; 2 Domestic and Industrial Technology            
#&amp;gt; 3                         Everything            
#&amp;gt; 4                           Location            
#&amp;gt; 5                          Resources            
#&amp;gt; 6         Scientific Instrumentation            
#&amp;gt; 7                     Transportation            
#&amp;gt;                                title
#&amp;gt; 1                     Communications
#&amp;gt; 2 Domestic and Industrial Technology
#&amp;gt; 3                         Everything
#&amp;gt; 4                           Location
#&amp;gt; 5                          Resources
#&amp;gt; 6         Scientific Instrumentation
#&amp;gt; 7                     Transportation
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;show-groups&#34;&gt;Show groups&lt;/h4&gt;

&lt;p&gt;Subset for readme brevity&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;group_show(&#39;communications&#39;, as = &#39;table&#39;)$users
#&amp;gt;   openid about capacity     name                    created
#&amp;gt; 1     NA  &amp;lt;NA&amp;gt;    admin     marc 2014-10-24T14:44:29.885262
#&amp;gt; 2     NA          admin sepandar 2014-10-23T19:40:42.056418
#&amp;gt;                         email_hash sysadmin
#&amp;gt; 1 a32002c960476614370a16e9fb81f436    FALSE
#&amp;gt; 2 10b930a228afd1da2647d62e70b71bf8     TRUE
#&amp;gt;   activity_streams_email_notifications  state number_of_edits
#&amp;gt; 1                                FALSE active             516
#&amp;gt; 2                                FALSE active              44
#&amp;gt;   number_administered_packages display_name fullname
#&amp;gt; 1                           40         marc     &amp;lt;NA&amp;gt;
#&amp;gt; 2                            1     sepandar         
#&amp;gt;                                     id
#&amp;gt; 1 27778230-2e90-4818-9f00-bbf778c8fa09
#&amp;gt; 2 b50449ea-1dcc-4d52-b620-fc95bf56034b
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;show-a-package&#34;&gt;Show a package&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;package_show(&#39;34d60b13-1fd5-430e-b0ec-c8bc7f4841cf&#39;, as = &#39;table&#39;)$resources[, 1:10]
#&amp;gt;                      resource_group_id cache_last_updated
#&amp;gt; 1 ea8533d9-cdc6-4e0e-97b9-894e06d50b92                 NA
#&amp;gt; 2 ea8533d9-cdc6-4e0e-97b9-894e06d50b92                 NA
#&amp;gt; 3 ea8533d9-cdc6-4e0e-97b9-894e06d50b92                 NA
#&amp;gt; 4 ea8533d9-cdc6-4e0e-97b9-894e06d50b92                 NA
#&amp;gt; 5 ea8533d9-cdc6-4e0e-97b9-894e06d50b92                 NA
#&amp;gt;           revision_timestamp webstore_last_updated
#&amp;gt; 1 2016-06-13T20:05:16.818800                    NA
#&amp;gt; 2 2014-11-04T02:59:50.567068                    NA
#&amp;gt; 3 2014-11-05T21:23:58.533397                    NA
#&amp;gt; 4 2014-11-05T21:25:16.848423                    NA
#&amp;gt; 5 2016-06-13T20:06:50.013746                    NA
#&amp;gt;                                     id size  state hash
#&amp;gt; 1 be2b0af8-24a8-4a55-8b30-89f5459b713a   NA active     
#&amp;gt; 2 7d65910e-4bdc-4f06-a213-e24e36762767   NA active     
#&amp;gt; 3 97622ad7-1507-4f6a-8acb-14e826447389   NA active     
#&amp;gt; 4 7a72498a-c49c-4e84-8b10-58991de10df6   NA active     
#&amp;gt; 5 7e2cb5de-550d-41a8-ab9d-b2ec35b6671a   NA active     
#&amp;gt;                                    description format
#&amp;gt; 1                                  XML Dataset    XML
#&amp;gt; 2 Data dictionary for CSTMC artifact datasets.    XLS
#&amp;gt; 3       Tips for using the artifacts datasets.   .php
#&amp;gt; 4       Tips for using the artifacts datasets.   .php
#&amp;gt; 5                          Jeux de données XML    XML
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;search-for-packages&#34;&gt;Search for packages&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out &amp;lt;- package_search(q = &#39;*:*&#39;, rows = 2, as = &amp;quot;table&amp;quot;)$results
out[, !names(out) %in% &#39;resources&#39;][, 1:10]
#&amp;gt;                      license_title maintainer relationships_as_object
#&amp;gt; 1 Open Government Licence - Canada                               NULL
#&amp;gt; 2 Open Government Licence - Canada                               NULL
#&amp;gt;   private maintainer_email         revision_timestamp
#&amp;gt; 1   FALSE                  2014-10-28T21:27:57.475091
#&amp;gt; 2   FALSE                  2014-10-28T20:40:55.803602
#&amp;gt;                                     id           metadata_created
#&amp;gt; 1 99f457c9-ea24-48a1-87be-b52385825b6a 2014-10-24T17:39:06.411039
#&amp;gt; 2 443cb020-f2ae-48b1-be67-90df1abd298e 2014-10-28T20:39:23.561940
#&amp;gt;            metadata_modified author
#&amp;gt; 1 2016-06-14T21:31:27.983485       
#&amp;gt; 2 2016-06-14T18:59:17.786219
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;search-for-resources&#34;&gt;Search for resources&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resource_search(q = &#39;name:data&#39;, limit = 2, as = &#39;table&#39;)
#&amp;gt; $count
#&amp;gt; [1] 74
#&amp;gt; 
#&amp;gt; $results
#&amp;gt;                      resource_group_id cache_last_updated
#&amp;gt; 1 01a82e52-01bf-4a9c-9b45-c4f9b92529fa                 NA
#&amp;gt; 2 01a82e52-01bf-4a9c-9b45-c4f9b92529fa                 NA
#&amp;gt;   webstore_last_updated                                   id size  state
#&amp;gt; 1                    NA e179e910-27fb-44f4-a627-99822af49ffa   NA active
#&amp;gt; 2                    NA ba84e8b7-b388-4d2a-873a-7b107eb7f135   NA active
#&amp;gt;   last_modified hash                                  description format
#&amp;gt; 1            NA                                       XML Dataset    XML
#&amp;gt; 2            NA      Data dictionary for CSTMC artifact datasets.    XLS
#&amp;gt;   mimetype_inner url_type mimetype cache_url
#&amp;gt; 1             NA       NA       NA        NA
#&amp;gt; 2             NA       NA       NA        NA
#&amp;gt;                                           name                    created
#&amp;gt; 1 Artifact Data - Exploration and Survey (XML) 2014-10-28T15:50:35.374303
#&amp;gt; 2                              Data Dictionary 2014-11-03T18:01:02.094210
#&amp;gt;                                                                                                                                                    url
#&amp;gt; 1              http://source.techno-science.ca/datasets-donn%C3%A9es/artifacts-artefacts/groups-groupes/exploration-and-survey-exploration-et-leve.xml
#&amp;gt; 2 http://source.techno-science.ca/datasets-donn%C3%A9es/artifacts-artefacts/cstmc-artifact-data-dictionary-dictionnaire-de-donnees-artefacts-smstc.xls
#&amp;gt;   webstore_url position                          revision_id resource_type
#&amp;gt; 1           NA        0 a22e6741-3e89-4db0-a802-ba594b1c1fad            NA
#&amp;gt; 2           NA        1 da1f8585-521d-47ef-8ead-7832474a3421            NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-of-using-a-different-ckan-api&#34;&gt;Example of using a different CKAN API&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;The UK Natural History Museum&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Website: &lt;a href=&#34;http://data.nhm.ac.uk/&#34;&gt;http://data.nhm.ac.uk/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;List datasets&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ckanr_setup(url = &amp;quot;http://data.nhm.ac.uk&amp;quot;)
package_list(as = &amp;quot;table&amp;quot;)
#&amp;gt;  [1] &amp;quot;abyssline&amp;quot;                                                        
#&amp;gt;  [2] &amp;quot;african-spiny-solanum&amp;quot;                                            
#&amp;gt;  [3] &amp;quot;alignments-of-co1-nd1-and-16s-rrna-for-the-land-snail-corilla&amp;quot;    
#&amp;gt;  [4] &amp;quot;american-phlebotominae-nhm&amp;quot;                                       
#&amp;gt;  [5] &amp;quot;bibliography-scleractinia&amp;quot;                                        
#&amp;gt;  [6] &amp;quot;bioacoustica&amp;quot;                                                     
#&amp;gt;  [7] &amp;quot;bioacoustica-talks-insect-natural-history&amp;quot;                        
#&amp;gt;  [8] &amp;quot;bioacoustica-talks-international-congress-entomology&amp;quot;             
#&amp;gt;  [9] &amp;quot;biodiversity-heritage-library&amp;quot;                                    
#&amp;gt; [10] &amp;quot;biopearl&amp;quot;                                                         
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tags&lt;/p&gt;

&lt;p&gt;&lt;em&gt;list&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(tag_list(as = &amp;quot;table&amp;quot;))
#&amp;gt;   vocabulary_id    display_name                                   id
#&amp;gt; 1            NA    3D modelling 119868d7-1753-4c35-8641-14681dc472a7
#&amp;gt; 2            NA         3D Scan d95f1342-574a-454b-9ada-533d417de418
#&amp;gt; 3            NA        3D scans 701e15ab-1d85-4935-ba82-a9926ef219df
#&amp;gt; 4            NA Acid alteration 63d78282-b851-4be5-b4ee-9c5dfd929f5e
#&amp;gt; 5            NA       acoustics b7a0c442-c5b2-408e-8c53-c4a8ee53770f
#&amp;gt; 6            NA          Africa 21bc2c80-ac2d-48c1-8252-eab071cef60a
#&amp;gt;              name
#&amp;gt; 1    3D modelling
#&amp;gt; 2         3D Scan
#&amp;gt; 3        3D scans
#&amp;gt; 4 Acid alteration
#&amp;gt; 5       acoustics
#&amp;gt; 6          Africa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;show&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tag_show(&#39;arthropods&#39;, as = &#39;table&#39;)
#&amp;gt; $vocabulary_id
#&amp;gt; NULL
#&amp;gt; 
#&amp;gt; $packages
#&amp;gt; list()
#&amp;gt; 
#&amp;gt; $display_name
#&amp;gt; [1] &amp;quot;arthropods&amp;quot;
#&amp;gt; 
#&amp;gt; $id
#&amp;gt; [1] &amp;quot;f9245868-f4cb-4c85-a59d-11692db19e86&amp;quot;
#&amp;gt; 
#&amp;gt; $name
#&amp;gt; [1] &amp;quot;arthropods&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Packages&lt;/p&gt;

&lt;p&gt;&lt;em&gt;search&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out &amp;lt;- package_search(q = &#39;*:*&#39;, rows = 2, as = &#39;table&#39;)
out$results[, 1:10]
#&amp;gt;           license_title maintainer relationships_as_object private
#&amp;gt; 1               CC0-1.0         NA                    NULL   FALSE
#&amp;gt; 2 License not specified         NA                    NULL   FALSE
#&amp;gt;   maintainer_email         revision_timestamp update_frequency
#&amp;gt; 1               NA 2015-05-27T15:24:07.501850           weekly
#&amp;gt; 2               NA 2016-11-24T15:21:05.247618                 
#&amp;gt;                                     id           metadata_created
#&amp;gt; 1 56e711e6-c847-4f99-915a-6894bb5c5dea 2014-12-08T16:39:22.346941
#&amp;gt; 2 dabf7089-7ff9-42bf-a1bf-a4d0c37d7b85 2016-11-24T15:20:46.742971
#&amp;gt;            metadata_modified
#&amp;gt; 1 2017-09-29T11:27:08.803607
#&amp;gt; 2 2017-10-16T16:42:59.700282
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;show&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;package_show(id = &amp;quot;56e711e6-c847-4f99-915a-6894bb5c5dea&amp;quot;, as = &amp;quot;table&amp;quot;)
#&amp;gt; $domain
#&amp;gt; [1] &amp;quot;data.nhm.ac.uk&amp;quot;
#&amp;gt; 
#&amp;gt; $license_title
#&amp;gt; [1] &amp;quot;CC0-1.0&amp;quot;
#&amp;gt; 
#&amp;gt; $maintainer
#&amp;gt; NULL
#&amp;gt; 
#&amp;gt; $relationships_as_object
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;p&gt;To cite &lt;code&gt;ckanr&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scott Chamberlain, Imanuel Costigan, Wush Wu, Florian Mayer (2016). ckanr: Client for the Comprehensive Knowledge Archive Network (&amp;lsquo;CKAN&amp;rsquo;) &amp;lsquo;API&amp;rsquo;. R package version 0.1.0. &lt;a href=&#34;https://github.com/ropensci/ckanr&#34;&gt;https://github.com/ropensci/ckanr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/ckanr/issues?state=open&#34;&gt;our Github repo for rnoaa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>convertr tutorial</title>
      <link>https://ropensci.org/tutorials/convertr_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/convertr_tutorial/</guid>
      <description>
        
        

&lt;p&gt;An R package for converting things to other things.&lt;/p&gt;

&lt;p&gt;The package contains one function which converts numerical vectors from one unit to another. Data on conversion factors comes from the &lt;a href=&#34;http://w3.energistics.org/uom/poscUnits22.xml&#34;&gt;POSC Units of Measure Dictionary v2.2&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Conversion_of_units&#34;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;convertr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&amp;quot;devtools&amp;quot;)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropenscilabs/convertr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;convertr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;convert(1:20, &amp;quot;kg&amp;quot;, &amp;quot;g&amp;quot;)
convert(1:20, &amp;quot;sq yd&amp;quot;, &amp;quot;km2&amp;quot;)

#This will produce an error:
convert(1:20, &amp;quot;kg&amp;quot;, &amp;quot;km2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Units are converted using a lookup table, based on the POSC dictionary. You can explore this table using the &lt;code&gt;explore_units()&lt;/code&gt; function. This function launches a shiny app.&lt;/p&gt;

&lt;p&gt;Figuring out which units can be converted to each other can be tricky, so convertr comes with an an shiny gadget to help you build valid &lt;code&gt;convert()&lt;/code&gt; expressions. This can be accesed either by calliing &lt;code&gt;convert_gadget()&lt;/code&gt; or through the addin menu. To access the addin make sure you are using a recent version of RStudio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/convertr/convertr_gif.gif&#34; alt=&#34;Gadget Animation&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Gordon Shotwell (2016). convertr: Convert Between Units. R package version 0.1. &lt;a href=&#34;https://github.com/ropenscilabs/convertr&#34;&gt;https://github.com/ropenscilabs/convertr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropenscilabs/convertr/issues?state=open&#34;&gt;our GitHub repo for convertr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>ecoretriever tutorial</title>
      <link>https://ropensci.org/tutorials/ecoretriever_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/ecoretriever_tutorial/</guid>
      <description>
        
        &lt;meta http-equiv=&#34;refresh&#34; content=&#34;0; url=rdataretriever_tutorial.html&#34; /&gt;

      </description>
    </item>
    
    <item>
      <title>elastic tutorial</title>
      <link>https://ropensci.org/tutorials/elastic_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/elastic_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;code&gt;elastic&lt;/code&gt; is an R client for &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;. This tutorial is an introduction to the package.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;You can install from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;elastic&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or the development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/elastic&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then load the package&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;elastic&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;elasticsearch&#34;&gt;Elasticsearch&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch info&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch home page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elastic.co/guide/en/elasticsearch/reference/current/index.html&#34;&gt;API docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Install Elasticsearch&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html&#34;&gt;Elasticsearch installation help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Unix (linux/osx)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Replace &lt;code&gt;5.6.0&lt;/code&gt; with the version you are working with.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download zip or tar file from Elasticsearch &lt;a href=&#34;https://www.elastic.co/downloads&#34;&gt;see here for download&lt;/a&gt;, e.g., &lt;code&gt;curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.0.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extract: &lt;code&gt;tar -zxvf elasticsearch-5.6.0.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move it: &lt;code&gt;sudo mv elasticsearch-5.6.0 /usr/local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Navigate to /usr/local: &lt;code&gt;cd /usr/local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delete symlinked &lt;code&gt;elasticsearch&lt;/code&gt; directory: &lt;code&gt;rm -rf elasticsearch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add shortcut: &lt;code&gt;sudo ln -s elasticsearch-5.6.0 elasticsearch&lt;/code&gt; (replace version with your version)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On OSX, you can install via Homebrew: &lt;code&gt;brew install elasticsearch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows users can follow the above, but unzip the zip file instead of uncompressing the tar file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start Elasticsearch&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to elasticsearch: &lt;code&gt;cd /usr/local/elasticsearch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start elasticsearch: &lt;code&gt;bin/elasticsearch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I create a little bash shortcut called &lt;code&gt;es&lt;/code&gt; that does both of the above commands in one step (&lt;code&gt;cd /usr/local/elasticsearch &amp;amp;&amp;amp; bin/elasticsearch&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Windows users should run the &lt;code&gt;elasticsearch.bat&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initialize connection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;connect()&lt;/code&gt; is used before doing anything else to set the connection details to your remote or local elasticsearch store. The details created by &lt;code&gt;connect()&lt;/code&gt; are written to your options for the current session, and are used by &lt;code&gt;elastic&lt;/code&gt; functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;connect()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; transport:  http
#&amp;gt; host:       127.0.0.1
#&amp;gt; port:       9200
#&amp;gt; path:       NULL
#&amp;gt; username:   NULL
#&amp;gt; password:   &amp;lt;secret&amp;gt;
#&amp;gt; errors:     simple
#&amp;gt; headers (names):  NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On package load, your base url and port are set to &lt;code&gt;http://127.0.0.1&lt;/code&gt; and &lt;code&gt;9200&lt;/code&gt;, respectively. You can of course override these settings per session or for all sessions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get some data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Elasticsearch has a bulk load API to load data in fast. The format is pretty weird though. It&amp;rsquo;s sort of JSON, but would pass no JSON linter. I include a few data sets in &lt;code&gt;elastic&lt;/code&gt; so it&amp;rsquo;s easy to get up and running, and so when you run examples in this package they&amp;rsquo;ll actually run the same way (hopefully).&lt;/p&gt;

&lt;p&gt;I have prepared a non-exported function useful for preparing the weird format that Elasticsearch wants for bulk data loads (see below). See &lt;code&gt;elastic:::make_bulk_plos&lt;/code&gt; and &lt;code&gt;elastic:::make_bulk_gbif&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shakespeare data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Elasticsearch provides some data on Shakespeare plays. I&amp;rsquo;ve provided a subset of this data in this package. Get the path for the file specific to your machine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shakespeare &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;shakespeare_data.json&amp;quot;, package = &amp;quot;elastic&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then load the data into Elasticsearch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;docs_bulk(shakespeare)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need some big data to play with, the shakespeare dataset is a good one to start with. You can get the whole thing and pop it into Elasticsearch (beware, may take up to 10 minutes or so.):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -XGET http://www.elasticsearch.org/guide/en/kibana/current/snippets/shakespeare.json &amp;gt; shakespeare.json
curl -XPUT localhost:9200/_bulk --data-binary @shakespeare.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Public Library of Science (PLOS) data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A dataset inluded in the &lt;code&gt;elastic&lt;/code&gt; package is metadata for PLOS scholarly articles. Get the file path, then load:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plosdat &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;plos_data.json&amp;quot;, package = &amp;quot;elastic&amp;quot;)
docs_bulk(plosdat)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;More data sets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are more datasets formatted for bulk loading in the &lt;code&gt;ropensci/elastic_data&lt;/code&gt; GitHub repository. Find it at &lt;a href=&#34;https://github.com/ropensci/elastic_data&#34;&gt;https://github.com/ropensci/elastic_data&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;search&#34;&gt;Search&lt;/h3&gt;

&lt;p&gt;Search the &lt;code&gt;plos&lt;/code&gt; index and only return 1 result&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Search(index=&amp;quot;plos&amp;quot;, size=1)$hits$hits
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [[1]]
#&amp;gt; [[1]]$`_index`
#&amp;gt; [1] &amp;quot;plos&amp;quot;
#&amp;gt;
#&amp;gt; [[1]]$`_type`
#&amp;gt; [1] &amp;quot;article&amp;quot;
#&amp;gt;
#&amp;gt; [[1]]$`_id`
#&amp;gt; [1] &amp;quot;0&amp;quot;
#&amp;gt;
#&amp;gt; [[1]]$`_score`
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; [[1]]$`_source`
#&amp;gt; [[1]]$`_source`$id
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0007737&amp;quot;
#&amp;gt;
#&amp;gt; [[1]]$`_source`$title
#&amp;gt; [1] &amp;quot;Phospholipase C-β4 Is Essential for the Progression of the Normal Sleep Sequence and Ultradian Body Temperature Rhythms in Mice&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Search the &lt;code&gt;plos&lt;/code&gt; index, and the &lt;code&gt;article&lt;/code&gt; document type, and query for &lt;em&gt;antibody&lt;/em&gt;, limit to 1 result&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Search(index=&amp;quot;plos&amp;quot;, type=&amp;quot;article&amp;quot;, q=&amp;quot;antibody&amp;quot;, size=1)$hits$hits
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [[1]]
#&amp;gt; [[1]]$`_index`
#&amp;gt; [1] &amp;quot;plos&amp;quot;
#&amp;gt;
#&amp;gt; [[1]]$`_type`
#&amp;gt; [1] &amp;quot;article&amp;quot;
#&amp;gt;
#&amp;gt; [[1]]$`_id`
#&amp;gt; [1] &amp;quot;568&amp;quot;
#&amp;gt;
#&amp;gt; [[1]]$`_score`
#&amp;gt; [1] 4.165291
#&amp;gt;
#&amp;gt; [[1]]$`_source`
#&amp;gt; [[1]]$`_source`$id
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0085002&amp;quot;
#&amp;gt;
#&amp;gt; [[1]]$`_source`$title
#&amp;gt; [1] &amp;quot;Evaluation of 131I-Anti-Angiotensin II Type 1 Receptor Monoclonal Antibody as a Reporter for Hepatocellular Carcinoma&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-bool-query&#34;&gt;A bool query&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mmatch &amp;lt;- &#39;{
 &amp;quot;query&amp;quot;: {
   &amp;quot;bool&amp;quot; : {
     &amp;quot;must_not&amp;quot; : {
       &amp;quot;range&amp;quot; : {
         &amp;quot;speech_number&amp;quot; : {
           &amp;quot;from&amp;quot; : 1, &amp;quot;to&amp;quot;: 5
}}}}}}&#39;
sapply(Search(index=&amp;quot;shakespeare&amp;quot;, body=mmatch)$hits$hits, function(x) x$`_source`$speech_number)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [[1]]
#&amp;gt; NULL
#&amp;gt;
#&amp;gt; [[2]]
#&amp;gt; [1] 6
#&amp;gt;
#&amp;gt; [[3]]
#&amp;gt; [1] 7
#&amp;gt;
#&amp;gt; [[4]]
#&amp;gt; [1] 7
#&amp;gt;
#&amp;gt; [[5]]
#&amp;gt; [1] 7
#&amp;gt;
#&amp;gt; [[6]]
#&amp;gt; [1] 8
#&amp;gt;
#&amp;gt; [[7]]
#&amp;gt; [1] 8
#&amp;gt;
#&amp;gt; [[8]]
#&amp;gt; [1] 9
#&amp;gt;
#&amp;gt; [[9]]
#&amp;gt; [1] 9
#&amp;gt;
#&amp;gt; [[10]]
#&amp;gt; [1] 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;range-query&#34;&gt;Range query&lt;/h4&gt;

&lt;p&gt;With numeric&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;body &amp;lt;- list(query=list(range=list(decimalLongitude=list(gte=1, lte=3))))
Search(&#39;gbif&#39;, body=body)$hits$total
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] 24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With dates&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;body &amp;lt;- list(query=list(range=list(eventDate=list(gte=&amp;quot;2012-01-01&amp;quot;, lte=&amp;quot;now&amp;quot;))))
Search(&#39;gbif&#39;, body=body)$hits$total
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] 899
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;more-like-this-query-more-like-this-can-be-shortened-to-mlt&#34;&gt;More-like-this query (more_like_this can be shortened to mlt)&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;body &amp;lt;- &#39;{
 &amp;quot;query&amp;quot;: {
   &amp;quot;more_like_this&amp;quot;: {
     &amp;quot;fields&amp;quot;: [&amp;quot;abstract&amp;quot;,&amp;quot;title&amp;quot;],
     &amp;quot;like_text&amp;quot;: &amp;quot;and then&amp;quot;,
     &amp;quot;min_term_freq&amp;quot;: 1,
     &amp;quot;max_query_terms&amp;quot;: 12
   }
 }
}&#39;
Search(&#39;plos&#39;, body=body)$hits$total
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] 488
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;highlighting&#34;&gt;Highlighting&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;body &amp;lt;- &#39;{
 &amp;quot;query&amp;quot;: {
   &amp;quot;query_string&amp;quot;: {
     &amp;quot;query&amp;quot; : &amp;quot;cell&amp;quot;
   }
 },
 &amp;quot;highlight&amp;quot;: {
   &amp;quot;fields&amp;quot;: {
     &amp;quot;title&amp;quot;: {&amp;quot;number_of_fragments&amp;quot;: 2}
   }
 }
}&#39;
out &amp;lt;- Search(&#39;plos&#39;, &#39;article&#39;, body=body)
out$hits$total
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] 58
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(out$hits$hits, function(x) x$highlight$title[[1]])[8:10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [[1]]
#&amp;gt; NULL
#&amp;gt;
#&amp;gt; [[2]]
#&amp;gt; NULL
#&amp;gt;
#&amp;gt; [[3]]
#&amp;gt; NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bulk-load-from-r-objects&#34;&gt;Bulk load from R objects&lt;/h3&gt;

&lt;p&gt;A new feature in &lt;code&gt;v0.4&lt;/code&gt; is loading data into Elasticsearch via the bulk API (faster than via the
normal route) from R objects (data.frame, or list). E.g.:&lt;/p&gt;

&lt;p&gt;Using a pretty large data.frame, at 53K rows, load &lt;code&gt;ggplot2&lt;/code&gt; package first&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;ggplot2&amp;quot;)
res &amp;lt;- invisible(docs_bulk(diamonds, &amp;quot;diam&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Search(index = &amp;quot;diam&amp;quot;)$hits$total
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] 159698
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-documents&#34;&gt;Get documents&lt;/h3&gt;

&lt;p&gt;Get document with &lt;code&gt;id=1&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;docs_get(index=&#39;plos&#39;, type=&#39;article&#39;, id=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $`_index`
#&amp;gt; [1] &amp;quot;plos&amp;quot;
#&amp;gt;
#&amp;gt; $`_type`
#&amp;gt; [1] &amp;quot;article&amp;quot;
#&amp;gt;
#&amp;gt; $`_id`
#&amp;gt; [1] &amp;quot;1&amp;quot;
#&amp;gt;
#&amp;gt; $`_version`
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; $found
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $`_source`
#&amp;gt; $`_source`$id
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0098602&amp;quot;
#&amp;gt;
#&amp;gt; $`_source`$title
#&amp;gt; [1] &amp;quot;Population Genetic Structure of a Sandstone Specialist and a Generalist Heath Species at Two Levels of Sandstone Patchiness across the Strait of Gibraltar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get certain fields&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;docs_get(index=&#39;plos&#39;, type=&#39;article&#39;, id=1, fields=&#39;id&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $`_index`
#&amp;gt; [1] &amp;quot;plos&amp;quot;
#&amp;gt;
#&amp;gt; $`_type`
#&amp;gt; [1] &amp;quot;article&amp;quot;
#&amp;gt;
#&amp;gt; $`_id`
#&amp;gt; [1] &amp;quot;1&amp;quot;
#&amp;gt;
#&amp;gt; $`_version`
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; $found
#&amp;gt; [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;get-multiple-documents-at-once&#34;&gt;Get multiple documents at once&lt;/h4&gt;

&lt;p&gt;Same index and type, different document ids&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;docs_mget(index=&amp;quot;plos&amp;quot;, type=&amp;quot;article&amp;quot;, id=3:4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $docs
#&amp;gt; $docs[[1]]
#&amp;gt; $docs[[1]]$`_index`
#&amp;gt; [1] &amp;quot;plos&amp;quot;
#&amp;gt;
#&amp;gt; $docs[[1]]$`_type`
#&amp;gt; [1] &amp;quot;article&amp;quot;
#&amp;gt;
#&amp;gt; $docs[[1]]$`_id`
#&amp;gt; [1] &amp;quot;3&amp;quot;
#&amp;gt;
#&amp;gt; $docs[[1]]$`_version`
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; $docs[[1]]$found
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $docs[[1]]$`_source`
#&amp;gt; $docs[[1]]$`_source`$id
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0107756&amp;quot;
#&amp;gt;
#&amp;gt; $docs[[1]]$`_source`$title
#&amp;gt; [1] &amp;quot;The Effect of S-Adenosylmethionine on Cognitive Performance in Mice: An Animal Model Meta-Analysis&amp;quot;
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; $docs[[2]]
#&amp;gt; $docs[[2]]$`_index`
#&amp;gt; [1] &amp;quot;plos&amp;quot;
#&amp;gt;
#&amp;gt; $docs[[2]]$`_type`
#&amp;gt; [1] &amp;quot;article&amp;quot;
#&amp;gt;
#&amp;gt; $docs[[2]]$`_id`
#&amp;gt; [1] &amp;quot;4&amp;quot;
#&amp;gt;
#&amp;gt; $docs[[2]]$`_version`
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; $docs[[2]]$found
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $docs[[2]]$`_source`
#&amp;gt; $docs[[2]]$`_source`$id
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0107758&amp;quot;
#&amp;gt;
#&amp;gt; $docs[[2]]$`_source`$title
#&amp;gt; [1] &amp;quot;Lactobacilli Inactivate Chlamydia trachomatis through Lactic Acid but Not H2O2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Different indeces, types, and ids&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;docs_mget(index_type_id=list(c(&amp;quot;plos&amp;quot;,&amp;quot;article&amp;quot;,1), c(&amp;quot;gbif&amp;quot;,&amp;quot;record&amp;quot;,1)))$docs[[1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $`_index`
#&amp;gt; [1] &amp;quot;plos&amp;quot;
#&amp;gt;
#&amp;gt; $`_type`
#&amp;gt; [1] &amp;quot;article&amp;quot;
#&amp;gt;
#&amp;gt; $`_id`
#&amp;gt; [1] &amp;quot;1&amp;quot;
#&amp;gt;
#&amp;gt; $`_version`
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt; $found
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $`_source`
#&amp;gt; $`_source`$id
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0098602&amp;quot;
#&amp;gt;
#&amp;gt; $`_source`$title
#&amp;gt; [1] &amp;quot;Population Genetic Structure of a Sandstone Specialist and a Generalist Heath Species at Two Levels of Sandstone Patchiness across the Strait of Gibraltar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;raw-json-data&#34;&gt;Raw JSON data&lt;/h3&gt;

&lt;p&gt;You can optionally get back raw &lt;code&gt;json&lt;/code&gt; from &lt;code&gt;Search()&lt;/code&gt;, &lt;code&gt;docs_get()&lt;/code&gt;, and &lt;code&gt;docs_mget()&lt;/code&gt; setting parameter &lt;code&gt;raw=TRUE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(out &amp;lt;- docs_mget(index=&amp;quot;plos&amp;quot;, type=&amp;quot;article&amp;quot;, id=5:6, raw=TRUE))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] &amp;quot;{\&amp;quot;docs\&amp;quot;:[{\&amp;quot;_index\&amp;quot;:\&amp;quot;plos\&amp;quot;,\&amp;quot;_type\&amp;quot;:\&amp;quot;article\&amp;quot;,\&amp;quot;_id\&amp;quot;:\&amp;quot;5\&amp;quot;,\&amp;quot;_version\&amp;quot;:1,\&amp;quot;found\&amp;quot;:true,\&amp;quot;_source\&amp;quot;:{\&amp;quot;id\&amp;quot;:\&amp;quot;10.1371/journal.pone.0085123\&amp;quot;,\&amp;quot;title\&amp;quot;:\&amp;quot;MiR-21 Is under Control of STAT5 but Is Dispensable for Mammary Development and Lactation\&amp;quot;}},{\&amp;quot;_index\&amp;quot;:\&amp;quot;plos\&amp;quot;,\&amp;quot;_type\&amp;quot;:\&amp;quot;article\&amp;quot;,\&amp;quot;_id\&amp;quot;:\&amp;quot;6\&amp;quot;,\&amp;quot;_version\&amp;quot;:1,\&amp;quot;found\&amp;quot;:true,\&amp;quot;_source\&amp;quot;:{\&amp;quot;id\&amp;quot;:\&amp;quot;10.1371/journal.pone.0098600\&amp;quot;,\&amp;quot;title\&amp;quot;:\&amp;quot;Correction: Designing Mixed Species Tree Plantations for the Tropics: Balancing Ecological Attributes of Species with Landholder Preferences in the Philippines\&amp;quot;}}]}&amp;quot;
#&amp;gt; attr(,&amp;quot;class&amp;quot;)
#&amp;gt; [1] &amp;quot;elastic_mget&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then parse&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;jsonlite::fromJSON(out)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $docs
#&amp;gt;   _index   _type _id _version found                   _source.id
#&amp;gt; 1   plos article   5        1  TRUE 10.1371/journal.pone.0085123
#&amp;gt; 2   plos article   6        1  TRUE 10.1371/journal.pone.0098600
#&amp;gt;                                                                                                                                                     _source.title
#&amp;gt; 1                                                                       MiR-21 Is under Control of STAT5 but Is Dispensable for Mammary Development and Lactation
#&amp;gt; 2 Correction: Designing Mixed Species Tree Plantations for the Tropics: Balancing Ecological Attributes of Species with Landholder Preferences in the Philippines
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Scott Chamberlain (2017). elastic: General Purpose Interface to Elasticsearch. R package version 0.8.0.
  &lt;a href=&#34;https://cran.rstudio.com/package=elastic&#34;&gt;https://cran.rstudio.com/package=elastic&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/elastic/issues?state=open&#34;&gt;our GitHub repo for elastic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>etseed tutorial</title>
      <link>https://ropensci.org/tutorials/etseed_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/etseed_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;code&gt;etcd&lt;/code&gt; is a key-value DB written in &lt;code&gt;Go&lt;/code&gt;. It has an HTTP API, which this R package wraps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/coreos/etcd/blob/master/Documentation/v2/api.md&#34;&gt;etcd API docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing etcd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/coreos/etcd#etcd&#34;&gt;etcd Github repo&lt;/a&gt; for help on installing &lt;code&gt;etcd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are various ways to install it, and they depend on your operating sytsem.&lt;/p&gt;

&lt;p&gt;You can install via &lt;code&gt;homebrew&lt;/code&gt;, install from source, and via Docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start etcd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;at the command line&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;etcd
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;how to start etcd may differ depending on your setup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;etseed&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&amp;quot;devtools&amp;quot;)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/etseed&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;etseed&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Make a client&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First task when using this package is to initialize a client
with the &lt;code&gt;etcd()&lt;/code&gt; function. it&amp;rsquo;s a wrapper around an R6 class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(client &amp;lt;- etcd())
#&amp;gt; &amp;lt;etcd client&amp;gt;
#&amp;gt;   host: 127.0.0.1
#&amp;gt;   port: 2379
#&amp;gt;   api_version: v2
#&amp;gt;   scheme: http
#&amp;gt;   allow redirect: TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Default settings in &lt;code&gt;etcd()&lt;/code&gt; connect you to &lt;code&gt;localhost&lt;/code&gt;, and port &lt;code&gt;2379&lt;/code&gt;,
using etcd API version 2, with an &lt;code&gt;http&lt;/code&gt; scheme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get version&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$version()
#&amp;gt; $etcdserver
#&amp;gt; [1] &amp;quot;3.2.9&amp;quot;
#&amp;gt; 
#&amp;gt; $etcdcluster
#&amp;gt; [1] &amp;quot;3.2.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Create a directory&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$create(&amp;quot;/neighbor&amp;quot;, dir = TRUE)
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;set&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$key
#&amp;gt; [1] &amp;quot;/neighbor&amp;quot;
#&amp;gt; 
#&amp;gt; $node$dir
#&amp;gt; [1] TRUE
#&amp;gt; 
#&amp;gt; $node$modifiedIndex
#&amp;gt; [1] 6480
#&amp;gt; 
#&amp;gt; $node$createdIndex
#&amp;gt; [1] 6480
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Create a key&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$create(key = &amp;quot;/mykey&amp;quot;, value = &amp;quot;this is awesome&amp;quot;)
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;set&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$key
#&amp;gt; [1] &amp;quot;/mykey&amp;quot;
#&amp;gt; 
#&amp;gt; $node$value
#&amp;gt; [1] &amp;quot;this is awesome&amp;quot;
#&amp;gt; 
#&amp;gt; $node$modifiedIndex
#&amp;gt; [1] 6482
#&amp;gt; 
#&amp;gt; $node$createdIndex
#&amp;gt; [1] 6482
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;ttl&lt;/code&gt; parameter to make it dissappear after &lt;code&gt;x&lt;/code&gt; seconds&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$create(key = &amp;quot;/stuff&amp;quot;, value = &amp;quot;tables&amp;quot;, ttl = 5)
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;set&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$key
#&amp;gt; [1] &amp;quot;/stuff&amp;quot;
#&amp;gt; 
#&amp;gt; $node$value
#&amp;gt; [1] &amp;quot;tables&amp;quot;
#&amp;gt; 
#&amp;gt; $node$expiration
#&amp;gt; [1] &amp;quot;2017-10-17T00:19:35.356961171Z&amp;quot;
#&amp;gt; 
#&amp;gt; $node$ttl
#&amp;gt; [1] 5
#&amp;gt; 
#&amp;gt; $node$modifiedIndex
#&amp;gt; [1] 6483
#&amp;gt; 
#&amp;gt; $node$createdIndex
#&amp;gt; [1] 6483
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the key will be gone after 5 seconds, see:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$key(&amp;quot;/stuff&amp;quot;)
#&amp;gt; Error in etcd_GET(sprintf(&amp;quot;%s%s/%s/&amp;quot;, etcdbase(), &amp;quot;keys&amp;quot;, key), ...) :
#&amp;gt;   client error: (404) Not Found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update a key&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$create(key = &amp;quot;/foo&amp;quot;, value = &amp;quot;bar&amp;quot;)
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;set&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$key
#&amp;gt; [1] &amp;quot;/foo&amp;quot;
#&amp;gt; 
#&amp;gt; $node$value
#&amp;gt; [1] &amp;quot;bar&amp;quot;
#&amp;gt; 
#&amp;gt; $node$modifiedIndex
#&amp;gt; [1] 6485
#&amp;gt; 
#&amp;gt; $node$createdIndex
#&amp;gt; [1] 6485
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then update the key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$update(key = &amp;quot;/foo&amp;quot;, value = &amp;quot;bar stool&amp;quot;)
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;set&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$key
#&amp;gt; [1] &amp;quot;/foo&amp;quot;
#&amp;gt; 
#&amp;gt; $node$value
#&amp;gt; [1] &amp;quot;bar stool&amp;quot;
#&amp;gt; 
#&amp;gt; $node$modifiedIndex
#&amp;gt; [1] 6486
#&amp;gt; 
#&amp;gt; $node$createdIndex
#&amp;gt; [1] 6486
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $prevNode
#&amp;gt; $prevNode$key
#&amp;gt; [1] &amp;quot;/foo&amp;quot;
#&amp;gt; 
#&amp;gt; $prevNode$value
#&amp;gt; [1] &amp;quot;bar&amp;quot;
#&amp;gt; 
#&amp;gt; $prevNode$modifiedIndex
#&amp;gt; [1] 6485
#&amp;gt; 
#&amp;gt; $prevNode$createdIndex
#&amp;gt; [1] 6485
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Create in-order keys&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$create_inorder(&amp;quot;/queue&amp;quot;, &amp;quot;thing1&amp;quot;)
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;create&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$key
#&amp;gt; [1] &amp;quot;/queue/00000000000000006487&amp;quot;
#&amp;gt; 
#&amp;gt; $node$value
#&amp;gt; [1] &amp;quot;thing1&amp;quot;
#&amp;gt; 
#&amp;gt; $node$modifiedIndex
#&amp;gt; [1] 6487
#&amp;gt; 
#&amp;gt; $node$createdIndex
#&amp;gt; [1] 6487
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$create_inorder(&amp;quot;/queue&amp;quot;, &amp;quot;thing2&amp;quot;)
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;create&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$key
#&amp;gt; [1] &amp;quot;/queue/00000000000000006488&amp;quot;
#&amp;gt; 
#&amp;gt; $node$value
#&amp;gt; [1] &amp;quot;thing2&amp;quot;
#&amp;gt; 
#&amp;gt; $node$modifiedIndex
#&amp;gt; [1] 6488
#&amp;gt; 
#&amp;gt; $node$createdIndex
#&amp;gt; [1] 6488
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$create_inorder(&amp;quot;/queue&amp;quot;, &amp;quot;thing3&amp;quot;)
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;create&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$key
#&amp;gt; [1] &amp;quot;/queue/00000000000000006489&amp;quot;
#&amp;gt; 
#&amp;gt; $node$value
#&amp;gt; [1] &amp;quot;thing3&amp;quot;
#&amp;gt; 
#&amp;gt; $node$modifiedIndex
#&amp;gt; [1] 6489
#&amp;gt; 
#&amp;gt; $node$createdIndex
#&amp;gt; [1] 6489
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;List keys&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$keys()
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;get&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$dir
#&amp;gt; [1] TRUE
#&amp;gt; 
#&amp;gt; $node$nodes
#&amp;gt; $node$nodes[[1]]
#&amp;gt; $node$nodes[[1]]$key
#&amp;gt; [1] &amp;quot;/mykey&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[1]]$value
#&amp;gt; [1] &amp;quot;this is awesome&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[1]]$modifiedIndex
#&amp;gt; [1] 6482
#&amp;gt; 
#&amp;gt; $node$nodes[[1]]$createdIndex
#&amp;gt; [1] 6482
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $node$nodes[[2]]
#&amp;gt; $node$nodes[[2]]$key
#&amp;gt; [1] &amp;quot;/foo&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[2]]$value
#&amp;gt; [1] &amp;quot;bar stool&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[2]]$modifiedIndex
#&amp;gt; [1] 6486
#&amp;gt; 
#&amp;gt; $node$nodes[[2]]$createdIndex
#&amp;gt; [1] 6486
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $node$nodes[[3]]
#&amp;gt; $node$nodes[[3]]$key
#&amp;gt; [1] &amp;quot;/spnacziur&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[3]]$value
#&amp;gt; [1] &amp;quot;saturn cow and moon cheese&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[3]]$modifiedIndex
#&amp;gt; [1] 6452
#&amp;gt; 
#&amp;gt; $node$nodes[[3]]$createdIndex
#&amp;gt; [1] 6452
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $node$nodes[[4]]
#&amp;gt; $node$nodes[[4]]$key
#&amp;gt; [1] &amp;quot;/neighbor&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[4]]$dir
#&amp;gt; [1] TRUE
#&amp;gt; 
#&amp;gt; $node$nodes[[4]]$modifiedIndex
#&amp;gt; [1] 6480
#&amp;gt; 
#&amp;gt; $node$nodes[[4]]$createdIndex
#&amp;gt; [1] 6480
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $node$nodes[[5]]
#&amp;gt; $node$nodes[[5]]$key
#&amp;gt; [1] &amp;quot;/bgkalixcd&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[5]]$dir
#&amp;gt; [1] TRUE
#&amp;gt; 
#&amp;gt; $node$nodes[[5]]$modifiedIndex
#&amp;gt; [1] 6446
#&amp;gt; 
#&amp;gt; $node$nodes[[5]]$createdIndex
#&amp;gt; [1] 6446
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $node$nodes[[6]]
#&amp;gt; $node$nodes[[6]]$key
#&amp;gt; [1] &amp;quot;/stuff&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[6]]$value
#&amp;gt; [1] &amp;quot;tables&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[6]]$expiration
#&amp;gt; [1] &amp;quot;2017-10-17T00:19:35.356961171Z&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[6]]$ttl
#&amp;gt; [1] 5
#&amp;gt; 
#&amp;gt; $node$nodes[[6]]$modifiedIndex
#&amp;gt; [1] 6483
#&amp;gt; 
#&amp;gt; $node$nodes[[6]]$createdIndex
#&amp;gt; [1] 6483
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $node$nodes[[7]]
#&amp;gt; $node$nodes[[7]]$key
#&amp;gt; [1] &amp;quot;/queue&amp;quot;
#&amp;gt; 
#&amp;gt; $node$nodes[[7]]$dir
#&amp;gt; [1] TRUE
#&amp;gt; 
#&amp;gt; $node$nodes[[7]]$modifiedIndex
#&amp;gt; [1] 6463
#&amp;gt; 
#&amp;gt; $node$nodes[[7]]$createdIndex
#&amp;gt; [1] 6463
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;List a key&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;client$key(&amp;quot;/mykey&amp;quot;)
#&amp;gt; $action
#&amp;gt; [1] &amp;quot;get&amp;quot;
#&amp;gt; 
#&amp;gt; $node
#&amp;gt; $node$key
#&amp;gt; [1] &amp;quot;/mykey&amp;quot;
#&amp;gt; 
#&amp;gt; $node$value
#&amp;gt; [1] &amp;quot;this is awesome&amp;quot;
#&amp;gt; 
#&amp;gt; $node$modifiedIndex
#&amp;gt; [1] 6482
#&amp;gt; 
#&amp;gt; $node$createdIndex
#&amp;gt; [1] 6482
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Scott Chamberlain (2016). etseed: Client for &amp;lsquo;etcd&amp;rsquo;, a &amp;lsquo;Key-value&amp;rsquo; Database. R package version 0.1.0. &lt;a href=&#34;https://cran.rstudio.com/package=etseed&#34;&gt;https://cran.rstudio.com/package=etseed&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/etseed/issues?state=open&#34;&gt;our GitHub repo for etseed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>europepmc tutorial</title>
      <link>https://ropensci.org/tutorials/europepmc_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/europepmc_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;a href=&#34;http://europepmc.org/&#34;&gt;Europe PMC&lt;/a&gt; covers life science literature and
gives access to open access full texts. Europe
PMC ingests all PubMed content and extends its index with other sources,
including Agricola, a bibliographic database of citations to the agricultural
literature, or Biological Patents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://europepmc.org/wicket/resource/uk.bl.ukpmc.web.pages.faq.Help/images/EuropePMCContent-ver-4BB17F003F8F38DF2D3BBE48AB5896C6.png&#34; alt=&#34;Index coverage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For more background on Europe PMC, see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://europepmc.org/About&#34;&gt;https://europepmc.org/About&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Europe PMC: a full-text literature database for the life sciences and platform
for innovation. (2014). Nucleic Acids Research, 43(D1), D1042–D1048. &lt;a href=&#34;http://doi.org/10.1093/nar/gku1061&#34;&gt;http://doi.org/10.1093/nar/gku1061&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;europepmc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/europepmc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;europepmc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;implemented-api-methods&#34;&gt;Implemented API methods&lt;/h3&gt;

&lt;p&gt;This client supports the following API methods:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;API-Method&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;R functions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;search&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Search Europe PMC and get detailed metadata&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;epmc_search()&lt;/code&gt;, &lt;code&gt;epmc_details()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;profile&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Obtain a summary of hit counts for several Europe PMC databases&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;epmc_profile()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;citations&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Load metadata representing citing articles for a given publication&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;epmc_citations()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;references&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Retrieve the reference section of a pubication&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;epmc_refs()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;databaseLinks&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Get links to biological databases such as UniProt or ENA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;epmc_db()&lt;/code&gt;, &lt;code&gt;epmc_db_count()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;labslinks&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Access links to Europe PMC provided by third parties&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;epmc_lablinks()&lt;/code&gt;, &lt;code&gt;epmc_lablinks_count()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;textMinedTerms&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Retrieve text-mined terms&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;epmc_tm()&lt;/code&gt;, &lt;code&gt;epmc_tm_count()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;fullTextXML&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fetch full-texts deposited in PMC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;epmc_ftxt()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;bookXML&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;retrieve book XML formatted full text for the Open Access subset of the Europe PMC bookshelf&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;epmc_ftxt_book()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;search-europe-pmc&#34;&gt;Search Europe PMC&lt;/h3&gt;

&lt;p&gt;The search covers both metadata (e.g. abstracts or title) and full texts. To
build your query, please refer to the comprehensive guidance on how to search
Europe PMC: &lt;a href=&#34;http://europepmc.org/help&#34;&gt;http://europepmc.org/help&lt;/a&gt;. Simply provide your query in the Europe
PMC search syntax to &lt;code&gt;epmc_search()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;epmc_search&lt;/code&gt; returns 100 records. To adjust the limit, simply use
the &lt;code&gt;limit&lt;/code&gt; parameter.&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;For instance, search for abstracts and full texts that mention
&lt;a href=&#34;https://www.gabi-kat.de/&#34;&gt;&lt;code&gt;Gabi-Kat&lt;/code&gt;&lt;/a&gt;,  a Flanking Sequence Tag
(FST)-based database for T-DNA insertion mutants:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_search(query = &#39;Gabi-Kat&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 100 x 27
#&amp;gt;          id source     pmid      pmcid                                doi
#&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                              &amp;lt;chr&amp;gt;
#&amp;gt;  1 28013277    MED 28013277 PMC5444572                 10.1093/pcp/pcw205
#&amp;gt;  2 22080561    MED 22080561 PMC3245140                10.1093/nar/gkr1047
#&amp;gt;  3 17062622    MED 17062622 PMC1781121                 10.1093/nar/gkl753
#&amp;gt;  4 14756321    MED 14756321       &amp;lt;NA&amp;gt; 10.1023/b:plan.0000009297.37235.4a
#&amp;gt;  5 12874060    MED 12874060       &amp;lt;NA&amp;gt;      10.1093/bioinformatics/btg170
#&amp;gt;  6 25324895    MED 25324895 PMC4169229            10.1186/1746-4811-10-28
#&amp;gt;  7 26343971    MED 26343971       &amp;lt;NA&amp;gt;         10.1016/j.molp.2015.08.011
#&amp;gt;  8 27117628    MED 27117628 PMC4846993                  10.1038/srep24971
#&amp;gt;  9 28636198    MED 28636198 PMC5519931                  10.1111/nph.14655
#&amp;gt; 10 26493293    MED 26493293 PMC4737287                  10.1111/tpj.13062
#&amp;gt; # ... with 90 more rows, and 22 more variables: title &amp;lt;chr&amp;gt;,
#&amp;gt; #   authorString &amp;lt;chr&amp;gt;, journalTitle &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;,
#&amp;gt; #   journalVolume &amp;lt;chr&amp;gt;, pubYear &amp;lt;chr&amp;gt;, journalIssn &amp;lt;chr&amp;gt;, pageInfo &amp;lt;chr&amp;gt;,
#&amp;gt; #   pubType &amp;lt;chr&amp;gt;, isOpenAccess &amp;lt;chr&amp;gt;, inEPMC &amp;lt;chr&amp;gt;, inPMC &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasPDF &amp;lt;chr&amp;gt;, hasBook &amp;lt;chr&amp;gt;, hasSuppl &amp;lt;chr&amp;gt;, citedByCount &amp;lt;int&amp;gt;,
#&amp;gt; #   hasReferences &amp;lt;chr&amp;gt;, hasTextMinedTerms &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasDbCrossReferences &amp;lt;chr&amp;gt;, hasLabsLinks &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasTMAccessionNumbers &amp;lt;chr&amp;gt;, firstPublicationDate &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get PLOS Genetics (ISSN:1553-7404) articles that cross-reference EMBL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_search(query = &#39;ISSN:1553-7404 HAS_EMBL:y&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 100 x 27
#&amp;gt;          id source     pmid      pmcid                          doi
#&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                        &amp;lt;chr&amp;gt;
#&amp;gt;  1 28628615    MED 28628615 PMC5495485 10.1371/journal.pgen.1006847
#&amp;gt;  2 28594826    MED 28594826 PMC5481146 10.1371/journal.pgen.1006838
#&amp;gt;  3 28222092    MED 28222092 PMC5340410 10.1371/journal.pgen.1006596
#&amp;gt;  4 27780204    MED 27780204 PMC5079590 10.1371/journal.pgen.1006397
#&amp;gt;  5 27541862    MED 27541862 PMC4991801 10.1371/journal.pgen.1006270
#&amp;gt;  6 27385107    MED 27385107 PMC4934787 10.1371/journal.pgen.1006155
#&amp;gt;  7 27149082    MED 27149082 PMC4858218 10.1371/journal.pgen.1006030
#&amp;gt;  8 27327578    MED 27327578 PMC4915694 10.1371/journal.pgen.1006110
#&amp;gt;  9 27203426    MED 27203426 PMC4874600 10.1371/journal.pgen.1006063
#&amp;gt; 10 27120580    MED 27120580 PMC4847869 10.1371/journal.pgen.1005987
#&amp;gt; # ... with 90 more rows, and 22 more variables: title &amp;lt;chr&amp;gt;,
#&amp;gt; #   authorString &amp;lt;chr&amp;gt;, journalTitle &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;,
#&amp;gt; #   journalVolume &amp;lt;chr&amp;gt;, pubYear &amp;lt;chr&amp;gt;, journalIssn &amp;lt;chr&amp;gt;, pageInfo &amp;lt;chr&amp;gt;,
#&amp;gt; #   pubType &amp;lt;chr&amp;gt;, isOpenAccess &amp;lt;chr&amp;gt;, inEPMC &amp;lt;chr&amp;gt;, inPMC &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasPDF &amp;lt;chr&amp;gt;, hasBook &amp;lt;chr&amp;gt;, hasSuppl &amp;lt;chr&amp;gt;, citedByCount &amp;lt;int&amp;gt;,
#&amp;gt; #   hasReferences &amp;lt;chr&amp;gt;, hasTextMinedTerms &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasDbCrossReferences &amp;lt;chr&amp;gt;, hasLabsLinks &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasTMAccessionNumbers &amp;lt;chr&amp;gt;, firstPublicationDate &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;a href=&#34;https://orcid.org/&#34;&gt;ORCID&lt;/a&gt; to search for personal publications:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_search(query = &#39;AUTHORID:&amp;quot;0000-0002-7635-3473&amp;quot;&#39;, limit = 1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 134 x 27
#&amp;gt;          id source     pmid      pmcid                         doi
#&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                       &amp;lt;chr&amp;gt;
#&amp;gt;  1 28585529    MED 28585529 PMC5467160         10.1038/ncomms15708
#&amp;gt;  2 28284041    MED 28284041       &amp;lt;NA&amp;gt;       10.1515/znc-2016-0221
#&amp;gt;  3 28013277    MED 28013277 PMC5444572          10.1093/pcp/pcw205
#&amp;gt;  4 27230558    MED 27230558 PMC4881148   10.1186/s12870-016-0805-5
#&amp;gt;  5 26980001    MED 26980001 PMC4791833   10.1186/s12864-016-2566-9
#&amp;gt;  6 26676716    MED 26676716       &amp;lt;NA&amp;gt;           10.1111/tpj.13103
#&amp;gt;  7 27557761    MED 27557761       &amp;lt;NA&amp;gt; 10.1007/978-1-4939-6396-6_5
#&amp;gt;  8 26343971    MED 26343971       &amp;lt;NA&amp;gt;  10.1016/j.molp.2015.08.011
#&amp;gt;  9 26328666    MED 26328666 PMC4556409   10.1186/s13059-015-0729-7
#&amp;gt; 10 25891958    MED 25891958       &amp;lt;NA&amp;gt;           10.1111/tpj.12854
#&amp;gt; # ... with 124 more rows, and 22 more variables: title &amp;lt;chr&amp;gt;,
#&amp;gt; #   authorString &amp;lt;chr&amp;gt;, journalTitle &amp;lt;chr&amp;gt;, journalVolume &amp;lt;chr&amp;gt;,
#&amp;gt; #   pubYear &amp;lt;chr&amp;gt;, journalIssn &amp;lt;chr&amp;gt;, pageInfo &amp;lt;chr&amp;gt;, pubType &amp;lt;chr&amp;gt;,
#&amp;gt; #   isOpenAccess &amp;lt;chr&amp;gt;, inEPMC &amp;lt;chr&amp;gt;, inPMC &amp;lt;chr&amp;gt;, hasPDF &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasBook &amp;lt;chr&amp;gt;, hasSuppl &amp;lt;chr&amp;gt;, citedByCount &amp;lt;int&amp;gt;,
#&amp;gt; #   hasReferences &amp;lt;chr&amp;gt;, hasTextMinedTerms &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasDbCrossReferences &amp;lt;chr&amp;gt;, hasLabsLinks &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasTMAccessionNumbers &amp;lt;chr&amp;gt;, firstPublicationDate &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Include MeSH and UniProt synonyms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may also want to include synonyms when searching Europe PMC. If
&lt;code&gt;synonym = TRUE&lt;/code&gt; MeSH and UniProt synonyms are searched as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# with snyonyms
epmc_search(&#39;aspirin&#39;, synonym = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 100 x 27
#&amp;gt;          id source     pmid                               doi
#&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                             &amp;lt;chr&amp;gt;
#&amp;gt;  1 28942878    MED 28942878      10.1016/j.ijcard.2017.06.052
#&amp;gt;  2 28942879    MED 28942879      10.1016/j.ijcard.2017.08.013
#&amp;gt;  3 28990263    MED 28990263                 10.1111/ctr.13133
#&amp;gt;  4 28937039    MED 28937039          10.4103/0366-6999.215330
#&amp;gt;  5 29024912    MED 29024912      10.1016/j.ejogrb.2017.10.004
#&amp;gt;  6 29026148    MED 29026148        10.1038/s41598-017-13430-z
#&amp;gt;  7 28993349    MED 28993349           10.1136/bcr-2017-220483
#&amp;gt;  8 28969559    MED 28969559 10.2174/1871527316666171002115633
#&amp;gt;  9 28965180    MED 28965180         10.1007/s10565-017-9412-y
#&amp;gt; 10 28974502    MED 28974502           10.1161/jaha.117.006328
#&amp;gt; # ... with 90 more rows, and 23 more variables: title &amp;lt;chr&amp;gt;,
#&amp;gt; #   authorString &amp;lt;chr&amp;gt;, journalTitle &amp;lt;chr&amp;gt;, journalVolume &amp;lt;chr&amp;gt;,
#&amp;gt; #   pubYear &amp;lt;chr&amp;gt;, journalIssn &amp;lt;chr&amp;gt;, pageInfo &amp;lt;chr&amp;gt;, pubType &amp;lt;chr&amp;gt;,
#&amp;gt; #   isOpenAccess &amp;lt;chr&amp;gt;, inEPMC &amp;lt;chr&amp;gt;, inPMC &amp;lt;chr&amp;gt;, hasPDF &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasBook &amp;lt;chr&amp;gt;, citedByCount &amp;lt;int&amp;gt;, hasReferences &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasTextMinedTerms &amp;lt;chr&amp;gt;, hasDbCrossReferences &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasLabsLinks &amp;lt;chr&amp;gt;, hasTMAccessionNumbers &amp;lt;chr&amp;gt;,
#&amp;gt; #   firstPublicationDate &amp;lt;chr&amp;gt;, pmcid &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;, hasSuppl &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# without synonyms
epmc_search(&#39;aspirin&#39;, synonym = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 100 x 27
#&amp;gt;          id source     pmid                               doi
#&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                             &amp;lt;chr&amp;gt;
#&amp;gt;  1 28942878    MED 28942878      10.1016/j.ijcard.2017.06.052
#&amp;gt;  2 28937039    MED 28937039          10.4103/0366-6999.215330
#&amp;gt;  3 28969559    MED 28969559 10.2174/1871527316666171002115633
#&amp;gt;  4 28910305    MED 28910305      10.1371/journal.pone.0184027
#&amp;gt;  5 28965180    MED 28965180         10.1007/s10565-017-9412-y
#&amp;gt;  6 29024912    MED 29024912      10.1016/j.ejogrb.2017.10.004
#&amp;gt;  7 28993349    MED 28993349           10.1136/bcr-2017-220483
#&amp;gt;  8 28974502    MED 28974502           10.1161/jaha.117.006328
#&amp;gt;  9 28968454    MED 28968454      10.1371/journal.pone.0185847
#&amp;gt; 10 28900541    MED 28900541       10.1038/cddiscovery.2017.58
#&amp;gt; # ... with 90 more rows, and 23 more variables: title &amp;lt;chr&amp;gt;,
#&amp;gt; #   authorString &amp;lt;chr&amp;gt;, journalTitle &amp;lt;chr&amp;gt;, journalVolume &amp;lt;chr&amp;gt;,
#&amp;gt; #   pubYear &amp;lt;chr&amp;gt;, journalIssn &amp;lt;chr&amp;gt;, pageInfo &amp;lt;chr&amp;gt;, pubType &amp;lt;chr&amp;gt;,
#&amp;gt; #   isOpenAccess &amp;lt;chr&amp;gt;, inEPMC &amp;lt;chr&amp;gt;, inPMC &amp;lt;chr&amp;gt;, hasPDF &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasBook &amp;lt;chr&amp;gt;, citedByCount &amp;lt;int&amp;gt;, hasReferences &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasTextMinedTerms &amp;lt;chr&amp;gt;, hasDbCrossReferences &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasLabsLinks &amp;lt;chr&amp;gt;, hasTMAccessionNumbers &amp;lt;chr&amp;gt;,
#&amp;gt; #   firstPublicationDate &amp;lt;chr&amp;gt;, pmcid &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;, hasSuppl &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output types&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;epmc_search()&lt;/code&gt; supports the following output types :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parsed key metadata (default)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Key metadata parsed as non-nested tibble:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_search(&#39;Gabi-Kat&#39;, output = &#39;parsed&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 100 x 27
#&amp;gt;          id source     pmid      pmcid                                doi
#&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                              &amp;lt;chr&amp;gt;
#&amp;gt;  1 28013277    MED 28013277 PMC5444572                 10.1093/pcp/pcw205
#&amp;gt;  2 22080561    MED 22080561 PMC3245140                10.1093/nar/gkr1047
#&amp;gt;  3 17062622    MED 17062622 PMC1781121                 10.1093/nar/gkl753
#&amp;gt;  4 14756321    MED 14756321       &amp;lt;NA&amp;gt; 10.1023/b:plan.0000009297.37235.4a
#&amp;gt;  5 12874060    MED 12874060       &amp;lt;NA&amp;gt;      10.1093/bioinformatics/btg170
#&amp;gt;  6 25324895    MED 25324895 PMC4169229            10.1186/1746-4811-10-28
#&amp;gt;  7 26343971    MED 26343971       &amp;lt;NA&amp;gt;         10.1016/j.molp.2015.08.011
#&amp;gt;  8 27117628    MED 27117628 PMC4846993                  10.1038/srep24971
#&amp;gt;  9 28636198    MED 28636198 PMC5519931                  10.1111/nph.14655
#&amp;gt; 10 26493293    MED 26493293 PMC4737287                  10.1111/tpj.13062
#&amp;gt; # ... with 90 more rows, and 22 more variables: title &amp;lt;chr&amp;gt;,
#&amp;gt; #   authorString &amp;lt;chr&amp;gt;, journalTitle &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;,
#&amp;gt; #   journalVolume &amp;lt;chr&amp;gt;, pubYear &amp;lt;chr&amp;gt;, journalIssn &amp;lt;chr&amp;gt;, pageInfo &amp;lt;chr&amp;gt;,
#&amp;gt; #   pubType &amp;lt;chr&amp;gt;, isOpenAccess &amp;lt;chr&amp;gt;, inEPMC &amp;lt;chr&amp;gt;, inPMC &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasPDF &amp;lt;chr&amp;gt;, hasBook &amp;lt;chr&amp;gt;, hasSuppl &amp;lt;chr&amp;gt;, citedByCount &amp;lt;int&amp;gt;,
#&amp;gt; #   hasReferences &amp;lt;chr&amp;gt;, hasTextMinedTerms &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasDbCrossReferences &amp;lt;chr&amp;gt;, hasLabsLinks &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasTMAccessionNumbers &amp;lt;chr&amp;gt;, firstPublicationDate &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to fetch bibliographic metadata, the parsed output also helps you
to get a general overview about additional information types that are offered by
Europe PMC and which can be retrieved through other &lt;code&gt;europepmc&lt;/code&gt;-functions.
Columns inform whether open access full texts (&lt;code&gt;isOpenAccess&lt;/code&gt;), cross-links to
other EBI databases (&lt;code&gt;hasDbCrossReferences&lt;/code&gt;), text-mined terms (&lt;code&gt;hasTextMinedTerms&lt;/code&gt;)
or references (&lt;code&gt;hasReferences&lt;/code&gt;) are available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IDs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;List of literature database identifier including PMID:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_search(&#39;Gabi-Kat&#39;, output = &#39;id_list&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 100 x 4
#&amp;gt;          id source     pmid      pmcid
#&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;
#&amp;gt;  1 28013277    MED 28013277 PMC5444572
#&amp;gt;  2 22080561    MED 22080561 PMC3245140
#&amp;gt;  3 17062622    MED 17062622 PMC1781121
#&amp;gt;  4 14756321    MED 14756321       &amp;lt;NA&amp;gt;
#&amp;gt;  5 12874060    MED 12874060       &amp;lt;NA&amp;gt;
#&amp;gt;  6 25324895    MED 25324895 PMC4169229
#&amp;gt;  7 26343971    MED 26343971       &amp;lt;NA&amp;gt;
#&amp;gt;  8 27117628    MED 27117628 PMC4846993
#&amp;gt;  9 28636198    MED 28636198 PMC5519931
#&amp;gt; 10 26493293    MED 26493293 PMC4737287
#&amp;gt; # ... with 90 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Record details&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Full metadata as list. Please be aware that these lists can become very large, and fetching these data from Europe PMC therefore takes some time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_list &amp;lt;- epmc_search(&#39;Gabi-Kat&#39;, output = &#39;raw&#39;, limit = 10)
# display the structure for one list element
str(my_list[[10]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; List of 43
#&amp;gt;  $ id                   : chr &amp;quot;26493293&amp;quot;
#&amp;gt;  $ source               : chr &amp;quot;MED&amp;quot;
#&amp;gt;  $ pmid                 : chr &amp;quot;26493293&amp;quot;
#&amp;gt;  $ pmcid                : chr &amp;quot;PMC4737287&amp;quot;
#&amp;gt;  $ doi                  : chr &amp;quot;10.1111/tpj.13062&amp;quot;
#&amp;gt;  $ title                : chr &amp;quot;The RNA helicase, eIF4A-1, is required for ovule development and cell size homeostasis in Arabidopsis.&amp;quot;
#&amp;gt;  $ authorString         : chr &amp;quot;Bush MS, Crowe N, Zheng T, Doonan JH.&amp;quot;
#&amp;gt;  $ authorList           :List of 1
#&amp;gt;   ..$ author:List of 4
#&amp;gt;   .. ..$ :List of 5
#&amp;gt;   .. .. ..$ fullName   : chr &amp;quot;Bush MS&amp;quot;
#&amp;gt;   .. .. ..$ firstName  : chr &amp;quot;Maxwell S&amp;quot;
#&amp;gt;   .. .. ..$ lastName   : chr &amp;quot;Bush&amp;quot;
#&amp;gt;   .. .. ..$ initials   : chr &amp;quot;MS&amp;quot;
#&amp;gt;   .. .. ..$ affiliation: chr &amp;quot;Department of Cell and Developmental Biology, John Innes Centre, Colney Lane, Norwich, NR4 7UH, UK.&amp;quot;
#&amp;gt;   .. ..$ :List of 5
#&amp;gt;   .. .. ..$ fullName   : chr &amp;quot;Crowe N&amp;quot;
#&amp;gt;   .. .. ..$ firstName  : chr &amp;quot;Natalie&amp;quot;
#&amp;gt;   .. .. ..$ lastName   : chr &amp;quot;Crowe&amp;quot;
#&amp;gt;   .. .. ..$ initials   : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ affiliation: chr &amp;quot;Department of Cell and Developmental Biology, John Innes Centre, Colney Lane, Norwich, NR4 7UH, UK.&amp;quot;
#&amp;gt;   .. ..$ :List of 5
#&amp;gt;   .. .. ..$ fullName   : chr &amp;quot;Zheng T&amp;quot;
#&amp;gt;   .. .. ..$ firstName  : chr &amp;quot;Tao&amp;quot;
#&amp;gt;   .. .. ..$ lastName   : chr &amp;quot;Zheng&amp;quot;
#&amp;gt;   .. .. ..$ initials   : chr &amp;quot;T&amp;quot;
#&amp;gt;   .. .. ..$ affiliation: chr &amp;quot;Department of Cell and Developmental Biology, John Innes Centre, Colney Lane, Norwich, NR4 7UH, UK.&amp;quot;
#&amp;gt;   .. ..$ :List of 6
#&amp;gt;   .. .. ..$ fullName   : chr &amp;quot;Doonan JH&amp;quot;
#&amp;gt;   .. .. ..$ firstName  : chr &amp;quot;John H&amp;quot;
#&amp;gt;   .. .. ..$ lastName   : chr &amp;quot;Doonan&amp;quot;
#&amp;gt;   .. .. ..$ initials   : chr &amp;quot;JH&amp;quot;
#&amp;gt;   .. .. ..$ authorId   :List of 2
#&amp;gt;   .. .. .. ..$ type : chr &amp;quot;ORCID&amp;quot;
#&amp;gt;   .. .. .. ..$ value: chr &amp;quot;0000-0001-6027-1919&amp;quot;
#&amp;gt;   .. .. ..$ affiliation: chr &amp;quot;Institute of Biological, Environmental &amp;amp; Rural Sciences, Aberystwyth University, Gogerddan Campus, Aberystwyth, SY23 3EE, UK.&amp;quot;
#&amp;gt;  $ authorIdList         :List of 1
#&amp;gt;   ..$ authorId:List of 1
#&amp;gt;   .. ..$ :List of 2
#&amp;gt;   .. .. ..$ type : chr &amp;quot;ORCID&amp;quot;
#&amp;gt;   .. .. ..$ value: chr &amp;quot;0000-0001-6027-1919&amp;quot;
#&amp;gt;  $ journalInfo          :List of 8
#&amp;gt;   ..$ issue               : chr &amp;quot;5&amp;quot;
#&amp;gt;   ..$ volume              : chr &amp;quot;84&amp;quot;
#&amp;gt;   ..$ journalIssueId      : int 2363412
#&amp;gt;   ..$ dateOfPublication   : chr &amp;quot;2015 Dec&amp;quot;
#&amp;gt;   ..$ monthOfPublication  : int 12
#&amp;gt;   ..$ yearOfPublication   : int 2015
#&amp;gt;   ..$ printPublicationDate: chr &amp;quot;2015-12-01&amp;quot;
#&amp;gt;   ..$ journal             :List of 6
#&amp;gt;   .. ..$ title              : chr &amp;quot;The Plant journal : for cell and molecular biology&amp;quot;
#&amp;gt;   .. ..$ medlineAbbreviation: chr &amp;quot;Plant J&amp;quot;
#&amp;gt;   .. ..$ essn               : chr &amp;quot;1365-313X&amp;quot;
#&amp;gt;   .. ..$ issn               : chr &amp;quot;0960-7412&amp;quot;
#&amp;gt;   .. ..$ isoabbreviation    : chr &amp;quot;Plant J.&amp;quot;
#&amp;gt;   .. ..$ nlmid              : chr &amp;quot;9207397&amp;quot;
#&amp;gt;  $ pubYear              : chr &amp;quot;2015&amp;quot;
#&amp;gt;  $ pageInfo             : chr &amp;quot;989-1004&amp;quot;
#&amp;gt;  $ abstractText         : chr &amp;quot;eIF4A is a highly conserved RNA-stimulated ATPase and helicase involved in the initiation of mRNA translation. &amp;quot;| __truncated__
#&amp;gt;  $ affiliation          : chr &amp;quot;Department of Cell and Developmental Biology, John Innes Centre, Colney Lane, Norwich, NR4 7UH, UK.&amp;quot;
#&amp;gt;  $ language             : chr &amp;quot;eng&amp;quot;
#&amp;gt;  $ pubModel             : chr &amp;quot;Print&amp;quot;
#&amp;gt;  $ pubTypeList          :List of 1
#&amp;gt;   ..$ pubType: chr [1:3] &amp;quot;Research Support, Non-U.S. Gov&#39;t&amp;quot; &amp;quot;research-article&amp;quot; &amp;quot;Journal Article&amp;quot;
#&amp;gt;  $ grantsList           :List of 1
#&amp;gt;   ..$ grant:List of 1
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ grantId: chr &amp;quot;BB/C507988/1&amp;quot;
#&amp;gt;   .. .. ..$ agency : chr &amp;quot;Biotechnology and Biological Sciences Research Council&amp;quot;
#&amp;gt;   .. .. ..$ orderIn: int 0
#&amp;gt;  $ meshHeadingList      :List of 1
#&amp;gt;   ..$ meshHeading:List of 14
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Arabidopsis&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 3
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;CY&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;cytology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;GE&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;genetics&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;PH&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;physiology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;Y&amp;quot;
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Flowers&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 3
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;CY&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;cytology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;GE&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;genetics&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;PH&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;physiology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Meristem&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 3
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;CY&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;cytology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;GE&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;genetics&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;PH&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;physiology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Plant Roots&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 3
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;CY&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;cytology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;ME&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;metabolism&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;PH&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;physiology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Eukaryotic Initiation Factor-4A&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 3
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;GE&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;genetics&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;ME&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;metabolism&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;PH&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;physiology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;Y&amp;quot;
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Arabidopsis Proteins&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 2
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;GE&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;genetics&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;PH&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;physiology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;Y&amp;quot;
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Protein Isoforms&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 3
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;GE&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;genetics&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;ME&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;metabolism&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;PH&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;physiology&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Cell Cycle&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 1
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;GE&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;genetics&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Mitosis&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 1
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;GE&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;genetics&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;   .. ..$ :List of 2
#&amp;gt;   .. .. ..$ majorTopic_YN : chr &amp;quot;Y&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName: chr &amp;quot;Cell Size&amp;quot;
#&amp;gt;   .. ..$ :List of 2
#&amp;gt;   .. .. ..$ majorTopic_YN : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName: chr &amp;quot;Homeostasis&amp;quot;
#&amp;gt;   .. ..$ :List of 2
#&amp;gt;   .. .. ..$ majorTopic_YN : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName: chr &amp;quot;Mutation&amp;quot;
#&amp;gt;   .. ..$ :List of 2
#&amp;gt;   .. .. ..$ majorTopic_YN : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName: chr &amp;quot;Genome, Plant&amp;quot;
#&amp;gt;   .. ..$ :List of 3
#&amp;gt;   .. .. ..$ majorTopic_YN    : chr &amp;quot;N&amp;quot;
#&amp;gt;   .. .. ..$ descriptorName   : chr &amp;quot;Ovule&amp;quot;
#&amp;gt;   .. .. ..$ meshQualifierList:List of 1
#&amp;gt;   .. .. .. ..$ meshQualifier:List of 2
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;GD&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;growth &amp;amp; development&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;Y&amp;quot;
#&amp;gt;   .. .. .. .. ..$ :List of 3
#&amp;gt;   .. .. .. .. .. ..$ abbreviation : chr &amp;quot;ME&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ qualifierName: chr &amp;quot;metabolism&amp;quot;
#&amp;gt;   .. .. .. .. .. ..$ majorTopic_YN: chr &amp;quot;N&amp;quot;
#&amp;gt;  $ keywordList          :List of 1
#&amp;gt;   ..$ keyword: chr [1:7] &amp;quot;Arabidopsis thaliana&amp;quot; &amp;quot;Cell cycle&amp;quot; &amp;quot;Plant growth&amp;quot; &amp;quot;RNA helicase&amp;quot; ...
#&amp;gt;  $ chemicalList         :List of 1
#&amp;gt;   ..$ chemical:List of 3
#&amp;gt;   .. ..$ :List of 2
#&amp;gt;   .. .. ..$ name          : chr &amp;quot;Protein Isoforms&amp;quot;
#&amp;gt;   .. .. ..$ registryNumber: chr &amp;quot;0&amp;quot;
#&amp;gt;   .. ..$ :List of 2
#&amp;gt;   .. .. ..$ name          : chr &amp;quot;Eukaryotic Initiation Factor-4A&amp;quot;
#&amp;gt;   .. .. ..$ registryNumber: chr &amp;quot;EC 2.7.7.-&amp;quot;
#&amp;gt;   .. ..$ :List of 2
#&amp;gt;   .. .. ..$ name          : chr &amp;quot;Arabidopsis Proteins&amp;quot;
#&amp;gt;   .. .. ..$ registryNumber: chr &amp;quot;0&amp;quot;
#&amp;gt;  $ subsetList           :List of 1
#&amp;gt;   ..$ subset:List of 1
#&amp;gt;   .. ..$ :List of 2
#&amp;gt;   .. .. ..$ code: chr &amp;quot;IM&amp;quot;
#&amp;gt;   .. .. ..$ name: chr &amp;quot;Index Medicus&amp;quot;
#&amp;gt;  $ fullTextUrlList      :List of 1
#&amp;gt;   ..$ fullTextUrl:List of 3
#&amp;gt;   .. ..$ :List of 5
#&amp;gt;   .. .. ..$ availability    : chr &amp;quot;Open access&amp;quot;
#&amp;gt;   .. .. ..$ availabilityCode: chr &amp;quot;OA&amp;quot;
#&amp;gt;   .. .. ..$ documentStyle   : chr &amp;quot;pdf&amp;quot;
#&amp;gt;   .. .. ..$ site            : chr &amp;quot;Europe_PMC&amp;quot;
#&amp;gt;   .. .. ..$ url             : chr &amp;quot;http://europepmc.org/articles/PMC4737287?pdf=render&amp;quot;
#&amp;gt;   .. ..$ :List of 5
#&amp;gt;   .. .. ..$ availability    : chr &amp;quot;Open access&amp;quot;
#&amp;gt;   .. .. ..$ availabilityCode: chr &amp;quot;OA&amp;quot;
#&amp;gt;   .. .. ..$ documentStyle   : chr &amp;quot;html&amp;quot;
#&amp;gt;   .. .. ..$ site            : chr &amp;quot;Europe_PMC&amp;quot;
#&amp;gt;   .. .. ..$ url             : chr &amp;quot;http://europepmc.org/articles/PMC4737287&amp;quot;
#&amp;gt;   .. ..$ :List of 5
#&amp;gt;   .. .. ..$ availability    : chr &amp;quot;Subscription required&amp;quot;
#&amp;gt;   .. .. ..$ availabilityCode: chr &amp;quot;S&amp;quot;
#&amp;gt;   .. .. ..$ documentStyle   : chr &amp;quot;doi&amp;quot;
#&amp;gt;   .. .. ..$ site            : chr &amp;quot;DOI&amp;quot;
#&amp;gt;   .. .. ..$ url             : chr &amp;quot;https://doi.org/10.1111/tpj.13062&amp;quot;
#&amp;gt;  $ isOpenAccess         : chr &amp;quot;Y&amp;quot;
#&amp;gt;  $ inEPMC               : chr &amp;quot;Y&amp;quot;
#&amp;gt;  $ inPMC                : chr &amp;quot;N&amp;quot;
#&amp;gt;  $ hasPDF               : chr &amp;quot;Y&amp;quot;
#&amp;gt;  $ hasBook              : chr &amp;quot;N&amp;quot;
#&amp;gt;  $ hasSuppl             : chr &amp;quot;Y&amp;quot;
#&amp;gt;  $ citedByCount         : int 0
#&amp;gt;  $ hasReferences        : chr &amp;quot;Y&amp;quot;
#&amp;gt;  $ hasTextMinedTerms    : chr &amp;quot;Y&amp;quot;
#&amp;gt;  $ hasDbCrossReferences : chr &amp;quot;N&amp;quot;
#&amp;gt;  $ hasLabsLinks         : chr &amp;quot;Y&amp;quot;
#&amp;gt;  $ license              : chr &amp;quot;cc by&amp;quot;
#&amp;gt;  $ authMan              : chr &amp;quot;N&amp;quot;
#&amp;gt;  $ epmcAuthMan          : chr &amp;quot;N&amp;quot;
#&amp;gt;  $ nihAuthMan           : chr &amp;quot;N&amp;quot;
#&amp;gt;  $ hasTMAccessionNumbers: chr &amp;quot;N&amp;quot;
#&amp;gt;  $ dateOfCompletion     : chr &amp;quot;2016-12-13&amp;quot;
#&amp;gt;  $ dateOfCreation       : chr &amp;quot;2016-01-16&amp;quot;
#&amp;gt;  $ dateOfRevision       : chr &amp;quot;2016-12-30&amp;quot;
#&amp;gt;  $ firstPublicationDate : chr &amp;quot;2015-10-23&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get results number&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Count hits before with &lt;code&gt;epmc_hits&lt;/code&gt; to define limit. For example, get list of ids
that represent articles referencing DataCite DOIs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;query &amp;lt;- &amp;quot;ACCESSION_TYPE:doi&amp;quot;
epmc_hits(query)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] 9054
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# set limit to 10 records
my_data &amp;lt;- epmc_search(query = query, limit = 10)
head(my_data)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 6 x 27
#&amp;gt;         id source     pmid      pmcid                        doi
#&amp;gt;      &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                      &amp;lt;chr&amp;gt;
#&amp;gt; 1 28994823    MED 28994823 PMC5634324     10.1038/sdata.2017.144
#&amp;gt; 2 28993608    MED 28993608 PMC5634421 10.1038/s41467-017-00565-w
#&amp;gt; 3 28972575    MED 28972575 PMC5625552     10.1038/sdata.2017.141
#&amp;gt; 4 28972570    MED 28972570 PMC5625556     10.1038/sdata.2017.139
#&amp;gt; 5 28970545    MED 28970545 PMC5624899 10.1038/s41598-017-12757-x
#&amp;gt; 6 28983202    MED 28983202 PMC5624428      10.5195/jmla.2017.176
#&amp;gt; # ... with 22 more variables: title &amp;lt;chr&amp;gt;, authorString &amp;lt;chr&amp;gt;,
#&amp;gt; #   journalTitle &amp;lt;chr&amp;gt;, journalVolume &amp;lt;chr&amp;gt;, pubYear &amp;lt;chr&amp;gt;,
#&amp;gt; #   journalIssn &amp;lt;chr&amp;gt;, pageInfo &amp;lt;chr&amp;gt;, pubType &amp;lt;chr&amp;gt;, isOpenAccess &amp;lt;chr&amp;gt;,
#&amp;gt; #   inEPMC &amp;lt;chr&amp;gt;, inPMC &amp;lt;chr&amp;gt;, hasPDF &amp;lt;chr&amp;gt;, hasBook &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasSuppl &amp;lt;chr&amp;gt;, citedByCount &amp;lt;int&amp;gt;, hasReferences &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasTextMinedTerms &amp;lt;chr&amp;gt;, hasDbCrossReferences &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasLabsLinks &amp;lt;chr&amp;gt;, hasTMAccessionNumbers &amp;lt;chr&amp;gt;,
#&amp;gt; #   firstPublicationDate &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attr(my_data, &amp;quot;hit_count&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] 9054
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also use &lt;code&gt;epmc_profile&lt;/code&gt; to retrieve a summary of hit counts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_profile(query = &#39;malaria&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $source
#&amp;gt; # A tibble: 10 x 2
#&amp;gt;     name  count
#&amp;gt;  * &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
#&amp;gt;  1   AGR    121
#&amp;gt;  2   CBA    113
#&amp;gt;  3   CTX      7
#&amp;gt;  4   ETH    179
#&amp;gt;  5   HIR      4
#&amp;gt;  6   MED 122218
#&amp;gt;  7   PAT   2252
#&amp;gt;  8   CIT      0
#&amp;gt;  9   PMC  13740
#&amp;gt; 10   PPR      3
#&amp;gt; 
#&amp;gt; $pubType
#&amp;gt; # A tibble: 5 x 2
#&amp;gt;                  name  count
#&amp;gt; *               &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;
#&amp;gt; 1                 ALL 138637
#&amp;gt; 2           FULL TEXT  88064
#&amp;gt; 3         OPEN ACCESS  42550
#&amp;gt; 4              REVIEW  16950
#&amp;gt; 5 BOOKS AND DOCUMENTS    117
#&amp;gt; 
#&amp;gt; $subset
#&amp;gt; # A tibble: 1 x 2
#&amp;gt;    name count
#&amp;gt; * &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1    BL     3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get article details&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In addition to key metadata, &lt;code&gt;epmc_details&lt;/code&gt; also returns full metadata
providing more comprehensive information on the article-level. By default,
PubMed / Medline index is searched.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_details(ext_id = &#39;24270414&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $basic
#&amp;gt; # A tibble: 1 x 32
#&amp;gt;         id source     pmid      pmcid              doi
#&amp;gt; *    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;
#&amp;gt; 1 24270414    MED 24270414 PMC3859427 10.1172/jci73168
#&amp;gt; # ... with 27 more variables: title &amp;lt;chr&amp;gt;, authorString &amp;lt;chr&amp;gt;,
#&amp;gt; #   pubYear &amp;lt;chr&amp;gt;, pageInfo &amp;lt;chr&amp;gt;, abstractText &amp;lt;chr&amp;gt;, language &amp;lt;chr&amp;gt;,
#&amp;gt; #   pubModel &amp;lt;chr&amp;gt;, isOpenAccess &amp;lt;chr&amp;gt;, inEPMC &amp;lt;chr&amp;gt;, inPMC &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasPDF &amp;lt;chr&amp;gt;, hasBook &amp;lt;chr&amp;gt;, hasSuppl &amp;lt;chr&amp;gt;, citedByCount &amp;lt;int&amp;gt;,
#&amp;gt; #   hasReferences &amp;lt;chr&amp;gt;, hasTextMinedTerms &amp;lt;chr&amp;gt;,
#&amp;gt; #   hasDbCrossReferences &amp;lt;chr&amp;gt;, hasLabsLinks &amp;lt;chr&amp;gt;, authMan &amp;lt;chr&amp;gt;,
#&amp;gt; #   epmcAuthMan &amp;lt;chr&amp;gt;, nihAuthMan &amp;lt;chr&amp;gt;, hasTMAccessionNumbers &amp;lt;chr&amp;gt;,
#&amp;gt; #   dateOfCompletion &amp;lt;chr&amp;gt;, dateOfCreation &amp;lt;chr&amp;gt;, dateOfRevision &amp;lt;chr&amp;gt;,
#&amp;gt; #   electronicPublicationDate &amp;lt;chr&amp;gt;, firstPublicationDate &amp;lt;chr&amp;gt;
#&amp;gt; 
#&amp;gt; $author_details
#&amp;gt; # A tibble: 2 x 6
#&amp;gt;           fullName firstName       lastName initials authorId.type
#&amp;gt; *            &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;
#&amp;gt; 1 Malaga-Dieguez L     Laura Malaga-Dieguez        L         ORCID
#&amp;gt; 2        Susztak K   Katalin        Susztak        K          &amp;lt;NA&amp;gt;
#&amp;gt; # ... with 1 more variables: authorId.value &amp;lt;chr&amp;gt;
#&amp;gt; 
#&amp;gt; $journal_info
#&amp;gt; # A tibble: 1 x 13
#&amp;gt;   issue volume journalIssueId dateOfPublication monthOfPublication
#&amp;gt; * &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;             &amp;lt;chr&amp;gt;              &amp;lt;int&amp;gt;
#&amp;gt; 1    12    123        2099360          2013 Dec                 12
#&amp;gt; # ... with 8 more variables: yearOfPublication &amp;lt;int&amp;gt;,
#&amp;gt; #   printPublicationDate &amp;lt;chr&amp;gt;, journal.title &amp;lt;chr&amp;gt;,
#&amp;gt; #   journal.medlineAbbreviation &amp;lt;chr&amp;gt;, journal.essn &amp;lt;chr&amp;gt;,
#&amp;gt; #   journal.issn &amp;lt;chr&amp;gt;, journal.isoabbreviation &amp;lt;chr&amp;gt;, journal.nlmid &amp;lt;chr&amp;gt;
#&amp;gt; 
#&amp;gt; $ftx
#&amp;gt; # A tibble: 5 x 5
#&amp;gt;            availability availabilityCode documentStyle          site
#&amp;gt; *                 &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;
#&amp;gt; 1                  Free                F           pdf    Europe_PMC
#&amp;gt; 2                  Free                F          html    Europe_PMC
#&amp;gt; 3                  Free                F           pdf PubMedCentral
#&amp;gt; 4                  Free                F          html PubMedCentral
#&amp;gt; 5 Subscription required                S           doi           DOI
#&amp;gt; # ... with 1 more variables: url &amp;lt;chr&amp;gt;
#&amp;gt; 
#&amp;gt; $chemical
#&amp;gt; # A tibble: 4 x 2
#&amp;gt;                                     name registryNumber
#&amp;gt; *                                  &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;
#&amp;gt; 1                             Ubiquinone      1339-63-5
#&amp;gt; 2                        Protein Kinases       EC 2.7.-
#&amp;gt; 3 aarF domain containing kinase 4, human       EC 2.7.-
#&amp;gt; 4                           coenzyme Q10     EJ27X76M46
#&amp;gt; 
#&amp;gt; $mesh_topic
#&amp;gt; # A tibble: 5 x 2
#&amp;gt;   majorTopic_YN     descriptorName
#&amp;gt; *         &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;
#&amp;gt; 1             N            Animals
#&amp;gt; 2             N             Humans
#&amp;gt; 3             N Nephrotic Syndrome
#&amp;gt; 4             N         Ubiquinone
#&amp;gt; 5             N    Protein Kinases
#&amp;gt; 
#&amp;gt; $mesh_qualifiers
#&amp;gt; # A tibble: 4 x 4
#&amp;gt;       descriptorName abbreviation         qualifierName majorTopic_YN
#&amp;gt;                &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;
#&amp;gt; 1 Nephrotic Syndrome           GE              genetics             Y
#&amp;gt; 2         Ubiquinone           AA analogs &amp;amp; derivatives             Y
#&amp;gt; 3         Ubiquinone           BI          biosynthesis             N
#&amp;gt; 4    Protein Kinases           PH            physiology             Y
#&amp;gt; 
#&amp;gt; $comments
#&amp;gt; # A tibble: 1 x 5
#&amp;gt;         id source                               reference       type
#&amp;gt; *    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;                                   &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;
#&amp;gt; 1 24270420    MED J Clin Invest. 2013 Dec;123(12):5179-89 Comment on
#&amp;gt; # ... with 1 more variables: orderIn &amp;lt;int&amp;gt;
#&amp;gt; 
#&amp;gt; $grants
#&amp;gt; # A tibble: 3 x 4
#&amp;gt;        grantId        agency acronym orderIn
#&amp;gt; *        &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;
#&amp;gt; 1 R01 DK076077 NIDDK NIH HHS      DK       0
#&amp;gt; 2  R01DK076077 NIDDK NIH HHS      DK       0
#&amp;gt; 3 R01 DK087635 NIDDK NIH HHS      DK       0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show author details including ORCID:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_details(ext_id = &#39;14756321&#39;)$author_details
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 6 x 6
#&amp;gt;      fullName firstName  lastName initials authorId.type
#&amp;gt; *       &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;
#&amp;gt; 1    Rosso MG   Mario G     Rosso       MG          &amp;lt;NA&amp;gt;
#&amp;gt; 2        Li Y      Yong        Li        Y          &amp;lt;NA&amp;gt;
#&amp;gt; 3  Strizhov N   Nicolai  Strizhov        N          &amp;lt;NA&amp;gt;
#&amp;gt; 4     Reiss B     Bernd     Reiss        B         ORCID
#&amp;gt; 5    Dekker K      Koen    Dekker        K          &amp;lt;NA&amp;gt;
#&amp;gt; 6 Weisshaar B     Bernd Weisshaar        B         ORCID
#&amp;gt; # ... with 1 more variables: authorId.value &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get citation counts and citing publications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Citing publications from the Europe PMC index can be retrieved like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_cites &amp;lt;- epmc_citations(&#39;9338777&#39;)
my_cites
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 100 x 12
#&amp;gt;          id source
#&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;
#&amp;gt;  1 10221475    MED
#&amp;gt;  2 10342317    MED
#&amp;gt;  3 10440384    MED
#&amp;gt;  4  9696842    MED
#&amp;gt;  5  9703304    MED
#&amp;gt;  6  9728974    MED
#&amp;gt;  7  9728985    MED
#&amp;gt;  8  9728986    MED
#&amp;gt;  9  9728987    MED
#&amp;gt; 10 11134319    MED
#&amp;gt; # ... with 90 more rows, and 10 more variables: citationType &amp;lt;chr&amp;gt;,
#&amp;gt; #   title &amp;lt;chr&amp;gt;, authorString &amp;lt;chr&amp;gt;, journalAbbreviation &amp;lt;chr&amp;gt;,
#&amp;gt; #   pubYear &amp;lt;int&amp;gt;, volume &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;, pageInfo &amp;lt;chr&amp;gt;,
#&amp;gt; #   citedByCount &amp;lt;int&amp;gt;, text &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# hits:
attr(my_cites, &#39;hit_count&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; [1] 208
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note, that citation counts are often smaller than those held by toll-
access services such as Web of Science or Scopus because the number of
reference sections indexed for Europe PMC considerably differs due to the
lack of full text accessibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get reference section&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Europe PMC indexes more than 5 million reference sections.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_refs(&#39;PMC3166943&#39;, data_src = &#39;pmc&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 18 x 16
#&amp;gt;          id source    citationType
#&amp;gt;       &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;
#&amp;gt;  1 10802651    MED JOURNAL ARTICLE
#&amp;gt;  2     &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt;
#&amp;gt;  3 18077472    MED JOURNAL ARTICLE
#&amp;gt;  4 15642104    MED JOURNAL ARTICLE
#&amp;gt;  5 18460184    MED JOURNAL ARTICLE
#&amp;gt;  6 17989687    MED JOURNAL ARTICLE
#&amp;gt;  7 20848809    MED JOURNAL ARTICLE
#&amp;gt;  8 20139945    MED JOURNAL ARTICLE
#&amp;gt;  9     &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt;
#&amp;gt; 10 17267433    MED JOURNAL ARTICLE
#&amp;gt; 11 15199967    MED JOURNAL ARTICLE
#&amp;gt; 12 14681407    MED JOURNAL ARTICLE
#&amp;gt; 13 16756499    MED JOURNAL ARTICLE
#&amp;gt; 14 16959967    MED JOURNAL ARTICLE
#&amp;gt; 15 16518471    MED JOURNAL ARTICLE
#&amp;gt; 16 11901169    MED JOURNAL ARTICLE
#&amp;gt; 17 15892874    MED JOURNAL ARTICLE
#&amp;gt; 18     &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;            &amp;lt;NA&amp;gt;
#&amp;gt; # ... with 13 more variables: title &amp;lt;chr&amp;gt;, authorString &amp;lt;chr&amp;gt;,
#&amp;gt; #   journalAbbreviation &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;, pubYear &amp;lt;int&amp;gt;, volume &amp;lt;chr&amp;gt;,
#&amp;gt; #   pageInfo &amp;lt;chr&amp;gt;, citedOrder &amp;lt;int&amp;gt;, match &amp;lt;chr&amp;gt;, essn &amp;lt;chr&amp;gt;, issn &amp;lt;chr&amp;gt;,
#&amp;gt; #   publicationTitle &amp;lt;chr&amp;gt;, externalLink &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tip: add &lt;code&gt;has_reflist:y&lt;/code&gt; to your search string in &lt;code&gt;epmc_search&lt;/code&gt; to make sure
you only get publications whose reference sections are accessible through
Europe PMC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retrieve links to other EBI databases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cross-links to EBI databases are either manually curated (ENA, InterPro, PDB,
IntAct, ChEMBL, ChEBI and ArrayExpress) or automatically gathered through
text-mining (European Nucleotide Archive, UniProt, PDB, OMIM, RefSNP, RefSeq,
Pfam, InterPro, Ensembl, ArrayExpress and data DOIs).&lt;/p&gt;

&lt;p&gt;Before retrieving the links, please check availability and sources first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_db_count(&#39;12368864&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 3 x 2
#&amp;gt;     dbName count
#&amp;gt; *    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1     EMBL    10
#&amp;gt; 2 INTERPRO     1
#&amp;gt; 3  UNIPROT  5588
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add &lt;code&gt;has_xrefs:y&lt;/code&gt; or to your search string in &lt;code&gt;epmc_search&lt;/code&gt; to make sure
you only get publications with cross-references to EBI databases.&lt;/p&gt;

&lt;p&gt;Select database and get links:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_db(&#39;12368864&#39;, db = &#39;embl&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 10 x 4
#&amp;gt;       info1                                                       info2
#&amp;gt;       &amp;lt;chr&amp;gt;                                                       &amp;lt;chr&amp;gt;
#&amp;gt;  1 AE014187 Plasmodium falciparum 3D7 chromosome 14, complete sequence.
#&amp;gt;  2 AE014186 Plasmodium falciparum 3D7 chromosome 11, complete sequence.
#&amp;gt;  3 LN999943  Plasmodium falciparum 3D7 chromosome 2, complete sequence.
#&amp;gt;  4 AE001362  Plasmodium falciparum 3D7 chromosome 2, complete sequence.
#&amp;gt;  5 LN999947 Plasmodium falciparum 3D7 chromosome 12, complete sequence.
#&amp;gt;  6 AE014185 Plasmodium falciparum 3D7 chromosome 10, complete sequence.
#&amp;gt;  7 LN999944 Plasmodium falciparum 3D7 chromosome 10, complete sequence.
#&amp;gt;  8 LN999945 Plasmodium falciparum 3D7 chromosome 11, complete sequence.
#&amp;gt;  9 LN999946 Plasmodium falciparum 3D7 chromosome 14, complete sequence.
#&amp;gt; 10 AE014188 Plasmodium falciparum 3D7 chromosome 12, complete sequence.
#&amp;gt; # ... with 2 more variables: info3 &amp;lt;chr&amp;gt;, info4 &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Get text-mined terms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Text-mined terms that can be accessed via Europe PMC are mapped against
controlled vocabularies like &lt;a href=&#34;http://www.geneontology.org/&#34;&gt;Gene Ontology&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before retrieving these terms, please check availability and vocabularies
first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_tm_count(&#39;25249410&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 7 x 2
#&amp;gt;           name count
#&amp;gt; *        &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1    accession     1
#&amp;gt; 2     chemical    25
#&amp;gt; 3      disease     1
#&amp;gt; 4          efo    28
#&amp;gt; 5 gene_protein    51
#&amp;gt; 6      go_term    17
#&amp;gt; 7     organism    27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Select vocabulary to retrieve the terms:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_tm(&#39;25249410&#39;, semantic_type = &#39;GO_TERM&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt;                             term count              altName dbName    dbId
#&amp;gt; 1                     chromosome    25          chromosomes     GO 0005694
#&amp;gt; 2                   biosynthesis    16 formation, synthesis     GO 0009058
#&amp;gt; 3                        binding     9                          GO 0005488
#&amp;gt; 4                          cells     5                 cell     GO 0005623
#&amp;gt; 5                         growth     4               Growth     GO 0040007
#&amp;gt; 6         flavonoid biosynthesis     3                          GO 0009813
#&amp;gt; 7                gene expression     2                          GO 0010467
#&amp;gt; 8           secondary metabolism     2                          GO 0019748
#&amp;gt; 9                     metabolism     2                          GO 0008152
#&amp;gt; 10             defense responses     1                          GO 0006952
#&amp;gt; 11            cell cycle control     1                          GO 1901987
#&amp;gt; 12 regulation of gene expression     1                          GO 0010468
#&amp;gt; 13    glucosinolate biosynthesis     1                          GO 0019761
#&amp;gt; 14              cell development     1                          GO 0048468
#&amp;gt; 15                    root hairs     1                          GO 0035618
#&amp;gt; 16      anthocyanin biosynthesis     1                          GO 0009718
#&amp;gt; 17             enzyme activities     1                          GO 0003824
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Links to external sources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the External Link services, Europe PMC allows third parties to publish
links from Europe PMC to other webpages. Current External Link providers,
whose id can be found through Europe PMC&amp;rsquo;s Advanced Search interface, include
Wikipedia, Dryad Digital Repository or the institutional repo of Bielefeld
University. For more information, see &lt;a href=&#34;http://europepmc.org/labslink&#34;&gt;http://europepmc.org/labslink&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check availability and number of links:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_lablinks_count(&#39;PMC3986813&#39;, data_src = &#39;pmc&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 5 x 2
#&amp;gt;       providerName linksCount
#&amp;gt; *            &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
#&amp;gt; 1 EBI Train Online          1
#&amp;gt; 2        Wikipedia          1
#&amp;gt; 3       BioStudies          1
#&amp;gt; 4          Publons          1
#&amp;gt; 5        Altmetric          1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get links from Wikipedia (&lt;code&gt;lab_id = &#39;1507&#39;&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_lablinks(&#39;20301687&#39;, lab_id = &#39;1507&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 2 x 6
#&amp;gt;                                    title
#&amp;gt;                                    &amp;lt;chr&amp;gt;
#&amp;gt; 1                        Werner_syndrome
#&amp;gt; 2 Werner_syndrome_ATP-dependent_helicase
#&amp;gt; # ... with 5 more variables: url &amp;lt;chr&amp;gt;, imgUrl &amp;lt;lgl&amp;gt;, lab_id &amp;lt;int&amp;gt;,
#&amp;gt; #   lab_name &amp;lt;fctr&amp;gt;, lab_description &amp;lt;fctr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Full text access&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Full texts are in XML format and are only provided for the Open Access subset
of Europe PMC. They can be retrieved by the PMCID.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;epmc_ftxt(&#39;PMC3257301&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; {xml_document}
#&amp;gt; &amp;lt;article article-type=&amp;quot;research-article&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; xmlns:mml=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;
#&amp;gt; [1] &amp;lt;front&amp;gt;\n  &amp;lt;journal-meta&amp;gt;\n    &amp;lt;journal-id journal-id-type=&amp;quot;nlm-ta&amp;quot;&amp;gt; ...
#&amp;gt; [2] &amp;lt;body&amp;gt;\n  &amp;lt;sec id=&amp;quot;s1&amp;quot;&amp;gt;\n    &amp;lt;title&amp;gt;Introduction&amp;lt;/title&amp;gt;\n    &amp;lt;p&amp;gt;Atm ...
#&amp;gt; [3] &amp;lt;back&amp;gt;\n  &amp;lt;ack&amp;gt;\n    &amp;lt;p&amp;gt;We would like to thank Dr. C. Gourlay and Dr ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Books, fetched through the PMID or the &amp;lsquo;NBK&amp;rsquo; book number, can also be loaded
as XML into R for further text-mining activities using &lt;code&gt;epmc_ftxt_book()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please check full-text availability before calling this method either with &lt;code&gt;epmc_search()&lt;/code&gt; or &lt;code&gt;epmc_details()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;p&gt;To cite &lt;code&gt;europepmc&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Najko Jahn (2017). europepmc: R Interface to the Europe PubMed Central RESTful Web Service. R
  package version 0.1.4. &lt;a href=&#34;https://cran.rstudio.com/package=europepmc&#34;&gt;https://cran.rstudio.com/package=europepmc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/europepmc/issues?state=open&#34;&gt;our Github repo for europepmc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>fulltext vignette</title>
      <link>https://ropensci.org/tutorials/fulltext_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/fulltext_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;code&gt;fulltext&lt;/code&gt; is a package to facilitate text mining. It focuses on open access journals. This package makes it easier to search for articles, download those articles in full text if available, convert pdf format to plain text, and extract text chunks for vizualization/analysis. We are planning to add bits for analysis in future versions. The steps in bullet form:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search - search for articles&lt;/li&gt;
&lt;li&gt;Retrieve - get full text&lt;/li&gt;
&lt;li&gt;Convert - convert from format X to Y&lt;/li&gt;
&lt;li&gt;Text - if needed, get text from pdfs/etc.&lt;/li&gt;
&lt;li&gt;Extract - pull out the bits of articles that you want&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;You can install from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;fulltext&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or the development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&amp;quot;devtools&amp;quot;)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/fulltext&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Load the package&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;fulltext&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;h4 id=&#34;search-for-articles&#34;&gt;Search for articles&lt;/h4&gt;

&lt;p&gt;Search for the term &lt;em&gt;ecology&lt;/em&gt; in PLOS journals.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(res1 &amp;lt;- ft_search(query = &#39;ecology&#39;, from = &#39;plos&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; Query:
#&amp;gt;   [ecology] 
#&amp;gt; Found:
#&amp;gt;   [PLoS: 40269; BMC: 0; Crossref: 0; Entrez: 0; arxiv: 0; biorxiv: 0; Europe PMC: 0] 
#&amp;gt; Returned:
#&amp;gt;   [PLoS: 10; BMC: 0; Crossref: 0; Entrez: 0; arxiv: 0; biorxiv: 0; Europe PMC: 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each publisher/search-engine has a slot with metadata and data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res1$plos
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; Query: [ecology] 
#&amp;gt; Records found, returned: [40269, 10] 
#&amp;gt; License: [CC-BY] 
#&amp;gt;                              id
#&amp;gt; 1  10.1371/journal.pone.0001248
#&amp;gt; 2  10.1371/journal.pone.0059813
#&amp;gt; 3  10.1371/journal.pone.0155019
#&amp;gt; 4  10.1371/journal.pone.0080763
#&amp;gt; 5  10.1371/journal.pone.0150648
#&amp;gt; 6  10.1371/journal.pcbi.1003594
#&amp;gt; 7  10.1371/journal.pone.0102437
#&amp;gt; 8  10.1371/journal.pone.0175014
#&amp;gt; 9  10.1371/journal.pone.0166559
#&amp;gt; 10 10.1371/journal.pone.0054689
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;get-full-text&#34;&gt;Get full text&lt;/h4&gt;

&lt;p&gt;Using the results from &lt;code&gt;ft_search()&lt;/code&gt; we can grab full text of some articles&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(out &amp;lt;- ft_get(res1))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; &amp;lt;fulltext text&amp;gt;
#&amp;gt; [Docs] 10 
#&amp;gt; [Source] R session  
#&amp;gt; [IDs] 10.1371/journal.pone.0001248 10.1371/journal.pone.0059813
#&amp;gt;      10.1371/journal.pone.0155019 10.1371/journal.pone.0080763
#&amp;gt;      10.1371/journal.pone.0150648 10.1371/journal.pcbi.1003594
#&amp;gt;      10.1371/journal.pone.0102437 10.1371/journal.pone.0175014
#&amp;gt;      10.1371/journal.pone.0166559 10.1371/journal.pone.0054689 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dig in to the PLOS data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$plos
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $found
#&amp;gt; [1] 10
#&amp;gt; 
#&amp;gt; $dois
#&amp;gt;  [1] &amp;quot;10.1371/journal.pone.0001248&amp;quot; &amp;quot;10.1371/journal.pone.0059813&amp;quot;
#&amp;gt;  [3] &amp;quot;10.1371/journal.pone.0155019&amp;quot; &amp;quot;10.1371/journal.pone.0080763&amp;quot;
#&amp;gt;  [5] &amp;quot;10.1371/journal.pone.0150648&amp;quot; &amp;quot;10.1371/journal.pcbi.1003594&amp;quot;
#&amp;gt;  [7] &amp;quot;10.1371/journal.pone.0102437&amp;quot; &amp;quot;10.1371/journal.pone.0175014&amp;quot;
#&amp;gt;  [9] &amp;quot;10.1371/journal.pone.0166559&amp;quot; &amp;quot;10.1371/journal.pone.0054689&amp;quot;
#&amp;gt; 
#&amp;gt; $data
#&amp;gt; $data$backend
#&amp;gt; NULL
#&amp;gt; 
#&amp;gt; $data$path
#&amp;gt; [1] &amp;quot;session&amp;quot;
#&amp;gt; 
#&amp;gt; $data$data
#&amp;gt; 10 full-text articles retrieved 
#&amp;gt; Min. Length: 47196 - Max. Length: 133746 
#&amp;gt; DOIs: 10.1371/journal.pone.0001248 10.1371/journal.pone.0059813
#&amp;gt;   10.1371/journal.pone.0155019 10.1371/journal.pone.0080763
#&amp;gt;   10.1371/journal.pone.0150648 10.1371/journal.pcbi.1003594
#&amp;gt;   10.1371/journal.pone.0102437 10.1371/journal.pone.0175014
#&amp;gt;   10.1371/journal.pone.0166559 10.1371/journal.pone.0054689 ... 
#&amp;gt; 
#&amp;gt; NOTE: extract xml strings like output[&#39;&amp;lt;doi&amp;gt;&#39;]
#&amp;gt; 
#&amp;gt; $opts
#&amp;gt; $opts$doi
#&amp;gt;  [1] &amp;quot;10.1371/journal.pone.0001248&amp;quot; &amp;quot;10.1371/journal.pone.0059813&amp;quot;
#&amp;gt;  [3] &amp;quot;10.1371/journal.pone.0155019&amp;quot; &amp;quot;10.1371/journal.pone.0080763&amp;quot;
#&amp;gt;  [5] &amp;quot;10.1371/journal.pone.0150648&amp;quot; &amp;quot;10.1371/journal.pcbi.1003594&amp;quot;
#&amp;gt;  [7] &amp;quot;10.1371/journal.pone.0102437&amp;quot; &amp;quot;10.1371/journal.pone.0175014&amp;quot;
#&amp;gt;  [9] &amp;quot;10.1371/journal.pone.0166559&amp;quot; &amp;quot;10.1371/journal.pone.0054689&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dig in further to get to one of the articles in XML format&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;xml2&amp;quot;)
xml2::read_xml(out$plos$data$data$`10.1371/journal.pone.0059813`)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; {xml_document}
#&amp;gt; &amp;lt;article article-type=&amp;quot;research-article&amp;quot; dtd-version=&amp;quot;3.0&amp;quot; lang=&amp;quot;en&amp;quot; xmlns:mml=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot;&amp;gt;
#&amp;gt; [1] &amp;lt;front&amp;gt;\n  &amp;lt;journal-meta&amp;gt;\n    &amp;lt;journal-id journal-id-type=&amp;quot;nlm-ta&amp;quot;&amp;gt; ...
#&amp;gt; [2] &amp;lt;body&amp;gt;\n  &amp;lt;sec id=&amp;quot;s1&amp;quot;&amp;gt;\n    &amp;lt;title&amp;gt;Introduction&amp;lt;/title&amp;gt;\n    &amp;lt;p&amp;gt;Eco ...
#&amp;gt; [3] &amp;lt;back&amp;gt;\n  &amp;lt;ack&amp;gt;\n    &amp;lt;p&amp;gt;Curtis Flather, Mark Burgman, Leon Blaustein ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;extract-text-from-pdfs&#34;&gt;Extract text from pdfs&lt;/h4&gt;

&lt;p&gt;Ideally for text mining you have access to XML or other text based formats. However, sometimes you only have access to PDFs. In this case you want to extract text from PDFs. &lt;code&gt;fulltext&lt;/code&gt; can help with that.&lt;/p&gt;

&lt;p&gt;You can extract from any pdf from a file path, like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;path &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;example1.pdf&amp;quot;, package = &amp;quot;fulltext&amp;quot;)
ft_extract(path)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; &amp;lt;document&amp;gt;/Library/Frameworks/R.framework/Versions/3.4/Resources/library/fulltext/examples/example1.pdf
#&amp;gt;   Pages: 18
#&amp;gt;   Title: Suffering and mental health among older people living in nursing homes---a mixed-methods study
#&amp;gt;   Producer: pdfTeX-1.40.10
#&amp;gt;   Creation date: 2015-07-17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s search for articles from arXiv, a preprint service. Here, get pdf from an article with ID &lt;code&gt;cond-mat/9309029&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- ft_get(&#39;cond-mat/9309029&#39;, from = &amp;quot;arxiv&amp;quot;)
res2 &amp;lt;- ft_extract(res)
res2$arxiv$data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $backend
#&amp;gt; NULL
#&amp;gt; 
#&amp;gt; $path
#&amp;gt; $path$`cond-mat/9309029`
#&amp;gt; [1] &amp;quot;~/.fulltext/cond-mat_9309029.pdf&amp;quot;
#&amp;gt; 
#&amp;gt; attr(,&amp;quot;format&amp;quot;)
#&amp;gt; [1] &amp;quot;xml&amp;quot;
#&amp;gt; 
#&amp;gt; $data
#&amp;gt; $data[[1]]
#&amp;gt; &amp;lt;document&amp;gt;/Users/sacmac/.fulltext/cond-mat_9309029.pdf
#&amp;gt;   Pages: 14
#&amp;gt;   Title: arXiv:cond-mat/9309029v8  26 Jan 1994
#&amp;gt;   Producer: GPL Ghostscript SVN PRE-RELEASE 8.62
#&amp;gt;   Creation date: 2008-02-06
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a short snippet of the full text&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res2$arxiv$data$data[[1]]$data
#&amp;gt; &amp;quot;arXiv:cond-mat/9309029v8 26 Jan 1994, , FERMILAB-PUB-93/15-T March 1993, Revised:
#&amp;gt; January 1994, The Thermodynamics and Economics of Waste, Dallas C. Kennedy, Research
#&amp;gt; Associate, Fermi National Accelerator Laboratory, P.O. Box 500 MS106, Batavia, Illinois
#&amp;gt; 60510 USA, Abstract, The increasingly relevant problem of natural resource use and
#&amp;gt; waste production, disposal, and reuse is examined from several viewpoints: economic,
#&amp;gt; technical, and thermodynamic. Alternative economies are studied, with emphasis on
#&amp;gt; recycling of waste to close the natural resource cycle. The physical nature of human
#&amp;gt; economies and constraints on recycling and energy efficiency are stated in terms
#&amp;gt; ...&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;extract-text-chunks&#34;&gt;Extract text chunks&lt;/h4&gt;

&lt;p&gt;We have a few functions to help you pull out certain parts of an article. For example, perhaps you want to get just the authors from your articles, or just the abstracts.&lt;/p&gt;

&lt;p&gt;Here, we&amp;rsquo;ll search for some PLOS articles, then get their full text, then extract various parts of each article with &lt;code&gt;chunks()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- ft_search(query = &amp;quot;ecology&amp;quot;, from = &amp;quot;plos&amp;quot;)
(x &amp;lt;- ft_get(res))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; &amp;lt;fulltext text&amp;gt;
#&amp;gt; [Docs] 10 
#&amp;gt; [Source] R session  
#&amp;gt; [IDs] 10.1371/journal.pone.0001248 10.1371/journal.pone.0059813
#&amp;gt;      10.1371/journal.pone.0155019 10.1371/journal.pone.0080763
#&amp;gt;      10.1371/journal.pone.0150648 10.1371/journal.pcbi.1003594
#&amp;gt;      10.1371/journal.pone.0102437 10.1371/journal.pone.0175014
#&amp;gt;      10.1371/journal.pone.0166559 10.1371/journal.pone.0054689 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extract DOIs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x %&amp;gt;% chunks(&amp;quot;doi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $plos
#&amp;gt; $plos$`10.1371/journal.pone.0001248`
#&amp;gt; $plos$`10.1371/journal.pone.0001248`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0001248&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0059813`
#&amp;gt; $plos$`10.1371/journal.pone.0059813`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0059813&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0155019`
#&amp;gt; $plos$`10.1371/journal.pone.0155019`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0155019&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0080763`
#&amp;gt; $plos$`10.1371/journal.pone.0080763`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0080763&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0150648`
#&amp;gt; $plos$`10.1371/journal.pone.0150648`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0150648&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pcbi.1003594`
#&amp;gt; $plos$`10.1371/journal.pcbi.1003594`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pcbi.1003594&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0102437`
#&amp;gt; $plos$`10.1371/journal.pone.0102437`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0102437&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0175014`
#&amp;gt; $plos$`10.1371/journal.pone.0175014`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0175014&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0166559`
#&amp;gt; $plos$`10.1371/journal.pone.0166559`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0166559&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0054689`
#&amp;gt; $plos$`10.1371/journal.pone.0054689`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0054689&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extract DOIs and categories&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x %&amp;gt;% chunks(c(&amp;quot;doi&amp;quot;,&amp;quot;categories&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $plos
#&amp;gt; $plos$`10.1371/journal.pone.0001248`
#&amp;gt; $plos$`10.1371/journal.pone.0001248`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0001248&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0001248`$categories
#&amp;gt; [1] &amp;quot;Research Article&amp;quot;             &amp;quot;Ecology&amp;quot;                     
#&amp;gt; [3] &amp;quot;Ecology/Ecosystem Ecology&amp;quot;    &amp;quot;Ecology/Evolutionary Ecology&amp;quot;
#&amp;gt; [5] &amp;quot;Ecology/Theoretical Ecology&amp;quot; 
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0059813`
#&amp;gt; $plos$`10.1371/journal.pone.0059813`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0059813&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0059813`$categories
#&amp;gt;  [1] &amp;quot;Research Article&amp;quot;                 &amp;quot;Biology&amp;quot;                         
#&amp;gt;  [3] &amp;quot;Ecology&amp;quot;                          &amp;quot;Community ecology&amp;quot;               
#&amp;gt;  [5] &amp;quot;Species interactions&amp;quot;             &amp;quot;Science policy&amp;quot;                  
#&amp;gt;  [7] &amp;quot;Research assessment&amp;quot;              &amp;quot;Research monitoring&amp;quot;             
#&amp;gt;  [9] &amp;quot;Research funding&amp;quot;                 &amp;quot;Government funding of science&amp;quot;   
#&amp;gt; [11] &amp;quot;Research laboratories&amp;quot;            &amp;quot;Science policy and economics&amp;quot;    
#&amp;gt; [13] &amp;quot;Science and technology workforce&amp;quot; &amp;quot;Careers in research&amp;quot;             
#&amp;gt; [15] &amp;quot;Social and behavioral sciences&amp;quot;   &amp;quot;Sociology&amp;quot;                       
#&amp;gt; [17] &amp;quot;Sociology of knowledge&amp;quot;          
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0155019`
#&amp;gt; $plos$`10.1371/journal.pone.0155019`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0155019&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0155019`$categories
#&amp;gt;  [1] &amp;quot;Research Article&amp;quot;                  
#&amp;gt;  [2] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt;  [3] &amp;quot;Behavior&amp;quot;                          
#&amp;gt;  [4] &amp;quot;Recreation&amp;quot;                        
#&amp;gt;  [5] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt;  [6] &amp;quot;Ecology&amp;quot;                           
#&amp;gt;  [7] &amp;quot;Ecosystems&amp;quot;                        
#&amp;gt;  [8] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt;  [9] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [10] &amp;quot;Ecosystems&amp;quot;                        
#&amp;gt; [11] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [12] &amp;quot;Conservation science&amp;quot;              
#&amp;gt; [13] &amp;quot;Earth sciences&amp;quot;                    
#&amp;gt; [14] &amp;quot;Geography&amp;quot;                         
#&amp;gt; [15] &amp;quot;Human geography&amp;quot;                   
#&amp;gt; [16] &amp;quot;Land use&amp;quot;                          
#&amp;gt; [17] &amp;quot;Social sciences&amp;quot;                   
#&amp;gt; [18] &amp;quot;Human geography&amp;quot;                   
#&amp;gt; [19] &amp;quot;Land use&amp;quot;                          
#&amp;gt; [20] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [21] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [22] &amp;quot;Ecosystems&amp;quot;                        
#&amp;gt; [23] &amp;quot;Ecosystem functioning&amp;quot;             
#&amp;gt; [24] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [25] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [26] &amp;quot;Ecosystems&amp;quot;                        
#&amp;gt; [27] &amp;quot;Ecosystem functioning&amp;quot;             
#&amp;gt; [28] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [29] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [30] &amp;quot;Ecological metrics&amp;quot;                
#&amp;gt; [31] &amp;quot;Productivity (ecology)&amp;quot;            
#&amp;gt; [32] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [33] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [34] &amp;quot;Ecological metrics&amp;quot;                
#&amp;gt; [35] &amp;quot;Productivity (ecology)&amp;quot;            
#&amp;gt; [36] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [37] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [38] &amp;quot;Theoretical ecology&amp;quot;               
#&amp;gt; [39] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [40] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [41] &amp;quot;Theoretical ecology&amp;quot;               
#&amp;gt; [42] &amp;quot;Social sciences&amp;quot;                   
#&amp;gt; [43] &amp;quot;Economics&amp;quot;                         
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0080763`
#&amp;gt; $plos$`10.1371/journal.pone.0080763`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0080763&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0080763`$categories
#&amp;gt;  [1] &amp;quot;Research Article&amp;quot;     &amp;quot;Biology&amp;quot;              &amp;quot;Ecology&amp;quot;             
#&amp;gt;  [4] &amp;quot;Autecology&amp;quot;           &amp;quot;Behavioral ecology&amp;quot;   &amp;quot;Community ecology&amp;quot;   
#&amp;gt;  [7] &amp;quot;Evolutionary ecology&amp;quot; &amp;quot;Population ecology&amp;quot;   &amp;quot;Evolutionary biology&amp;quot;
#&amp;gt; [10] &amp;quot;Behavioral ecology&amp;quot;   &amp;quot;Evolutionary ecology&amp;quot; &amp;quot;Population biology&amp;quot;  
#&amp;gt; [13] &amp;quot;Population ecology&amp;quot;  
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0150648`
#&amp;gt; $plos$`10.1371/journal.pone.0150648`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0150648&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0150648`$categories
#&amp;gt;  [1] &amp;quot;Research Article&amp;quot;                  
#&amp;gt;  [2] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt;  [3] &amp;quot;Ecology&amp;quot;                           
#&amp;gt;  [4] &amp;quot;Community ecology&amp;quot;                 
#&amp;gt;  [5] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt;  [6] &amp;quot;Ecology&amp;quot;                           
#&amp;gt;  [7] &amp;quot;Community ecology&amp;quot;                 
#&amp;gt;  [8] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt;  [9] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [10] &amp;quot;Population ecology&amp;quot;                
#&amp;gt; [11] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [12] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [13] &amp;quot;Population ecology&amp;quot;                
#&amp;gt; [14] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [15] &amp;quot;Population biology&amp;quot;                
#&amp;gt; [16] &amp;quot;Population ecology&amp;quot;                
#&amp;gt; [17] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [18] &amp;quot;Neuroscience&amp;quot;                      
#&amp;gt; [19] &amp;quot;Cognitive science&amp;quot;                 
#&amp;gt; [20] &amp;quot;Cognitive psychology&amp;quot;              
#&amp;gt; [21] &amp;quot;Academic skills&amp;quot;                   
#&amp;gt; [22] &amp;quot;Literacy&amp;quot;                          
#&amp;gt; [23] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [24] &amp;quot;Psychology&amp;quot;                        
#&amp;gt; [25] &amp;quot;Cognitive psychology&amp;quot;              
#&amp;gt; [26] &amp;quot;Academic skills&amp;quot;                   
#&amp;gt; [27] &amp;quot;Literacy&amp;quot;                          
#&amp;gt; [28] &amp;quot;Social sciences&amp;quot;                   
#&amp;gt; [29] &amp;quot;Psychology&amp;quot;                        
#&amp;gt; [30] &amp;quot;Cognitive psychology&amp;quot;              
#&amp;gt; [31] &amp;quot;Academic skills&amp;quot;                   
#&amp;gt; [32] &amp;quot;Literacy&amp;quot;                          
#&amp;gt; [33] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [34] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [35] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [36] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [37] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [38] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [39] &amp;quot;Ecosystems&amp;quot;                        
#&amp;gt; [40] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [41] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [42] &amp;quot;Ecosystems&amp;quot;                        
#&amp;gt; [43] &amp;quot;People and places&amp;quot;                 
#&amp;gt; [44] &amp;quot;Population groupings&amp;quot;              
#&amp;gt; [45] &amp;quot;Age groups&amp;quot;                        
#&amp;gt; [46] &amp;quot;Adults&amp;quot;                            
#&amp;gt; [47] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [48] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [49] &amp;quot;Industrial ecology&amp;quot;                
#&amp;gt; [50] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [51] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [52] &amp;quot;Industrial ecology&amp;quot;                
#&amp;gt; [53] &amp;quot;Engineering and technology&amp;quot;        
#&amp;gt; [54] &amp;quot;Industrial engineering&amp;quot;            
#&amp;gt; [55] &amp;quot;Industrial ecology&amp;quot;                
#&amp;gt; [56] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [57] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [58] &amp;quot;Ecological metrics&amp;quot;                
#&amp;gt; [59] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [60] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [61] &amp;quot;Ecological metrics&amp;quot;                
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pcbi.1003594`
#&amp;gt; $plos$`10.1371/journal.pcbi.1003594`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pcbi.1003594&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pcbi.1003594`$categories
#&amp;gt; [1] &amp;quot;Research Article&amp;quot;          &amp;quot;Biology and life sciences&amp;quot;
#&amp;gt; [3] &amp;quot;Computational biology&amp;quot;     &amp;quot;Microbiology&amp;quot;             
#&amp;gt; [5] &amp;quot;Theoretical biology&amp;quot;      
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0102437`
#&amp;gt; $plos$`10.1371/journal.pone.0102437`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0102437&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0102437`$categories
#&amp;gt;  [1] &amp;quot;Research Article&amp;quot;                  
#&amp;gt;  [2] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt;  [3] &amp;quot;Biogeography&amp;quot;                      
#&amp;gt;  [4] &amp;quot;Ecology&amp;quot;                           
#&amp;gt;  [5] &amp;quot;Ecosystems&amp;quot;                        
#&amp;gt;  [6] &amp;quot;Ecosystem engineering&amp;quot;             
#&amp;gt;  [7] &amp;quot;Ecosystem functioning&amp;quot;             
#&amp;gt;  [8] &amp;quot;Industrial ecology&amp;quot;                
#&amp;gt;  [9] &amp;quot;Spatial and landscape ecology&amp;quot;     
#&amp;gt; [10] &amp;quot;Urban ecology&amp;quot;                     
#&amp;gt; [11] &amp;quot;Computer and information sciences&amp;quot; 
#&amp;gt; [12] &amp;quot;Geoinformatics&amp;quot;                    
#&amp;gt; [13] &amp;quot;Spatial analysis&amp;quot;                  
#&amp;gt; [14] &amp;quot;Earth sciences&amp;quot;                    
#&amp;gt; [15] &amp;quot;Geography&amp;quot;                         
#&amp;gt; [16] &amp;quot;Human geography&amp;quot;                   
#&amp;gt; [17] &amp;quot;Cultural geography&amp;quot;                
#&amp;gt; [18] &amp;quot;Social geography&amp;quot;                  
#&amp;gt; [19] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [20] &amp;quot;Conservation science&amp;quot;              
#&amp;gt; [21] &amp;quot;Environmental protection&amp;quot;          
#&amp;gt; [22] &amp;quot;Nature-society interactions&amp;quot;       
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0175014`
#&amp;gt; $plos$`10.1371/journal.pone.0175014`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0175014&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0175014`$categories
#&amp;gt;  [1] &amp;quot;Research Article&amp;quot;                  
#&amp;gt;  [2] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt;  [3] &amp;quot;Ecology&amp;quot;                           
#&amp;gt;  [4] &amp;quot;Paleoecology&amp;quot;                      
#&amp;gt;  [5] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt;  [6] &amp;quot;Ecology&amp;quot;                           
#&amp;gt;  [7] &amp;quot;Paleoecology&amp;quot;                      
#&amp;gt;  [8] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt;  [9] &amp;quot;Paleontology&amp;quot;                      
#&amp;gt; [10] &amp;quot;Paleobiology&amp;quot;                      
#&amp;gt; [11] &amp;quot;Paleoecology&amp;quot;                      
#&amp;gt; [12] &amp;quot;Earth sciences&amp;quot;                    
#&amp;gt; [13] &amp;quot;Paleontology&amp;quot;                      
#&amp;gt; [14] &amp;quot;Paleobiology&amp;quot;                      
#&amp;gt; [15] &amp;quot;Paleoecology&amp;quot;                      
#&amp;gt; [16] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [17] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [18] &amp;quot;Population ecology&amp;quot;                
#&amp;gt; [19] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [20] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [21] &amp;quot;Population ecology&amp;quot;                
#&amp;gt; [22] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [23] &amp;quot;Population biology&amp;quot;                
#&amp;gt; [24] &amp;quot;Population ecology&amp;quot;                
#&amp;gt; [25] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [26] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [27] &amp;quot;Plant ecology&amp;quot;                     
#&amp;gt; [28] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [29] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [30] &amp;quot;Plant ecology&amp;quot;                     
#&amp;gt; [31] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [32] &amp;quot;Plant science&amp;quot;                     
#&amp;gt; [33] &amp;quot;Plant ecology&amp;quot;                     
#&amp;gt; [34] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [35] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [36] &amp;quot;Spatial and landscape ecology&amp;quot;     
#&amp;gt; [37] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [38] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [39] &amp;quot;Spatial and landscape ecology&amp;quot;     
#&amp;gt; [40] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [41] &amp;quot;Agriculture&amp;quot;                       
#&amp;gt; [42] &amp;quot;Agroecology&amp;quot;                       
#&amp;gt; [43] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [44] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [45] &amp;quot;Agroecology&amp;quot;                       
#&amp;gt; [46] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [47] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [48] &amp;quot;Agroecology&amp;quot;                       
#&amp;gt; [49] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [50] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [51] &amp;quot;Theoretical ecology&amp;quot;               
#&amp;gt; [52] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [53] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [54] &amp;quot;Theoretical ecology&amp;quot;               
#&amp;gt; [55] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [56] &amp;quot;Soil science&amp;quot;                      
#&amp;gt; [57] &amp;quot;Soil ecology&amp;quot;                      
#&amp;gt; [58] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [59] &amp;quot;Organisms&amp;quot;                         
#&amp;gt; [60] &amp;quot;Animals&amp;quot;                           
#&amp;gt; [61] &amp;quot;Vertebrates&amp;quot;                       
#&amp;gt; [62] &amp;quot;Amniotes&amp;quot;                          
#&amp;gt; [63] &amp;quot;Mammals&amp;quot;                           
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0166559`
#&amp;gt; $plos$`10.1371/journal.pone.0166559`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0166559&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0166559`$categories
#&amp;gt;  [1] &amp;quot;Research Article&amp;quot;                  
#&amp;gt;  [2] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt;  [3] &amp;quot;Behavior&amp;quot;                          
#&amp;gt;  [4] &amp;quot;Animal behavior&amp;quot;                   
#&amp;gt;  [5] &amp;quot;Behavioral ecology&amp;quot;                
#&amp;gt;  [6] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt;  [7] &amp;quot;Zoology&amp;quot;                           
#&amp;gt;  [8] &amp;quot;Animal behavior&amp;quot;                   
#&amp;gt;  [9] &amp;quot;Behavioral ecology&amp;quot;                
#&amp;gt; [10] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [11] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [12] &amp;quot;Behavioral ecology&amp;quot;                
#&amp;gt; [13] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [14] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [15] &amp;quot;Behavioral ecology&amp;quot;                
#&amp;gt; [16] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [17] &amp;quot;Plant science&amp;quot;                     
#&amp;gt; [18] &amp;quot;Plant anatomy&amp;quot;                     
#&amp;gt; [19] &amp;quot;Pollen&amp;quot;                            
#&amp;gt; [20] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [21] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [22] &amp;quot;Plant ecology&amp;quot;                     
#&amp;gt; [23] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [24] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [25] &amp;quot;Plant ecology&amp;quot;                     
#&amp;gt; [26] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [27] &amp;quot;Plant science&amp;quot;                     
#&amp;gt; [28] &amp;quot;Plant ecology&amp;quot;                     
#&amp;gt; [29] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [30] &amp;quot;Plant science&amp;quot;                     
#&amp;gt; [31] &amp;quot;Plant anatomy&amp;quot;                     
#&amp;gt; [32] &amp;quot;Flowers&amp;quot;                           
#&amp;gt; [33] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [34] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [35] &amp;quot;Theoretical ecology&amp;quot;               
#&amp;gt; [36] &amp;quot;Ecology and environmental sciences&amp;quot;
#&amp;gt; [37] &amp;quot;Ecology&amp;quot;                           
#&amp;gt; [38] &amp;quot;Theoretical ecology&amp;quot;               
#&amp;gt; [39] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [40] &amp;quot;Behavior&amp;quot;                          
#&amp;gt; [41] &amp;quot;Animal behavior&amp;quot;                   
#&amp;gt; [42] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [43] &amp;quot;Zoology&amp;quot;                           
#&amp;gt; [44] &amp;quot;Animal behavior&amp;quot;                   
#&amp;gt; [45] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [46] &amp;quot;Organisms&amp;quot;                         
#&amp;gt; [47] &amp;quot;Plants&amp;quot;                            
#&amp;gt; [48] &amp;quot;Flowering plants&amp;quot;                  
#&amp;gt; [49] &amp;quot;Biology and life sciences&amp;quot;         
#&amp;gt; [50] &amp;quot;Species interactions&amp;quot;              
#&amp;gt; 
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0054689`
#&amp;gt; $plos$`10.1371/journal.pone.0054689`$doi
#&amp;gt; [1] &amp;quot;10.1371/journal.pone.0054689&amp;quot;
#&amp;gt; 
#&amp;gt; $plos$`10.1371/journal.pone.0054689`$categories
#&amp;gt;  [1] &amp;quot;Research Article&amp;quot;              &amp;quot;Biology&amp;quot;                      
#&amp;gt;  [3] &amp;quot;Ecology&amp;quot;                       &amp;quot;Ecological environments&amp;quot;      
#&amp;gt;  [5] &amp;quot;Terrestrial environments&amp;quot;      &amp;quot;Ecosystems&amp;quot;                   
#&amp;gt;  [7] &amp;quot;Ecosystem modeling&amp;quot;            &amp;quot;Biodiversity&amp;quot;                 
#&amp;gt;  [9] &amp;quot;Community ecology&amp;quot;             &amp;quot;Conservation science&amp;quot;         
#&amp;gt; [11] &amp;quot;Global change ecology&amp;quot;         &amp;quot;Spatial and landscape ecology&amp;quot;
#&amp;gt; [13] &amp;quot;Theoretical ecology&amp;quot;           &amp;quot;Terrestrial ecology&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;tabularize&lt;/code&gt; attempts to help you put the data that comes out of &lt;code&gt;chunks()&lt;/code&gt; in to a &lt;code&gt;data.frame&lt;/code&gt;, that we all know and love.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x %&amp;gt;% chunks(c(&amp;quot;doi&amp;quot;, &amp;quot;history&amp;quot;)) %&amp;gt;% tabularize()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; $plos
#&amp;gt;                             doi history.received history.accepted
#&amp;gt; 1  10.1371/journal.pone.0001248       2007-07-02       2007-11-06
#&amp;gt; 2  10.1371/journal.pone.0059813       2012-09-16       2013-02-19
#&amp;gt; 3  10.1371/journal.pone.0155019       2015-09-22       2016-04-22
#&amp;gt; 4  10.1371/journal.pone.0080763       2013-08-15       2013-10-16
#&amp;gt; 5  10.1371/journal.pone.0150648       2015-09-19       2016-02-16
#&amp;gt; 6  10.1371/journal.pcbi.1003594       2014-01-09       2014-03-14
#&amp;gt; 7  10.1371/journal.pone.0102437       2013-11-27       2014-06-19
#&amp;gt; 8  10.1371/journal.pone.0175014       2016-09-23       2017-03-20
#&amp;gt; 9  10.1371/journal.pone.0166559       2016-06-05       2016-10-30
#&amp;gt; 10 10.1371/journal.pone.0054689       2012-03-22       2012-12-17
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Chamberlain Scott (2016). fulltext: Full Text of Scholarly Articles Across Many Data Sources. R package version 0.1.8. &lt;a href=&#34;https://github.com/ropensci/fulltext&#34;&gt;https://github.com/ropensci/fulltext&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/fulltext/issues?state=open&#34;&gt;our GitHub repo for fulltext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>gender tutorial</title>
      <link>https://ropensci.org/tutorials/gender_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/gender_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;code&gt;gender&lt;/code&gt; encodes gender based on names and dates of birth using historical datasets. By using these datasets instead of lists of male and female names, this package is able to more accurately guess the gender of a name, and it is able to report the probability that a name was male or female.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;gender&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;ropensci/gender&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;gender&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;A common problem for researchers who work with data, especially historians, is that a dataset has a list of people with names but does not identify the gender of the person. Since first names often indicate gender, it should be possible to predict gender using names. However, the gender associated with names can change over time. To illustrate, take the names Madison, Hillary, Jordan, and Monroe. For babies born in the United States, those predominant gender associated with those names has changed over time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../assets/tutorial-images/gender/unnamed-chunk-5-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Predicting gender from names requires a fundamentally historical method. The &lt;code&gt;gender&lt;/code&gt; package provides a way to calculate the proportion of male and female names given a year or range of birth years and a country or set of countries. The predictions are based on calculations from historical datasets.&lt;/p&gt;

&lt;p&gt;This vignette offers a brief guide to the &lt;code&gt;gender&lt;/code&gt; package. For a fuller historical explanation and a sample case study using the package, please see our journal article: Cameron Blevins and Lincoln Mullen, &amp;ldquo;Jane, John &amp;hellip; Leslie? A Historical Method for Algorithmic Gender Prediction,&amp;rdquo; &lt;em&gt;Digital Humanities Quarterly&lt;/em&gt; (forthcoming 2015).&lt;/p&gt;

&lt;h4 id=&#34;basic-usage&#34;&gt;Basic usage&lt;/h4&gt;

&lt;p&gt;The main function in this package is &lt;code&gt;gender()&lt;/code&gt;. That function lets you choose a dataset and pass in a set of names and a birth year or range of birth years. The result is always a data frame that includes a prediction of the gender of the name and the relative proportions between male and female. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(gender)
gender(c(&amp;quot;Madison&amp;quot;, &amp;quot;Hillary&amp;quot;), years = 1940, method = &amp;quot;demo&amp;quot;)
#&amp;gt; # A tibble: 2 x 6
#&amp;gt;      name proportion_male proportion_female gender year_min year_max
#&amp;gt;     &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1 Hillary               1                 0   male     1940     1940
#&amp;gt; 2 Madison               1                 0   male     1940     1940
gender(c(&amp;quot;Madison&amp;quot;, &amp;quot;Hillary&amp;quot;), years = 2000, method = &amp;quot;demo&amp;quot;)
#&amp;gt; # A tibble: 2 x 6
#&amp;gt;      name proportion_male proportion_female gender year_min year_max
#&amp;gt;     &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1 Hillary          0.0000            1.0000 female     2000     2000
#&amp;gt; 2 Madison          0.0069            0.9931 female     2000     2000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;gender&lt;/code&gt; package itself contains only demonstration data. Datasets which permit you to make predictions for various times and places are available in the  &lt;a href=&#34;https://github.com/ropensci/genderdata&#34;&gt;genderdata package&lt;/a&gt;. This package is not available on CRAN because of its size. The first time that you need to use the dataset you will be prompted to install it, or you can install it yourself from the &lt;a href=&#34;http://packages.ropensci.org/&#34;&gt;rOpenSci repository&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;genderdata&amp;quot;, repos = &amp;quot;http://packages.ropensci.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You specify which dataset you wish to use with the &lt;code&gt;method =&lt;/code&gt; parameter. Below are some sample&lt;/p&gt;

&lt;p&gt;United States in the 1960s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gender(&amp;quot;Madison&amp;quot;, years = c(1960, 1969), method = &amp;quot;ssa&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;United States in the 1860s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gender(&amp;quot;Madison&amp;quot;, years = c(1860, 1869), method = &amp;quot;ipums&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;North Atlantic countries in the 1860s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gender(&amp;quot;Hilde&amp;quot;, years = c(1860, 1869), method = &amp;quot;napp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just Sweden in the 1879:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gender(&amp;quot;Hilde&amp;quot;, years = c(1879), method = &amp;quot;napp&amp;quot;, countries = &amp;quot;Sweden&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;which-dataset-should-you-use&#34;&gt;Which dataset should you use?&lt;/h4&gt;

&lt;p&gt;Each method is associated with a dataset suitable for a particular time and place.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;method = &amp;quot;ipums&amp;quot;&lt;/code&gt;: United States from 1789 to 1930. Drawn from Census data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method = &amp;quot;ssa&amp;quot;&lt;/code&gt;: United States from 1930 to 2012. Drawn from Social Security Administration data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method = &amp;quot;napp&amp;quot;&lt;/code&gt;: Any combination of Canada, the United Kingdom, Germany, Iceland, Norway, and Sweden from the years 1758 to 1910, though the nineteenth-century data is likely more reliable than the eighteenth-century data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;description-of-the-datasets&#34;&gt;Description of the datasets&lt;/h4&gt;

&lt;p&gt;U.S. Census data is provided by &lt;a href=&#34;https://usa.ipums.org/usa/&#34;&gt;IPUMS USA&lt;/a&gt; from the Minnesota Population Center, University of Minnesota. The IPUMS data includes 1% and 5% samples from the Census returns. The Census, taken decennially, includes respondent&amp;rsquo;s birth dates and gender. With the gender package, it is possible to use this dataset for years between 1789 and 1930. The dataset includes approximately 339,967 unique names.&lt;/p&gt;

&lt;p&gt;U.S. Social Security Administration data was collected from applicants to Social Security. The Social Security Board was created in the New Deal in 1935. Early applicants, however, were people who were nearing retirement age not people who were being born, so the dataset extends further into the past. However, the Social Security Administration did not immediately require all persons born in the United States to register for a Social Security Number. (See Shane Landrum, &amp;ldquo;The State&amp;rsquo;s Big Family Bible: Birth Certificates, Personal Identity, and Citizenship in the United States, 1840&amp;ndash;1950&amp;rdquo; [PhD dissertation, Brandeis University, 2014].) A &lt;a href=&#34;https://github.com/ropensci/gender/issues/9&#34;&gt;consequence&lt;/a&gt; of this&amp;mdash;for reasons that are not entirely clear&amp;mdash;is that for years before 1918, the SSA dataset is heavily female; after about 1940 it skews slightly male. For this reason this package corrects the prediction to assume a secondary sex ratio that is evenly distributed between males and females. Also, the SSA dataset only includes names that were used more than five times in a given year, so the &amp;ldquo;long tail&amp;rdquo; of names is excluded. Even so, the dataset includes 91,320 unique names. The SSA dataset extends from 1880 to 2012, but for years before 1930 you should use the IPUMS method.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.nappdata.org/napp/&#34;&gt;North Atlantic Population Project&lt;/a&gt; provides data for Canada, the United Kingdom, Germany, Iceland, Norway, and Sweden for years between 1758 and 1910, based on census microdata from those countries.&lt;/p&gt;

&lt;h4 id=&#34;working-with-data-frames-of-names&#34;&gt;Working with data frames of names&lt;/h4&gt;

&lt;p&gt;Most often you have a dataset and you want to predict gender for multiple names. Consider this sample dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)

demo_names &amp;lt;- c(&amp;quot;Susan&amp;quot;, &amp;quot;Susan&amp;quot;, &amp;quot;Madison&amp;quot;, &amp;quot;Madison&amp;quot;,
                &amp;quot;Hillary&amp;quot;, &amp;quot;Hillary&amp;quot;, &amp;quot;Hillary&amp;quot;)
demo_years &amp;lt;- c(rep(c(1930, 2000), 3), 1930)
demo_df &amp;lt;- data_frame(first_names = demo_names,
                      last_names = LETTERS[1:7],
                      years = demo_years,
                      min_years = demo_years - 3,
                      max_years = demo_years + 3)

demo_df
#&amp;gt; # A tibble: 7 x 5
#&amp;gt;   first_names last_names years min_years max_years
#&amp;gt;         &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
#&amp;gt; 1       Susan          A  1930      1927      1933
#&amp;gt; 2       Susan          B  2000      1997      2003
#&amp;gt; 3     Madison          C  1930      1927      1933
#&amp;gt; 4     Madison          D  2000      1997      2003
#&amp;gt; 5     Hillary          E  1930      1927      1933
#&amp;gt; 6     Hillary          F  2000      1997      2003
#&amp;gt; 7     Hillary          G  1930      1927      1933
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have a dataset with first names connected to years. It is important to emphasize that these years should be the years of birth. If you have years representing something else, you will have to estimate the years of birth. For this demo dataset, we have included a single birth year for each person. But since historians may only have a guess at the birth year of people, we have also included columns for the minimum and maximum years in an possible age range.&lt;/p&gt;

&lt;p&gt;We can pass this data frame to the &lt;code&gt;gender_df()&lt;/code&gt; function, specifying the method that we wish to use and the names of the columns that contain the names and the birth years. The result is a data frame of predictions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;results &amp;lt;- gender_df(demo_df, name_col = &amp;quot;first_names&amp;quot;, year_col = &amp;quot;years&amp;quot;,
                     method = &amp;quot;demo&amp;quot;)
results
#&amp;gt; # A tibble: 6 x 6
#&amp;gt;      name proportion_male proportion_female gender year_min year_max
#&amp;gt; *   &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1 Hillary          1.0000            0.0000   male     1930     1930
#&amp;gt; 2 Madison          1.0000            0.0000   male     1930     1930
#&amp;gt; 3   Susan          0.0000            1.0000 female     1930     1930
#&amp;gt; 4 Hillary          0.0000            1.0000 female     2000     2000
#&amp;gt; 5 Madison          0.0069            0.9931 female     2000     2000
#&amp;gt; 6   Susan          0.0000            1.0000 female     2000     2000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that in our original data frame there were two Hillarys (&lt;code&gt;Hillary E&lt;/code&gt; and &lt;code&gt;Hillary G&lt;/code&gt;) born in 1930, but our resulting data frame only contains one. That is because the &lt;code&gt;gender_df()&lt;/code&gt; function is efficient, calculating genders only for unique combinations of first names and years. In a dataset of any appreciable size, this saves quite a bit of computation time. The resulting data frame can be merged back into the original dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;demo_df %&amp;gt;%
  left_join(results, by = c(&amp;quot;first_names&amp;quot; = &amp;quot;name&amp;quot;, &amp;quot;years&amp;quot; = &amp;quot;year_min&amp;quot;))
#&amp;gt; # A tibble: 7 x 9
#&amp;gt;   first_names last_names years min_years max_years proportion_male
#&amp;gt;         &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;
#&amp;gt; 1       Susan          A  1930      1927      1933          0.0000
#&amp;gt; 2       Susan          B  2000      1997      2003          0.0000
#&amp;gt; 3     Madison          C  1930      1927      1933          1.0000
#&amp;gt; 4     Madison          D  2000      1997      2003          0.0069
#&amp;gt; 5     Hillary          E  1930      1927      1933          1.0000
#&amp;gt; 6     Hillary          F  2000      1997      2003          0.0000
#&amp;gt; 7     Hillary          G  1930      1927      1933          1.0000
#&amp;gt; # ... with 3 more variables: proportion_female &amp;lt;dbl&amp;gt;, gender &amp;lt;chr&amp;gt;,
#&amp;gt; #   year_max &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also use &lt;code&gt;gender_df()&lt;/code&gt; to predict gender a range of years by passing it the names of columns with minimum and maximum years of the range to be used for each person. As in the previous example, only unique combinations of first names and ranges of years will be calculated.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gender_df(demo_df, name_col = &amp;quot;first_names&amp;quot;,
          year_col = c(&amp;quot;min_years&amp;quot;, &amp;quot;max_years&amp;quot;), method = &amp;quot;demo&amp;quot;)
#&amp;gt; # A tibble: 6 x 6
#&amp;gt;      name proportion_male proportion_female gender year_min year_max
#&amp;gt; *   &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1 Hillary          1.0000            0.0000   male     1927     1933
#&amp;gt; 2 Madison          1.0000            0.0000   male     1927     1933
#&amp;gt; 3   Susan          0.0028            0.9972 female     1927     1933
#&amp;gt; 4 Hillary          0.0092            0.9908 female     1997     2003
#&amp;gt; 5 Madison          0.0081            0.9919 female     1997     2003
#&amp;gt; 6   Susan          0.0000            1.0000 female     1997     2003
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;working-with-dplyr&#34;&gt;Working with dplyr&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;gender_df()&lt;/code&gt; function is simply a wrapper around a &lt;a href=&#34;https://cran.r-project.org/package=dplyr&#34;&gt;dplyr&lt;/a&gt; data manipulation chain. Should you wish, you can  use dplyr&amp;rsquo;s &lt;code&gt;do()&lt;/code&gt; function to run the &lt;code&gt;gender()&lt;/code&gt; function on each name and birth year (i.e., each row). This will result in a dataframe containing a column of dataframes. Another call to &lt;code&gt;do()&lt;/code&gt; and &lt;code&gt;bind_rows()&lt;/code&gt; will create a the single data frame that we expect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;demo_df %&amp;gt;%
  distinct(first_names, years) %&amp;gt;%
  rowwise() %&amp;gt;%
  do(results = gender(.$first_names, years = .$years, method = &amp;quot;demo&amp;quot;)) %&amp;gt;%
  do(bind_rows(.$results))
#&amp;gt; Source: local data frame [6 x 6]
#&amp;gt; Groups: &amp;lt;by row&amp;gt;
#&amp;gt; 
#&amp;gt; # A tibble: 6 x 6
#&amp;gt;      name proportion_male proportion_female gender year_min year_max
#&amp;gt; *   &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1   Susan          0.0000            1.0000 female     1930     1930
#&amp;gt; 2   Susan          0.0000            1.0000 female     2000     2000
#&amp;gt; 3 Madison          1.0000            0.0000   male     1930     1930
#&amp;gt; 4 Madison          0.0069            0.9931 female     2000     2000
#&amp;gt; 5 Hillary          1.0000            0.0000   male     1930     1930
#&amp;gt; 6 Hillary          0.0000            1.0000 female     2000     2000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That method of using dplyr is the most intuitive, since it calls &lt;code&gt;gender()&lt;/code&gt; once for each row. (In the example above, there are six calls to the function.) However, because of the way that the &lt;code&gt;gender()&lt;/code&gt; function works, it can handle multiple names provided that they all use the same range of years. In other words, we will do better to group the data frame by the year. In the code below, we call &lt;code&gt;gender()&lt;/code&gt; once for each year (i.e. two times) which results in a considerable time savings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;demo_df %&amp;gt;%
  distinct(first_names, years) %&amp;gt;%
  group_by(years) %&amp;gt;%
  do(results = gender(.$first_names, years = .$years[1], method = &amp;quot;demo&amp;quot;)) %&amp;gt;%
  do(bind_rows(.$results))
#&amp;gt; Source: local data frame [6 x 6]
#&amp;gt; Groups: &amp;lt;by row&amp;gt;
#&amp;gt; 
#&amp;gt; # A tibble: 6 x 6
#&amp;gt;      name proportion_male proportion_female gender year_min year_max
#&amp;gt; *   &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1 Hillary          1.0000            0.0000   male     1930     1930
#&amp;gt; 2 Madison          1.0000            0.0000   male     1930     1930
#&amp;gt; 3   Susan          0.0000            1.0000 female     1930     1930
#&amp;gt; 4 Hillary          0.0000            1.0000 female     2000     2000
#&amp;gt; 5 Madison          0.0069            0.9931 female     2000     2000
#&amp;gt; 6   Susan          0.0000            1.0000 female     2000     2000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These results can then be joined back into your original dataset.&lt;/p&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;p&gt;To cite &lt;code&gt;gender&lt;/code&gt; in publications use:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lincoln Mullen (2015). gender: Predict Gender from Names Using
  Historical Data. R package version 0.5.1
  &lt;a href=&#34;https://github.com/ropensci/gender&#34;&gt;https://github.com/ropensci/gender&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/gender/issues?state=open&#34;&gt;our Github repo for gender&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>geojsonio tutorial</title>
      <link>https://ropensci.org/tutorials/geojsonio_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/geojsonio_tutorial/</guid>
      <description>
        
        

&lt;p&gt;&lt;code&gt;geojsonio&lt;/code&gt; converts geographic data to geojson and topojson formats. Nothing else. We hope to do this one job very well, and handle all reasonable use cases.&lt;/p&gt;

&lt;p&gt;Functions in this package are organized first around what you&amp;rsquo;re working with or want to get, geojson or topojson, then convert to or read from various formats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geojson_list()&lt;/code&gt; - convert to geojson as R list format&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geojson_json()&lt;/code&gt; - convert to geojson as json&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geojson_sp()&lt;/code&gt; - convert output of &lt;code&gt;geojson_list()&lt;/code&gt; or &lt;code&gt;geojson_json()&lt;/code&gt; to spatial objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geojson_read()&lt;/code&gt;/&lt;code&gt;topojson_read()&lt;/code&gt; - read a geojson/topojson file from file path or URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geojson_write()&lt;/code&gt;/&lt;code&gt;topojson_write()&lt;/code&gt; - write a geojson/topojson file locally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of the above functions have methods for various objects/classes, including &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;data.frame&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;SpatialPolygons&lt;/code&gt;, &lt;code&gt;SpatialLines&lt;/code&gt;, &lt;code&gt;SpatialPoints&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Additional functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map_gist()&lt;/code&gt; - push up a geojson or topojson file as a GitHub gist (renders as an interactive map) - See the &lt;em&gt;maps with geojsonio&lt;/em&gt; vignette.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map_leaf()&lt;/code&gt; - create a local interactive map with the &lt;code&gt;leaflet&lt;/code&gt; package - See the &lt;em&gt;maps with geojsonio&lt;/em&gt; vignette.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;geojsonio&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&amp;quot;devtools&amp;quot;)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/geojsonio&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geojsonio&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;geojson&#34;&gt;GeoJSON&lt;/h3&gt;

&lt;h4 id=&#34;convert-various-formats-to-geojson&#34;&gt;Convert various formats to geojson&lt;/h4&gt;

&lt;p&gt;From a &lt;code&gt;numeric&lt;/code&gt; vector of length 2&lt;/p&gt;

&lt;p&gt;as &lt;em&gt;json&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_json(c(32.45, -99.74))
#&amp;gt; {&amp;quot;type&amp;quot;:&amp;quot;FeatureCollection&amp;quot;,&amp;quot;features&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;Feature&amp;quot;,&amp;quot;geometry&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;Point&amp;quot;,&amp;quot;coordinates&amp;quot;:[32.45,-99.74]},&amp;quot;properties&amp;quot;:{}}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as a &lt;strong&gt;list&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_list(c(32.45, -99.74))
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry
#&amp;gt; $features[[1]]$geometry$type
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From a &lt;code&gt;data.frame&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;as &lt;strong&gt;json&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;maps&#39;)
data(us.cities)
geojson_json(us.cities[1:2, ], lat = &#39;lat&#39;, lon = &#39;long&#39;)
#&amp;gt; {&amp;quot;type&amp;quot;:&amp;quot;FeatureCollection&amp;quot;,&amp;quot;features&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;Feature&amp;quot;,&amp;quot;geometry&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;Point&amp;quot;,&amp;quot;coordinates&amp;quot;:[-99.74,32.45]},&amp;quot;properties&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;Abilene TX&amp;quot;,&amp;quot;country.etc&amp;quot;:&amp;quot;TX&amp;quot;,&amp;quot;pop&amp;quot;:&amp;quot;113888&amp;quot;,&amp;quot;capital&amp;quot;:&amp;quot;0&amp;quot;}},{&amp;quot;type&amp;quot;:&amp;quot;Feature&amp;quot;,&amp;quot;geometry&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;Point&amp;quot;,&amp;quot;coordinates&amp;quot;:[-81.52,41.08]},&amp;quot;properties&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;Akron OH&amp;quot;,&amp;quot;country.etc&amp;quot;:&amp;quot;OH&amp;quot;,&amp;quot;pop&amp;quot;:&amp;quot;206634&amp;quot;,&amp;quot;capital&amp;quot;:&amp;quot;0&amp;quot;}}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as a &lt;strong&gt;list&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_list(us.cities[1:2, ], lat = &#39;lat&#39;, lon = &#39;long&#39;)
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry
#&amp;gt; $features[[1]]$geometry$type
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From &lt;code&gt;SpatialPolygons&lt;/code&gt; class&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;sp&#39;)
poly1 &amp;lt;- Polygons(list(Polygon(cbind(c(-100,-90,-85,-100),
  c(40,50,45,40)))), &amp;quot;1&amp;quot;)
poly2 &amp;lt;- Polygons(list(Polygon(cbind(c(-90,-80,-75,-90),
  c(30,40,35,30)))), &amp;quot;2&amp;quot;)
sp_poly &amp;lt;- SpatialPolygons(list(poly1, poly2), 1:2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to &lt;strong&gt;json&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_json(sp_poly)
#&amp;gt; {
#&amp;gt; &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot;,
#&amp;gt; &amp;quot;features&amp;quot;: [
#&amp;gt; { &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;, &amp;quot;id&amp;quot;: 1, &amp;quot;properties&amp;quot;: { &amp;quot;dummy&amp;quot;: 0.0 }, &amp;quot;geometry&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;Polygon&amp;quot;, &amp;quot;coordinates&amp;quot;: [ [ [ -100.0, 40.0 ], [ -90.0, 50.0 ], [ -85.0, 45.0 ], [ -100.0, 40.0 ] ] ] } },
#&amp;gt; { &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;, &amp;quot;id&amp;quot;: 2, &amp;quot;properties&amp;quot;: { &amp;quot;dummy&amp;quot;: 0.0 }, &amp;quot;geometry&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;Polygon&amp;quot;, &amp;quot;coordinates&amp;quot;: [ [ [ -90.0, 30.0 ], [ -80.0, 40.0 ], [ -75.0, 35.0 ], [ -90.0, 30.0 ] ] ] } }
#&amp;gt; ]
#&amp;gt; }
#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to a &lt;strong&gt;list&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_list(sp_poly)
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$id
#&amp;gt; [1] 1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From &lt;code&gt;SpatialPoints&lt;/code&gt; class&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(1, 2, 3, 4, 5)
y &amp;lt;- c(3, 2, 5, 1, 4)
s &amp;lt;- SpatialPoints(cbind(x, y))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to &lt;strong&gt;json&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_json(s)
#&amp;gt; {
#&amp;gt; &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot;,
#&amp;gt; &amp;quot;features&amp;quot;: [
#&amp;gt; { &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;, &amp;quot;id&amp;quot;: 1, &amp;quot;properties&amp;quot;: { &amp;quot;dat&amp;quot;: 1 }, &amp;quot;geometry&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [ 1.0, 3.0 ] } },
#&amp;gt; { &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;, &amp;quot;id&amp;quot;: 2, &amp;quot;properties&amp;quot;: { &amp;quot;dat&amp;quot;: 2 }, &amp;quot;geometry&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [ 2.0, 2.0 ] } },
#&amp;gt; { &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;, &amp;quot;id&amp;quot;: 3, &amp;quot;properties&amp;quot;: { &amp;quot;dat&amp;quot;: 3 }, &amp;quot;geometry&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [ 3.0, 5.0 ] } },
#&amp;gt; { &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;, &amp;quot;id&amp;quot;: 4, &amp;quot;properties&amp;quot;: { &amp;quot;dat&amp;quot;: 4 }, &amp;quot;geometry&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [ 4.0, 1.0 ] } },
#&amp;gt; { &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;, &amp;quot;id&amp;quot;: 5, &amp;quot;properties&amp;quot;: { &amp;quot;dat&amp;quot;: 5 }, &amp;quot;geometry&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [ 5.0, 4.0 ] } }
#&amp;gt; ]
#&amp;gt; }
#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to a &lt;strong&gt;list&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_list(s)
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$id
#&amp;gt; [1] 1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;write-geojson&#34;&gt;Write geojson&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#39;maps&#39;)
data(us.cities)
geojson_write(us.cities[1:2, ], lat = &#39;lat&#39;, lon = &#39;long&#39;)
#&amp;gt; &amp;lt;geojson-file&amp;gt;
#&amp;gt;   Path:       myfile.geojson
#&amp;gt;   From class: data.frame
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;read-geojson&#34;&gt;Read geojson&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;sp&amp;quot;)
file &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;california.geojson&amp;quot;, package = &amp;quot;geojsonio&amp;quot;)
out &amp;lt;- geojson_read(file, what = &amp;quot;sp&amp;quot;)
plot(out)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/tutorial-images/geojsonio/unnamed-chunk-16-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-16&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;topojson&#34;&gt;Topojson&lt;/h3&gt;

&lt;p&gt;In the current version of this package you can read topojson. Writing topojson was in this package, but is gone for now - will come back later as in interface to &lt;a href=&#34;https://github.com/mbostock/topojson&#34;&gt;topojson&lt;/a&gt; via &lt;a href=&#34;https://github.com/jeroenooms/V8&#34;&gt;V8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Read from a file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;us_states.topojson&amp;quot;, package = &amp;quot;geojsonio&amp;quot;)
out &amp;lt;- topojson_read(file, verbose = FALSE)
summary(out)
#&amp;gt; Object of class SpatialPolygonsDataFrame
#&amp;gt; Coordinates:
#&amp;gt;          min       max
#&amp;gt; x -171.79111 -66.96466
#&amp;gt; y   18.91619  71.35776
#&amp;gt; Is projected: NA
#&amp;gt; proj4string : [NA]
#&amp;gt; Data attributes:
#&amp;gt;           id
#&amp;gt;  Alabama   : 1
#&amp;gt;  Alaska    : 1
#&amp;gt;  Arizona   : 1
#&amp;gt;  Arkansas  : 1
#&amp;gt;  California: 1
#&amp;gt;  Colorado  : 1
#&amp;gt;  (Other)   :45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read from a URL&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;https://raw.githubusercontent.com/shawnbot/d3-cartogram/master/data/us-states.topojson&amp;quot;
out &amp;lt;- topojson_read(url, verbose = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use &lt;code&gt;as.location()&lt;/code&gt; first&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(loc &amp;lt;- as.location(file))
#&amp;gt; &amp;lt;location&amp;gt;
#&amp;gt;    Type:  file
#&amp;gt;    Location:  /Library/Frameworks/R.framework/Versions/3.4/Resources/library/geojsonio/examples/us_states.topojson
out &amp;lt;- topojson_read(loc, verbose = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Scott Chamberlain and Andy Teucher (2017). geojsonio: Convert Data from and to &amp;lsquo;geoJSON&amp;rsquo; or &amp;lsquo;topoJSON&amp;rsquo;. R package version 0.4.2. &lt;a href=&#34;https://cran.rstudio.com/package=geojsonio&#34;&gt;https://cran.rstudio.com/package=geojsonio&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropensci/geojsonio/issues?state=open&#34;&gt;our GitHub repo for geojsonio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>geojsonlint tutorial</title>
      <link>https://ropensci.org/tutorials/geojsonlint_tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/tutorials/geojsonlint_tutorial/</guid>
      <description>
        
        

&lt;p&gt;Tools for linting &amp;lsquo;GeoJSON&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Package API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geojson_lint()&lt;/code&gt; - &lt;a href=&#34;http://geojsonlint.com/&#34;&gt;GeoJSON lint web service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geojson_hint()&lt;/code&gt; - &lt;a href=&#34;https://www.npmjs.com/package/geojsonhint&#34;&gt;GeoJSON hint JS library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geojson_validate()&lt;/code&gt; - &lt;a href=&#34;https://www.npmjs.com/package/is-my-json-valid&#34;&gt;is-my-json-valid JS library&lt;/a&gt; using a GeoJSON
schema from &lt;a href=&#34;https://github.com/SchemaStore/schemastore&#34;&gt;https://github.com/SchemaStore/schemastore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Stable version from CRAN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;geojsonlint&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Development version from GitHub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&amp;quot;devtools&amp;quot;)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropenscilabs/geojsonlint&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geojsonlint&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Good GeoJSON&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;geojsonlint.com web service&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_lint(x = &#39;{&amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [-100, 80]}&#39;)
#&amp;gt; [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;geojsonhint JS library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_hint(x = &#39;{&amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [-100, 80]}&#39;)
#&amp;gt; [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is-my-json-valid JS library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_validate(x = &#39;{&amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [-100, 80]}&#39;)
#&amp;gt; [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Bad GeoJSON&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;geojsonlint.com web service&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_lint(&#39;{&amp;quot;type&amp;quot;: &amp;quot;FooBar&amp;quot;}&#39;)
#&amp;gt; [1] FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;geojsonhint JS library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_hint(&#39;{&amp;quot;type&amp;quot;: &amp;quot;FooBar&amp;quot;}&#39;)
#&amp;gt; [1] FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is-my-json-valid JS library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_validate(&#39;{ &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot; }&#39;)
#&amp;gt; [1] FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Bad GeoJSON - with reason for failure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;geojsonlint.com web service&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_lint(&#39;{&amp;quot;type&amp;quot;: &amp;quot;FooBar&amp;quot;}&#39;, verbose = TRUE)
#&amp;gt; [1] FALSE
#&amp;gt; attr(,&amp;quot;errors&amp;quot;)
#&amp;gt;                                 message status
#&amp;gt; 1 &amp;quot;FooBar&amp;quot; is not a valid GeoJSON type.  error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;geojsonhint JS library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_hint(&#39;{&amp;quot;type&amp;quot;: &amp;quot;FooBar&amp;quot;}&#39;, verbose = TRUE)
#&amp;gt; [1] FALSE
#&amp;gt; attr(,&amp;quot;errors&amp;quot;)
#&amp;gt;   line                    message
#&amp;gt; 1    1 The type FooBar is unknown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is-my-json-valid JS library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_validate(&#39;{ &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot; }&#39;, verbose = TRUE)
#&amp;gt; [1] FALSE
#&amp;gt; attr(,&amp;quot;errors&amp;quot;)
#&amp;gt;   field                             message
#&amp;gt; 1  data no (or more than one) schemas match
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Bad GeoJSON - stop on validation failure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;geojsonlint.com web service&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_lint(&#39;{&amp;quot;type&amp;quot;: &amp;quot;FooBar&amp;quot;}&#39;, error = TRUE)
#&amp;gt; Error: invalid GeoJSON
#&amp;gt;    - &amp;quot;FooBar&amp;quot; is not a valid GeoJSON type.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;geojsonhint JS library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_hint(&#39;{&amp;quot;type&amp;quot;: &amp;quot;FooBar&amp;quot;}&#39;, error = TRUE)
#&amp;gt; Error: Line 1
#&amp;gt;    - The type FooBar is unknown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is-my-json-valid JS library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_validate(&#39;{ &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot; }&#39;, error = TRUE)
#&amp;gt; Error: 1 error validating json:
#&amp;gt; 	- data: no (or more than one) schemas match
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;citing&#34;&gt;Citing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Scott Chamberlain and Andy Teucher (2017). geojsonlint: Tools for Validating
  &amp;lsquo;GeoJSON&amp;rsquo;. R package version 0.2.0 &lt;a href=&#34;https://cran.rstudio.com/package=geojsonlint&#34;&gt;https://cran.rstudio.com/package=geojsonlint&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;license-and-bugs&#34;&gt;License and bugs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;License: &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Report bugs at &lt;a href=&#34;https://github.com/ropenscilabs/geojsonlint/issues?state=open&#34;&gt;our GitHub repo for geojsonlint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;#top&#34;&gt;Back to top&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
