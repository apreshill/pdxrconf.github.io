<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Earth Science on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/earth-science/</link>
    <description>Recent content in Earth Science on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 04 Apr 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/earth-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Everybody talks about the weather</title>
      <link>https://ropensci.org/blog/2017/04/04/gsodr/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/04/04/gsodr/</guid>
      <description>
        
        

&lt;blockquote&gt;
&lt;p&gt;Everybody talks about the weather, but nobody does anything about it. - Charles Dudley Warner&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a scientist who models &lt;a href=&#34;https://github.com/adamhsparks/STRASA-Biotic-Stress-Maps&#34;&gt;plant diseases&lt;/a&gt;, I use a lot of weather data. Often this data is not available for areas of interest. Previously, I worked with the &lt;a href=&#34;http://www.irri.org/&#34;&gt;International Rice Research Institute (IRRI)&lt;/a&gt; and often the countries I was working with did not have weather data available or I was working on a large area covering several countries and needed a single source of data to work from. Other scientists who work with crop biophysical models to model crop yields also have similar weather data needs and may experience similar issues with data availability.&lt;/p&gt;

&lt;p&gt;The United States National Oceanic and Atmospheric Administration&amp;rsquo;s (NOAA) National Centers for Environmental Information (NCEI &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;) provides several sources of data, one of which is the &lt;a href=&#34;https://data.noaa.gov/dataset/global-surface-summary-of-the-day-gsod&#34;&gt;Global Surface Summary of the Day (GSOD)&lt;/a&gt; data. The data are attractive because they are daily time-step and ground or buoy station based, freely available, and the data span several years, 1929 to current, with data from 1973 to current being the most complete. For more information on the GSOD data, please see the description of the data provided by NCEI, &lt;a href=&#34;http://www7.ncdc.noaa.gov/CDO/GSOD_DESC.txt&#34;&gt;http://www7.ncdc.noaa.gov/CDO/GSOD_DESC.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While the GSOD data are a valuable source of weather data with global coverage. The data files can be cumbersome and difficult to work with for research purposes. So instead of just talking about it, I did something about it. The &lt;em&gt;GSODR&lt;/em&gt; package aims to make it easy to find, transfer and format the data you need for use in analysis. The package provides four main functions for facilitating this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_GSOD()&lt;/code&gt; - the main function that will query and transfer files from the FTP server, reformat them and return a data.frame in R or save a file to disk&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reformat_GSOD()&lt;/code&gt; - the workhorse, this function takes individual station files on the local disk and reformats them returning a data.frame in R&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nearest_stations()&lt;/code&gt; - this function returns a data frame containing a list of stations and their metadata that fall within the given radius of a point specified by the user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_station_list()&lt;/code&gt; - this function retrieves the most up-to-date list of stations and corresponding metadata&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When reformatting data either with &lt;code&gt;get_GSOD()&lt;/code&gt; or &lt;code&gt;reformat_GSOD()&lt;/code&gt;, all units are converted to International System of Units (SI), &lt;em&gt;e.g.&lt;/em&gt;, inches to millimetres and Fahrenheit to Celsius. File output can be saved as a Comma Separated Value (CSV) file or in a spatial &lt;a href=&#34;http://www.geopackage.org&#34;&gt;GeoPackage (GPKG)&lt;/a&gt; file, implemented by most major GIS software products, summarising each year by station, which also includes vapour pressure (ea and es) and relative humidity variables calculated from existing data in GSOD by the package.&lt;/p&gt;

&lt;p&gt;Documentation is provided for &lt;em&gt;GSODR&lt;/em&gt; using &lt;a href=&#34;http://hadley.github.io/pkgdown/&#34;&gt;&lt;em&gt;pkgdown&lt;/em&gt;&lt;/a&gt;, which you can find on the &lt;em&gt;GSODR&lt;/em&gt; website, &lt;a href=&#34;http://ropensci.github.io/GSODR/&#34;&gt;http://ropensci.github.io/GSODR/&lt;/a&gt; or of course in the usual R vignettes and help files.&lt;/p&gt;

&lt;h2 id=&#34;how-can-you-use-gsodr&#34;&gt;How Can You Use &lt;em&gt;GSODR&lt;/em&gt;?&lt;/h2&gt;

&lt;p&gt;Recently a colleague contacted me asking if I knew of or had weather data for a time period covering 1960 to 2015 for selected provinces in the Philippines where the &lt;a href=&#34;http://www.irri.org/&#34;&gt;International Rice Research Institute&lt;/a&gt; (IRRI) has conducted surveys. The IRRI survey loop in Central Luzon is a study that aims to monitor the changes in rice farming in the major rice producing area of the Philippines, the Central Luzon region, which is called the &amp;ldquo;rice bowl of the Philippines&amp;rdquo;. In this survey data have been collected several times since the 1960s, see the &lt;a href=&#34;http://ricestat.irri.org/fhsd/php/panel.php?page=1&amp;amp;sortBy=title&amp;amp;sortOrder=ascending#&#34;&gt;Farm Household Survey Database webpage&lt;/a&gt; for the data collected data. Using the &lt;em&gt;GSODR&lt;/em&gt; package I was able to retrieve weather data from stations within a 100km radius of the centre of the provinces included in the survey and provide my colleague with a CSV file of weather data from ground-based weather stations.&lt;/p&gt;

&lt;p&gt;As an example of how we can use &lt;em&gt;GSODR&lt;/em&gt;, I will demonstrate the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;retrieving a spatial object of provincial level data;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sub-setting this data for the provinces of interest;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;merging the polygons into one object;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;finding the centroid of this resulting polygon;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;using the centroid of the polygon to find stations within 100km of this point;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;determining which stations provide data for the specified time-period, 1960-2015; and&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;downloading the station files and creating a single CSV file of the data for analysis.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;retrieve-phl-provincial-data-and-select-loop-provinces&#34;&gt;Retrieve PHL Provincial Data and Select Loop Provinces&lt;/h3&gt;

&lt;p&gt;As a first step, we&amp;rsquo;ll use the &lt;a href=&#34;https://cran.r-project.org/package=raster&#34;&gt;&lt;em&gt;raster&lt;/em&gt;&lt;/a&gt; package to retrieve data from &lt;a href=&#34;http://www.gadm.org/&#34;&gt;GADM&lt;/a&gt; that will provide the provincial spatial data for the survey area. We will then use this to find the centroid of the area of interest, which will be used to find the nearest stations. Using &lt;code&gt;raster::getData()&lt;/code&gt; fetch level 0 (national) and 1 (provincial) data for the Philippines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;raster&amp;quot;)
library(raster)
RP0 &amp;lt;- raster::getData(country = &amp;quot;Philippines&amp;quot;, level = 0)
RP1 &amp;lt;- raster::getData(country = &amp;quot;Philippines&amp;quot;, level = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will select the provinces involved in the survey and make a new object called &lt;code&gt;Central_Luzon&lt;/code&gt; from the provincial level data, &lt;code&gt;RP1&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Central_Luzon &amp;lt;- RP1[RP1@data$NAME_1 == &amp;quot;Pampanga&amp;quot; |
                     RP1@data$NAME_1 == &amp;quot;Tarlac&amp;quot; |
                     RP1@data$NAME_1 == &amp;quot;Pangasinan&amp;quot; |
                     RP1@data$NAME_1 == &amp;quot;La Union&amp;quot; |
                     RP1@data$NAME_1 == &amp;quot;Nueva Ecija&amp;quot; |
                     RP1@data$NAME_1 == &amp;quot;Bulacan&amp;quot;, ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With a little help from an old acquaintance, &lt;a href=&#34;http://r-nold.blogspot.com.au/2014/06/creating-inset-map-with-ggplot2.html&#34;&gt;Arnold Salvacion&lt;/a&gt; and &lt;a href=&#34;https://github.com/sckott/sckott.github.com/blob/master/_posts/2012-08-22-ggplot-inset-map.md&#34;&gt;Scott Chamberlain&lt;/a&gt; we can create a map inset showing where the Central Luzon Loop survey takes place.&lt;/p&gt;

&lt;p&gt;First we&amp;rsquo;ll use &lt;code&gt;gSimplify()&lt;/code&gt; from &lt;em&gt;rgeos&lt;/em&gt; to simplify the map of the Philippines to make the map generation in the next few steps quicker.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;RP0 &amp;lt;- rgeos::gSimplify(RP0, tol = 0.05)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
library(grid)
library(gridExtra)

CL_names &amp;lt;- data.frame(coordinates(Central_Luzon)) # get center coordinates of provinces in Central Luzon
CL_names$label &amp;lt;- Central_Luzon@data$NAME_1

# Main Map
p1 &amp;lt;- ggplot() +
  geom_polygon(data = Central_Luzon, aes(x = long, y = lat, group = group),
               colour = &amp;quot;grey10&amp;quot;, fill = &amp;quot;#fff7bc&amp;quot;) +
  geom_text(data = CL_names, aes(x = X1, y = X2, label = label),
            size = 3, colour = &amp;quot;grey20&amp;quot;) +
  theme(axis.text.y = element_text(angle = 90, hjust = 0.5)) +
  ggtitle(&amp;quot;Central Luzon Provinces Surveyed&amp;quot;) +
  theme_bw() +
  xlab(&amp;quot;Longitude&amp;quot;) +
  ylab(&amp;quot;Latitude&amp;quot;) +
  coord_map()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Regions defined for each Polygons
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Inset
p2 &amp;lt;- ggplot() +
  geom_polygon(data = RP0, aes(long, lat, group = group),
               colour = &amp;quot;grey10&amp;quot;,
               fill = &amp;quot;#fff7bc&amp;quot;) +
  coord_equal() +
  theme_bw() +
  labs(x = NULL, y = NULL) +
  geom_rect(aes(xmin = extent(Central_Luzon)[1],
                xmax = extent(Central_Luzon)[2],
                ymin = extent(Central_Luzon)[3],
                ymax = extent(Central_Luzon)[4]),
            alpha = 0,
            colour = &amp;quot;red&amp;quot;,
            size = 1,
            linetype = 1) +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        plot.margin = unit(c(0, 0, 0 ,0), &amp;quot;mm&amp;quot;))

grid.newpage()
v1 &amp;lt;- viewport(width = 1, height = 1, x = 0.5, y = 0.5) # plot area for the main map
v2 &amp;lt;- viewport(width = 0.28, height = 0.28, x = 0.67, y = 0.78) # plot area for the inset map
print(p1, vp = v1)
print(p2, vp = v2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-04-gsodr/plot_CL-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;dissolve-polygons-and-find-centroid-of-loop-survey-area&#34;&gt;Dissolve Polygons and Find Centroid of Loop Survey Area&lt;/h3&gt;

&lt;p&gt;Now that we have the provincial data that we want, we will dissolve the polygons that represent the individual provinces in Central Luzon and find the centroid of all of them, which we will use as the central point for querying stations from the GSOD data set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Central_Luzon &amp;lt;- rgeos::gUnaryUnion(Central_Luzon)
centroid &amp;lt;- rgeos::gCentroid(Central_Luzon)

ggplot() +
  geom_polygon(data = Central_Luzon, aes(x = long, y = lat, group = group),
               colour = &amp;quot;grey10&amp;quot;, fill = &amp;quot;#fff7bc&amp;quot;) +
  geom_point(aes(x = centroid@coords[1], y = centroid@coords[2])) +
  theme(axis.text.y = element_text(angle = 90, hjust = 0.5)) +
  ggtitle(&amp;quot;Centre of Provinces Surveyed&amp;quot;) +
  theme_bw() +
  xlab(&amp;quot;Longitude&amp;quot;) +
  ylab(&amp;quot;Latitude&amp;quot;) +
  coord_map()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-04-gsodr/dissolve_and_plot_CL-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, make a list of stations that are within this area. First we need to fetch the station medadata, &amp;ldquo;isd-history.csv&amp;rdquo; from the FTP server and then check which stations fall within a 100km radius of the centre of the provinces we&amp;rsquo;re interested in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(GSODR)
library(readr)
# Fetch station list from NCEI
station_meta &amp;lt;- read_csv(
  &amp;quot;ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv&amp;quot;,
  col_types = &amp;quot;ccccccddddd&amp;quot;,
  col_names = c(&amp;quot;USAF&amp;quot;, &amp;quot;WBAN&amp;quot;, &amp;quot;STN_NAME&amp;quot;, &amp;quot;CTRY&amp;quot;, &amp;quot;STATE&amp;quot;, &amp;quot;CALL&amp;quot;, &amp;quot;LAT&amp;quot;,
                &amp;quot;LON&amp;quot;, &amp;quot;ELEV_M&amp;quot;, &amp;quot;BEGIN&amp;quot;, &amp;quot;END&amp;quot;), skip = 1)
station_meta$STNID &amp;lt;- as.character(paste(station_meta$USAF,
                                         station_meta$WBAN,
                                         sep = &amp;quot;-&amp;quot;))

loop_stations &amp;lt;- nearest_stations(LAT = centroid@coords[2],
                                  LON = centroid@coords[1],
                                  distance = 100)

loop_stations &amp;lt;- station_meta[station_meta$STNID %in% loop_stations, ]

loop_stations &amp;lt;- loop_stations[loop_stations$BEGIN &amp;lt;= 19591231 &amp;amp;
                               loop_stations$END &amp;gt;= 20151231, ]

print(loop_stations[, c(1:2, 3, 7:12)])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 9 × 9
##     USAF  WBAN          STN_NAME    LAT     LON ELEV_M    BEGIN      END
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 983240 99999  IBA/LUZON ISLAND 15.333 119.967    5.0 19490104 20170315
## 2 983250 99999           DAGUPAN 16.083 120.350    2.0 19450119 20170315
## 3 983270 99999        CLARK INTL 15.186 120.560  147.5 19450214 20170315
## 4 983280 99999            BAGUIO 16.375 120.620 1295.7 19490101 20170315
## 5 984260 41231 SUBIC BAY WEATHER 14.800 120.267   19.0 19450209 20170315
## 6 984290 99999 NINOY AQUINO INTL 14.509 121.020   22.9 19450331 20170315
## 7 984300 99999    SCIENCE GARDEN 14.650 121.050   46.0 19450228 20170315
## 8 984320 99999          AMBULONG 14.083 121.050   11.0 19490205 20170315
## 9 984330 99999             TANAY 14.583 121.367  651.0 19490101 20170315
## # ... with 1 more variables: STNID &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are all of the stations that are availble within 100km of the centroid of this area and the years for which data are available.&lt;/p&gt;

&lt;h3 id=&#34;using-get-gsod-to-fetch-the-requested-station-files&#34;&gt;Using &lt;code&gt;get_GSOD()&lt;/code&gt; to Fetch the Requested Station Files&lt;/h3&gt;

&lt;p&gt;This example shows how you could construct a query using the &lt;code&gt;get_GSOD()&lt;/code&gt; function. Be aware that it may result in incomplete data and error from the server if it stops responding. We&amp;rsquo;ve done our best to make &lt;em&gt;GSODR&lt;/em&gt; handle these errors, but if it does this, see the following option for using the &lt;code&gt;reformat_GSOD()&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PHL &amp;lt;- get_GSOD(station =
                  eval(parse(text = loop_stations[, 12])), years = 1960:2015)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##
## Checking requested station file for availability on server.

##
## Downloading individual station files.

## Starting data file processing
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;another-option-using-reformat-gsod&#34;&gt;Another Option, Using &lt;code&gt;reformat_GSOD()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;GSODR&lt;/em&gt; provides a function for dealing with local files that have been transferred from the server already as well, &lt;code&gt;reformat_GSOD()&lt;/code&gt;. If the previous example with &lt;code&gt;get_GSOD()&lt;/code&gt; does not work, this is a good alternative that takes a bit more intervention but gives the same results.&lt;/p&gt;

&lt;p&gt;Using your FTP client (&lt;em&gt;e.g.&lt;/em&gt;, FileZilla) log into the NCEI FTP server, &lt;code&gt;ftp.ncdc.noaa.gov&lt;/code&gt; and navigate to /pub/data/gsod/. Manually downloading the files for each station listed above from 1960 to 2015 is possible, but tedious. An easier solution is to simply download the annual files found in each yearly directory, &amp;ldquo;gsod-YYYY.tar&amp;rdquo; and untar them locally and then use R to list the available files and select only the files for the stations of interest. Lastly, write the data to disk as a CSV file for saving and later use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;years &amp;lt;- 1960:2015

loop_stations &amp;lt;- eval(parse(text = loop_stations[, 12]))

# create file list
loop_stations &amp;lt;- do.call(
  paste0, c(expand.grid(loop_stations, &amp;quot;-&amp;quot;, years, &amp;quot;.op.gz&amp;quot;))
  )

local_files &amp;lt;- list.files(path = &amp;quot;./GSOD&amp;quot;, full.names = TRUE, recursive = TRUE)
local_files &amp;lt;- local_files[basename(local_files) %in% loop_stations]

loop_data &amp;lt;- reformat_GSOD(file_list = local_files)

readr::write_csv(loop_data, file = &amp;quot;Loop_Survey_Weather_1960-2015&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-data-content-and-format&#34;&gt;The Data Content and Format&lt;/h3&gt;

&lt;p&gt;The final data returned by either of these methods will be data that include the following elements for the years of 1960-2015&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;STNID&lt;/strong&gt; - Station number (WMO/DATSAV3 number) for the location;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;WBAN&lt;/strong&gt; - number where applicable&amp;ndash;this is the historical &amp;ldquo;Weather Bureau Air Force Navy&amp;rdquo; number - with WBAN being the acronym;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;STN_NAME&lt;/strong&gt; - Unique text identifier;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;CTRY&lt;/strong&gt; - Country in which the station is located;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;LAT&lt;/strong&gt; - Latitude. &lt;em&gt;Station dropped in cases where values are &amp;lt; -90 or &amp;gt; 90 degrees or Lat = 0 and Lon = 0&lt;/em&gt;;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;LON&lt;/strong&gt; - Longitude. &lt;em&gt;Station dropped in cases where values are &amp;lt; -180 or &amp;gt; 180 degrees or Lat = 0 and Lon = 0&lt;/em&gt;;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ELEV_M&lt;/strong&gt; - Elevation in metres;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ELEV_M_SRTM_90m&lt;/strong&gt; - Elevation in metres corrected for possible errors, derived from the CGIAR-CSI SRTM 90m database (Jarvis et al. 2008);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;YEARMODA&lt;/strong&gt; - Date in YYYY-mm-dd format;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;YEAR&lt;/strong&gt; - The year (YYYY);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;MONTH&lt;/strong&gt; - The month (mm);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;DAY&lt;/strong&gt; - The day (dd);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;YDAY&lt;/strong&gt; - Sequential day of year (not in original GSOD);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;TEMP&lt;/strong&gt; - Mean daily temperature converted to degrees C to tenths. Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;TEMP_CNT&lt;/strong&gt; - Number of observations used in calculating mean daily temperature;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;DEWP&lt;/strong&gt; - Mean daily dew point converted to degrees C to tenths. Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;DEWP_CNT&lt;/strong&gt; - Number of observations used in calculating mean daily dew point;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SLP&lt;/strong&gt; - Mean sea level pressure in millibars to tenths. Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SLP_CNT&lt;/strong&gt; - Number of observations used in calculating mean sea level pressure;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;STP&lt;/strong&gt; - Mean station pressure for the day in millibars to tenths. Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;STP_CNT&lt;/strong&gt; - Number of observations used in calculating mean station pressure;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;VISIB&lt;/strong&gt; - Mean visibility for the day converted to kilometres to tenths Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;VISIB_CNT&lt;/strong&gt; - Number of observations used in calculating mean daily visibility;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;WDSP&lt;/strong&gt; - Mean daily wind speed value converted to metres/second to tenths Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;WDSP_CNT&lt;/strong&gt; - Number of observations used in calculating mean daily wind speed;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;MXSPD&lt;/strong&gt; - Maximum sustained wind speed reported for the day converted to metres/second to tenths. Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;GUST&lt;/strong&gt; - Maximum wind gust reported for the day converted to metres/second to tenths. Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;MAX&lt;/strong&gt; - Maximum temperature reported during the day converted to Celsius to tenths&amp;ndash;time of max temp report varies by country and region, so this will sometimes not be the max for the calendar day. Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;MAX_FLAG&lt;/strong&gt; - Blank indicates max temp was taken from the explicit max temp report and not from the &amp;lsquo;hourly&amp;rsquo; data. An &amp;ldquo;*&amp;rdquo; indicates max temp was derived from the hourly data (i.e., highest hourly or synoptic-reported temperature);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;MIN&lt;/strong&gt; - Minimum temperature reported during the day converted to Celsius to tenths&amp;ndash;time of min temp report varies by country and region, so this will sometimes not be the max for the calendar day. Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;MIN_FLAG&lt;/strong&gt; - Blank indicates max temp was taken from the explicit min temp report and not from the &amp;lsquo;hourly&amp;rsquo; data. An &amp;ldquo;*&amp;rdquo; indicates min temp was derived from the hourly data (i.e., highest hourly or synoptic-reported temperature);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;PRCP&lt;/strong&gt; - Total precipitation (rain and/or melted snow) reported during the day converted to millimetres to hundredths; will usually not end with the midnight observation, i.e., may include latter part of previous day. A value of &amp;ldquo;.00&amp;rdquo; indicates no measurable precipitation (includes a trace). Missing = NA; &lt;em&gt;Note: Many stations do not report &amp;lsquo;0&amp;rsquo; on days with no precipitation&amp;ndash; therefore, &amp;lsquo;NA&amp;rsquo; will often appear on these days. For example, a station may only report a 6-hour amount for the period during which rain fell.&lt;/em&gt; See FLAGS_PRCP column for source of data;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;PRCP_FLAG&lt;/strong&gt; -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A = 1 report of 6-hour precipitation amount;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;B = Summation of 2 reports of 6-hour precipitation amount;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C = Summation of 3 reports of 6-hour precipitation amount;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D = Summation of 4 reports of 6-hour precipitation amount;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;E = 1 report of 12-hour precipitation amount;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;F = Summation of 2 reports of 12-hour precipitation amount;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;G = 1 report of 24-hour precipitation amount;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;H = Station reported &amp;lsquo;0&amp;rsquo; as the amount for the day (e.g., from 6-hour reports), but also reported at least one occurrence of precipitation in hourly observations&amp;ndash;this could indicate a rrace occurred, but should be considered as incomplete data for the day;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I = Station did not report any precipitation data for the day and did not report any occurrences of precipitation in its hourly observations&amp;ndash;it&amp;rsquo;s still possible that precipitation occurred but was not reported;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SNDP&lt;/strong&gt; - Snow depth in millimetres to tenths. Missing = NA;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I_FOG&lt;/strong&gt; - Indicator for fog, (1 = yes, 0 = no/not reported) for the occurrence during the day;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I_RAIN_DRIZZLE&lt;/strong&gt; - Indicator for rain or drizzle, (1 = yes, 0 = no/not reported) for the occurrence during the day;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I_SNOW_ICE&lt;/strong&gt; - Indicator for snow or ice pellets, (1 = yes, 0 = no/not reported) for the occurrence during the day;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I_HAIL&lt;/strong&gt; - Indicator for hail, (1 = yes, 0 = no/not reported) for the occurrence during the day;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I_THUNDER&lt;/strong&gt; - Indicator for thunder, (1 = yes, 0 = no/not reported) for the occurrence during the day;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;I_TORNADO_FUNNEL&lt;/strong&gt; - Indicator for tornado or funnel cloud, (1 = yes, 0 = no/not reported) for the occurrence during the day;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ea&lt;/strong&gt; - Mean daily actual vapour pressure;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;es&lt;/strong&gt; - Mean daily saturation vapour pressure;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;RH&lt;/strong&gt; - Mean daily relative humidity.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s what the data look like.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;##    WBAN        STNID         STN_NAME CTRY STATE CALL    LAT     LON
## 1 99999 983240-99999 IBA/LUZON ISLAND   RP  &amp;lt;NA&amp;gt; RPUI 15.333 119.967
## 2 99999 983240-99999 IBA/LUZON ISLAND   RP  &amp;lt;NA&amp;gt; RPUI 15.333 119.967
## 3 99999 983240-99999 IBA/LUZON ISLAND   RP  &amp;lt;NA&amp;gt; RPUI 15.333 119.967
## 4 99999 983240-99999 IBA/LUZON ISLAND   RP  &amp;lt;NA&amp;gt; RPUI 15.333 119.967
## 5 99999 983240-99999 IBA/LUZON ISLAND   RP  &amp;lt;NA&amp;gt; RPUI 15.333 119.967
## 6 99999 983240-99999 IBA/LUZON ISLAND   RP  &amp;lt;NA&amp;gt; RPUI 15.333 119.967
##   ELEV_M ELEV_M_SRTM_90m    BEGIN      END YEARMODA YEAR MONTH DAY YDAY
## 1      5               9 19490104 20170315 19730101 1973    01  01    1
## 2      5               9 19490104 20170315 19730102 1973    01  02    2
## 3      5               9 19490104 20170315 19730103 1973    01  03    3
## 4      5               9 19490104 20170315 19730104 1973    01  04    4
## 5      5               9 19490104 20170315 19730105 1973    01  05    5
## 6      5               9 19490104 20170315 19730106 1973    01  06    6
##   TEMP TEMP_CNT DEWP DEWP_CNT    SLP SLP_CNT STP STP_CNT VISIB VISIB_CNT
## 1 26.8        7 23.8        7 1014.1       7  NA       0  34.3         7
## 2 26.6        5 23.2        5 1013.8       5  NA       0  34.0         5
## 3 25.8        6 23.2        6 1013.5       6  NA       0  34.9         6
## 4 28.4        5 25.0        5 1014.5       5  NA       0  38.0         5
## 5 25.8        4 23.5        4 1014.8       4  NA       0    NA         0
## 6 25.0        8 22.9        8 1014.8       8  NA       0  35.6         8
##   WDSP WDSP_CNT MXSPD GUST MAX MAX_FLAG MIN MIN_FLAG PRCP PRCP_FLAG SNDP
## 1  0.4        7   3.0   NA  31        *  24        *    0         I   NA
## 2  0.9        5   4.1   NA  33        *  19        *    0         I   NA
## 3  0.8        6   4.1   NA  30        *  21        *    0         I   NA
## 4  1.0        5   5.1   NA  32        *  23        *    0         I   NA
## 5  0.2        4   1.5   NA  30        *  22        *    0         I   NA
## 6  0.4        8   2.5   NA  31        *  19        *    0         I   NA
##   I_FOG I_RAIN_DRIZZLE I_SNOW_ICE I_HAIL I_THUNDER I_TORNADO_FUNNEL  EA
## 1     0              0          0      0         0                0 2.9
## 2     0              0          0      0         0                0 2.8
## 3     0              0          0      0         0                0 2.8
## 4     0              0          0      0         0                0 3.2
## 5     0              0          0      0         0                0 2.9
## 6     0              0          0      0         0                0 2.8
##    ES   RH
## 1 3.5 82.9
## 2 3.5 80.0
## 3 3.3 84.8
## 4 3.9 82.1
## 5 3.3 87.9
## 6 3.2 87.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the &lt;em&gt;GSODR&lt;/em&gt; package and R I was able to easily retrieve and provide weather data for the years requested that cover the area of interest for this survey and create a CSV file of the data for use with other software for the analysis.&lt;/p&gt;

&lt;h2 id=&#34;using-gsod-data-with-climate-data-from-gsodrdata&#34;&gt;Using GSOD Data With Climate Data From &lt;em&gt;GSODRdata&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;If you want to use climate and ecological data with weather data, we&amp;rsquo;ve also provided a supplementary data package to go with &lt;em&gt;GSODR&lt;/em&gt;, &lt;a href=&#34;https://github.com/adamhsparks/GSODRdata&#34;&gt;&lt;em&gt;GSODRdata&lt;/em&gt;&lt;/a&gt;, which provides climate data from five sources in six data frames:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CHELSA&lt;/strong&gt; - &lt;a href=&#34;http://chelsa-climate.org&#34;&gt;Climatic surfaces at 1 km resolution&lt;/a&gt; is based on a quasi-mechanistic statistical downscaling of the ERA interim global circulation model (Karger &lt;em&gt;et al.&lt;/em&gt; 2016). ESA&amp;rsquo;s CCI-LC cloud probability monthly averages are based on the MODIS snow products (MOD10A2).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;CRU_CL_2&lt;/strong&gt; - The &lt;a href=&#34;https://crudata.uea.ac.uk/~timm/grid/CRU_CL_2_0.html&#34;&gt;CRU CL 2.0 data-set&lt;/a&gt; (New &lt;em&gt;et al.&lt;/em&gt; 2002) comprises monthly grids of observed mean climate from 1961-1990, and covering the global land surface at a 10 minute spatial resolution. There are eight climatic variables available, and also the elevations on the grid: diurnal temperature range, precipitation, mean temperature, wet-day frequency, frost-day frequency, relative humidity, sunshine, and wind-speed. In addition minimum and maximum temperature may be deduced from mean temperature and diurnal temperature range (see &lt;a href=&#34;https://crudata.uea.ac.uk/~timm/grid/faq.html&#34;&gt;FAQ&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ESACCI&lt;/strong&gt; - ESA&amp;rsquo;s CCI-LC snow cover probability &lt;a href=&#34;http://maps.elie.ucl.ac.be/CCI/viewer/index.php&#34;&gt;http://maps.elie.ucl.ac.be/CCI/viewer/index.php&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;MODCF&lt;/strong&gt; - &lt;a href=&#34;https://github.com/adammwilson/Cloud&#34;&gt;Remotely sensed high-resolution global cloud dynamics for predicting ecosystem and biodiversity distributions&lt;/a&gt; (Wilson &lt;em&gt;et al.&lt;/em&gt; 2016) provides new near-global, fine-grain (≈1km) monthly cloud frequencies from 15 years of twice-daily MODIS satellite images.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;WorldClim_Bio&lt;/strong&gt; - &lt;a href=&#34;http://www.worldclim.org/version1&#34;&gt;WorldClim Global Climate Data - Free climate data for ecological modeling and GIS&lt;/a&gt; (Hijmans &lt;em&gt;et al.&lt;/em&gt; 2004) provides freely available &lt;a href=&#34;http://worldclim.org/bioclim&#34;&gt;bioclimatic variables&lt;/a&gt;. These data are freely available for download from &lt;a href=&#34;http://www.worldclim.org/version1&#34;&gt;http://www.worldclim.org/version1&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;WorldClim_Clim&lt;/strong&gt; - &lt;a href=&#34;http://www.worldclim.org/version1&#34;&gt;WorldClim Global Climate Data - Free climate data for ecological modeling and GIS&lt;/a&gt; (Hijmans &lt;em&gt;et al.&lt;/em&gt; 2004) provides freely available, average monthly climate data. Current conditions (interpolations of observed data, representative of 1960-1990) are freely available for download from &lt;a href=&#34;http://www.worldclim.org/version1&#34;&gt;http://www.worldclim.org/version1&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to the size of the package, &amp;gt;9Mb, it is only available from GitHub. However, these data frames provide climate and ecological data that corresponds to the GSOD station locations, making it easy to find and work with weather and climate data at the same time. If you&amp;rsquo;re interested you can find some further examples in the &lt;a href=&#34;https://cran.rstudio.com/web/packages/GSODR/vignettes/Working_with_spatial_and_climate_data.html&#34;&gt;&lt;em&gt;GSODR&lt;/em&gt; vignettes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;The GSOD data have a wide range of applications and &lt;em&gt;GSODR&lt;/em&gt; makes this data more accessible to scientists that need a global weather data set. Using &lt;em&gt;GSODR&lt;/em&gt; means that you can efficiently query for a set of years, for specific stations or areas within a given radius. The GSOD data are not perfect, there are many gaps prior to 1973, but in the more recent years the data became more reliable and more stations are being added.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(station_meta, aes(x = END)) +
  geom_histogram() +
  xlab(&amp;quot;End Date (YYYYMMDD)&amp;quot;) +
  ylab(&amp;quot;Number of Stations&amp;quot;) +
  ggtitle(&amp;quot;Count of stations&#39; end date&amp;quot;) +
  theme_bw()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-04-gsodr/station_numbers-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-could-you-use-gsodr&#34;&gt;How could you use &lt;em&gt;GSODR&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;Let us know how you use &lt;em&gt;GSODR&lt;/em&gt; in your work. If you find an issue, please file an &lt;a href=&#34;https://github.com/ropensci/GSODR/issues&#34;&gt;issue&lt;/a&gt; and we&amp;rsquo;ll work to get it corrected as quickly as possible. Also, if you think that you have an idea that might make GSODR better &lt;a href=&#34;https://github.com/ropensci/GSODR/issues&#34;&gt;let us know&lt;/a&gt; that too.&lt;/p&gt;

&lt;h3 id=&#34;acknowledgments&#34;&gt;Acknowledgments&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re grateful to Jeff Hanson and Dillon Niederhut who took the time to &lt;a href=&#34;https://github.com/ropensci/onboarding/issues/79&#34;&gt;review&lt;/a&gt; &lt;em&gt;GSODR&lt;/em&gt; as a part of the rOpenSci &lt;a href=&#34;https://github.com/ropensci/onboarding&#34;&gt;onboarding process&lt;/a&gt; and the &lt;a href=&#34;https://doi.org/10.21105%2Fjoss.00177&#34;&gt;related paper&lt;/a&gt; published in the Journal of Open Source Software (Sparks &lt;em&gt;et al.&lt;/em&gt;, 2017). Their suggestions greatly improved this package. Also, thanks to Scott Chamberlain for his editorial comments on this blog post, including spelling corrections to his name.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;Adam H Sparks, Tomislav Hengl and Andrew Nelson (2017). GSODR: Global Summary Daily Weather Data in R. The Journal of Open Source Software, 2(10). DOI: 10.21105/joss.00177. URL: &lt;a href=&#34;https://doi.org/10.21105/joss.00177&#34;&gt;https://doi.org/10.21105/joss.00177&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Formerly the National Climatic Data Center (NCDC)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>camsRad, satellite-based time series of solar irradiation</title>
      <link>https://ropensci.org/blog/2017/03/21/camsrad/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/03/21/camsrad/</guid>
      <description>
        
        

&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/camsRad&#34;&gt;&lt;code&gt;camsRad&lt;/code&gt;&lt;/a&gt; is a lightweight R client for the &lt;a href=&#34;http://www.soda-pro.com/web-services/radiation/cams-radiation-service&#34;&gt;CAMS Radiation Service&lt;/a&gt;, that provides satellite-based time series of solar irradiation for the actual weather conditions as well as for clear-sky conditions. Satellite-based solar irradiation data have been around roughly as long our modern era satellites. But the price tag has been very high, in the range of several thousand euros per site. This has damped research and development of downstream applications. With CAMS Radiation Service coming online in 2016, this changed as the services are provided under the (not yet fully implemented) European Union stand point that data and services produced with public funding shall be provided on free and open grounds. The service is part of &lt;a href=&#34;http://www.copernicus.eu&#34;&gt;Copernicus&lt;/a&gt;, a European Union programme aimed at developing information services based on satellite earth observation and in situ data. All Copernicus information services are free and openly accessible.&lt;/p&gt;

&lt;h2 id=&#34;satellite-based-solar-irradiation-data&#34;&gt;Satellite-based solar irradiation data&lt;/h2&gt;

&lt;p&gt;The main groups of users are planners and managers of solar energy systems; architects and building engineers; researchers in renewable energies and building engineering. Surface solar irradiation is relatively cumbersome and expensive to retrieve by ground observation. Therefore, a satellite-based modelling approach can in many cases be a more feasible option. These approaches build-upon the principle that pixels in satellite images of clouds (target 2 in figure below) appear brighter/whiter than pixels of ground (target 1). For more thorough description on underlying theory and technical details, head to the &lt;a href=&#34;http://www.soda-pro.com/web-services/radiation/cams-radiation-service/info&#34;&gt;user guide and articles&lt;/a&gt;. CAMS Radiation Service is jointly developed and provided by DLR, Armines and Transvalor.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-03-21-camsRad/sat_solar_radiation_illustration.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
  &lt;figcaption&gt;Illustration on using satellite images to determine level of cloudiness. Source: &lt;a href=&#34;https://atmosphere.copernicus.eu/sites/default/files/repository/MACCIII_RAD_DEL_D57.5_final_0.pdf&#34;&gt;MACC-III Deliverable D57.5&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=https://rokka.shinyapps.io/shinyweatherdata&gt;Check out the Shiny app&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;the-camsrad-package&#34;&gt;The camsRad package&lt;/h2&gt;

&lt;p&gt;In a perfect world, this package would be unnecessary. Accessing data and web services should be easy, a procedure so standardized that anyone with a bit of programming experience should be able to achieve this with a few lines of code. I´ve worked with quite a few web API, but still haven´t encountered two of the same kind. It always requires time and effort familiarizing yourself with the concept of communication, formatting etc. That there exist numerous ways of disseminating data can be seen at the &lt;a href=&#34;https://ropensci.org/packages&#34;&gt;rOpenSci packages listing&lt;/a&gt;, where roughly half of the listed packages are categorized as data access packages.&lt;/p&gt;

&lt;p&gt;The CAMS Radiation Service uses a so-called &lt;a href=&#34;http://www.opengeospatial.org/standards/wps&#34;&gt;Web Process Service (WPS)&lt;/a&gt; interface. WPS provides standardizing for geospatial processing services. It requires you to make a &lt;code&gt;POST&lt;/code&gt; requests carrying a XML formatted payload that specifies how the service is invoked. As I wanted to have a thorough and reliable R-client and though other users could have use of it, I decided to make it a public R-package and submit it to the rOpenSci for review. I think I´m a quite typical aspiring R developer, mostly self-learned programmer with a non-computer science degree. Another, a bit selfish, motive for submitting was that I thought it would be a good learning ground to adopt a more formal R-development style. And yes, I learned a lot! A big thank you to reviewer &lt;a href=&#34;https://github.com/jhollist&#34;&gt;Jeffrey Hollister&lt;/a&gt; and editor &lt;a href=&#34;https://github.com/sckott&#34;&gt;Scott Chamberlain&lt;/a&gt;. The biggest change after the review, was getting rid of package dependencies to get a more lightweight package and to decrease the risk of breakage when upstream packages get updated.&lt;/p&gt;

&lt;p&gt;The core of the camsRad package is the &lt;a href=&#34;https://github.com/ropenscilabs/camsRad/blob/master/R/cams_api.R&#34;&gt;&lt;code&gt;cams_api&lt;/code&gt;&lt;/a&gt; function which interfaces the WPS of the CAMS Radiation Service. It can be of interest for anyone wanting to call CAMS Radiation Service from other languages than R, or for those that want to invoke other WPS based web services from R. The two convenience functions &lt;code&gt;cams_get_radiation&lt;/code&gt; and &lt;code&gt;cams_get_mcclear&lt;/code&gt; are for those of you that just want to get the data into a R data frame with a little hassle as possible. Check the &lt;a href=&#34;https://cran.r-project.org/web/packages/camsRad/vignettes/CAMS_solar_data.html&#34;&gt;vignette&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropenscilabs/camsRad/blob/master/README.md&#34;&gt;readme file&lt;/a&gt; for further instructions and examples.&lt;/p&gt;

&lt;h2 id=&#34;my-use-cases&#34;&gt;My use cases&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://rokka.shinyapps.io/shinyweatherdata&#34;&gt;Shiny Weather Data&lt;/a&gt; is a web service making different sources of European gridded climate data available in hourly time series formats used by common building performance modeling tools. This web service has been around for a while and has a steadily growing user group of professional building modelers as well as students and researchers.&lt;/p&gt;

&lt;p&gt;&lt;a href=https://rokka.shinyapps.io/shinyweatherdata&gt;
  &lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-03-21-camsRad/screenshot_ShinyWeatherData.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://rokka.shinyapps.io/smartep&#34;&gt;Smart Energy Modeler&lt;/a&gt; demonstrates how modeled climate data can be used to calibrate simple building models with utility bill data. This is a dissemination from my research as a PhD Candidate at Mälardalen University, Sweden. It´s in an early stage of development, but a nice showcase of how access to open climate data enables data-driven application that solves real world-problems.&lt;/p&gt;

&lt;p&gt;&lt;a href=https://rokka.shinyapps.io/smartep&gt;
  &lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-03-21-camsRad/screenshot_SmartEnergyModeler.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;future-development&#34;&gt;Future development&lt;/h2&gt;

&lt;p&gt;The CAMS Radiation Service relies on images from the Metosat satellite which is located at the at the prime meridian of 0° longitude (covering Europe, Africa and Middle East). I´ve started a &lt;a href=&#34;https://github.com/ropenscilabs/camsRad/issues/2&#34;&gt;GitHub issue&lt;/a&gt; about alternative data sources. So, please, let me know if you know any sources of open and free, high resolution solar radiation data based on images from satellites above America and Asia.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Discover hydrological data using the hddtools R package</title>
      <link>https://ropensci.org/blog/2017/03/07/hddtools/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/03/07/hddtools/</guid>
      <description>
        
        

&lt;p&gt;I&amp;rsquo;ve worked for over 12 years in hydrology and natural hazard modelling and one of the things that still fascinates me is the variety of factors that come into play in trying to predict phenomena such as river floods. From local observations of meteorological and hydrological variables and their spatio-temporal patterns to the type and condition of soils and vegetation/land use as well as the geometry and state of river channels and engineering structures affecting the flow.&lt;/p&gt;

&lt;p&gt;This large number of well known predictors directly translates in the need to collect a wide variety of information such as in-situ sensor observations, river survey data, satellite imagery and, more recently, social media information (reporting in real-time the evolution of on-going events). In this field, data collection is challenging on many levels: data are available from different providers under a variety of licences, in various data types and formats that need to be handled and homogenised.&lt;/p&gt;

&lt;p&gt;On the one side, not much can be done to overcome licensing issues and the learning curve to become an expert hydrologist is rather steep. On the other side, the R community is working hard to provide tools to make data standards more user-friendly and the convenience of data APIs available to everyone, not only web developers. Here is where &lt;code&gt;hddtools&lt;/code&gt; comes into play! This R package is a proof of concept that hydrological data can be made more accessible and consists of a collection of functions to retrieve and homogenise hydrological information. Let me walk you through the main functionalities!&lt;/p&gt;

&lt;h2 id=&#34;the-r-package-hddtools&#34;&gt;The R package &lt;code&gt;hddtools&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The name &lt;code&gt;hddtools&lt;/code&gt; stands for &lt;strong&gt;H&lt;/strong&gt;ydrological &lt;strong&gt;D&lt;/strong&gt;ata &lt;strong&gt;D&lt;/strong&gt;iscovery &lt;strong&gt;Tools&lt;/strong&gt;. This is an open source project designed to facilitate access to on-line data sources. This typically implies the download of a metadata catalogue, selection of information needed, formal request for dataset(s), de-compression, conversion, manual filtering and parsing. All those operation are made more efficient by re-usable functions.&lt;/p&gt;

&lt;p&gt;Depending on the data license, functions can provide offline and/or on-line modes. When redistribution is allowed, for instance, a copy of the dataset is cached within the package and updated twice a year. This is the fastest option and also allows offline use of functions. When re-distribution is not allowed, only on-line mode is provided.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;hddtools&lt;/code&gt; package and the examples in this blog depend on other CRAN packages. Before attempting to install &lt;code&gt;hddtools&lt;/code&gt;, solve any missing dependencies using the commands below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;packs &amp;lt;- c(&amp;quot;zoo&amp;quot;, &amp;quot;sp&amp;quot;, &amp;quot;RCurl&amp;quot;, &amp;quot;XML&amp;quot;, &amp;quot;rnrfa&amp;quot;, &amp;quot;Hmisc&amp;quot;, &amp;quot;raster&amp;quot;,
           &amp;quot;stringr&amp;quot;, &amp;quot;devtools&amp;quot;, &amp;quot;leaflet&amp;quot;)
new_packages &amp;lt;- packs[!(packs %in% installed.packages()[,&amp;quot;Package&amp;quot;])]
if(length(new_packages)) install.packages(new_packages)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package is available from the Comprehensive R Archive Network (&lt;a href=&#34;https://cran.r-project.org/index.html&#34;&gt;CRAN&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;hddtools&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the development of this package is very dynamic. Data sources become often unavailable or migrate to new systems. URLs change and, as a consequence, functions may stop working. For this reason, I always suggest to use the development version of this package, which is available from github using &lt;a href=&#34;https://github.com/hadley/devtools&#34;&gt;devtools&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;ropensci/hddtools&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Load the &lt;code&gt;hddtools&lt;/code&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;hddtools&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data-sources-and-functions&#34;&gt;Data sources and Functions&lt;/h2&gt;

&lt;p&gt;In my quest for hydrological data I found that there are tons of open datasets available but the problem is that &lt;strong&gt;you need to know where to look!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is the list of data sources available within the &lt;code&gt;hddtools&lt;/code&gt; package:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Koppen Climate Classification map&lt;/li&gt;
&lt;li&gt;The Global Runoff Data Centre&lt;/li&gt;
&lt;li&gt;NASA&amp;rsquo;s Tropical Rainfall Measuring Mission&lt;/li&gt;
&lt;li&gt;The Top-Down modelling Working Group:

&lt;ul&gt;
&lt;li&gt;Data60UK&lt;/li&gt;
&lt;li&gt;MOPEX
-SEPA river level data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each source, functions are available to obtain and/or filter relevant data. Their usage is described below.&lt;/p&gt;

&lt;h3 id=&#34;the-koppen-climate-classification-map&#34;&gt;The Koppen Climate Classification map&lt;/h3&gt;

&lt;p&gt;The Koppen Climate Classification is the most widely used system for classifying the world&amp;rsquo;s climates. Its categories are based on the annual and monthly averages of temperature and precipitation. This climate classification is used, in hydrological studies, to explain the continental-scale variability in
annual runoff. The &lt;code&gt;hddtools&lt;/code&gt; package contains a function to identify the updated Koppen-Greiger climate zone, given a bounding box. In the example below I&amp;rsquo;m getting the climate class for my beautiful home town in Italy: Pompeii.
Country borders are retrieved using the &lt;code&gt;getData()&lt;/code&gt; function from the raster package, which retrieves global administrative areas from the following website: &lt;a href=&#34;http://www.gadm.org/&#34;&gt;http://www.gadm.org/&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Plot Pompeii on a map
library(raster)
Italy &amp;lt;- getData(&amp;quot;GADM&amp;quot;, country = &amp;quot;IT&amp;quot;, level = 0)
Pompeii &amp;lt;- SpatialPoints(coords = data.frame(x = 14.4870, y = 40.7510))
plot(Italy, col = NA, border = &amp;quot;darkgrey&amp;quot;)
plot(Pompeii, add = TRUE, col = &amp;quot;red&amp;quot;)

# Define and plot a bounding box centred in Pompeii (Italy)
areaBox &amp;lt;- raster::extent(Pompeii@coords[[1]] - 0.5, Pompeii@coords[[1]] + 0.5,
                          Pompeii@coords[[2]] - 0.5, Pompeii@coords[[2]] + 0.5)
plot(areaBox, add = TRUE, col = &amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-03-07-hddtools/unnamed-chunk-5-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Extract climate zones from Kottek&#39;s map:
KGClimateClass(areaBox = areaBox, updatedBy = &amp;quot;Kottek&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   ID Class Frequency
## 1 34   Csa       131
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the column &lt;code&gt;Class&lt;/code&gt; in the above table, it can be derived that the area falls in a warm temperate climate &amp;copy; with dry (s) and hot summers (a). A description of the retrieved class and related criterion can be printed setting the argument &lt;code&gt;verbose = TRUE&lt;/code&gt; in the function &lt;code&gt;KGClimateClass()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-global-runoff-data-centre&#34;&gt;The Global Runoff Data Centre&lt;/h3&gt;

&lt;p&gt;The Global Runoff Data Centre (GRDC) is an international archive hosted by the Federal Institute of Hydrology in Koblenz, Germany. The Centre operates under the auspices of the World Meteorological Organisation and retains services and datasets for all the major rivers in the world. The data catalogue, kml files and the Long-Term Mean Monthly Discharges are open data and accessible via &lt;code&gt;hddtools&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Information on all the GRDC stations can be retrieved using the function &lt;code&gt;catalogueGRDC&lt;/code&gt; with no input arguments, as in the example below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# GRDC full catalogue
GRDC_catalogue_all &amp;lt;- catalogueGRDC()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, there are a number of options to filter the catalogue and return only a subset of stations. For instance, the catalogue can be filtered based on a geographical bounding box as in the function &lt;code&gt;KGClimateClass()&lt;/code&gt;. It might also be interesting to subset only stations in a given country, e.g. Italy. As the 8th column in the catalogue lists the country codes, the catalogue can be filtered passing two input arguments to the &lt;code&gt;catalogueGRDC()&lt;/code&gt; function: &lt;code&gt;columnName = &amp;quot;country_code&amp;quot;&lt;/code&gt; and &lt;code&gt;columnValue  = &amp;quot;IT&amp;quot;&lt;/code&gt;, as in the example below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Filter GRDC catalogue based on a country code
GRDC_IT &amp;lt;- catalogueGRDC(columnName = &amp;quot;country_code&amp;quot;, columnValue = &amp;quot;IT&amp;quot;)

# Convert the table to a SpatialPointsDataFrame
hydro &amp;lt;- SpatialPointsDataFrame(coords = GRDC_IT[, c(&amp;quot;long&amp;quot;, &amp;quot;lat&amp;quot;)],
                                data = GRDC_IT)

# Plot the stations on the map
plot(Italy, col = NA, border = &amp;quot;darkgrey&amp;quot;)
plot(hydro, add = TRUE, col = &amp;quot;blue&amp;quot;, pch = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-03-07-hddtools/unnamed-chunk-7-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The arguments &lt;code&gt;columnName&lt;/code&gt; and &lt;code&gt;columnValue&lt;/code&gt; can be used to filter over other columns. For instance, the example below shows how to subset stations along the Tanaro River which source in the Ligurian Alps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Filter GRDC catalogue based on rivername, search is not case sensitive!
Tanaro &amp;lt;- catalogueGRDC(columnName = &amp;quot;river&amp;quot;, columnValue = &amp;quot;Tanaro&amp;quot;)

# Convert the table to a SpatialPointsDataFrame
TanaroSP &amp;lt;- SpatialPointsDataFrame(coords = Tanaro[, c(&amp;quot;long&amp;quot;, &amp;quot;lat&amp;quot;)],
                                   data = Tanaro)

# Highight in red the stations on the Tanaro River
plot(Italy, col = NA, border = &amp;quot;darkgrey&amp;quot;)
plot(hydro, add = TRUE, col = &amp;quot;blue&amp;quot;, pch = 1)
plot(TanaroSP, add = TRUE, col = &amp;quot;red&amp;quot;, pch = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-03-07-hddtools/unnamed-chunk-8-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;columnName&lt;/code&gt; refers to a numeric field, in the &lt;code&gt;columnValue&lt;/code&gt; other terms of comparison can be specified. For example, it is straightforward to find out that the country with the most longstanding monitoring stations is Germany (with 11 out of 15 stations with more than 150 years of recordings).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Filter GRDC stations with more than 150 years of recordings
GRDC150 &amp;lt;- catalogueGRDC(columnName = &amp;quot;d_yrs&amp;quot;, columnValue = &amp;quot;&amp;gt;150&amp;quot;)

# Which country has the most longstanding monitoring stations?
table(GRDC150$country_code)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##
## DE FI LT RO SE
## 11  1  1  1  1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Where is the oldest station?
oldest &amp;lt;- GRDC150[which(GRDC150$d_yrs == max(GRDC150$d_yrs)),
                  c(&amp;quot;grdc_no&amp;quot;, &amp;quot;river&amp;quot;, &amp;quot;station&amp;quot;, &amp;quot;d_yrs&amp;quot;)]
oldest
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 4
##   grdc_no      river station d_yrs
##     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1 6340120 ELBE RIVER DRESDEN   208
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The oldest stastion is in Dresden on the Elbe River. Let&amp;rsquo;s now find out whether monthly data is available. For this we need the GRDC identification number (this is stored in the column grdc_no of the catalogue) and the function &lt;code&gt;tsGRDC()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Monthly data extraction
DresdenStation &amp;lt;- tsGRDC(stationID = oldest$grdc_no, plotOption = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-03-07-hddtools/unnamed-chunk-10-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The plot above, shows the time on the x-axis and the flow (in m&lt;sup&gt;3&lt;/sup&gt;/s) on the y-axis. The river flow has had huge oscillations over time, is this an effect of anthropogenic changes and/or climate change? This is well out of the scope of this blog post, I leave the reader to look at trends from the mean monthly values &lt;code&gt;DresdenStation$mddPerYear&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;nasa-s-tropical-rainfall-measuring-mission&#34;&gt;NASA&amp;rsquo;s Tropical Rainfall Measuring Mission&lt;/h3&gt;

&lt;p&gt;The Tropical Rainfall Measuring Mission (TRMM) is a joint mission between NASA and the Japan Aerospace Exploration Agency (JAXA) that uses a research satellite to measure precipitation within the tropics in order to improve our understanding of climate and its variability.&lt;/p&gt;

&lt;p&gt;The TRMM satellite records global historical rainfall estimation in a gridded format since 1998 with a daily temporal resolution and a spatial resolution of 0.25 degrees (spatial extent goes from -50 to +50 degrees latitude). This information is openly available for educational purposes and downloadable from an FTP server. The &lt;code&gt;hddtools&lt;/code&gt; provides a function, called TRMM(), to download and convert a selected portion of the TRMM dataset into a raster-brick that can be opened in any GIS software.&lt;/p&gt;

&lt;p&gt;As an example, I&amp;rsquo;m going to download precipitation maps for three months in 2016 using the &lt;code&gt;areabox&lt;/code&gt; defined previously to locate Pompeii and surrounding areas. But remember, values become less reliable moving away from the tropics!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Define a temporal extent
twindow &amp;lt;- seq(as.Date(&amp;quot;2016-01-01&amp;quot;), as.Date(&amp;quot;2016-03-31&amp;quot;), by = &amp;quot;months&amp;quot;)

# Retrieve mean monthly precipitations based on a bounding box and time extent
TRMMfile &amp;lt;- TRMM(twindow = twindow, areaBox = areaBox)

plot(TRMMfile)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-03-07-hddtools/unnamed-chunk-11-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Each of the above plots shows the average precipitation over Pompeii during January (top left), February (top right) and March (bottom left) 2016. Precipitation seems generally more abundant in the south (coastal areas) where the plots show prevalence of green, especially during January and February.&lt;/p&gt;

&lt;h3 id=&#34;top-down-modelling-working-group&#34;&gt;Top-Down modelling Working Group&lt;/h3&gt;

&lt;p&gt;The Top-Down modelling Working Group (TDWG) for the Prediction in Ungauged Basins (PUB) Decade (2003-2012) is an initiative of the International Association of Hydrological Sciences (IAHS) which collected datasets for hydrological modelling free-of-charge, available &lt;a href=&#34;http://tdwg.catchment.org/datasets.html&#34;&gt;here&lt;/a&gt;. This package provides a common interface to retrieve, browse and filter two datasets: Data60UK and MOPEX.&lt;/p&gt;

&lt;h4 id=&#34;the-data60uk-dataset&#34;&gt;The Data60UK dataset&lt;/h4&gt;

&lt;p&gt;The Data60UK initiative collated datasets of areal precipitation and streamflow discharge across 61 gauging sites in England and Wales (UK). The database was prepared from source databases for research purposes, with the intention to make it re-usable. This is now available in the public domain free of charge.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;hddtools&lt;/code&gt; contain two functions to interact with this database: one to retrieve the catalogue and another to retrieve time series of areal precipitation and streamflow discharge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;UK &amp;lt;- getData(&amp;quot;GADM&amp;quot;, country = &amp;quot;GBR&amp;quot;, level = 0)
plot(UK, col = NA, border = &amp;quot;darkgrey&amp;quot;)

# Data60UK full catalogue
allData60UK &amp;lt;- catalogueData60UK()
hydroALL &amp;lt;- SpatialPointsDataFrame(coords = allData60UK[, c(&amp;quot;Longitude&amp;quot;,
                                                         &amp;quot;Latitude&amp;quot;)],
                                data = allData60UK)
plot(hydroALL, add = TRUE, col = &amp;quot;blue&amp;quot;, pch = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-03-07-hddtools/unnamed-chunk-12-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(allData60UK)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   stationID        River          Location gridReference Latitude
## 1     22001       Coquet           Morwick      NU234044 55.33310
## 2     22006        Blyth   Hartford Bridge      NZ242800 55.11381
## 3     23006   South Tyne      Featherstone      NY672610 54.94257
## 4     24004 Bedburn Beck           Bedburn      NZ117321 54.68382
## 5     25005        Leven      Leven Bridge      NZ444120 54.50139
## 6     25006        Greta Rutherford Bridge      NZ033122 54.50511
##   Longitude
## 1 -1.632691
## 2 -1.622163
## 3 -2.513539
## 4 -1.820046
## 5 -1.315911
## 6 -1.950550
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the station identification number (in the column stationID), time series of areal precipitation and streamflow discharge can be downloaded using the function &lt;code&gt;tsData60UK()&lt;/code&gt;. In the example below I show how to get the time series for the first station in the table, for a given temporal window.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Extract time series for the first station
stationID &amp;lt;- catalogueData60UK()$stationID[1]

# Extract time series for a specified temporal window
twindow &amp;lt;- seq(as.Date(&amp;quot;1988-01-01&amp;quot;), as.Date(&amp;quot;1989-12-31&amp;quot;), by = &amp;quot;days&amp;quot;)
MorwickTSplot &amp;lt;- tsData60UK(stationID = stationID,
                            plotOption = TRUE,
                            twindow = twindow)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-03-07-hddtools/unnamed-chunk-13-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The above figure is divided into two plots: precipitation over time (top) and river flow over time (bottom). High flows and related precipitation events seem to be clearly identifiable. The baseflow is around 10 m&lt;sup&gt;3&lt;/sup&gt;/s, but during the most important events the flow reached 120 m&lt;sup&gt;3&lt;/sup&gt;/s. The shape of the hydrograph, however, suggests that the flow was contained by the embankments and did not cause floods.&lt;/p&gt;

&lt;h4 id=&#34;mopex&#34;&gt;MOPEX&lt;/h4&gt;

&lt;p&gt;This source contains historical hydrometeorological data and river basin characteristics for hundreds of river basins and from a range of climates in the US. As with the previous dataset, &lt;code&gt;hddtools&lt;/code&gt; contains functions to download the catalogue and time series. The example below shows how to download the MOPEX catalogue and the time series for the first station in the catalogue.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# MOPEX full catalogue
allMOPEX &amp;lt;- catalogueMOPEX()

# Extract time series
BroadRiver &amp;lt;- tsMOPEX(stationID = allMOPEX$stationID[1],
                      plotOption = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-03-07-hddtools/unnamed-chunk-14-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the plots above P stands for precipitation, E for potential evapotranspiration, Q for river flow, T&lt;sub&gt;min&lt;/sub&gt; for minimum temperature and T&lt;sub&gt;max&lt;/sub&gt; for maximum temperature.&lt;/p&gt;

&lt;h3 id=&#34;sepa-river-level-data&#34;&gt;SEPA river level data&lt;/h3&gt;

&lt;p&gt;The Scottish Environment Protection Agency (SEPA) manages river level data for hundreds of gauging stations in the UK. The catalogue of stations was derived from this &lt;a href=&#34;http://pennine.ddns.me.uk/riverlevels/ConciseList.html&#34;&gt;list&lt;/a&gt;. The time series of the last few days is available from the SEPA website and can be downloaded using the following function &lt;code&gt;tsSEPA()&lt;/code&gt;, as in the example below. Plese note that this data is updated every 15 minutes and the code will always generate different plots.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# SEPA unofficial catalogue
allSEPA &amp;lt;- catalogueSEPA()

# Single time series extraction
Kilphedir &amp;lt;- tsSEPA(stationID = catalogueSEPA()$stationId[1],
                    plotOption = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-03-07-hddtools/unnamed-chunk-15-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-applications&#34;&gt;Example applications&lt;/h2&gt;

&lt;p&gt;There are a number of possible research applications for the &lt;code&gt;hddtools&lt;/code&gt;
package. Retrieved precipitation and streamflow data could, for
instance, be used to draw spatial trends, as done by (Vitolo et al.,
2016b) using the &lt;code&gt;rnrfa&lt;/code&gt; package but over larger areas. The package
could also be used to compare hydrological behaviours in different areas
of the world, to run and calibrate hydrological models such as fuse
(Clark et al., 2008, Vitolo et al. 2016a) as well as to undertake
regionalisation studies.&lt;/p&gt;

&lt;h2 id=&#34;future-developments&#34;&gt;Future developments&lt;/h2&gt;

&lt;p&gt;If you have suggestions, please add them to the &lt;a href=&#34;https://github.com/ropensci/hddtools/issues&#34;&gt;issue
tracker&lt;/a&gt; on github. Also,
feel free to contribute to the package sending a &lt;a href=&#34;https://github.com/ropensci/hddtools/pulls&#34;&gt;pull
request&lt;/a&gt;, that would be
greatly appreciated!&lt;/p&gt;

&lt;h3 id=&#34;acknowledgments&#34;&gt;Acknowledgments&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m very grateful to &lt;a href=&#34;https://github.com/ledell&#34;&gt;Erin Le Dell&lt;/a&gt; and
&lt;a href=&#34;https://github.com/mdsumner&#34;&gt;Michael Sumner&lt;/a&gt; who reviewed, on behalf of
rOpenSci, the &lt;code&gt;hddtools&lt;/code&gt; package and the related paper published in the
Journal of Open Source Software (Vitolo, 2017). Both reviewers provided
very constructive suggestions that grately improved this package. I&amp;rsquo;d
like to also thank &lt;a href=&#34;http://ropensci.org/about/#staff&#34;&gt;Stefanie
Butland&lt;/a&gt; and &lt;a href=&#34;https://github.com/sckott&#34;&gt;Scott
Chamberlain&lt;/a&gt; for providing invaluable advice
when reviewing this post.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;Clark, M. P., Slater, A. G., Rupp, D. E., Woods, R. A., Vrugt, J. A.,
Gupta, H. V., Wagener, T. and Hay, L. E.: Framework for understanding
structural errors (fuse): A modular framework to diagnose differences
between hydrological models, Water Resources Research, 44(12), n/a–n/a,
doi:&lt;a href=&#34;https://doi.org/10.1029/2007WR006735&#34;&gt;10.1029/2007WR006735&lt;/a&gt;, 2008.&lt;/p&gt;

&lt;p&gt;Vitolo, C.: Hddtools: Hydrological data discovery tools, The Journal of
Open Source Software, 2(9),
doi:&lt;a href=&#34;https://doi.org/10.21105/joss.00056&#34;&gt;10.21105/joss.00056&lt;/a&gt;, 2017.&lt;/p&gt;

&lt;p&gt;Vitolo, C., Wells, P., Dobias, M. and Buytaert, W.: fuse: An R package
for ensemble Hydrological Modelling, The Journal of Open Source
Software, 1(8),
doi:&lt;a href=&#34;https://doi.org/10.21105/joss.00052&#34;&gt;10.21105/joss.00052&lt;/a&gt;, 2016a.&lt;/p&gt;

&lt;p&gt;Vitolo, C., Fry, M. and Buytaert, W.: rnrfa: An R package to Retrieve,
Filter and Visualize Data from the UK National River Flow Archive, The R
Journal, 8(2) [online] Available from:
&lt;a href=&#34;https://journal.r-project.org/archive/2016-2/vitolo-fry-buytaert.pdf&#34;&gt;https://journal.r-project.org/archive/2016-2/vitolo-fry-buytaert.pdf&lt;/a&gt;,
2016b.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
