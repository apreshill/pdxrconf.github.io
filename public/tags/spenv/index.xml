<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spenv on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/spenv/</link>
    <description>Recent content in Spenv on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 25 Jan 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/spenv/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Extracting and Enriching Ocean Biogeographic Information System (OBIS) Data with R</title>
      <link>https://ropensci.org/blog/2017/01/25/obis/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/01/25/obis/</guid>
      <description>
        
        &lt;p&gt;Programmatic access to biodiversity data is revolutionising large-scale, reproducible biodiversity research. In the marine realm, the largest global database of species occurrence records is the Ocean Biogeographic Information System, &lt;a href=&#34;http://www.iobis.org/&#34;&gt;OBIS&lt;/a&gt;. As of January 2017, OBIS contains 47.78 million occurrences of 117,345 species, all openly available and accessible via the &lt;a href=&#34;http://www.iobis.org/manual/api/&#34;&gt;OBIS API&lt;/a&gt;. The number of questions to address using these kinds of resources is as large as the number of investigators, but certain operations commonly crop up in many workflows. In my group, &lt;a href=&#34;https://shefmeme.org/&#34;&gt;shefmeme.org&lt;/a&gt;, these typically involve checking the taxonomy of a list of species, extracting occurrence records for each species, mapping these and matching them to various environmental and geographic data layers, all using R. I recently wrote up these common operations in a &lt;a href=&#34;http://www.iobis.org/2016/11/22/sorbycollection/&#34;&gt;detailed tutorial for OBIS&lt;/a&gt;, with &lt;a href=&#34;https://github.com/iobis/training/tree/master/sorbycollection&#34;&gt;associated code and data on GitHub&lt;/a&gt;. This tutorial made extensive use of &lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt; packages and expertise, and so I’m delighted to have the opportunity to present an edited version here. (Please note that the code chunks included here are a subset of our original code, and are for illustration - if you want to run these examples we suggest visiting the original post.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Starting point, journey, and destination&lt;/p&gt;

&lt;p&gt;We start with a list of taxonomic names of unknown quality. In our experience this is a common situation: you may have obtained a dataset from a collaborator, or from the literature, which documents some characteristics of a number of taxa, and you wish to tidy up this dataset and enrich it with some occurrence data. We generated a taxon list from a museum exhibit in the &lt;a href=&#34;http://www.sheffield.ac.uk/aps&#34;&gt;Department of Animal and Plant Sciences at the University of Sheffield&lt;/a&gt;: a collection of 80 marine specimens created by the 19th Century Sheffield microscopist, geologist, and naturalist &lt;a href=&#34;https://en.wikipedia.org/wiki/Henry_Clifton_Sorby&#34;&gt;Henry Clifton Sorby&lt;/a&gt;. This provides a useful test-case for modern biodiversity computational methods, as there is considerable taxonomic breadth (including fish as well as numerous invertebrate groups), but the names recorded are of inconsistent taxonomic rank, and - having been recorded well over 100 years ago - many are almost certainly no longer current.&lt;/p&gt;

&lt;p&gt;The first stage of our journey then - after transcribing the names into a spreadsheet - is to check their &lt;strong&gt;taxonomy&lt;/strong&gt;. Once we are confident in the names, and have restricted the dataset to a suitable taxonomic rank (species, here), we can start to examine &lt;strong&gt;occurrences&lt;/strong&gt; as recorded in OBIS. Once we have done this, for individual species and for groups of species, we can start to enrich the basic occurrence data in various ways. In particular, we show how to match the occurrences to various &lt;strong&gt;environmental layers&lt;/strong&gt;, including depth and climate. And we show how to perform more sophisticated geographic searches using &lt;strong&gt;georeferenced boundaries and regions&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Taxonomy&lt;/p&gt;

&lt;p&gt;OBIS uses the &lt;a href=&#34;http://www.marinespecies.org/&#34;&gt;WoRMS&lt;/a&gt; standard taxonomy. This means that names within OBIS’s realisation of the WoRMS Aphia database will be matched correctly, but it is still often worthwhile to check your taxonomy in advance, especially if you are working with large sets of taxa (as macroecologists frequently are), or with unusual sets of names, such as the Sorby Collection. This will help to identify any potential problems or ambiguities, and also gives more flexibility for identifying and dealing with minor typos and misspellings. The tools provided by rOpenSci have made it possible to rapidly match names to WoRMS by calling the WoRMS web services directly from within R. In our original post, we provide examples using the &lt;a href=&#34;https://github.com/ropensci/taxizesoap&#34;&gt;taxizesoap&lt;/a&gt; package. WoRMS have recently updated their web services, and here we use instead the new rOpenSci package &lt;a href=&#34;https://github.com/ropensci/worrms&#34;&gt;worrms&lt;/a&gt; - now incorporated into &lt;a href=&#34;https://github.com/ropensci/taxize&#34;&gt;taxize&lt;/a&gt;. Both options provide much of the WoRMS taxon matching functionality, for instance fuzzy (or approximate) name matching is possible, and is a convenient, scripted way of generating a taxonomically robust dataset.&lt;/p&gt;

&lt;p&gt;First, load the required libraries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(worrms)
library(dplyr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Check taxonomy of a single taxon&lt;/p&gt;

&lt;p&gt;Get the WoRMS ID for a single species - here, Atlantic cod, &lt;em&gt;Gadus morhua&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_aphia &amp;lt;- wm_name2id(name = &amp;quot;Gadus morhua&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then get the full WoRMS record, as a list by Aphia ID:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- wm_record(id = my_sp_aphia)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or as a tibble by name - here specifying exact match only &lt;code&gt;(fuzzy = FALSE)&lt;/code&gt; and restricting to marine species &lt;code&gt;(marine_only = TRUE)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- wm_records_names(name = &amp;quot;Gadus morhua&amp;quot;, fuzzy = FALSE, marine_only = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Get taxonomy for multiple species&lt;/p&gt;

&lt;p&gt;Start with a data frame of species names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp &amp;lt;- data_frame(sciname = c(&amp;quot;Gadus morhua&amp;quot;, &amp;quot;Solea vulgaris&amp;quot;, &amp;quot;Pleuronectes platessa&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then get the WoRMS records for each:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- wm_records_names(name = my_sp$sciname, fuzzy = FALSE, marine_only = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For &amp;lsquo;n&amp;rsquo; species this returns a list of &amp;lsquo;n&amp;rsquo; tables. Convert these into a single table with &amp;lsquo;n&amp;rsquo; rows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- bind_rows(my_sp_taxo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And look at the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;glimpse(my_sp_taxo)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Observations: 3
## Variables: 25
## $ AphiaID         &amp;lt;int&amp;gt; 126436, 154712, 127143
## $ url             &amp;lt;chr&amp;gt; &amp;quot;http://www.marinespecies.org/aphia.php?p=taxd...
## $ scientificname  &amp;lt;chr&amp;gt; &amp;quot;Gadus morhua&amp;quot;, &amp;quot;Solea vulgaris&amp;quot;, &amp;quot;Pleuronecte...
## $ authority       &amp;lt;chr&amp;gt; &amp;quot;Linnaeus, 1758&amp;quot;, &amp;quot;Quensel, 1806&amp;quot;, &amp;quot;Linnaeus, ...
## $ status          &amp;lt;chr&amp;gt; &amp;quot;accepted&amp;quot;, &amp;quot;unaccepted&amp;quot;, &amp;quot;accepted&amp;quot;
## $ unacceptreason  &amp;lt;chr&amp;gt; NA, &amp;quot;synonym&amp;quot;, NA
## $ rank            &amp;lt;chr&amp;gt; &amp;quot;Species&amp;quot;, &amp;quot;Species&amp;quot;, &amp;quot;Species&amp;quot;
## $ valid_AphiaID   &amp;lt;int&amp;gt; 126436, 127160, 127143
## $ valid_name      &amp;lt;chr&amp;gt; &amp;quot;Gadus morhua&amp;quot;, &amp;quot;Solea solea&amp;quot;, &amp;quot;Pleuronectes p...
## $ valid_authority &amp;lt;chr&amp;gt; &amp;quot;Linnaeus, 1758&amp;quot;, &amp;quot;(Linnaeus, 1758)&amp;quot;, &amp;quot;Linnaeu...
## $ kingdom         &amp;lt;chr&amp;gt; &amp;quot;Animalia&amp;quot;, &amp;quot;Animalia&amp;quot;, &amp;quot;Animalia&amp;quot;
## $ phylum          &amp;lt;chr&amp;gt; &amp;quot;Chordata&amp;quot;, &amp;quot;Chordata&amp;quot;, &amp;quot;Chordata&amp;quot;
## $ class           &amp;lt;chr&amp;gt; &amp;quot;Actinopteri&amp;quot;, &amp;quot;Actinopteri&amp;quot;, &amp;quot;Actinopteri&amp;quot;
## $ order           &amp;lt;chr&amp;gt; &amp;quot;Gadiformes&amp;quot;, &amp;quot;Pleuronectiformes&amp;quot;, &amp;quot;Pleuronect...
## $ family          &amp;lt;chr&amp;gt; &amp;quot;Gadidae&amp;quot;, &amp;quot;Soleidae&amp;quot;, &amp;quot;Pleuronectidae&amp;quot;
## $ genus           &amp;lt;chr&amp;gt; &amp;quot;Gadus&amp;quot;, &amp;quot;Solea&amp;quot;, &amp;quot;Pleuronectes&amp;quot;
## $ citation        &amp;lt;chr&amp;gt; &amp;quot;Bailly, N. (2008). Gadus morhua Linnaeus, 175...
## $ lsid            &amp;lt;chr&amp;gt; &amp;quot;urn:lsid:marinespecies.org:taxname:126436&amp;quot;, &amp;quot;...
## $ isMarine        &amp;lt;int&amp;gt; 1, 1, 1
## $ isBrackish      &amp;lt;int&amp;gt; 1, 1, 1
## $ isFreshwater    &amp;lt;int&amp;gt; 0, 0, 0
## $ isTerrestrial   &amp;lt;int&amp;gt; 0, 0, 0
## $ isExtinct       &amp;lt;lgl&amp;gt; NA, NA, NA
## $ match_type      &amp;lt;chr&amp;gt; &amp;quot;exact&amp;quot;, &amp;quot;exact&amp;quot;, &amp;quot;exact&amp;quot;
## $ modified        &amp;lt;chr&amp;gt; &amp;quot;2008-01-15T18:27:08Z&amp;quot;, &amp;quot;2008-02-28T14:41:08Z&amp;quot;...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the name we supplied is correct for cod and plaice, but &lt;em&gt;Solea vulgaris&lt;/em&gt; is not valid and has the valid name &lt;em&gt;Solea solea&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Getting occurrences&lt;/p&gt;

&lt;p&gt;Once you have your taxon name, or list of names, it is straightforward to extract their OBIS occurrences using the &lt;a href=&#34;https://github.com/iobis/robis&#34;&gt;robis&lt;/a&gt; package. And armed with a list of occurrences for a given taxon, or list of species, you probably want to map them. Here we show how to obtain and map occurrence records for a single species.&lt;/p&gt;

&lt;p&gt;First install and load additional required packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install robis package using devtools
library(devtools)
devtools::install_github(&amp;quot;iobis/robis&amp;quot;)
# NB - you also need the dev version of ggmap for the satellite maps to work
devtools::install_github(&amp;quot;dkahle/ggmap&amp;quot;)
library(robis)
library(ggmap)
library(raster)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get occurrences for sole - note that this may take some time to run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_occs &amp;lt;- occurrence(scientificname = my_sp_taxo$valid_name[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is the bounding box for these occurrences?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bb_occs &amp;lt;- bbox(cbind(my_occs$decimalLongitude, my_occs$decimalLatitude))
bb_occs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##        min     max
## x -42.0288 151.639
## y -33.0868  61.250
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a base world map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;world &amp;lt;- map_data(&amp;quot;world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a map from these data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;worldmap &amp;lt;- ggplot(world, aes(x=long, y=lat)) +
  geom_polygon(aes(group=group)) +
  scale_y_continuous(breaks = (-2:2) * 30) +
  scale_x_continuous(breaks = (-4:4) * 45) +
  theme(panel.background = element_rect(fill = &amp;quot;steelblue&amp;quot;)) +
  coord_equal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plot the map and add the occurrence data for sole that we have just returned:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(occ_map &amp;lt;- worldmap + geom_point(data = my_occs, aes(x = decimalLongitude, y = decimalLatitude),
                                 colour = &amp;quot;darkorange&amp;quot;, shape = 21, alpha = 2/3)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/occurrence-data-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can wrap this in a function to rapidly plot occurrences returned from OBIS onto a map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obis_map &amp;lt;- function(occ_dat, map_type = c(&amp;quot;satellite&amp;quot;, &amp;quot;world&amp;quot;), map_zoom = NULL, plotit = TRUE){

  bb_occ &amp;lt;- bbox(cbind(occ_dat$decimalLongitude, occ_dat$decimalLatitude))

  if(map_type == &amp;quot;satellite&amp;quot;){
    if(is.null(map_zoom)){
      base_map &amp;lt;- get_map(location = bb_occ, maptype = &amp;quot;satellite&amp;quot;)
    } else {
      base_map &amp;lt;- get_map(location = bb_occ, maptype = &amp;quot;satellite&amp;quot;, zoom = map_zoom)
    }
    obis_map &amp;lt;- ggmap(base_map)
  } else if(map_type == &amp;quot;world&amp;quot;){
    base_map &amp;lt;- map_data(&amp;quot;world&amp;quot;)
    obis_map &amp;lt;- ggplot(base_map, aes(x=long, y=lat)) +
      geom_polygon(aes(group=group)) +
      scale_y_continuous(breaks = (-2:2) * 30) +
      scale_x_continuous(breaks = (-4:4) * 45) +
      theme(panel.background = element_rect(fill = &amp;quot;steelblue&amp;quot;)) +
      coord_equal()
  } else {
    stop(&amp;quot;map_type must be one of &#39;satellite&#39; or &#39;world&#39;&amp;quot;,
         call. = FALSE)
  }

  # Now add the occurrence points
  obis_map &amp;lt;- obis_map + geom_point(data = occ_dat, aes(x = decimalLongitude, y = decimalLatitude),
                                    colour = &amp;quot;darkorange&amp;quot;, shape = 21, alpha = 2/3)

  if(plotit == T){print(obis_map)}

  return(obis_map)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_map &amp;lt;- obis_map(my_occs, map_type = &amp;quot;world&amp;quot;, plotit = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/plot using this function-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In our original post we give more examples of plotting records from individual species and multiple species, including gridded richness maps. We &lt;a href=&#34;http://www.iobis.org/2016/11/22/sorbycollection/#understanding&#34;&gt;also explain&lt;/a&gt; the many fields returned by OBIS for each record, and provide examples of filtering results both pre- and post-query on a number of criteria (e.g. date, dataset, and various quality control flags), which can bring important memory savings when the returned set of occurrences is very large.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Enriching occurrence data&lt;/p&gt;

&lt;p&gt;Matching species occurrences to environmental variables is a very common requirement of macroecological analyses, particularly those considering environmental drivers of species distributions, and how distributions are expected to shift as the climate changes. Environmental or geographical data layers of interest may be purely spatial (e.g. bathymetry), or spatio-temporal (e.g. sea surface temperature, SST). In our original post we show how to use the packages &lt;a href=&#34;https://github.com/iobis/robis&#34;&gt;robis&lt;/a&gt; and &lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0073051&#34;&gt;marmap (Pante &amp;amp; Simon-Bouhet 2013)&lt;/a&gt; to match occurrence records to bathymetry, necessary to perform the kinds of analyses we published &lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0010223&#34;&gt;here&lt;/a&gt;. We also show how to match occurrence records to locally-stored spatial datasets, such as the global marine environmental layers that can be downloaded from &lt;a href=&#34;http://gmed.auckland.ac.nz/&#34;&gt;GMED&lt;/a&gt;. In this post, we focus on obtaining &lt;a href=&#34;http://www.esrl.noaa.gov/psd/data/gridded/data.noaa.oisst.v2.html&#34;&gt;NOAA gridded monthly mean Sea Surface Temperature&lt;/a&gt; data and show how to match occurrence records to temperature in both space and time. This code is from a package in development with ROpenSci called spenv, see &lt;a href=&#34;https://github.com/ropenscilabs/spenv&#34;&gt;here&lt;/a&gt;, but we use slightly modified versions of spenv functions here.&lt;/p&gt;

&lt;p&gt;First, we use a function to download SST data from NOAA. Specifically, it downloads monthly mean data at 1 degree resolution from the Optimum Interpolation Seas Surface Temperature V2 dataset, see &lt;a href=&#34;http://www.esrl.noaa.gov/psd/data/gridded/data.noaa.oisst.v2.html&#34;&gt;here&lt;/a&gt;. The data are served as a NetCDF file, but for convenience we transform this into a raster brick - this is essentially a stacked set of global rasters, each layer representing a single month in the time series. The first time you run this the file will be downloaded (takes ~10 seconds). It will then be stored locally for future use.&lt;/p&gt;

&lt;p&gt;Start by loading additional required packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ncdf4)
library(lubridate)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtain the SST data from NOAA and convert to raster brick format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sst_prep &amp;lt;- function(path = &amp;quot;~/.spenv/noaa_sst&amp;quot;) {
  x &amp;lt;- file.path(path, &amp;quot;sst.mnmean.nc&amp;quot;)
  if (!file.exists(x)) {
    dir.create(dirname(x), recursive = TRUE, showWarnings = FALSE)
    download.file(&amp;quot;ftp://ftp.cdc.noaa.gov/Datasets/noaa.oisst.v2/sst.mnmean.nc&amp;quot;, destfile = x)
  }
  raster::brick(x, varname = &amp;quot;sst&amp;quot;)
}
sst_dat &amp;lt;- sst_prep()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View the structure of the data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sst_dat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## class       : RasterBrick
## dimensions  : 180, 360, 64800, 417  (nrow, ncol, ncell, nlayers)
## resolution  : 1, 1  (x, y)
## extent      : 0, 360, -90, 90  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0
## data source : /Users/alunjones/.spenv/noaa_sst/sst.mnmean.nc
## names       : X1981.12.01, X1982.01.01, X1982.02.01, X1982.03.01, X1982.04.01, X1982.05.01, X1982.06.01, X1982.07.01, X1982.08.01, X1982.09.01, X1982.10.01, X1982.11.01, X1982.12.01, X1983.01.01, X1983.02.01, ...
## Date        : 1981-12-01, 2016-08-01 (min, max)
## varname     : sst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is a wrapper function that takes your input data (x), together with identifiers for latitude, longitude, and date, and gets SST data from the NOAA SST gridded dataset. The origin argument enables conversion between the date formats of the NOAA data and your occurrence data. Note that this data also calculates an adjusted longitude, as occupancy data typically come with longitude in the range -180 (180 West) to +180 (180 East), whereas the NOAA data codes longitude as 0 to 360 degrees (running eastwards from 0 degrees):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sp_extract_gridded_date &amp;lt;- function(x, from = &amp;quot;noaa_sst&amp;quot;, latitude = NULL,
                                    longitude = NULL, samp_date = NULL, origin = as.Date(&amp;quot;1800-1-1&amp;quot;)) {

  x &amp;lt;- spenv_guess_latlondate(x, latitude, longitude, samp_date)
  switch(from,
         noaa_sst = {
           mb &amp;lt;- sst_prep()
           out &amp;lt;- list()
           x &amp;lt;- x[ !is.na(x$date), ]
           x$date &amp;lt;- as.Date(x$date)
           x &amp;lt;- x[x$date &amp;gt;= min(mb@z[[&amp;quot;Date&amp;quot;]]), ]
           x$lon_adj &amp;lt;- x$longitude
           x$lon_adj[x$lon_adj &amp;lt; 0] &amp;lt;- x$lon_adj[x$lon_adj &amp;lt; 0] + 360
           for (i in seq_len(NROW(x))) {
             out[[i]] &amp;lt;- get_env_par_space_x_time(mb, x[i, ], origin = origin)
           }
           x$sst &amp;lt;- unlist(out)
           x
         }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also need these utility functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spenv_guess_latlondate &amp;lt;- function(x, lat = NULL, lon = NULL, samp_date = NULL) {
  xnames &amp;lt;- names(x)
  if (is.null(lat) &amp;amp;&amp;amp; is.null(lon)) {
    lats &amp;lt;- xnames[grep(&amp;quot;^(lat|latitude)$&amp;quot;, xnames, ignore.case = TRUE)]
    lngs &amp;lt;- xnames[grep(&amp;quot;^(lon|lng|long|longitude)$&amp;quot;, xnames, ignore.case = TRUE)]

    if (length(lats) == 1 &amp;amp;&amp;amp; length(lngs) == 1) {
      if (length(x) &amp;gt; 2) {
        message(&amp;quot;Assuming &#39;&amp;quot;, lngs, &amp;quot;&#39; and &#39;&amp;quot;, lats,
                &amp;quot;&#39; are longitude and latitude, respectively&amp;quot;)
      }
      x &amp;lt;- rename(x, setNames(&#39;latitude&#39;, eval(lats)))
      x &amp;lt;- rename(x, setNames(&#39;longitude&#39;, eval(lngs)))
    } else {
      stop(&amp;quot;Couldn&#39;t infer longitude/latitude columns, please specify with &#39;lat&#39;/&#39;lon&#39; parameters&amp;quot;, call. = FALSE)
    }
  } else {
    message(&amp;quot;Using user input &#39;&amp;quot;, lon, &amp;quot;&#39; and &#39;&amp;quot;, lat,
            &amp;quot;&#39; as longitude and latitude, respectively&amp;quot;)
    x &amp;lt;- plyr::rename(x, setNames(&#39;latitude&#39;, eval(lat)))
    x &amp;lt;- plyr::rename(x, setNames(&#39;longitude&#39;, eval(lon)))
  }

  if(is.null(samp_date)){
    dates &amp;lt;- xnames[grep(&amp;quot;date&amp;quot;, xnames, ignore.case = TRUE)]
    if(length(dates) == 1){
      if(length(x) &amp;gt; 2){
        message(&amp;quot;Assuming &#39;&amp;quot;, dates, &amp;quot;&#39; are sample dates&amp;quot;)
      }
      x &amp;lt;- rename(x, setNames(&#39;date&#39;, eval(dates)))
    } else {
      stop(&amp;quot;Couldn&#39;t infer sample date column, please specify with &#39;date&#39; parameter&amp;quot;, call. = FALSE)
    }

  } else {
    message(&amp;quot;Using user input &#39;&amp;quot;, samp_date, &amp;quot;&#39; as sample date&amp;quot;)
    x &amp;lt;- plyr::rename(x, setNames(&#39;date&#39;, eval(samp_date)))
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_env_par_space_x_time &amp;lt;- function(
  env_dat, occ_dat, origin = as.Date(&amp;quot;1800-1-1&amp;quot;)){

  # calculate starting julian day for each month in env_dat
  month_intervals &amp;lt;- as.numeric(env_dat@z[[&amp;quot;Date&amp;quot;]] - origin)
  # calculate julian day for the focal date (eventDate in occ_dat)
  focal_date &amp;lt;- as.numeric(occ_dat$date - origin)

  # extract environmental variable (SST here) for this point
  as.numeric(raster::extract(
    env_dat,
    cbind(occ_dat$lon_adj, occ_dat$latitude),
    layer = findInterval(focal_date, month_intervals),
    nl = 1
  ))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Get SST values associated with the sole occupancy data&lt;/p&gt;

&lt;p&gt;First, do some cleaning of the sole data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_occs &amp;lt;- as_data_frame(filter(
  my_occs, !is.na(depth) &amp;amp; !is.na(yearcollected) &amp;amp; !is.na(individualCount) &amp;amp; depth != -9 &amp;amp; yearcollected &amp;gt;= 1981))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will now add an SST value for each occurrence. CAUTION - this may take a while to run. See our original post for a trick to speed this up!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_sst &amp;lt;- sp_extract_gridded_date(x = sole_occs,
                                    latitude = &amp;quot;decimalLatitude&amp;quot;, longitude = &amp;quot;decimalLongitude&amp;quot;, samp_date = &amp;quot;eventDate&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now plot sole occurrences by lon and lat, colour coded by temperature, faceted by month (1 = Jan to 12 = Dec) - this first requires defining a month variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_sst$month &amp;lt;- month(sole_sst$date)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create the plot like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(sole_sst_plot &amp;lt;- (ggplot(sole_sst, aes(x = longitude, y = latitude)) +
                     geom_point(aes(colour = sst), alpha = 2/3) +
                     scale_colour_gradient(low = &amp;quot;blue&amp;quot;, high = &amp;quot;red&amp;quot;) +
                     facet_wrap(~ month))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/create the plot-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you may want to look at trends over time in SST matched to sole occurrences, again faceted by month:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(sole_sst_trends &amp;lt;- ggplot(sole_sst, aes(x = yearcollected, y = sst)) +
  geom_point(colour = &amp;quot;steelblue&amp;quot;, alpha = 1/3) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, colour = &amp;quot;darkorange&amp;quot;) +
  facet_wrap(~ month)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/look at trends in SST matched to sole occurrences-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Adding geography&lt;/p&gt;

&lt;p&gt;All of the examples above have been global in scale, meaning that we have placed no spatial restrictions on the queries to OBIS - we have simply requested all occurrences that have been recorded anywhere on earth. However, we are frequently interested in sub-global analyses, either extracting data for an individual region of interest (such as a specific country’s EEZ), or summarising global data by region (e.g. records per regional sea). Here we show how OBIS queries can be refined using specific geometries, either supplied manually or as named regions obtained from the &lt;a href=&#34;http://www.marineregions.org/&#34;&gt;Marine Regions database&lt;/a&gt;. In these examples we return all records for a focal species within a region of interest, and also return a full species list for a focal region. In our original post we also showed how to combine geographic and environmental filters, for example returning all species occurring in regions of the North Atlantic that are &amp;lt;1000m deep.&lt;/p&gt;

&lt;p&gt;Start by loading additional required packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgdal)
library(mregions)
library(rgeos)
library(broom)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the UK EEZ shape file from marineregions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;uk_eez &amp;lt;- mr_shp(&amp;quot;MarineRegions:eez&amp;quot;,
	maxFeatures = NULL, filter = &amp;quot;United Kingdom Exclusive Economic Zone&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For convenience, simplify this and convert it to a data frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;uk_eez_simple &amp;lt;- SpatialPolygonsDataFrame(gSimplify(
	uk_eez, tol = 0.01, topologyPreserve = TRUE), data = uk_eez@data)
uk_eez_df &amp;lt;- tidy(uk_eez_simple)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get occurrences for a species (here, basking shark) within the UK EEZ:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;basking_shark &amp;lt;- occurrence(
	scientificname = &amp;quot;Cetorhinus maximus&amp;quot;, geometry = mr_as_wkt(uk_eez_simple))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the occurrence plot, then add the EEZ:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;basking_map &amp;lt;- obis_map(basking_shark, map_type = &amp;quot;satellite&amp;quot;, map_zoom = 4, plotit = F)
basking_map +
  geom_polygon(data = uk_eez_df, aes(x = long, y = lat, group = group),
               colour = &amp;quot;green&amp;quot;, fill = NA, size = 0.25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/p1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To get a list of species for a given region, use checklist, and specify your geometry (here an arbitrary 5 x 5 degree square in the NE Atlantic):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_taxa &amp;lt;- tbl_df(checklist(
	geometry = &amp;quot;POLYGON ((-20 50, -20 55, -15 55, -15 50, -20 50))&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then filter this to taxa with species rank:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_species &amp;lt;- filter(my_taxa, rank_name == &amp;quot;Species&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is a tibble of the 930 species found in this grid square, plus their full taxonomy and some additional summary information, including the number of records in OBIS (&lt;code&gt;records&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_species
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 930 × 18
##        id valid_id parent_id rank_name                   tname
##     &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;                   &amp;lt;chr&amp;gt;
## 1  395754   395754    695236   Species     Acanthephyra eximia
## 2  395764   395764    695236   Species   Acanthephyra pelagica
## 3  395973   395973    395971   Species Acanthoica quattrospina
## 4  396173   396173    767483   Species Acanthoscina acanthodes
## 5  398225   398225    767500   Species      Adagnesia charcoti
## 6  398227   398227    767500   Species        Adagnesia rimosa
## 7  398647   398647    398644   Species        Aetideus armatus
## 8  400887   400887    400884   Species          Amperima rosea
## 9  401559   401559    738082   Species   Amphissa acutecostata
## 10 402079   402079    768595   Species      Amuletta abyssorum
## # ... with 920 more rows, and 13 more variables: tauthor &amp;lt;chr&amp;gt;,
## #   worms_id &amp;lt;int&amp;gt;, records &amp;lt;int&amp;gt;, datasets &amp;lt;int&amp;gt;, phylum &amp;lt;chr&amp;gt;,
## #   order &amp;lt;chr&amp;gt;, family &amp;lt;chr&amp;gt;, genus &amp;lt;chr&amp;gt;, species &amp;lt;chr&amp;gt;, class &amp;lt;chr&amp;gt;,
## #   redlist &amp;lt;lgl&amp;gt;, status &amp;lt;chr&amp;gt;, hab &amp;lt;lgl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Next steps
The above describes some of the kinds of procedures that we use regularly in our group. Next steps could include further enrichment of occurrence data. For instance, there is a major initiative within WoRMS to link biological trait data to the existing taxonomy (see &lt;a href=&#34;http://www.marinespecies.org/traits/&#34;&gt;http://www.marinespecies.org/traits/&lt;/a&gt;) and we are thinking about how to filter OBIS queries by particular kinds of traits, or mapping the distribution of traits. We are also investigating how to mine the temporal dimension of OBIS data to &lt;a href=&#34;http://www.iobis.org/2016/11/15/occmod/&#34;&gt;derive robust estimates of trends in marine biodiversity&lt;/a&gt;. Keep an eye out for these developments on the &lt;a href=&#34;http://www.iobis.org/news/&#34;&gt;OBIS news site&lt;/a&gt;, and please do get in touch with requests or suggestions for improvements!&lt;/p&gt;

&lt;hr /&gt;

      </description>
    </item>
    
  </channel>
</rss>
