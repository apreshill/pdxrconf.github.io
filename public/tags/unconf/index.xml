<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unconf on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/unconf/</link>
    <description>Recent content in Unconf on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 01 Dec 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/unconf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Value of Welcome, part 2: How to prepare 40 new community members for an unconference</title>
      <link>https://ropensci.org/blog/2017/12/01/unconf-welcome/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/12/01/unconf-welcome/</guid>
      <description>
        
        &lt;p&gt;I’ve raved about the value of &lt;a href=&#34;https://ropensci.org/blog/2017/07/18/value-of-welcome/&#34;&gt;extending a personalized welcome&lt;/a&gt; to new community members and I recently shared &lt;a href=&#34;https://ropensci.org/blog/2017/11/17/unconf-sixtips&#34;&gt;six tips for running a successful hackathon-flavoured unconference&lt;/a&gt;. Building on these, I’d like to share the specific approach and (free!) tools I used to help prepare new rOpenSci community members to be productive at our &lt;a href=&#34;http://unconf17.ropensci.org/&#34;&gt;unconference&lt;/a&gt;. My approach was inspired directly by my &lt;a href=&#34;https://blog.trelliscience.com/introducing-the-2017-community-engagement-fellows/&#34;&gt;AAAS Community Engagement Fellowship Program&lt;/a&gt; (AAAS-CEFP) training. Specifically, 1) one mentor said that the most successful conference they ever ran involved having one-to-one meetings with all participants prior to the event, and 2) prior to our in-person AAAS-CEFP training, we completed an intake questionnaire that forced us to consider things like “what do you hope to get out of this” and “what do you hope to contribute”.&lt;/p&gt;

&lt;p&gt;A challenge of this year’s unconference was the fact that we were inviting 70 people to participate. As a rule, one third of the crowd will have participated in one of our previous unconferences and two-thirds would be first-time participants. With only two days together, these people need to quickly self-sort into project groups and get working.&lt;/p&gt;

&lt;p&gt;So I sent this email to 45 first-time participants:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-12-01-unconf-welcome/pre-unconf-email.png&#34; alt=&#34;pre-unconf-email&#34;&gt;&lt;/p&gt;

&lt;p&gt;Arranging meetings is one of my least favorite activities, but the free &lt;a href=&#34;https://calendly.com/&#34;&gt;Calendly tool&lt;/a&gt; made this process relatively painless. When a person clicks on the calendar link in the email above, it reveals only times that I am available in my Google Calendar, the time slot they choose shows up in my calendar, and I receive a confirmation email indicating who booked a meeting with me. In my busiest week, I had 19 meetings, but that meant the bulk of them were done!&lt;/p&gt;

&lt;p&gt;To make the meeting time most effective I followed AAAS-CEFP program director &lt;a href=&#34;https://twitter.com/LouWoodley&#34;&gt;Lou Woodley’s&lt;/a&gt; model for onboarding our AAAS CEFP cohort by sending a set of questions to be answered in advance. I took the model to the next level by creating a free &lt;a href=&#34;https://www.google.ca/forms/about/&#34;&gt;Google Form&lt;/a&gt; questionnaire so that all answers were automatically collected and could be viewed per individual or collectively, and automatically exported to a spreadsheet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-12-01-unconf-welcome/pre-unconf-google-form.png&#34; alt=&#34;pre-unconf-google-form&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions included:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;List three things you hope to get from the unconference&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;connect with people working in a similar domain&lt;/em&gt;, &lt;em&gt;learn about best practices in data science with R&lt;/em&gt;, or &lt;em&gt;develop a new package that does X&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List three things you hope to contribute to the unconference&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;expertise or experience in X&lt;/em&gt;, &lt;em&gt;mentoring skills&lt;/em&gt;, &lt;em&gt;write all the docs!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Have you had any previous interactions with the rOpenSci community?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;I read the rOpenSci blog&lt;/em&gt;, or &lt;em&gt;I submitted software for rOpenSci open peer review&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do you have any concerns about your readiness to participate?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;I’ve never developed an R package&lt;/em&gt; or &lt;em&gt;How do I decide what project to work on?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Would you be interested in writing a blog post about your unconference project or your unconference experience?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do you  have a preferred working style or anything you would like to let us know about how you work best?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Examples: &lt;em&gt;I’m an introvert who likes to take my lunch alone sometimes to recover from group activities – it doesn’t mean I’m not having fun.&lt;/em&gt; or &lt;em&gt;I know I have a tendency to dominate in group discussions – it’s totally fine to ask me to step back and let others contribute. I won’t be offended.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These questions encouraged participants to reflect in advance. The example answer snippets we provided gave them ideas from which to seed their answers and in some cases gave them permission to show some vulnerability. Individual’s answers gave me cues for things to address in our chat and freed both of us to spend our time talking about the most important issues.&lt;/p&gt;

&lt;p&gt;The answers to the question “List three things you hope to get from the unconf” were so heartening:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-12-01-unconf-welcome/unconf-three-things.png&#34; alt=&#34;unconf-three-things&#34;&gt;&lt;/p&gt;

&lt;p&gt;Beautiful, but in a different way, were answers to the question, “Do you have any concerns about your readiness to participate?”. People expressed real concerns about impostor syndrome, their perceived ability to contribute &amp;ldquo;as much or as well&amp;rdquo; as others, and feeling &amp;ldquo;outclassed by all the geniuses present&amp;rdquo;. These responses prompted me to reassure people that they were 100% qualified to participate, and opened an opportunity to listen to and address specific concerns.&lt;/p&gt;

&lt;p&gt;To conduct the pre-unconference chats, I used video conferencing via &lt;a href=&#34;https://appear.in/&#34;&gt;appear.in&lt;/a&gt;, a free, browser-based application that does not require plugins or user accounts. Rather than being exhausted from these calls, I felt energized and optimistic and I experienced many direct positive outcomes. These conversations enabled me to prime people to connect on day-one of the unconference with others with similar interests or from related work sectors. Frequently, I noticed that immediately after our conversation, first-time participants would join the online discussion of existing project ideas, or they themselves proposed new ideas. My conversations with two first-time participants led directly to their proposing community-focussed projects - a &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/63&#34;&gt;group discussion&lt;/a&gt; and a new &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/64&#34;&gt;blog series of interviews&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;An unexpected benefit was that questions people asked me during the video chats led to actions I could take to improve the unconference. For example, when someone wanted to know what previous participants wished they knew beforehand, I asked for and &lt;a href=&#34;https://twitter.com/rOpenSci/status/855531572081991680&#34;&gt;shared example resources&lt;/a&gt;. One wise person asked me what my plan was for having project teams report out at the end of the unconference and this led directly to a streamlined plan (See &lt;a href=&#34;https://ropensci.org/blog/2017-11-17-unconf-sixtips&#34;&gt;Six tips for running a successful unconference&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Big thanks to AAAS CEFP training for giving me the confidence to try this community experiment! Arranging and carrying out these pre-unconference questionnaires and video chats took a big investment of my time and energy and yet, I consider this effort to be one of the biggest contributors to participants’ satisfaction with the unconference. Will 100% do this again!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>changes: easy Git-based version control from R</title>
      <link>https://ropensci.org/blog/2017/11/28/ropensci-changes/</link>
      <pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/11/28/ropensci-changes/</guid>
      <description>
        
        

&lt;p&gt;Are you new to version control and always running into trouble with Git?
Or are you a seasoned user, haunted by the traumas of learning Git and reliving them whilst trying to teach it to others?
Yeah, us too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-28-ropensci-changes/monkeys.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Git is a version control tool designed for software development, and it is extraordinarily powerful. It didn’t actually dawn on me quite how amazing Git is until I spent a weekend in Melbourne with a group of Git whizzes using Git to write a package targeted toward Git beginners. Whew, talk about total Git immersion! I was taking part in the 2017 &lt;a href=&#34;https://ozunconf17.ropensci.org/&#34;&gt;rOpenSci ozunconf&lt;/a&gt;, in which forty-odd  developers, scientists, researchers, nerds, teachers, starving students, cat ladies, and R users of all descriptions form teams to create new R packages fulfilling some new and useful function. Many of the groups used Git for their collaborative workflows all weekend.&lt;/p&gt;

&lt;p&gt;Unfortunately, just like many a programming framework, Git can often be a teensy bit (read: extremely, prohibitively) intimidating, especially for beginners who don&amp;rsquo;t need all of Git&amp;rsquo;s numerous and baffling features.
It’s one of those platforms that makes your life a million times better once you know how to use it, but if you’re trying to teach yourself the basics using the internet, or—heaven forbid—trying to untangle yourself from some Git-branch tangle that you’ve unwittingly become snarled in… (definitely done that one…) well, let’s just say using your knuckles to break a brick wall can sometimes seem preferable.
Just ask the Git whizzes.
They laugh, because they’ve been there, done that.&lt;/p&gt;

&lt;p&gt;The funny thing is, doing basic version control in Git only requires a few commands.
After browsing through the available project ideas and settling into teams, a group of eight of us made a list of the commands that we use on a daily basis, and the list came to about a dozen.
We looked up our Git histories and compiled a Git vocabulary, which came out to less than 50 commands, including combination commands.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;https://github.com/goldingn&#34;&gt;Nick Golding&lt;/a&gt; so shrewdly recognized in the lead up to this year’s unconference, the real obstacle for new Git users is not the syntax, it&amp;rsquo;s actually (a) the scary, scary terminal window and (b) the fact that Git terminology was apparently chosen by randomly opening a verb dictionary and blindly pointing to a spot on the page.
(Ok, I’m exaggerating, but the point is that the terminology is pretty confusing).
We decided to address these two problems by making a package that uses the R console and reimagining the version control vocabulary and workflow for people who are new to version control and only need some of its many features.&lt;/p&gt;

&lt;p&gt;Somewhat ironically, nine people worked for two days on a dozen branches, using Git and GitHub to seamlessly merge our workflows.
It was wonderful to see how so many people’s various talents can be combined to make something that no group members could have done all on their own.&lt;/p&gt;

&lt;p&gt;Enter, &lt;code&gt;changes&lt;/code&gt; ( &lt;a href=&#34;https://github.com/ropenscilabs/ozrepro&#34;&gt;repo&lt;/a&gt;, &lt;a href=&#34;https://ropenscilabs.github.io/changes/&#34;&gt;website&lt;/a&gt; – made using &lt;a href=&#34;https://github.com/hadley/pkgdown&#34;&gt;pkgdown&lt;/a&gt;), our new R package to do version control with a few simple commands.
It uses Git and &lt;a href=&#34;https://cran.r-project.org/web/packages/git2r/index.html&#34;&gt;Git2r&lt;/a&gt; under the hood, but new users don’t need to know any Git to begin using version control with &lt;code&gt;changes&lt;/code&gt;.
Best of all, it works seamlessly with regular Git. So if a user thinks they&amp;rsquo;re ready to expand their horizons they can start using git commands via the &lt;a href=&#34;https://GitHub.com/jennybc/Githug&#34;&gt;Githug&lt;/a&gt; package, RStudio&amp;rsquo;s git interface, or on the command line.&lt;/p&gt;

&lt;p&gt;Here is an overview of some of the ways we’ve made simple version control easy with &lt;code&gt;changes&lt;/code&gt;:&lt;/p&gt;

&lt;h4 id=&#34;simple-terminology&#34;&gt;Simple terminology&lt;/h4&gt;

&lt;p&gt;It uses simple and deliberately un-git-like terminology:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You start a new version control project with &lt;code&gt;create_repo()&lt;/code&gt;, which is like &lt;code&gt;git init&lt;/code&gt; but it can set up a nice project directory structure for you, automatically ignoring things like output folders.&lt;/li&gt;
&lt;li&gt;All of the steps involved in commiting edits have been compressed into one function: &lt;code&gt;record()&lt;/code&gt;. All files that aren&amp;rsquo;t ignored will be committed, so users don&amp;rsquo;t need to know the difference between tracking, staging and committing files.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s easy to set which files to omit from version control with &lt;code&gt;ignore()&lt;/code&gt;, and to change your mind with &lt;code&gt;unignore()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;changes()&lt;/code&gt; lets you know which files have changed since the last record, like a hybrid of &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git diff&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can look back in history with &lt;code&gt;timeline()&lt;/code&gt; (a simplified version of &lt;code&gt;git log&lt;/code&gt;), &lt;code&gt;go_to()&lt;/code&gt; a previous record (like &lt;code&gt;git checkout&lt;/code&gt;), and &lt;code&gt;scrub()&lt;/code&gt; any unwanted changes since the last record (like &lt;code&gt;git reset --hard&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;it-s-linear&#34;&gt;It&amp;rsquo;s linear&lt;/h4&gt;

&lt;p&gt;After a long discussion, we decided that changes won&amp;rsquo;t provide an interface to Git branches (at least not yet), as the merge conflicts it leads to are one of the scariest things about version control for beginners.
With linear version control, users can can easily &lt;code&gt;go_to()&lt;/code&gt; a past record with a version number, rather than unfamiliar &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Internals-Git-Objects&#34;&gt;SHA&amp;rsquo;s&lt;/a&gt;. These numbers appear in the a lovely visual representation of their &lt;code&gt;timeline()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      (1) initial commit
       |  2017-11-18 02:55
       |
      (2) set up project structure
       |  2017-11-18 02:55
       |
      (3) added stuff to readme
          2017-11-18 02:55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to roll your project back to a previous record, you can &lt;code&gt;retrieve()&lt;/code&gt; it, and changes will simply append that record at the top of your timeline (storing all the later records, just in case).&lt;/p&gt;

&lt;h4 id=&#34;readable-messages-and-automatic-reminders&#34;&gt;Readable messages and automatic reminders&lt;/h4&gt;

&lt;p&gt;Some of Git&amp;rsquo;s messages and helpfiles are totally cryptic to all but the most hardened computer scientists.
Having been confronted with our fair share of &lt;a href=&#34;https://www.git-tower.com/learn/git/faq/detached-head-when-checkout-commit&#34;&gt;&lt;code&gt;detached HEAD&lt;/code&gt;&lt;/a&gt;s and offers to &lt;a href=&#34;https://git-scm.com/docs/git-push&#34;&gt;&lt;code&gt;update remote refs along with associated objects&lt;/code&gt;&lt;/a&gt;, we were keen to make sure all the error messages and helpfiles in changes are as intuitive and understandable as possible.&lt;/p&gt;

&lt;p&gt;It can also be hard to get into the swing of recording edits, so changes will give you reminders to encourage you to use &lt;code&gt;record()&lt;/code&gt; regularly. You can change the time interval for reminders, or switch them off, using &lt;code&gt;remind_me()&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;coming-soon&#34;&gt;Coming soon&lt;/h4&gt;

&lt;p&gt;We made a lot of progress in two days, but there&amp;rsquo;s plenty more we&amp;rsquo;re planning to add soon:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simplified access to GitHub with a &lt;code&gt;sync()&lt;/code&gt; command to automagically handle most uses of &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;git merge&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A Git training-wheels mode, so that people who want to move use Git can view the Git commands &lt;code&gt;changes&lt;/code&gt; is using under the hood.&lt;/li&gt;
&lt;li&gt;Added flexibility – we are working on adding functionality to handle simple deviations from the defaults, such as recording changes only to named files, or to all except some excluded files.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&amp;rsquo;d be really keen to hear your suggestions too, so please let us know your ideas via the &lt;a href=&#34;https://github.com/ropenscilabs/changes/issues&#34;&gt;changes issue tracker&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I have only recently started using Git and GitHub, and this year’s &lt;a href=&#34;https://ozunconf17.ropensci.org/&#34;&gt;rOpenSci ozunconf&lt;/a&gt; was a big eye-opener for me, in several ways.
Beyond finally understanding to power of proper version control, I met a group of wonderful people dedicated to participating in the R community.
Now as it turns out, R users take the word “community” very seriously.
Each and every person I met during the event was open and friendly.
Each person had ideas for attracting new users to R, making it easier to learn, making methods and data more readily available, and creating innovative new functionality.
Even before the workshop began, dozens of ideas for advancement circulated on &lt;a href=&#34;https://github.com/ropensci/ozunconf17/issues&#34;&gt;GitHub Issues&lt;/a&gt;.
Throughout the conference, it was a pleasure to be a part of the ongoing conversation and dialogue about growing and improving the R community.
That’s right, you can delete any lingering ‘introverted computer geek’ stereotypes you might still be harbouring in a cobwebbed attic of your mind.
In today’s day and age, programming is as much about helping each other, communicating, learning, and networking as it is about solving problems.
And building the community is a group effort.&lt;/p&gt;

&lt;p&gt;R users come from all sorts of backgrounds, but I was gratified to see scientists and researchers well-represented at the unconference.
Gone are the days when I need to feel like the ugly duckling for being the only R user in my biology lab!
If you still find yourself isolated, join the blooming online R users community, or any one of a number of meetups and clubs that are popping up everywhere.
I have dipped my toe in those waters, and boy am I glad I did!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>ochRe - Australia themed colour palettes</title>
      <link>https://ropensci.org/blog/2017/11/21/ochre/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/11/21/ochre/</guid>
      <description>
        
        

&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;The second rOpenSci &lt;a href=&#34;http://ozunconf17.ropensci.org/&#34;&gt;OzUnConf&lt;/a&gt; was held in Melbourne Australia a few weeks ago. A diverse range of &lt;a href=&#34;https://ropensci.org/blog/2017/10/31/ozunconf2017/&#34;&gt;scientists, developers and general good-eggs&lt;/a&gt; came together to make some R-magic happen and also learn a lot along the way. Before the conference began, a huge stack of projects were suggested on the unconf  &lt;a href=&#34;https://github.com/ropensci/ozunconf17/issues&#34;&gt;GitHub repo&lt;/a&gt;. For six data-visualisation enthusiasts, one issue in particular caught their eye, and the &lt;code&gt;ochRe&lt;/code&gt; package was born.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/AusElevationExamplePalettes.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/ropenscilabs/ochRe&#34;&gt;&lt;code&gt;ochRe&lt;/code&gt;&lt;/a&gt; package contains colour palettes influenced by the Australian landscape, iconic Australian artists and images. OchRe is originally the brain-child of &lt;a href=&#34;https://twitter.com/visnut&#34;&gt;Di Cook&lt;/a&gt;, who was inspired by Karthik Ram&amp;rsquo;s &lt;a href=&#34;https://github.com/karthik/wesanderson&#34;&gt;&lt;code&gt;wesanderson&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;h3 id=&#34;why-ochre&#34;&gt;Why &amp;ldquo;ochre&amp;rdquo;?&lt;/h3&gt;

&lt;p&gt;Naming our package was the &amp;ldquo;most important&amp;rdquo; task facing us after all jumping on board the project. Fuelled by a selection of pastries we opened the discussions, fully expecting this to take some time. Fortunately, we all agreed on the name in less than 5 minutes, which meant plenty of pastries were left for the serious business of package building.&lt;/p&gt;

&lt;p&gt;Ochre is naturally occuring, brownish-yellow &lt;a href=&#34;https://en.wikipedia.org/wiki/Ochre&#34;&gt;pigment&lt;/a&gt; found in many parts of Australia, so frequently in fact, that Australia is sometimes referred to as the &amp;ldquo;land of ochre soil&amp;rdquo;. Additionally, ochre pigment has been used for thousands of years by Aboriginal people in Australia, with many culturally important uses from artwork to the preservation of animal skins.&lt;/p&gt;

&lt;h3 id=&#34;building-ochre&#34;&gt;Building ochRe&lt;/h3&gt;

&lt;p&gt;We started our package building journey by each picking an iconic Australian artwork (this took longer than you might think). Once we had selected our images, we used the online &lt;a href=&#34;http://www.coolphptools.com/color_extract&#34;&gt;Image Color Extract PHP&lt;/a&gt; demo tool to extract the hex code for the main colours within each image. Some images required a more selective approach, so where needed the colour code extraction was done using the eyedropper tool (in macOS) or the Google Chrome colourPick extension.&lt;/p&gt;

&lt;p&gt;Once we were happy with the colours, codes and order for each palette we loaded this information into &lt;code&gt;ochRe&lt;/code&gt; as lists of hex codes associated with the palette name. We adopted &lt;code&gt;scales&lt;/code&gt; to improve the fucntionality of the packages when using &lt;code&gt;ggplot&lt;/code&gt;, in particular to allow manipulation of colour ramping and transparency. The package also contains a few simple functions for displaying the different palettes.&lt;/p&gt;

&lt;p&gt;Below are some examples of original art work and their associated palettes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;namatjira_qual&lt;/code&gt; and &lt;code&gt;namatjira_div&lt;/code&gt; are both inspired by the watercolour painting &lt;a href=&#34;http://www.menziesartbrands.com/items/twin-ghosts&#34;&gt;&amp;ldquo;Twin Ghosts&amp;rdquo;&lt;/a&gt;, by Aboriginal artist Albert Namatjira. &lt;code&gt;namatjira_div&lt;/code&gt; is ordered for plotting divergent datasets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/TwinGhosts_AlbertNamatjira.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/namatjira_qual.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;nolan_ned&lt;/code&gt; palette is inspired by the famous paintings of the outlaw &lt;a href=&#34;https://cs.nga.gov.au/detail.cfm?irn=28926&#34;&gt;Ned Kelly&lt;/a&gt; by Sidney Nolan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/nedKelly_sidneyNolan.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/nolan_ned.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;olsen_seq&lt;/code&gt; has been designed for plotting sequential data, such as a heat map or landscape layers. The colours come from the abstract piece &lt;a href=&#34;https://artsearch.nga.gov.au/Detail-LRG.cfm?IRN=26102&#34;&gt;&amp;ldquo;Sydney Sun&amp;rdquo;&lt;/a&gt;, 1965, by John Olsen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/sydneySun_johnOlsen.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/olsen_seq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There was a high proportion of ecologists at the #ozunconf, which inspired the somewhat pessimistic &lt;code&gt;healthy_reef&lt;/code&gt; and &lt;code&gt;dead_reef&lt;/code&gt; palettes, with the colours taken from recent underwater photgraphs of the Great Barrier Reef.&lt;/p&gt;

&lt;h3 id=&#34;introducing-ochre&#34;&gt;Introducing: &lt;code&gt;ochRe&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Our package currently contains 16 colour palettes, each one inspired by either an Australian landscape, an artwork or image by an Australian artist, or an Australian animal. Some of the palettes are more suited to displaying continuous data (such as in the Australian elevation maps above). Other palettes will perform best plotting discrete data (as in the &lt;code&gt;parliament&lt;/code&gt; example below).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ochRe&lt;/code&gt; can be currently be installed from GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# You need to install the &#39;devtools&#39; package first
devtools::install_github(&amp;quot;ropenscilabs/ochRe&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can visualise all 16 palettes using the following code snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pal_names &amp;lt;- names(ochre_palettes)

par(mfrow=c(length(ochre_palettes)/2, 2), lheight = 2, mar=rep(1, 4), adj = 0)
for (i in 1:length(ochre_palettes)){
    viz_palette(ochre_palettes[[i]], pal_names[i])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/ochrePalettes.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some worked examples, showing how to use the palettes for different types of data visualisation, including both &lt;code&gt;ggplot&lt;/code&gt; and base plotting in R.&lt;/p&gt;

&lt;p&gt;An example using base R and the &lt;code&gt;winmar&lt;/code&gt; palette, this is based on an iconic photograph by Wayne Ludbey, &amp;ldquo;Nicky Winmar St Kilda Footballer&amp;rdquo;, 1993. In the photo, Aboriginal AFL player Nicky Winmar is baring his skin in response to racial abuse during an AFL game.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## basic example code
pal &amp;lt;- colorRampPalette(ochre_palettes[[&amp;quot;winmar&amp;quot;]])
image(volcano, col = pal(20))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/VolcanoWithWinmar.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Paired scatter plot using the &lt;code&gt;emu_Woman_paired&lt;/code&gt; palette, inspired by &amp;ldquo;Emu Woman&amp;rdquo;, 1988-89, by Emily Kame Kngwarreye.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)
library(ochRe)
library(naniar)

# Exploring missing values benefits from a paired palette, like the emu women
# Here missing status on air temperature is shown in a plot of the two wind variables
data(oceanbuoys)
oceanbuoys &amp;lt;- oceanbuoys %&amp;gt;% add_shadow(humidity, air_temp_c) 
ggplot(oceanbuoys, aes(x=wind_ew, y=wind_ns, colour=air_temp_c_NA)) + 
    geom_point(alpha=0.8) + 
    scale_colour_ochre(palette=&amp;quot;emu_woman_paired&amp;quot;) +
    theme_bw() + theme(aspect.ratio=1)

# Slightly more complicated, forcing the pairs
clrs &amp;lt;- ochre_palettes$emu_woman_paired[11:12]
ggplot(oceanbuoys, aes(x=wind_ew, y=wind_ns, colour=air_temp_c_NA)) + 
    geom_point(alpha=0.8) + 
    scale_colour_manual(values=clrs) +
    theme_bw() + theme(aspect.ratio=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/Ochre_Example1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A map of the Australian electoral boundaries, using the &lt;code&gt;galah&lt;/code&gt; palette. &lt;a href=&#34;https://en.wikipedia.org/wiki/Galah&#34;&gt;Galahs&lt;/a&gt; are a common species of cockatoo found throughout mainland Australia.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Map of the 2016 Australian electoral boundaries
# with the galah palette
library(eechidna)
library(ggthemes)
data(nat_map_2016)
data(nat_data_2016)
ggplot(aes(map_id=id), data=nat_data_2016) +
    geom_map(aes(fill=Area_SqKm), map=nat_map_2016) +
    expand_limits(x=nat_map$long, y=nat_map$lat) + 
    scale_fill_ochre(palette=&amp;quot;galah&amp;quot;, discrete=FALSE) +
    theme_map()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/Ochre_Example2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Results of the 2016 Australian election to the senate, coloured by political party using the &lt;code&gt;parliament&lt;/code&gt; palette. The colours for this palette were taken from the &lt;a href=&#34;https://www.aph.gov.au/~/media/06%20Visit%20Parliament/66%20Parl%20House%20Art%20Collection/661%20five%20treasures/five%20treasures%20detail%20pics/M19840057UntitledBOYDunframed.png?la=en&#34;&gt;tapestry&lt;/a&gt; by Arthur Boyd found in the Great Hall of Parliament House.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Election results
senate &amp;lt;- read_csv(&amp;quot;http://results.aec.gov.au/20499/Website/Downloads/SenateSenatorsElectedDownload-20499.csv&amp;quot;, 
                   skip = 1)
coalition &amp;lt;- c(&amp;quot;Country Liberals (NT)&amp;quot;, &amp;quot;Liberal&amp;quot;, &amp;quot;Liberal National Party of Queensland&amp;quot;, 
               &amp;quot;The Nationals&amp;quot;)
labor &amp;lt;- c(&amp;quot;Australian Labor Party&amp;quot;, &amp;quot;Australian Labor Party (Northern Territory) Branch&amp;quot;, 
           &amp;quot;Labor&amp;quot;)
greens &amp;lt;- c(&amp;quot;The Greens&amp;quot;, &amp;quot;Australian Greens&amp;quot;, &amp;quot;The Greens (WA)&amp;quot;)

senate &amp;lt;- senate %&amp;gt;% mutate(PartyNm = ifelse(as.character(PartyNm) %in% coalition, 
                                             &amp;quot;Liberal National Coalition&amp;quot;, PartyNm))

senate &amp;lt;- senate %&amp;gt;% mutate(PartyNm = ifelse(as.character(PartyNm) %in% labor, 
                                             &amp;quot;Australian Labor Party&amp;quot;, PartyNm))

senate &amp;lt;- senate %&amp;gt;% mutate(PartyNm = ifelse(as.character(PartyNm) %in% greens, 
                                             &amp;quot;Australian Greens&amp;quot;, PartyNm))

senate$PartyNm &amp;lt;- factor(senate$PartyNm, 
                         levels = names(sort(table(senate$PartyNm), 
                            decreasing = T)))

ggplot(data = senate, aes(x = PartyNm, fill = PartyNm)) + 
    geom_bar() + xlab(&amp;quot;&amp;quot;) + 
    ylab(&amp;quot;&amp;quot;) + scale_fill_ochre(palette=&amp;quot;parliament&amp;quot;) + coord_flip() + 
    theme_bw() + theme(legend.position = &amp;quot;None&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-21-ochRe/Ochre_Example3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For more information about the individual palettes available in &lt;code&gt;ochRe&lt;/code&gt; visit our &lt;a href=&#34;https://github.com/ropenscilabs/ochRe/tree/master/vignettes&#34;&gt;vignette&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of the &lt;code&gt;ochRe&lt;/code&gt; team had a great time at #ozunconf, Thank you to the organisers for a brilliant event. Special Thanks to &lt;a href=&#34;https://github.com/mdsumner&#34;&gt;Michael Sumner&lt;/a&gt; for providing code to access the Australian elevation map you see at the start of this post.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The Oz colour palette gang soakin it up outside &lt;a href=&#34;https://twitter.com/hashtag/ozunconf?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ozunconf&lt;/a&gt; &lt;a href=&#34;https://t.co/XiLkhwZwTv&#34;&gt;pic.twitter.com/XiLkhwZwTv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Miles McBain (@MilesMcBain) &lt;a href=&#34;https://twitter.com/MilesMcBain/status/923682409400250368?ref_src=twsrc%5Etfw&#34;&gt;October 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Six tips for running a successful unconference</title>
      <link>https://ropensci.org/blog/2017/11/17/unconf-sixtips/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/11/17/unconf-sixtips/</guid>
      <description>
        
        

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-17-unconf-sixtips/ropensci-unconf17-community-nistara-randawa.jpg&#34; alt=&#34;Attendees at the May 2017 rOpenSci unconference. Photo credit: Nistara Randhawa&#34;&gt;
&lt;em&gt;Attendees at the May 2017 rOpenSci unconference. Photo credit: Nistara Randhawa&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In May 2017, I helped run a wildly successful “unconference” that had a huge positive impact on the community I serve. rOpenSci is a non-profit initiative enabling open and reproducible research by creating technical infrastructure in the form of staff- and community-contributed software tools in the R programming language that lower barriers to working with scientific data sources on the web, and creating social infrastructure through a welcoming and diverse community of software users and developers. Our 4th annual unconference brought together 70 people to hack on projects they dreamed up and to give them opportunities to meet and work together in person. One third of the participants had attended before, and two thirds were first-timers, selected from an open call for applications. We paid all costs up front for anyone who requested this in order to lower barriers to participation.&lt;/p&gt;

&lt;p&gt;It’s called an “unconference” because there is no schedule set before the event – participants discuss project ideas online in advance and projects are selected by participant-voting at the start. I’m sharing some tips here on how to do this well for this particular flavour of unconference.&lt;/p&gt;

&lt;h4 id=&#34;1-have-a-code-of-conduct&#34;&gt;1. Have a code of conduct&lt;/h4&gt;

&lt;p&gt;Having a &lt;a href=&#34;https://ropensci.org/blog/blog/2016/12/21/commcallv12-review-coc&#34;&gt;code of conduct&lt;/a&gt; that the organizers promote in the welcome goes a long way to creating a welcoming and safe environment and preventing violations in the first place.&lt;/p&gt;

&lt;h4 id=&#34;2-host-online-discussion-of-project-ideas-before-the-unconference&#34;&gt;2. Host online discussion of project ideas before the unconference&lt;/h4&gt;

&lt;p&gt;Our unconference centered on teams working on programming projects, rather than discussions, so prior to the unconference, we asked all participants to &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/&#34;&gt;suggest project ideas&lt;/a&gt; using an open online system, called GitHub, that allows everyone to see and comment on ideas or just share enthusiastic emoji to show support.&lt;/p&gt;

&lt;h4 id=&#34;3-have-a-pre-unconference-video-chat-with-first-time-participants&#34;&gt;3. Have a pre-unconference video-chat with first-time participants&lt;/h4&gt;

&lt;p&gt;Our AAAS CEFP training emphasizes the importance of extending a personalized welcome to community members, so I was inspired to make the bold move of talking with more than 40 first-time participants prior to the unconference. I asked each person to complete a short questionnaire to get them to consider the roles they anticipated playing prior to our chat. Frequently, within an hour of a video-chat, without prompting, I would see the person post a new project idea or share their thoughts about someone else’s. Other times, our conversation gave the person an opportunity to say “this idea maybe isn’t relevant but…” and I would help them talk through it, inevitably leading to “oh my gosh this is such a cool idea”. I got a huge return on my investment. People’s questions like “how do you plan to have 20 different projects present their work?” led to better planning on my part. Specific ideas for improvements came from me responding with “well…how would YOU do it?”&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Between the emails, slack channel, issues on GitHub, and personal video chats, I felt completely at ease going into the unconf (where I knew next to no one!).&lt;/p&gt;

&lt;p&gt;-rOpenSci unconf17 participant&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;4-run-an-effective-ice-breaker&#34;&gt;4. Run an effective ice breaker&lt;/h4&gt;

&lt;p&gt;I adapted the “&lt;a href=&#34;https://www.facinghistory.org/resource-library/teaching-strategies/barometer-taking-stand-controversial-issues&#34;&gt;Human Barometer&lt;/a&gt;” ice breaker to enable 70 people to share opinions across all perceived levels of who a participant is and introduce themselves to the entire group within a 1 hour period. Success depended on creating questions that were relevant to the unconference crowd, and on visually keeping track of who had spoken up in order to call on those who had not. Ice breakers and the rOpenSci version of the Human Barometer will be the subject of a future CEFP blog post.&lt;/p&gt;

&lt;h4 id=&#34;5-have-a-plan-to-capture-content&#34;&gt;5. Have a plan to capture content&lt;/h4&gt;

&lt;p&gt;So much work and money go into running a great unconference, you can’t afford to do it without a plan to capture and disseminate stories about the people and the products. Harness the brain work that went into the ideas! I used the concept of &lt;a href=&#34;http://www.socialfish.org/2016/11/you-have-more-content-than-you-realize/&#34;&gt;content pillars&lt;/a&gt; to come up with a plan. Every project group was given a public repository on GitHub to house their code and documentation. In a 2-day unconference with 70 people in 20 projects, how do people present their results?! We told everyone that they had just three minutes to present, and that the only presentation material they could use was their project README (the page of documentation in their code repository). No slides allowed! This kept their focus on great documentation for the project rather than an ephemeral set of pretty slides. Practically speaking, this meant that all presentations were accessible from a single laptop connected to the projector and that to access their presentation, a speaker had only to &lt;a href=&#34;https://ropenscilabs.github.io/runconf17-projects/&#34;&gt;click on the link to their repo&lt;/a&gt;. Where did the essence of this great idea come from? From a pre-unconference chat of course!&lt;/p&gt;

&lt;p&gt;In the week following the unconference, we used the projects’ README documentation to create a series of five posts released Monday through Friday, noting every one of the 20 projects with links to their code repositories. To get more in-depth stories about people and projects, I let participants know we were keen to host community-contributed blog posts and that accepted posts would be tweeted to rOpenSci’s &amp;gt;13,000 followers. Immediately after the unconference, we invited selected projects to contribute longer form narrative blog posts and posted these once a week. The series ended with &lt;a href=&#34;https://ropensci.org/blog/blog/2017/08/08/unconfroadsnottaken&#34;&gt;Unconf 2017: The Roads Not Taken&lt;/a&gt;, about all the great ideas that were not yet pursued and inviting people to contribute to these.&lt;/p&gt;

&lt;p&gt;All of this content is tied together in &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/02/unconf2017&#34;&gt;one blog post to summarize&lt;/a&gt; the unconference and link to all staff- and community-contributed posts in the unconference projects series as well as to posts of warm personal and career-focussed reflections by some participants.&lt;/p&gt;

&lt;h4 id=&#34;6-care-about-other-people-s-success&#34;&gt;6. Care about other people’s success&lt;/h4&gt;

&lt;p&gt;Community managers do a lot of “emotional work”. In all of this, my #1 key to running a successful unconference is to genuinely and deeply care that participants arrive feeling ready to hit the ground running and leave feeling like they got what they wanted out of the experience. Ultimately, the success of our unconference is more about the human legacy – building people’s capacity as software users and developers, and the in-person relationships they develop within our online community – than it is about the projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“I’ve steered clear of ‘hackathons’ because they feel intimidating and the ‘bad’ kind of competitive. But, this….this was something totally different.”&lt;/p&gt;

&lt;p&gt;– rOpenSci unconf17 participant&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Additional Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.trelliscience.com/introducing-the-2017-community-engagement-fellows/&#34;&gt;AAAS Community Engagement Fellows Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://socialinsilico.wordpress.com/2014/11/07/all-together-now-event-formats-for-more-practical-sessions/&#34;&gt;All together now: Event formats for more practical sessions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Budd A, Dinkel H, Corpas M, Fuller JC, Rubinat L, Devos DP, et al. (2015) Ten Simple Rules for Organizing an Unconference. PLoS Comput Biol11(1): e1003905. &lt;a href=&#34;https://doi.org/10.1371/journal.pcbi.1003905&#34;&gt;https://doi.org/10.1371/journal.pcbi.1003905&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>2017 rOpenSci ozunconf :: Reflections and the realtime Package</title>
      <link>https://ropensci.org/blog/2017/11/14/realtime/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/11/14/realtime/</guid>
      <description>
        
        &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;This year&amp;rsquo;s &lt;a href=&#34;https://ozunconf17.ropensci.org/&#34;&gt;rOpenSci ozunconf&lt;/a&gt; was held in Melbourne, bringing together over 45 R enthusiasts from around the country and beyond. As is customary, ideas for projects were discussed in &lt;a href=&#34;https://github.com/ropensci/ozunconf17/issues&#34;&gt;GitHub Issues&lt;/a&gt; (41 of them by the time the unconf rolled around!) and there was no shortage of enthusiasm, interesting concepts, and varied experience.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been to a few unconfs now and I treasure the time I get to spend with new people, new ideas, new backgrounds, new approaches, and new insights. That&amp;rsquo;s not to take away from the time I get to spend with people I met at previous unconfs; I&amp;rsquo;ve gained great friendships and started collaborations on side projects with these wonderful people.&lt;/p&gt;

&lt;p&gt;When the call for nominations came around this year it was an easy decision. I don&amp;rsquo;t have employer support to attend these things so I take time off work and pay my own way. This is my networking time, my development time, and my skill-building time. I wasn&amp;rsquo;t sure what sort of project I&amp;rsquo;d be interested in but I had no doubts something would come up that sounded interesting.&lt;/p&gt;

&lt;p&gt;As it happened, I had been playing around with a bit of code, purely out of interest and hoping to learn how &lt;a href=&#34;https://www.htmlwidgets.org/&#34;&gt;&lt;code&gt;htmlwidgets&lt;/code&gt;&lt;/a&gt; work. The idea I had was to make a classic graphic equaliser visualisation like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-14-realtime/graphiceq.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;using R.&lt;/p&gt;

&lt;p&gt;This presents several challenges; how can I get live audio into R, and how fast can I plot the signal? I had doubts about both parts, partly because of the way that R calls tie up the session (&lt;a href=&#34;https://appsilondatascience.com/blog/rstats/2017/11/01/r-promises-hands-on.html&#34;&gt;for now&amp;hellip;&lt;/a&gt;) and partly because constructing a &lt;code&gt;ggplot2&lt;/code&gt; object is somewhat slow (in terms of raw audio speeds). I&amp;rsquo;d heard about &lt;code&gt;htmlwidgets&lt;/code&gt; and thought there must be a way to leverage that towards my goal.&lt;/p&gt;

&lt;p&gt;I searched for a graphic equaliser javascript library to work with and didn&amp;rsquo;t find much that aligned with what I had in my head. Eventually I stumbled on &lt;a href=&#34;https://p5js.org/&#34;&gt;&lt;code&gt;p5.js&lt;/code&gt;&lt;/a&gt; and its examples page which has an &lt;a href=&#34;https://p5js.org/examples/sound-frequency-spectrum.html&#34;&gt;audio-input plot with a live demo&lt;/a&gt;. It&amp;rsquo;s a frequency spectrum, but I figured that&amp;rsquo;s just a bit of binning away from what I need. Running the example there looks like&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-14-realtime/p5sound_optimised.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This seemed to be worth a go. I managed to follow enough of &lt;a href=&#34;https://www.htmlwidgets.org/develop_intro.html&#34;&gt;this tutorial&lt;/a&gt; to have the library called from R. I modified the javascript canvas code to look a little more familiar, and the first iteration of &lt;code&gt;geom_realtime()&lt;/code&gt; was born&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3mdiCUbgxi0&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This seemed like enough of an idea that I proposed it in the GitHub Issues for the unconf. It got a bit of attention, which was worrying, because I had no idea what to do with this next. &lt;a href=&#34;https://github.com/petehaitch&#34;&gt;Peter Hickey&lt;/a&gt; pointed out that &lt;a href=&#34;https://github.com/seankross&#34;&gt;Sean Kross&lt;/a&gt; had &lt;a href=&#34;https://seankross.com/2017/08/11/Beyond-Axes-Simulating-Systems-with-Interactive-Graphics.html&#34;&gt;already wrapped some of the &lt;code&gt;p5.js&lt;/code&gt; calls into R calls&lt;/a&gt; with his &lt;code&gt;p5&lt;/code&gt; package, so this seemed like a great place to start. It&amp;rsquo;s quite a clever way of doing it too; it involves re-writing the &lt;code&gt;javascript&lt;/code&gt; which &lt;code&gt;htmlwidgets&lt;/code&gt; calls on each time you want to do something.&lt;/p&gt;

&lt;p&gt;Fast forward to the unconf and a decent number of people gathered around a little slip of paper with &lt;code&gt;geom_realtime()&lt;/code&gt; written on it. I had to admit to everyone that the &lt;code&gt;ggplot2&lt;/code&gt; aspect of my demo was a sham (it&amp;rsquo;s surprisingly easy to draw a canvas in just the right shade of grey with white gridlines), but people stayed, and we got to work seeing what else we could do with the idea. We came up with some suggestions for input sources, some different plot types we might like to support, and set about trying to understand what Sean&amp;rsquo;s package actually did.&lt;/p&gt;

&lt;p&gt;As it tends to work out, we had a great mix of people with different experience levels in different aspects of the project; some who knew how to make a package, some who knew how to work with &lt;code&gt;javascript&lt;/code&gt;, some who knew how to work with &lt;code&gt;websockets&lt;/code&gt;, some who knew about realtime data sources, and some who knew about nearly none of these things (✋ that would be me). If everyone knew every aspect about how to go about an unconf project I suspect the endeavor would be a bit boring. I love these events because I get to learn so much about so many different topics.&lt;/p&gt;

&lt;p&gt;I shared my demo script and we deconstructed the pieces. We dug into the inner workings of the &lt;code&gt;p5&lt;/code&gt; package and started determining which parts we could siphon off to meet our own needs. One of the aspects that we wanted to figure out was how to simulate realtime data. This could be useful both for testing, and also in the situation where one might want to &amp;rsquo;re-cast&amp;rsquo; some time-coded data. We were thankful that &lt;a href=&#34;https://github.com/kcf-jackson&#34;&gt;Jackson Kwok&lt;/a&gt; had gone deep-dive into &lt;code&gt;websockets&lt;/code&gt; and pretty soon (surprisingly soon, perhaps; within the first day) we had examples of (albeit, constructed) real-time (every 100ms) data streaming from a server and being plotted at-speed&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-14-realtime/realtime_runif_optimised.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Best of all, running the plot code didn&amp;rsquo;t tie up the session; it uses a listener written into the &lt;code&gt;javascript&lt;/code&gt; so it just waits for input on a particular port.&lt;/p&gt;

&lt;p&gt;With the core goal well underway, people started branching out into aspects they found most interesting. We had some people work on finding and connecting actual data sources, such as the bitcoin exchange rate&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-14-realtime/realtime_btc_optimised.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and a live-stream of binary-encoded data from the &lt;a href=&#34;http://qrng.anu.edu.au/index.php&#34;&gt;Australian National University (ANU) Quantum Random Numbers Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-14-realtime/realtime_bin_optimised.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Others formalised the code so that it can be piped into different &amp;lsquo;themes&amp;rsquo;, and retain the &lt;code&gt;p5&lt;/code&gt; structure for adding more components&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-14-realtime/realtime_bw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These were still toy examples of course, but they highlight what&amp;rsquo;s possible. They were each constructed using an offshoot of the &lt;code&gt;p5&lt;/code&gt; package whereby the &lt;code&gt;javascript&lt;/code&gt; is re-written to include various features each time the plot is generated.&lt;/p&gt;

&lt;p&gt;Another route we took is to use the direct &lt;code&gt;javascript&lt;/code&gt; binding API with factory functions. This had less flexibility in terms of adding modular components, but meant that the &lt;code&gt;javascript&lt;/code&gt; could be modified without worrying about how it needed to interact with &lt;code&gt;p5&lt;/code&gt; so much. This resulted in some outstanding features such as side-scrolling and date-time stamps. We also managed to pipe the data off to another thread for additional processing (in R) before being sent to the plot.&lt;/p&gt;

&lt;p&gt;The example we ended up with reads the live-feed of Twitter posts under a given hashtag, computes a sentiment analysis on the words with R, and live-plots the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-14-realtime/auspol.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Overall I was amazed at the progress we made over just two days. Starting from a silly idea/demo, we built a package which can plot realtime data, and can even serve up some data to be plotted. I have no expectations that this will be the way of the future, but it&amp;rsquo;s been a fantastic learning experience for me (and hopefully others too). It&amp;rsquo;s highlighted that there&amp;rsquo;s ways to achieve realtime plots, even if we&amp;rsquo;ve used a library built for drawing rather than one built for plotting per se.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s even inspired offshoots in the form of some R packages;  &lt;a href=&#34;https://github.com/ropenscilabs/tRainspotting&#34;&gt;&lt;code&gt;tRainspotting&lt;/code&gt;&lt;/a&gt; which shows realtime data on New South Wales public transport using &lt;code&gt;leaflet&lt;/code&gt; as the canvas&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/img/blog-images/2017-11-14-realtime/tRainspotting.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and &lt;a href=&#34;https://github.com/kcf-jackson/jsReact/&#34;&gt;&lt;code&gt;jsReact&lt;/code&gt;&lt;/a&gt; which explores the interaction between R and Javascript&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/kcf-jackson/jsReact/raw/master/inst/example_5.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/kcf-jackson/jsReact/raw/master/inst/example_6.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The possibilities are truly astounding. My list of &amp;lsquo;things to learn&amp;rsquo; has grown significantly since the unconf, and projects are still starting up/continuing to develop. The &lt;a href=&#34;https://github.com/jonocarroll/ggeasy&#34;&gt;&lt;code&gt;ggeasy&lt;/code&gt;&lt;/a&gt; package isn&amp;rsquo;t related, but it was spawned from another unconf Github Issue idea. Again; ideas and collaborations starting and developing.&lt;/p&gt;

&lt;p&gt;I had a great time at the unconf, and I can&amp;rsquo;t wait until the next one. My hand will be going up to help out, attend, and help start something new.&lt;/p&gt;

&lt;p&gt;My thanks and congratulations go out to each of the &lt;a href=&#34;https://github.com/ropenscilabs/realtime&#34;&gt;&lt;code&gt;realtime&lt;/code&gt;&lt;/a&gt; developers: &lt;a href=&#34;https://github.com/richardbeare&#34;&gt;Richard Beare&lt;/a&gt;, &lt;a href=&#34;https://github.com/jonocarroll&#34;&gt;Jonathan Carroll&lt;/a&gt;, &lt;a href=&#34;https://github.com/kimnewzealand&#34;&gt;Kim Fitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/softloud&#34;&gt;Charles Gray&lt;/a&gt;, &lt;a href=&#34;https://github.com/jeffreyhanson&#34;&gt;Jeffrey O Hanson&lt;/a&gt;, &lt;a href=&#34;https://github.com/holtzy&#34;&gt;Yan Holtz&lt;/a&gt;, &lt;a href=&#34;https://github.com/kcf-jackson&#34;&gt;Jackson Kwok&lt;/a&gt;, &lt;a href=&#34;https://github.com/MilesMcBain&#34;&gt;Miles McBain&lt;/a&gt; and the entire cohort of &lt;a href=&#34;https://ozunconf17.ropensci.org&#34;&gt;2017 rOpenSci ozunconf attendees&lt;/a&gt;. In particular, my thanks go to the organisers of such a wonderful event; &lt;a href=&#34;https://github.com/njtierney&#34;&gt;Nick Tierney&lt;/a&gt;, &lt;a href=&#34;https://github.com/robjhyndman&#34;&gt;Rob Hyndman&lt;/a&gt;, &lt;a href=&#34;https://github.com/dicook&#34;&gt;Di Cook&lt;/a&gt;, and &lt;a href=&#34;https://github.com/MilesMcBain&#34;&gt;Miles McBain&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Building Communities Together at ozunconf, 2017</title>
      <link>https://ropensci.org/blog/2017/10/31/ozunconf2017/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/10/31/ozunconf2017/</guid>
      <description>
        
        

&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&#34;https://njtierney.updog.co/img/ozunconf-hex-cookies.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Just last week we organised the 2nd rOpenSci &lt;a href=&#34;http://ozunconf17.ropensci.org&#34;&gt;ozunconference&lt;/a&gt;, the sibling rOpenSci unconference, held in Australia. Last year it was &lt;a href=&#34;http://auunconf.ropensci.org&#34;&gt;held in Brisbane&lt;/a&gt;, this time around, the ozunconf was hosted in Melbourne, from October 26-27, 2017.&lt;/p&gt;

&lt;p&gt;At the ozunconf, we brought together 45 R-software users and developers, scientists, and open data enthusiasts from academia, industry, government, and non-profits. Participants travelled from far and wide, with people coming from 6 cities around Australia, 2 cities in New Zealand, and one city in the USA. Before the ozunconf we discussed and dreamt up projects to work on for a few days, then met up and brought about a bakers dozen of them into reality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://njtierney.updog.co/img/ozunconf-womens-data-discuss.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;upskilling-participants&#34;&gt;Upskilling participants&lt;/h3&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Day 0.5 of &lt;a href=&#34;https://twitter.com/hashtag/ozunconf?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ozunconf&lt;/a&gt; and an excellent intro to writing packages and using Git from &lt;a href=&#34;https://twitter.com/rdpeng?ref_src=twsrc%5Etfw&#34;&gt;@rdpeng&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/nj_tierney?ref_src=twsrc%5Etfw&#34;&gt;@nj_tierney&lt;/a&gt;. I enjoyed the post-it note system! &lt;a href=&#34;https://t.co/iKTbWkeCA0&#34;&gt;pic.twitter.com/iKTbWkeCA0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Holly Kirk (@HollyKirk) &lt;a href=&#34;https://twitter.com/HollyKirk/status/923065587915415552?ref_src=twsrc%5Etfw&#34;&gt;October 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;On Day 0, one day before the ozunconf, &lt;a href=&#34;https://twitter.com/rdpeng&#34;&gt;Roger Peng&lt;/a&gt; and I ran a half day training session on how to develop R packages and share them on GitHub. The participants picked things up really quickly, and by the end of the session, everyone could make an R package, and push it to GitHub. We also introduced them to &lt;a href=&#34;https://www.youtube.com/watch?v=s3JldKoA0zw&amp;amp;feature=youtu.be&#34;&gt;the wonders of RMarkdown&lt;/a&gt;. The event then kicked on to the &lt;a href=&#34;https://www.meetup.com/R-Ladies-Melbourne/events/244102535/&#34;&gt;R-Ladies Melbourne special one year anniversary event&lt;/a&gt;, which featured a great talk and introduction to Random Forests by Elisabeth Vogel.&lt;/p&gt;

&lt;h3 id=&#34;bringing-people-together&#34;&gt;Bringing people together&lt;/h3&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Biscuit decorating at &lt;a href=&#34;https://twitter.com/hashtag/ozunconf?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ozunconf&lt;/a&gt; ! &lt;a href=&#34;https://t.co/M8PxOyRUJI&#34;&gt;pic.twitter.com/M8PxOyRUJI&lt;/a&gt;&lt;/p&gt;&amp;mdash; Nikeisha Caruana (@bluebirdi) &lt;a href=&#34;https://twitter.com/bluebirdi/status/923305923208036352?ref_src=twsrc%5Etfw&#34;&gt;October 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Before the ozunconf, we discussed various ideas for projects in &lt;a href=&#34;https://github.com/ropensci/ozunconf17/issues&#34;&gt;the GitHub issues&lt;/a&gt;. Things really started to pick up in the last week and we ended up at 41 issues - almost as many issues as participants.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://njtierney.updog.co/img/ozunconf-oz-data-discuss.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Day one kicked off with decorating some hex cookies, baked by &lt;a href=&#34;https://twitter.com/visnut&#34;&gt;Di Cook&lt;/a&gt;. This uncovered a fun fact that &lt;a href=&#34;http://stefanbache.dk/&#34;&gt;Stefan Milton Bache&lt;/a&gt; - creator of the beloved pipe operator (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) from the &lt;a href=&#34;https://github.com/tidyverse/magrittr&#34;&gt;&lt;code&gt;magrittr&lt;/code&gt;&lt;/a&gt; package, apparently also created the first #rstats hex sticker.&lt;/p&gt;

&lt;p&gt;We then stuck the various projects that had been discussed throughout the week around the room and participants sticker voted on projects that they were interested in working on. Introductions were made, and quotes like these (from &lt;a href=&#34;https://twitter.com/stephdesilva&#34;&gt;Steph de Silva&lt;/a&gt;) led to entertaining discussions around data:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;I&amp;#39;m 50% data hazmat, 50% data grief counselling&amp;quot; best Intro ever at &lt;a href=&#34;https://twitter.com/hashtag/ozunconf?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ozunconf&lt;/a&gt;&lt;/p&gt;&amp;mdash; Steve Bennett (@stevage1) &lt;a href=&#34;https://twitter.com/stevage1/status/923314625428336641?ref_src=twsrc%5Etfw&#34;&gt;October 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;We were really lucky to be in the beautiful Monash City Campus, a place that almost seems to have been designed for an unconf, with some classroom style space, as well as plenty of nooks and crannies to sit in, including an outdoor astroturfed garden complete with bean bags and native flora.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://njtierney.updog.co/img/ozunconf-earo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The Oz colour palette gang soakin it up outside &lt;a href=&#34;https://twitter.com/hashtag/ozunconf?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ozunconf&lt;/a&gt; &lt;a href=&#34;https://t.co/XiLkhwZwTv&#34;&gt;pic.twitter.com/XiLkhwZwTv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Miles McBain (@MilesMcBain) &lt;a href=&#34;https://twitter.com/MilesMcBain/status/923682409400250368?ref_src=twsrc%5Etfw&#34;&gt;October 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;The venue even seemed to reflect our love of hex stickers, providing a nice hex sticker themed carpet:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Appropriately shaped carpet pattern for the &lt;a href=&#34;https://twitter.com/hashtag/ozunconf?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ozunconf&lt;/a&gt; venue &lt;a href=&#34;https://twitter.com/hashtag/hex?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#hex&lt;/a&gt; &lt;a href=&#34;https://t.co/QsbVWhCQyb&#34;&gt;pic.twitter.com/QsbVWhCQyb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Holly Kirk (@HollyKirk) &lt;a href=&#34;https://twitter.com/HollyKirk/status/923420699900997632?ref_src=twsrc%5Etfw&#34;&gt;October 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;We had some great sponsors for this event, including &lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt;, &lt;a href=&#34;http://rstudio.com/&#34;&gt;RStudio&lt;/a&gt; &lt;a href=&#34;http://r-consortium.org/&#34;&gt;The RConsortium&lt;/a&gt;, &lt;a href=&#34;https://inghaminstitute.org.au/&#34;&gt;The Ingham Institute&lt;/a&gt;, and &lt;a href=&#34;http://www.monash.edu/business&#34;&gt;Monash Business School&lt;/a&gt;. The event was also organised by &lt;a href=&#34;https://twitter.com/nj_tierney&#34;&gt;myself&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/visnut&#34;&gt;Di Cook&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/robjhyndman&#34;&gt;Rob Hyndman&lt;/a&gt;, and also &lt;a href=&#34;https://twitter.com/milesmcbain&#34;&gt;Miles McBain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://njtierney.updog.co/img/ozunconf-hex-mat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We wrapped up at the end of day 2, giving each projects group three minutes to debrief on their projects, using the unconf style - only the README.md (mostly!). You can &lt;a href=&#34;https://ropenscilabs.github.io/ozunconf-projects/&#34;&gt;check out all the ozunconf projects here&lt;/a&gt;, thanks to a template from &lt;a href=&#34;http://seankross.com/&#34;&gt;Sean Kross&lt;/a&gt;. Soon we will publish a series of short posts covering some of these great fun projects.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a quick taster:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/realtime&#34;&gt;&lt;code&gt;realtime&lt;/code&gt;&lt;/a&gt;. Realtime streamingplots built on the p5.js library.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/ozrepro&#34;&gt;&lt;code&gt;stow&lt;/code&gt;&lt;/a&gt;. A simplified version control interface to git, from within R.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/icon&#34;&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/a&gt;. Easily access and insert web icons into HTML and PDF documents.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/ochRe&#34;&gt;&lt;code&gt;ochRe&lt;/code&gt;&lt;/a&gt;. Provide Australia-themed Colour Palettes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll share a quick summary of all of the projects over the coming weeks.&lt;/p&gt;

&lt;h3 id=&#34;what-s-your-story&#34;&gt;What&amp;rsquo;s Your Story?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/StephdeSilva/status/923875737102200832&#34;&gt;Some key #ozunconf lessons from Steph de Silva&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The opportunity to try but not succeed is a luxury to be savoured&lt;/li&gt;
&lt;li&gt;Mistakes make you a better programmer&lt;/li&gt;
&lt;li&gt;The best thing about R isn&amp;rsquo;t the language, it&amp;rsquo;s the number of people around who want to help&lt;/li&gt;
&lt;li&gt;Your skills are valuable, so your productivity is too. Investing in the tools that maximise it is worthwhile.&lt;/li&gt;
&lt;li&gt;git really is out to get you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few people have already written about their unconf17 experience. Have you? Share the link in the comments below and we&amp;rsquo;ll add it here.&lt;/p&gt;

&lt;h4 id=&#34;projects-posts&#34;&gt;Projects posts&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.healthintersections.com.au/?p=2740&#34;&gt;FHIR and R: &lt;code&gt;ronfhir&lt;/code&gt;&lt;/a&gt;, by &lt;a href=&#34;http://www.healthintersections.com.au/&#34;&gt;Grahame Grieve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/2017/11/14/realtime/&#34;&gt;2017 rOpenSci ozunconf :: Reflections and the &lt;code&gt;realtime&lt;/code&gt; Package&lt;/a&gt;, by &lt;a href=&#34;https://jcarroll.com.au/&#34;&gt;Jonathan Carroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/2017/11/21/ochre/&#34;&gt;&lt;code&gt;ochRe&lt;/code&gt; - Australia themed colour palettes&lt;/a&gt;, by &lt;a href=&#34;https://twitter.com/HollyKirk&#34;&gt;Holly Kirk&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/visnut&#34;&gt;Di Cook&lt;/a&gt;, &lt;a href=&#34;https://github.com/alicia-a&#34;&gt;Alicia Allan&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/ross_gayler&#34;&gt;Ross Gayler&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/rdpeng&#34;&gt;Roger Peng&lt;/a&gt;, &lt;a href=&#34;https://github.com/ellesaber&#34;&gt;Elle Saber&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;community-posts&#34;&gt;Community posts&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://simplystatistics.org/2017/10/30/how-do-you-convince-others-to-use-r/&#34;&gt;How do you convince others to use R?&lt;/a&gt;, by &lt;a href=&#34;http://www.biostat.jhsph.edu/~rpeng/&#34;&gt;Roger Peng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rex-analytics.com/failure-is-an-option/&#34;&gt;Failure Is An Option&lt;/a&gt;, by &lt;a href=&#34;https://twitter.com/StephdeSilva&#34;&gt;Steph da Silva&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;introducing-people-to-the-ropensci-community&#34;&gt;Introducing people to the rOpenSci community&lt;/h3&gt;

&lt;p&gt;rOpenSci has had a profound impact on me and my work. At the end of 2015 I got in touch with them to discuss arranging an unconference in Australia, and they welcomed me and my friends. Today, I am proud to be welcoming those from the ozunconf to this big, kind, wonderful community, and say, as Shannon Ellis summed up: &lt;a href=&#34;https://ropensci.org/blog/2017/06/23/community/&#34;&gt;&amp;ldquo;Hey! You there! You are welcome here&amp;rdquo;&lt;/a&gt;. It was also really great to have a diverse group of participants at the ozunconf, and in particular, that 40% of participants were women or other underrepresented genders.&lt;/p&gt;

&lt;h3 id=&#34;starts-not-ends&#34;&gt;Starts, not ends&lt;/h3&gt;

&lt;p&gt;One thing that I&amp;rsquo;ve realised in my involvement with organising and attending these events is that when the unconf ends, it feels a bit sad, sure, to say goodbye to the environment, the community, the friends, and the projects. At the last unconf in LA, we were sending out a stream of tweets, &amp;ldquo;&lt;a href=&#34;https://twitter.com/nj_tierney/status/868572134548713472&#34;&gt;it&amp;rsquo;s not&lt;/a&gt; &lt;a href=&#34;https://twitter.com/MilesMcBain/status/868590677843599360&#34;&gt;over&lt;/a&gt; &lt;a href=&#34;https://twitter.com/AmeliaMN/status/868605633435533312&#34;&gt;until&lt;/a&gt; &lt;a href=&#34;https://twitter.com/MilesMcBain/status/869044724086185985&#34;&gt;it&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;https://twitter.com/dataandme/status/869664700606406656&#34;&gt;over&lt;/a&gt;&amp;rdquo;. But, in reflection, standing back, taking it all in, the unconference doesn&amp;rsquo;t really end - it just starts. It starts many new things - projects, ideas, collaborations, and friendships.&lt;/p&gt;

&lt;p&gt;The ozunconf comes to an end. Now, let&amp;rsquo;s get started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://njtierney.updog.co/img/ozunconf-group-photo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Unconf 2017: The Roads Not Taken</title>
      <link>https://ropensci.org/blog/2017/08/08/unconfroadsnottaken/</link>
      <pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/08/08/unconfroadsnottaken/</guid>
      <description>
        
        

&lt;p&gt;Since June, we have been highlighting the &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/08/unconf_recap_4&#34;&gt;many projects&lt;/a&gt; that emerged from this year&amp;rsquo;s &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/02/unconf2017&#34;&gt;rOpenSci Unconf&lt;/a&gt;. These projects start many weeks before unconf participants gather in-person. Each year, we ask participants to propose and discuss project ideas ahead of time in a &lt;a href=&#34;https://github.com/ropensci/unconf17/issues&#34;&gt;GitHub repo&lt;/a&gt;. This serves to get creative juices flowing as well as help people get to know each other a bit through discussion.&lt;/p&gt;

&lt;p&gt;This year wasn&amp;rsquo;t just our biggest unconf ever, it was the biggest in terms of proposed ideas! We had more proposals than participants, so we had a great pool to draw from when we got down to work in L.A. Yet many good ideas were left on the cutting room floor. Here we highlight some of those ideas we didn&amp;rsquo;t quite get to. Many have lots of potential and we hope the R and rOpenSci communities take them up!&lt;/p&gt;

&lt;h3 id=&#34;api-interfaces&#34;&gt;API Interfaces&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Many of our data access packages interface with web APIs, and our community has some ideas on how to &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/85&#34;&gt;make these easier&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/25&#34;&gt;improve testing&lt;/a&gt; of these types of packages.&lt;/li&gt;
&lt;li&gt;Both &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/14&#34;&gt;Amazon Web Services&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/70&#34;&gt;Google Cloud&lt;/a&gt; APIs already have API wrappers, but in other languages (e.g., Java, Go), that could be wrapped to make R packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;development-tools&#34;&gt;Development tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There were lots of ideas of how to extend package testing and test coverage, such as measuring &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/2&#34;&gt;how much of package code is documented&lt;/a&gt; in examples and vignettes, and unit testing for and test coverage &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/3&#34;&gt;for imported functions&lt;/a&gt;, to make sure package dependencies are behaving as expected. Also, improving frameworks for &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/90&#34;&gt;performance testing&lt;/a&gt;, so as to measure performance improvement or regression as an R package develops.&lt;/li&gt;
&lt;li&gt;Documentation and discoverability are always close to our hearts, so it is no surprise we had proposals to &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/41&#34;&gt;promote more linkages in package metadata&lt;/a&gt;, &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/44&#34;&gt;more package-level man pages&lt;/a&gt;, &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/83&#34;&gt;richer HTML help pages&lt;/a&gt;, and of course, &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/58&#34;&gt;badges&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;The RStudio crowd has some ideas to &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/52&#34;&gt;make autocompletion extensible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A tool for &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/59&#34;&gt;reminding people about deadlines&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data-access&#34;&gt;Data Access&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We&amp;rsquo;ve got a lot of folks who are interested in lakes and two ideas for &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/21&#34;&gt;accessing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Despite having five &lt;a href=&#34;https://open.nasa.gov/explore/datanauts/&#34;&gt;NASA datanauts&lt;/a&gt; at the unconf, we didn&amp;rsquo;t get around to making &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/67&#34;&gt;this package to access NASA data&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Utility rates are a messy kind of data that could use &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/94&#34;&gt;open data standards&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/unconf17/issues/79&#34;&gt;Historical correspondence data&lt;/a&gt; would be really cool to have available through an R data package.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;reproducibility&#34;&gt;Reproducibility&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There are some thorny issues around &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/22&#34;&gt;namespacing&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/23&#34;&gt;provenance&lt;/a&gt; that could use some attention.&lt;/li&gt;
&lt;li&gt;Integrating testing into scripts is a topic of much interest to the community, with recent packages like &lt;a href=&#34;https://ropensci.org/blog/blog/2017/04/11/assertr&#34;&gt;assertr&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropenscilabs/testrmd&#34;&gt;testrmd&lt;/a&gt;, but what about creating field-specific test standards, like &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/37&#34;&gt;assertions for biological data&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;training&#34;&gt;Training&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There are a lot of topics out there that could use good tutorials and training approaches, like &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/32&#34;&gt;software licensing&lt;/a&gt;, getting involved in a &lt;a href=&#34;perhaps by addressing [first-timer issues]&#34;&gt;GitHub projects&lt;/a&gt;, or learning good coding &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/75&#34;&gt;patterns&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/26&#34;&gt;antipatterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;publishing&#34;&gt;Publishing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;How should R users handle &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/86&#34;&gt;reviewing and commenting&lt;/a&gt; R-Markdown documents.&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the right &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/51&#34;&gt;blend&lt;/a&gt; of vignettes, R markdown templates, and parameterized reports for getting new learners up and running?&lt;/li&gt;
&lt;li&gt;One of the things we hope to do more of is enable scientists to publish and get credit for their software and data. How about &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/24&#34;&gt;automating software citation&lt;/a&gt;, or packages for auto-submission to &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/46&#34;&gt;software&lt;/a&gt; or &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/87&#34;&gt;data&lt;/a&gt; journals?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;it-s-your-turn&#34;&gt;It&amp;rsquo;s Your Turn&lt;/h3&gt;

&lt;p&gt;Interested in pursuing one of these ideas? Pick up on the discussion in the project&amp;rsquo;s &lt;a href=&#34;https://github.com/ropensci/unconf17/issues&#34;&gt;GitHub repo&lt;/a&gt; and the friendly people there will welcome your contributions!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>emldown - From machine readable EML metadata to a pretty documentation website</title>
      <link>https://ropensci.org/blog/2017/08/01/emldown/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/08/01/emldown/</guid>
      <description>
        
        

&lt;p&gt;How do you get the maximum value out of a dataset? Data is most valuable when it can easily be shared, understood, and used by others. This requires some form of metadata that describes the data. While metadata can take many forms, the most useful metadata is that which follows a standardized specification. The &lt;a href=&#34;https://knb.ecoinformatics.org/#external//emlparser/docs/index.html&#34;&gt;Ecological Metadata Language (EML)&lt;/a&gt; is an example of such a specification originally developed for ecological datasets. EML describes what information should be included to describe the data, and what format that information should be represented in.&lt;/p&gt;

&lt;p&gt;There are many benefits to writing metadata according to a specification like EML:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Understand data&lt;/strong&gt;: thorough metadata allows you, your collaborators, and anyone else to learn more about what the data represents, when/where/how it was collected, and how it can be used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Discover data&lt;/strong&gt;: data repositories like the &lt;a href=&#34;https://knb.ecoinformatics.org/#data&#34;&gt;Knowledge Network for Biocomplexity&lt;/a&gt; use EML to allow users to search for datasets based on things like creator, location, date, or species.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrate data&lt;/strong&gt;: with structured, machine-readable metadata describing exactly what the fields in a dataset represent, it is possible to combine multiple datasets, even if the datasets themselves have different structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despite these benefits, it&amp;rsquo;s not always fun to write standardized metadata. Although there&amp;rsquo;s a very good package for helping you create the EML, &lt;a href=&#34;https://github.com/ropensci/eml&#34;&gt;rOpenSci&amp;rsquo;s EML package&lt;/a&gt;, documenting the data can be quite tedious.  Furthermore, before you share the data on a public repository that enforces EML, the only prize you get is a happy conscience, which isn&amp;rsquo;t very tangible. In our &lt;a href=&#34;http://unconf17.ropensci.org/&#34;&gt;unconf&lt;/a&gt; project, we created immediate gratification for EML users: a package that transforms the non-human readable EML file into a pretty documentation website for any dataset!&lt;/p&gt;

&lt;h3 id=&#34;what-s-eml-exactly-and-why-can-t-humans-read-it&#34;&gt;What&amp;rsquo;s EML, exactly, and why can&amp;rsquo;t humans read it?&lt;/h3&gt;

&lt;p&gt;As we mentioned above, &lt;a href=&#34;https://en.wikipedia.org/wiki/Ecological_Metadata_Language&#34;&gt;EML&lt;/a&gt; is a metadata standard originally created for the ecologists. In practice it&amp;rsquo;s a set of XML schema documents, telling you what you need to document (e.g. the dataset creator, geographic coverage of the data, etc.) and how to build those documents (format of the XML). The &lt;a href=&#34;https://ropensci.github.io/EML/&#34;&gt;&lt;code&gt;EML&lt;/code&gt; R package&lt;/a&gt; provides tools to create and read EML without needing to learn about XML thanks to helper functions and extensive documentation. Although its name contains the word &lt;em&gt;ecological&lt;/em&gt;, one can use EML for documenting datasets from any field.  One of our team members uses it for documenting epidemiological datasets, because everything she wants to document is present in the standard.&lt;/p&gt;

&lt;p&gt;After creating EML documentation for your data, you get an XML document that&amp;rsquo;s, well&amp;hellip; not very human readable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-08-01-emldown/screenshot_raw_xml.png&#34; alt=&#34;raw eml&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;EML&lt;/code&gt; package there&amp;rsquo;s a function called &lt;code&gt;eml_view&lt;/code&gt; relying on the &lt;a href=&#34;https://github.com/timelyportfolio/listviewer&#34;&gt;&lt;code&gt;listviewer&lt;/code&gt; package&lt;/a&gt; to produce an interactive view of the XML in the Viewer pane of say, RStudio, which allows one to check some things quickly but which is far from being a user-friendly representation of the metadata.  Our goal with &lt;code&gt;emldown&lt;/code&gt; was to bridge this gap and provide a quick and easy way to take EML and convert it to a more user-friendly web page.&lt;/p&gt;

&lt;h3 id=&#34;what-does-emldown-do-with-your-eml&#34;&gt;What does &lt;code&gt;emldown&lt;/code&gt; do with your EML?&lt;/h3&gt;

&lt;p&gt;After installing the package from Github, you can apply it to your EML&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;ropenscilabs/emldown&amp;quot;)
library(&amp;quot;emldown&amp;quot;)
render_eml(path_to_my_eml)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you get something like this!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-08-01-emldown/screenshot_emldown.png&#34; alt=&#34;emldown&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This format is much more likely to make you and your collaborators happy because it&amp;rsquo;s more engaging and easier to explore to find useful information. Note how little effort you needed to invest into making it! Viewing your metadata in this way makes it easy to read, and easy to spot any errors.&lt;/p&gt;

&lt;p&gt;The resulting website is based on &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; and has some interactive components:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-08-01-emldown/emldown_demo1.gif&#34; alt=&#34;demo1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Geographic information turns into a map, made using &lt;a href=&#34;https://rstudio.github.io/leaflet/&#34;&gt;leaflet&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-08-01-emldown/emldown_demo2.gif&#34; alt=&#34;demo2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Right now, we are able to capture some of the most common parts of Ecological Metadata Language, including the Title, Abstract, Authors, Keywords, Coverage (where in space and time the samples were taken), the Data Tables and Units associated with these. Over time we plan to add support for additional components of the EML specification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-08-01-emldown/emldown_demo3.gif&#34; alt=&#34;demo3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see a live example of a website created with &lt;code&gt;emldown&lt;/code&gt; &lt;a href=&#34;http://aammd.info/emldown/test.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-can-you-contribute&#34;&gt;How can you contribute?&lt;/h3&gt;

&lt;p&gt;Use the package to transform the EML you have lying around on your PC into a pretty website, and if you find a bug while doing so we&amp;rsquo;ll be happy to tackle it! Report any issue or feature request &lt;a href=&#34;https://github.com/ropenscilabs/emldown/issues&#34;&gt;here&lt;/a&gt;, or feel free to contribute with code.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re very happy to have been able to create this working package in two days (and thankful for that opportunity, thanks rOpenSci!); and we not-so-secretly hope that it will contribute to making writing good metadata more attractive and therefore more common.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>skimr for useful and tidy summary statistics</title>
      <link>https://ropensci.org/blog/2017/07/11/skimr/</link>
      <pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/07/11/skimr/</guid>
      <description>
        
        

&lt;p&gt;Like every R user who uses summary statistics (so, everyone), our team has to rely on some combination of summary functions beyond &lt;code&gt;summary()&lt;/code&gt; and &lt;code&gt;str()&lt;/code&gt;. But we found them all lacking in some way because they can be generic, they don&amp;rsquo;t always provide easy-to-operate-on data structures, and they are not pipeable. What we wanted was a frictionless approach for quickly skimming useful and tidy summary statistics as part of a pipeline. And so at &lt;a href=&#34;http://unconf17.ropensci.org/&#34;&gt;rOpenSci #unconf17&lt;/a&gt;, we developed &lt;a href=&#34;https://github.com/ropenscilabs/skimr#skimr&#34;&gt;&lt;code&gt;skimr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a nutshell, &lt;code&gt;skimr&lt;/code&gt; will create a &lt;code&gt;skim_df&lt;/code&gt; object that can be further operated upon or that provides a human-readable printout in the console. It presents reasonable default summary statistics for numerics, factors, etc, and lists counts, and missing and unique values. And the momentum is still going, thanks to our awesome team (see below)!&lt;/p&gt;

&lt;h3 id=&#34;backstory&#34;&gt;Backstory&lt;/h3&gt;

&lt;p&gt;The idea for skimr as a project for the #unconf17 &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/50&#34;&gt;was proposed by Amelia McNamara&lt;/a&gt; following &lt;a href=&#34;https://twitter.com/AmeliaMN/status/774348524653834241&#34;&gt;discussions on Twitter&lt;/a&gt; and an &lt;a href=&#34;https://github.com/hadley/precis&#34;&gt;initial package by Hadley Wickham&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we were together in Los Angeles, we formed a solid team, set up a Google Doc, a Slack channel, the &lt;code&gt;ropenscilabs/skimr&lt;/code&gt; repo, and grabbed a whiteboard.&lt;/p&gt;

&lt;p&gt;We started off by brainstorming what we liked about existing summary packages and what other features we wanted. We started looking at example data, &lt;code&gt;mtcars&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what we liked and disliked, in Amelia&amp;rsquo;s words:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### &amp;quot;I like what we get here because mpg is numeric so these stats make sense:&amp;quot;
summary(mtcars$mpg)
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#  10.40   15.42   19.20   20.09   22.80   33.90


### &amp;quot;But I don’t like this because cyl should really be a factor and shouldn&#39;t have these stats:&amp;quot;
summary(mtcars$cyl)
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#  4.000   4.000   6.000   6.188   8.000   8.000


### &amp;quot;This is OK, but not descriptive enough. It could be clearer what I&#39;m looking at.&amp;quot;
mosaic::tally(~cyl, data=mtcars) # install.packages(&#39;mosaic&#39;)
#cyl
# 4  6  8
#11  7 14


### &amp;quot;But this output isn&#39;t labeled, not ideal.&amp;quot;
table(mtcars$cyl, mtcars$vs)
#
#     0  1
#  4  1 10
#  6  3  4
#  8 14  0


### &amp;quot;I like this because it returns &#39;sd&#39;, &#39;n&#39; and &#39;missing&#39;&amp;quot;:
mosaic::favstats(~mpg, data=mtcars)
#  min     Q1 median   Q3  max     mean       sd  n missing
# 10.4 15.425   19.2 22.8 33.9 20.09062 6.026948 32       0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we had an idea of what we thought would be useful, we did a bit of market research (i.e. we made a short &lt;a href=&#34;https://docs.google.com/presentation/d/13Ky3-Y70STzufLJtCm6GXN8SMj2Y11riDef8b9cBgAQ/edit#slide=id.p&#34;&gt;presentation&lt;/a&gt; and ran it by other unconfers at lunch.&lt;/p&gt;

&lt;h3 id=&#34;introducing-skimr&#34;&gt;Introducing &lt;code&gt;skimr&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;So what does &lt;code&gt;skimr&lt;/code&gt; actually do? It allows you to skim useful summary statistics in the console, or use those statistics in a pipeable workflow.&lt;/p&gt;

&lt;p&gt;Some features of output in the console:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reports missing, complete, n, sd, and quantiles&lt;/li&gt;
&lt;li&gt;reports numeric/int/double separately from factor/chr, and identifies class&lt;/li&gt;
&lt;li&gt;handles dates, logicals&lt;/li&gt;
&lt;li&gt;uses &lt;a href=&#34;https://github.com/hadley/colformat&#34;&gt;Hadley&amp;rsquo;s colformats&lt;/a&gt;, specifically &lt;code&gt;colformats::spark-bar()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are examples of &lt;code&gt;skimr&lt;/code&gt; in action:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;quick-skim-in-the-console&#34;&gt;Quick skim in the console:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Nicely separates numeric and factor variables:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ropenscilabs/skimr/24c733d7e4752c37e46e4c36693da107f42f3f55/man/figures/skim_iris.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clearly displays many numeric variables:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ropenscilabs/skimr/ecb90e22047d4a1b228bcf471650eb79b733e52e/man/figures/skim_mtcars.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also works with strings:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ropenscilabs/skimr/ecb90e22047d4a1b228bcf471650eb79b733e52e/man/figures/skim_babynames.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;exploring-a-skim-df-object&#34;&gt;Exploring a skim_df object&lt;/h4&gt;

&lt;p&gt;By default &lt;code&gt;skim&lt;/code&gt; prints beautifully in the console, but it also produces a long, tidy-format &lt;code&gt;skim_df&lt;/code&gt; object that can be computed on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;-  skim(chickwts)
dim(a)
# [1] 22  5
View(a)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ropenscilabs/skimr/ecb90e22047d4a1b228bcf471650eb79b733e52e/man/figures/skim_chickwts_df.png&#34; width=&#34;450px&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;computing-with-the-skim-df-object&#34;&gt;Computing with the skim_df object&lt;/h4&gt;

&lt;p&gt;Maybe you just want to skim a specific portion of your data frame. Use skimr with a pipe!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; skim(mtcars) %&amp;gt;% filter(stat==&amp;quot;hist&amp;quot;)
# A tibble: 11 × 5
     var    type  stat      level value
   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
1    mpg numeric  hist ▂▅▇▇▇▃▁▁▂▂     0
2    cyl numeric  hist ▆▁▁▁▃▁▁▁▁▇     0
3   disp numeric  hist ▇▇▅▁▁▇▃▂▁▃     0
4     hp numeric  hist ▆▆▇▂▇▂▃▁▁▁     0
5   drat numeric  hist ▃▇▂▂▃▆▅▁▁▁     0
6     wt numeric  hist ▂▂▂▂▇▆▁▁▁▂     0
7   qsec numeric  hist ▂▃▇▇▇▅▅▁▁▁     0
8     vs numeric  hist ▇▁▁▁▁▁▁▁▁▆     0
9     am numeric  hist ▇▁▁▁▁▁▁▁▁▆     0
10  gear numeric  hist ▇▁▁▁▆▁▁▁▁▂     0
11  carb numeric  hist ▆▇▂▁▇▁▁▁▁▁     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;specifying-your-own-statistics&#34;&gt;Specifying your own statistics&lt;/h4&gt;

&lt;p&gt;Another possibility is specifying your own statistics to display with &lt;code&gt;skimr&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt; funs &amp;lt;- list(iqr = IQR,
    quantile = purrr::partial(quantile, probs = .99))
  skim_with(numeric = funs, append = FALSE)
  skim_v(iris$Sepal.Length)

#  A tibble: 2 × 4
#      type     stat level value
#     &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
# 1 numeric      iqr  .all   1.3
# 2 numeric quantile   99%   7.7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;our-awesome-team&#34;&gt;Our awesome team&lt;/h3&gt;

&lt;p&gt;We had a really fantastic team with diverse backgrounds, and it was really cool how organically everyone found a role for themselves during the development of &lt;code&gt;skimr&lt;/code&gt;. Between brainstorming sessions, experienced coders began to iteratively develop the code while others worked on documentation and tests, and got more involved. Everyone asked questions and brainstormed together; it was a really welcoming environment. We knew that by the end of the second day of the unconf, we would present our work using only the repo&amp;rsquo;s &lt;a href=&#34;https://github.com/ropenscilabs/skimr#skimr&#34;&gt;README&lt;/a&gt; file. So we focused on communication throughout the entire development process.&lt;/p&gt;

&lt;p&gt;A lot of the heavy lifting at the unconf was done by Michael, Elin, and Eduardo, and Elin has continued leading development in the month since!&lt;/p&gt;

&lt;p&gt;This was the original team in alphabetical order. We have also had many virtual contributors as well: see the full list of contributors &lt;a href=&#34;https://github.com/ropenscilabs/skimr/graphs/contributors&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eduardo Arino de la Rubia&lt;/strong&gt; &lt;br&gt;
Job Title: Chief Data Scientist at Domino Data Lab &lt;br&gt;
Project Contributions: Coder&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shannon Ellis&lt;/strong&gt; &lt;br&gt;
Job Title: Postdoctoral fellow in the Biostatistics Department at the Johns Hopkins Bloomberg School of Public Health &lt;br&gt;
Project Contributions: Test Scripts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Julia Stewart Lowndes&lt;/strong&gt; &lt;br&gt;
Job Title: Marine Data Scientist at the National Center for Ecological Analysis and Synthesis &lt;br&gt;
Project Contributions: Documentation and test scripts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hope McLeod&lt;/strong&gt; &lt;br&gt;
Job Title: Data Engineer at Kobalt Music &lt;br&gt;
Project Contributions: Documentation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amelia McNamara&lt;/strong&gt; &lt;br&gt;
Job Title: Visiting Assistant Professor of Statistical &amp;amp; Data Sciences at Smith College &lt;br&gt;
Project Contributions: Coder&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael Quinn&lt;/strong&gt; &lt;br&gt;
Job Title: Quantitative Analyst at Google &lt;br&gt;
Project Contributions: Coder&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elin Waring&lt;/strong&gt; &lt;br&gt;
Job Title: Professor at Lehman College Sociology Department, City University of New York &lt;br&gt;
Project Contributions: Coder&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hao Zhu&lt;/strong&gt; &lt;br&gt;
Job Title: Programmer Analyst at the Institute for Aging Research &lt;br&gt;
Project Contributions: Coder&lt;/p&gt;

&lt;h3 id=&#34;in-summary-ha&#34;&gt;In summary (ha&amp;hellip;)&lt;/h3&gt;

&lt;p&gt;The work we did together was only possible because of &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/23/community&#34;&gt;rOpenSci&amp;rsquo;s incredible community and culture&lt;/a&gt;. For us to be able to dream up something we wanted to build and have the time and space to actually do it together was really exciting. So thank you rOpenSci and everyone in the greater community!&lt;/p&gt;

&lt;p&gt;There is more work to be done on &lt;code&gt;skimr&lt;/code&gt;, so please check out the &lt;a href=&#34;https://github.com/ropenscilabs/skimr&#34;&gt;&lt;code&gt;skimr&lt;/code&gt;&lt;/a&gt; repo for the latest features and improvements! There you&amp;rsquo;ll see how to install the latest version of &lt;code&gt;skimr&lt;/code&gt; (with any needed dependencies). Check out the planned features and fixes on the &lt;a href=&#34;https://github.com/ropenscilabs/skimr/issues&#34;&gt;issues page&lt;/a&gt; and give us feedback or join the team!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Launching webrockets at runconf17</title>
      <link>https://ropensci.org/blog/2017/07/05/webrockets/</link>
      <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/07/05/webrockets/</guid>
      <description>
        
        

&lt;p&gt;We, &lt;a href=&#34;https://github.com/AliciaSchep/&#34;&gt;Alicia Schep&lt;/a&gt; and &lt;a href=&#34;https://github.com/MilesMcBain&#34;&gt;Miles
McBain&lt;/a&gt;, drove the &lt;code&gt;webrockets&lt;/code&gt; project
at &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/02/unconf2017&#34;&gt;#runconf17&lt;/a&gt;.
To make progress we solicited code, advice, and entertaining anecdotes
from a host of other attendees, whom we humbly thank for helping to make
our project possible.&lt;/p&gt;

&lt;p&gt;This post is divided into two sections: First up we&amp;rsquo;ll relate &lt;a href=&#34;#our-experiences&#34;&gt;our
experiences&lt;/a&gt;, prompted by some questions we wrote for
one another. Second, we&amp;rsquo;ll put the &lt;a href=&#34;#cool-but-what-is-a-websocket&#34;&gt;&lt;code&gt;webrockets&lt;/code&gt;
package&lt;/a&gt; into context and walk you
through a fun example where you can live plot streaming sensor data from
a mobile device.&lt;/p&gt;

&lt;h1 id=&#34;our-experiences&#34;&gt;Our Experiences&lt;/h1&gt;

&lt;h2 id=&#34;alicia-answers-miles-questions&#34;&gt;Alicia Answers Miles&amp;rsquo; Questions&lt;/h2&gt;

&lt;h3 id=&#34;q1-what-motivated-you-to-apply-for-runconf17-and-then-to-work-on-webrockets&#34;&gt;Q1: What motivated you to apply for #runconf17 and then to work on &lt;code&gt;webrockets&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;I first learned about rOpenSci last summer, while doing an internship at
Genentech. &lt;a href=&#34;https://ropensci.org/about/#team&#34;&gt;Jenny Bryan&lt;/a&gt; came to
give a seminar and also participated in a &amp;ldquo;women in computing&amp;rdquo; group
discussion during her visit. During that discussion, she talked about
how she thought organizations like rOpenSci that are &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/23/community&#34;&gt;welcoming and
inclusive&lt;/a&gt; are
great for helping diversify programming (and other) communities. It
sounded like a really cool organization, and I started exploring some of
the rOpenSci &lt;a href=&#34;https://ropensci.org/packages/&#34;&gt;packages&lt;/a&gt; and reading the
&lt;a href=&#34;https://ropensci.org/blog/&#34;&gt;blog&lt;/a&gt; but wasn&amp;rsquo;t sure of how to take that
next step and become more actively involved. When I saw the blog post
about the unconf, it seemed like a great opportunity to take that next
step so I went ahead and applied, although I didn&amp;rsquo;t think I had much
chance of being selected — it was a very welcome surprise!&lt;/p&gt;

&lt;p&gt;When I got to the unconf, I didn&amp;rsquo;t know what I wanted to work on, as a
lot of the projects sounded interesting. I had proposed a project, but
it seemed like someone else was keen to work on a similar idea after the
unconf, so I ended up circling the room trying to figure out what other
project I might want to work on. I chose the &lt;code&gt;webrockets&lt;/code&gt; project for
two main reasons: 1) the use cases that you proposed (making
visualizations that updated based on streaming data!) seemed really
neat, and 2) I wanted to push myself to learn something really new, and
I didn&amp;rsquo;t know much about web sockets! This type of project was something
that I would be very hesitant about jumping into on my own, so the
unconf seemed like a great time for it. I figured you could teach me all
I needed to know about web sockets :D (and if those reading this
don&amp;rsquo;t know what web sockets are, don&amp;rsquo;t worry&amp;hellip; later in this post we&amp;rsquo;ll
&lt;a href=&#34;#cool-but-what-is-a-websocket&#34;&gt;explain it to you too&lt;/a&gt;!)&lt;/p&gt;

&lt;h3 id=&#34;q2-what-were-the-most-challenging-parts-of-runconf17-for-you&#34;&gt;Q2: What were the most challenging parts of #runconf17 for you?&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m pretty shy and introverted, so I was nervous about being around so
many new people and the packed schedule. Luckily, everyone I met was
extremely friendly! I did still ended up being pretty exhausted by the
end of each day, but had a great time working with you on &lt;code&gt;webrockets&lt;/code&gt;
and talking about a wide range of topics (R, food, dogs, politics,
life&amp;hellip;) with various smaller groups. It was also really incredible to
be able to get help on our project from some of the most knowledgeable
people possible!&lt;/p&gt;

&lt;h3 id=&#34;q3-what-things-from-runconf17-will-stay-with-you-into-the-future&#34;&gt;Q3: What things from #runconf17 will stay with you into the future?&lt;/h3&gt;

&lt;p&gt;I thing the big thing that will stay with me is knowing how kind and
helpful people in the R community are. I&amp;rsquo;m often nervous about asking
for help or contributing to a new project, but I feel much more
comfortable now about doing so in the future!&lt;/p&gt;

&lt;h2 id=&#34;miles-answers-alicia-s-questions&#34;&gt;Miles Answers Alicia&amp;rsquo;s Questions&lt;/h2&gt;

&lt;h3 id=&#34;q1-what-inspired-you-to-work-on-the-webrockets-package&#34;&gt;Q1: What inspired you to work on the &lt;code&gt;webrockets&lt;/code&gt; package?&lt;/h3&gt;

&lt;p&gt;It wasn&amp;rsquo;t my first choice, that was actually &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/77&#34;&gt;your suggestion for
roxygen-like tagging for makefile
generation&lt;/a&gt;, which I
still think is an amazing idea. But I went into the unconf with handful
of issues earmarked and websockets was definitely one of them.&lt;/p&gt;

&lt;p&gt;The main attraction to websockets for me is about connecting R to new
kinds of data sources. They could be Internet of Things devices or
sources that reside in Virtual Realities. Websockets provide the base
layer for the protocols you need to navigate to stream data from these
sources. Since I&amp;rsquo;m starting to encounter these types of sources in my
work, I had a feel for a basic unconf-sized use case to attack.&lt;/p&gt;

&lt;p&gt;So as the project room was rapidly clearing on Thursday morning, I was
starting to get a bit disheartened that I might have to move to a
project I hadn&amp;rsquo;t really registered an interest in. Then almost at the
last moment Alicia Schep rocks up, keen and backing her C++ skills,
convincing me we might be able to get something done. That as much as
anything inspired me to work on &lt;code&gt;webrockets&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;q2-how-did-working-on-this-package-during-the-unconference-differ-from-your-usual-r-development-experience&#34;&gt;Q2: How did working on this package during the unconference differ from your usual R development experience?&lt;/h3&gt;

&lt;p&gt;In basically all the ways. I usually work independently and I tend to
bang my head against something for a while before reaching for help. The
unconf encourages just the opposite approach and it works amazingly
well. We had web experts like &lt;a href=&#34;https://github.com/hrbrmstr&#34;&gt;Bob Rudis&lt;/a&gt;
and &lt;a href=&#34;https://github.com/jcheng5&#34;&gt;Joe Cheng&lt;/a&gt; sitting literally metres
away from us, and they were only too happy to point us in the right
directions to short cut a lot of time consuming trial and error.&lt;/p&gt;

&lt;p&gt;Also, You and I were &lt;a href=&#34;https://en.wikipedia.org/wiki/Pair_programming&#34;&gt;pair
programming&lt;/a&gt; for a good
portion of the time, that&amp;rsquo;s something I rarely do. I was surprised it
worked so well given we had only just met. I think you can&amp;rsquo;t overstate
the effect of the tone set by the rOpenSci team in facilitating this. I
can&amp;rsquo;t speak for You, but I didn&amp;rsquo;t feel like the self-consciousness that
can sometimes occur when coding in front of strangers was a noticeable
presence. We were too focussed on getting something happening!&lt;/p&gt;

&lt;h3 id=&#34;q3-what-was-the-favorite-thing-you-learned-during-the-unconference-doesn-t-have-to-be-webrockets-related&#34;&gt;Q3: What was the favorite thing you learned during the unconference? (Doesn&amp;rsquo;t have to be &lt;code&gt;webrockets&lt;/code&gt; related!)&lt;/h3&gt;

&lt;p&gt;Wow. That&amp;rsquo;s hard. I mean there&amp;rsquo;s the little known but dedicated scene
inhabited by the R Karaoke People group, the fact that there exists
someone who takes more unadulterated joy in streaming sensor data than
me (hey Bob!), the hypnotic power of sing song southern accents,
&lt;a href=&#34;https://ropensci.org/about/#team&#34;&gt;Karthik&lt;/a&gt;&amp;rsquo;s magic Dolittle-level
powers over dogs&amp;hellip;&lt;/p&gt;

&lt;p&gt;But my absolute favorite thing learned would be aspects of all these
inspiring people who were just previously names or static 2d avatars and
text on the interwebz. As a far-flung Aussie, it&amp;rsquo;s easy to feel on the
outer of the R community. Post unconf I feel like the online community
is so much more alive, and that has to be a result of having had the
opportunity to commune with some of its brightest inhabitants.&lt;/p&gt;

&lt;h1 id=&#34;cool-but-what-is-a-websocket&#34;&gt;Cool&amp;hellip; But what &lt;em&gt;is&lt;/em&gt; a websocket?&lt;/h1&gt;

&lt;p&gt;Websockets are communication end-points that occupy the same place in
the network stack as HTTP. To shoehorn the protocols needed by modern
web apps into the request-response model of HTTP has required a lot of
fancy footwork involving polling schemes. These schemes are expensive in
bandwidth due to HTTP header information that has to be included in the
most basic of messages. Websockets strip back and abstract away that
machinery, allowing for application level protocol development without
concern for HTTP headers or URL strings!&lt;/p&gt;

&lt;p&gt;You can read a great explanation
&lt;a href=&#34;http://www.websocket.org/quantum.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;webrockets-img-src-https-assets-cdn-github-com-images-icons-emoji-unicode-1f680-png-height-20-width-20-align-absmiddle&#34;&gt;Webrockets &lt;img src=&#34;https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png&#34; height=&#34;20&#34; width=&#34;20&#34; align=&#34;absmiddle&#34;&gt;&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;ve discussed our personal motivations, but the &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/43&#34;&gt;project
issue&lt;/a&gt; was actually
proposed by Bob Rudis. He has been using websockets to control headless
Chrome browsers in the context of automated testing. Check out his repo:
&lt;a href=&#34;https://github.com/hrbrmstr/decapitated&#34;&gt;&lt;code&gt;decapitated&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bob had already hunted down a lightweight C++ websocket library that
compiled on Windows, and he was kind enough to share that with us. So
using the wrapper he created for
&lt;a href=&#34;https://github.com/dhbaird/easywsclient&#34;&gt;easywsclient&lt;/a&gt; as a template,
we set about creating a general API to target our unconf challenge.&lt;/p&gt;

&lt;p&gt;That challenge was: Can we create a &lt;code&gt;shiny&lt;/code&gt; app that makes live animated
plots of streaming data received over a websocket connection? To do this
successfully requires a client interface (inbound) for websockets that
is compatible with the reactive programming paradigm in &lt;code&gt;shiny&lt;/code&gt;. It also
requires a well understood test source of streaming data to verify the
app is working properly.&lt;/p&gt;

&lt;p&gt;A server interface (outbound) for websockets in R has been available for
some time through RStudio&amp;rsquo;s
&lt;a href=&#34;https://github.com/rstudio/httpuv&#34;&gt;&lt;code&gt;httpuv&lt;/code&gt;&lt;/a&gt; package. We were able to
use this to implement our &lt;a href=&#34;https://github.com/ropenscilabs/webrockets/blob/master/tests/random_coordintate_server.R&#34;&gt;test data
source&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;streaming-data-as-websocket-client&#34;&gt;Streaming data as websocket client&lt;/h2&gt;

&lt;h3 id=&#34;initializing-the-connection&#34;&gt;Initializing the connection&lt;/h3&gt;

&lt;p&gt;We assume that as the client, it is our role to initiate a data
streaming session with the server. So we have a way to initialize a
connection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;con &amp;lt;- ws_connect(url = &amp;quot;ws://localhost:5006/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;con&lt;/code&gt; is a handle to our websocket connection. It is passed to &lt;code&gt;read&lt;/code&gt;
methods to get data.&lt;/p&gt;

&lt;h3 id=&#34;getting-messages&#34;&gt;Getting messages&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;easywsclient&lt;/code&gt; there is no concept of a buffer messages piling up
for us. A new received message overwrites the one received prior. If we
have not read it, it is lost. This creates some considerations for us as
consumers of websocket data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How often will we check the websocket for new messages?&lt;/li&gt;
&lt;li&gt;How will we deal with no messages?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good answers to these questions depend on the characteristics of the
data stream as well as our application. We have to consider how fast and
how predictably data are arriving, and what data we really need (e.g.
latest vs all history). So some degrees of freedom are required, which
is why we created a few methods to read from websockets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msg &amp;lt;- ws_receive(ws_ptr = con, timeout = 10) # Check for a message waiting up to 10 milliseconds to receive.
msg &amp;lt;- ws_receive_one(ws_ptr = con, frequency = 5) #Return 1 message, check every 5 milliseconds until it arrives.
msg &amp;lt;- ws_receive_multiple(ws_ptr = con, eventlimit = 10) #Do not return until you have 10 messages.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-messages-in-shiny&#34;&gt;Getting messages in shiny&lt;/h3&gt;

&lt;p&gt;To continually receive messages, we could potentially put calls to
receive messages within a while loop. However, that wouldn&amp;rsquo;t work in the
context of &lt;code&gt;shiny&lt;/code&gt; since the app would spend all of its time inside the
&lt;code&gt;while&lt;/code&gt; loop, ignoring other inputs/outputs. We got a very entertaining
introduction to the &lt;a href=&#34;https://github.com/HenrikBengtsson/future&#34;&gt;&lt;code&gt;future&lt;/code&gt;
package&lt;/a&gt; and how it might
help us get messages asynchronously from &lt;a href=&#34;https://github.com/HenrikBengtsson&#34;&gt;Henrik
Bengtsson&lt;/a&gt;, but ultimately &lt;a href=&#34;https://github.com/carlganz&#34;&gt;Carl
Ganz&lt;/a&gt; and &lt;a href=&#34;https://github.com/jcheng5&#34;&gt;Joe
Cheng&lt;/a&gt; set us on the right path using some
of &lt;code&gt;shiny&lt;/code&gt;&amp;rsquo;s lesser known classes and functions.&lt;/p&gt;

&lt;p&gt;To receive websocket messages in a &lt;code&gt;shiny&lt;/code&gt; application, we can place our
call to get the message and the handling of the response in an
&lt;code&gt;observeEvent&lt;/code&gt; expression. The event we are observing here isn&amp;rsquo;t a real
event; we use the &lt;code&gt;invalidateLater&lt;/code&gt; function to specify that we actually
just want to run the code every X milliseconds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;con &amp;lt;- ws_connect(url = &amp;quot;ws://localhost:5006/&amp;quot;)
ui &amp;lt;- fluidPage(
    plotOutput(&#39;plot&#39;)
)
server &amp;lt;- function(input, output) {
    values &amp;lt;- reactiveValues(x = NULL, y = NULL)

    observeEvent(invalidateLater(100), {

        new_response &amp;lt;- ws_receive(con, 0)
        if (new_response != &amp;quot;&amp;quot;){
            new_point &amp;lt;- fromJSON(new_response)
            values$x &amp;lt;- c(values$x, new_point$x)
            values$y &amp;lt;- c(values$y, new_point$y)
        }
    }, ignoreNULL = FALSE)

    output$plot &amp;lt;- renderPlot({
        ggplot(data.frame(xval = values$x, yval = values$y),
               aes(x = xval, y=yval)) + geom_point()
    })
}
shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s what the app looks like as new points are received from the
server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-07-05_launching_webrockets/wr_coord_example.gif&#34; alt=&#34;test
example&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;streaming-sensor-data&#34;&gt;Streaming sensor data&lt;/h2&gt;

&lt;p&gt;We were pretty happy to get the proof of concept &lt;code&gt;shiny&lt;/code&gt; app that
updates based on a test server up and running — lots of high fives and
cheering when we saw the first few points getting added to the
plot! We then set our sights higher — could we plot some real sensor
data? Miles set up an app on his phone that would start a websockets
server that would send out messages containing accelerometer data from
the phone. We modified our &lt;code&gt;shiny&lt;/code&gt; app to read in and plot that real
(live!) data.&lt;/p&gt;

&lt;p&gt;We used &lt;a href=&#34;https://play.google.com/store/apps/details?id=net.collaud.android.sensorvisualisation&amp;amp;hl=en&#34;&gt;this
app&lt;/a&gt;
from the Android app store to stream our sensor data. &lt;em&gt;Hot tip&lt;/em&gt;: be sure
to be running your &lt;code&gt;shiny&lt;/code&gt; plotting app on the same wifi network as your
phone. To begin sensor data transmission, hit &amp;ldquo;start&amp;rdquo; in the sensor data
app interface and make a note of the websocket port and phone ip
address.&lt;/p&gt;

&lt;p&gt;The call to establish the connection is:
&lt;code&gt;con &amp;lt;- ws_connect(url = &amp;quot;ws://&amp;lt;PHONE_IP_ADDRESS&amp;gt;:&amp;lt;APP_WEBSOCKET_PORT&amp;gt;&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/ropenscilabs/webrockets/blob/master/tests/shiny_test_phone.R&#34;&gt;code for our accelerometer shiny
app&lt;/a&gt;
required only small modifications from above.&lt;/p&gt;

&lt;p&gt;We made styling change in &lt;code&gt;ui&lt;/code&gt; to hide the &amp;ldquo;greying-out&amp;rdquo; effect of the
plot while it was re-rendered with each new datapoint. It makes the plot
seem more fluid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    tags$style(type=&amp;quot;text/css&amp;quot;,
               &amp;quot;.recalculating {opacity: 1.0;}&amp;quot;),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;server&lt;/code&gt; introduced a call to &lt;code&gt;gather&lt;/code&gt; so we could create a time
series plot facetted by accelerometer axis (x,y,z). It would be better
not to do this at each timestep. Individual plots could alleviate this.
The plot changes to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;output$plot &amp;lt;- renderPlot({
        data.frame(xval = values$x, yval = values$y,
                   zval = values$z, time = values$time) %&amp;gt;%
            gather(&amp;quot;variable&amp;quot;, &amp;quot;value&amp;quot;, -time) %&amp;gt;%
        ggplot(aes(x = time, y=value)) + geom_path() + facet_grid(~variable)
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voila! Now you can create a demo like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-07-05_launching_webrockets/phonerocket.gif&#34; width=&#34;600&#34; title=&#34;accelerometer gif&#34;&gt;&lt;/p&gt;

&lt;p&gt;The plot updates with the acceleration of the phones in the x, y, an z
directions in real time as Miles moves the phone around!&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://twitter.com/MilesMcBain/status/868303874041327616&#34;&gt;this
video&lt;/a&gt; you
can hear &lt;a href=&#34;https://github.com/njtierney&#34;&gt;Nick Tierney&lt;/a&gt; losing his mind as
he watches the plot update in real time, but your mileage may vary with,
you know&amp;hellip; non-R people.&lt;/p&gt;

&lt;h2 id=&#34;future-work&#34;&gt;Future Work&lt;/h2&gt;

&lt;p&gt;The project is about to get some real world use in an upcoming project
so expect a bunch of issues and design considerations to shake out of
that. Constructive feedback on our effort and/or contributions are very
welcome! Feel free to engage us on Twitter
(&lt;a href=&#34;https://twitter.com/AliciaSchep&#34;&gt;@aliciaschep&lt;/a&gt;,
&lt;a href=&#34;https://twitter.com/MilesMcBain&#34;&gt;@milesmcbain&lt;/a&gt;), rOpenSci slack
(check out the &lt;code&gt;#webrockets&lt;/code&gt; channel), or the issues on the
&lt;a href=&#34;https://github.com/ropenscilabs/webrockets&#34;&gt;&lt;code&gt;webrockets&lt;/code&gt; Github repo&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>packagemetrics - Helping you choose a package since runconf17</title>
      <link>https://ropensci.org/blog/2017/06/27/packagemetrics/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/06/27/packagemetrics/</guid>
      <description>
        
        

&lt;p&gt;Before everybody made their way to the unconf via &lt;a href=&#34;https://twitter.com/sckottie/status/867211430914736128&#34;&gt;LAX&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/sctyner/status/867505241234604033&#34;&gt;Lyft&lt;/a&gt;, attendees &lt;a href=&#34;https://github.com/ropensci/unconf17/issues&#34;&gt;discussed&lt;/a&gt; potential project ideas online. The &lt;strong&gt;packagemetrics&lt;/strong&gt; package was our answer to two related issues.&lt;/p&gt;

&lt;p&gt;The first &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/69&#34;&gt;proposal&lt;/a&gt; centered on creating and formatting tables in a reproducible workflow. After many different package suggestions started pouring in, we were left with a classic R user conundrum: &amp;ldquo;Which package do I choose?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;With over 10,000 packages on CRAN - and thousands more on GitHub and Bioconductor - a useR needs a way to navigate this wealth of options. There are many existing tools to categorize and facilitate searching of R packages such as &lt;a href=&#34;https://cran.r-project.org/web/views/&#34;&gt;CRAN TaskViews&lt;/a&gt;, &lt;a href=&#34;http://rseek.org/&#34;&gt;RSeek&lt;/a&gt;, &lt;a href=&#34;https://www.rdocumentation.org/&#34;&gt;Rdocumentation&lt;/a&gt;, &lt;a href=&#34;http://crantastic.org/&#34;&gt;Crantastic!&lt;/a&gt;, &lt;a href=&#34;http://www.r-pkg.org/&#34;&gt;METACRAN&lt;/a&gt; and &lt;a href=&#34;http://dirk.eddelbuettel.com/cranberries/&#34;&gt;CRANberries&lt;/a&gt;. GitHub also provides lots of great metrics for individual packages developed there.&lt;/p&gt;

&lt;p&gt;However, these resources mostly aggregate information at the individual-package level, or compare static sets of packages that may not reflect recent breakthroughs.  To find a suitable option, users must sift through and compare individual packages, which can be a tedious and time-intensive process - particularly for someone new to R.&lt;/p&gt;

&lt;p&gt;The plethora of packages to create reproducible tables was an example of a second, broader issue: &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/78&#34;&gt;&amp;ldquo;Avoiding redundant / overlapping packages&amp;rdquo;&lt;/a&gt;.  That conversation turned to the process of reviewing packages. Combining the two issues, we set out to to create a guide that could help users navigate package selection, using the case of reproducible tables as a case study.&lt;/p&gt;

&lt;h2 id=&#34;brainstorming&#34;&gt;Brainstorming&lt;/h2&gt;

&lt;p&gt;Making use of the unique opportunity of the unconf, we asked other participants &amp;ndash; all experienced R users/developers &amp;ndash; how they discover and choose the packages they use. Some questions we pondered included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do you find packages relevant for a task at hand?&lt;/li&gt;
&lt;li&gt;What do you look for in R packages?&lt;/li&gt;
&lt;li&gt;How do you determine a package&amp;rsquo;s quality?&lt;/li&gt;
&lt;li&gt;How could we deal with a set of related and potentially-overlapping packages covering the same topic?&lt;/li&gt;
&lt;li&gt;How could we identify gaps in existing packages?&lt;/li&gt;
&lt;li&gt;How can we leverage the R community to capture user experience?&lt;/li&gt;
&lt;li&gt;What is the etiquette for creating a new package that potentially overlaps with another existing one?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to the package catalog resources listed above, unconf participants also rely on personal networks or social media such as Twitter to learn about new packages. A typical workflow for choosing a package looks like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gathering a list of packages which seem to offer suitable functionality,&lt;/li&gt;
&lt;li&gt;narrowing down that list to a handful of packages, and then&lt;/li&gt;
&lt;li&gt;trying those out to select the best one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While there was wide variation in how users gathered their initial lists of packages, they relied on common indicators to narrow their lists, including, &amp;ldquo;Is the package actively maintained?&amp;rdquo; and &amp;ldquo;Is it being tested? If so, how?&amp;rdquo;. The last step often brought out personal preferences (&amp;ldquo;I pick the one whose API I like best&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;Through these discussions, it became evident that while there are resources for &lt;em&gt;finding&lt;/em&gt; packages, tools for &lt;em&gt;comparing&lt;/em&gt; packages would be helpful additions. Two possible approaches to comparing packages are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Standardized data collection:&lt;/strong&gt; Collecting metrics on criteria that unconf participants use to appraise packages. This can be applied uniformly across packages and hence is closer to an objective comparison. Additionally, metric collection can be wrapped in a package itself which makes it easier to collect these metrics at scale.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expert user review:&lt;/strong&gt; In-depth exploration and review of similar packages - think &lt;a href=&#34;http://thewirecutter.com/&#34;&gt;&amp;ldquo;The Wirecutter&amp;rdquo;&lt;/a&gt; but for R tasks. Reviews and recommendations are more subjective and require time and expertise - but user experience and feedback are important measures of the quality and potential of an R package. There is much insight that can be gained by installing a package and exploring it yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the workflow indicates, these two approaches are best used together, rather than relying on a single one.&lt;/p&gt;

&lt;h2 id=&#34;goals-for-unconf&#34;&gt;Goals for unconf&lt;/h2&gt;

&lt;p&gt;At the unconf, we focused solely on the task of package assessment, leaving aside ideas for community involvement, discussion on how to identify gaps in existing packages and, related, when to create your own package.  It was already a big problem to tackle in just two days!&lt;/p&gt;

&lt;p&gt;Acknowledging the importance of both types of assessment &amp;ndash; metric comparison and human exploration &amp;ndash; we set out to create a package which could a) be used to collect data about R packages and b) contain an example for a more in-depth exploration of a set of packages (for creating reproducible tables) in form of a vignette.&lt;/p&gt;

&lt;h3 id=&#34;metrics&#34;&gt;Metrics&lt;/h3&gt;

&lt;p&gt;By making use of information from CRAN, GitHub, and StackOverflow, we collected metrics to answer some of the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does the package have a public repository?&lt;/li&gt;
&lt;li&gt;Does it have an issue tracker?&lt;/li&gt;
&lt;li&gt;What are the package’s dependencies? Is it build on a solid stack?&lt;/li&gt;
&lt;li&gt;Does it have reverse dependencies?  &lt;em&gt;i.e., do others trust it enough to build on it?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Is the package  actively maintained?

&lt;ul&gt;
&lt;li&gt;How many people contribute to the package?&lt;/li&gt;
&lt;li&gt;Are there regular updates?&lt;/li&gt;
&lt;li&gt;Are there regular releases?&lt;/li&gt;
&lt;li&gt;What is happening in the issue tracker, e.g., when was the most recent issue closed?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Does the package have unit tests?  What kind?&lt;/li&gt;
&lt;li&gt;Does it use continuous integration (CI)?&lt;/li&gt;
&lt;li&gt;Does it have a vignette?&lt;/li&gt;
&lt;li&gt;Does the documentation include examples?&lt;/li&gt;
&lt;li&gt;Is the package discussed on StackOverflow?

&lt;ul&gt;
&lt;li&gt;How often is it mentioned in questions?&lt;/li&gt;
&lt;li&gt;In answers?&lt;/li&gt;
&lt;li&gt;What packages are commonly co-mentioned with it?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;user-package-review&#34;&gt;User package review&lt;/h3&gt;

&lt;p&gt;Our discussions informed a list of things people commonly look for when they install a package and explore it manually:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is it easy to use?&lt;/li&gt;
&lt;li&gt;Is it modular?&lt;/li&gt;
&lt;li&gt;Is it “tidy”?&lt;/li&gt;
&lt;li&gt;Does it have clean syntax?&lt;/li&gt;
&lt;li&gt;Does it have a coherent theory?&lt;/li&gt;
&lt;li&gt;Is it not trying to do too much - but doing its small thing well?&lt;/li&gt;
&lt;li&gt;Does it have clear, concise documentation?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that, we got to work!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/DA7g9BZVwAAsPL2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;introducing-packagemetrics&#34;&gt;Introducing: packagemetrics&lt;/h2&gt;

&lt;p&gt;With Erin collecting information from CRAN, Becca and Sam from GitHub, Lori and Hannah from StackOverflow and William diving into table-making packages, we managed to produce an R package. Working title: &lt;a href=&#34;https://github.com/ropenscilabs/packagemetrics&#34;&gt;&lt;strong&gt;packagemetrics&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our package can be installed from GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devtools::install_github(&amp;quot;ropenscilabs/packagemetrics&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since our case study is table-making packages, we provide a collection of those package names in a vector named &lt;code&gt;table_packages&lt;/code&gt;. With that we can collect metrics for each package using &lt;code&gt;package_list_metrics()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(packagemetrics)
pkg_df &amp;lt;- package_list_metrics(table_packages)
str(pkg_df)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This yields a data.frame with all the metrics:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;data.frame&#39;:	27 obs. of  18 variables:
 $ package           : chr  &amp;quot;arsenal&amp;quot; &amp;quot;ascii&amp;quot; &amp;quot;compareGroups&amp;quot; &amp;quot;condformat&amp;quot; ...
 $ published         : chr  &amp;quot;2017-03-10&amp;quot; &amp;quot;2011-09-29&amp;quot; &amp;quot;2017-03-14&amp;quot; &amp;quot;2017-05-18&amp;quot; ...
 $ title             : chr  &amp;quot;An Arsenal of &#39;R&#39; Functions for Large-Scale Statistical\nSummaries&amp;quot; &amp;quot;Export R objects to several markup languages&amp;quot; &amp;quot;Descriptive Analysis by Groups&amp;quot; &amp;quot;Conditional Formatting in Data Frames&amp;quot; ...
 $ depends_count     : int  2 3 5 NA 1 NA 3 1 1 1 ...
 $ suggests_count    : int  10 6 7 4 3 4 1 3 4 5 ...
 $ tidyverse_happy   : logi  TRUE NA FALSE TRUE TRUE TRUE ...
 $ has_vignette_build: logi  FALSE TRUE FALSE FALSE FALSE FALSE ...
 $ has_tests         : logi  TRUE FALSE FALSE TRUE FALSE FALSE ...
 $ reverse_count     : num  0 1 0 0 0 31 0 0 2 7 ...
 $ dl_last_month     : num  236 1806 929 1252 494 ...
 $ ci                : chr  &amp;quot;Not on GitHub&amp;quot; &amp;quot;NONE&amp;quot; &amp;quot;Not on GitHub&amp;quot; &amp;quot;Travis&amp;quot; ...
 $ test_coverage     : chr  &amp;quot;Not on GitHub&amp;quot; &amp;quot;NONE&amp;quot; &amp;quot;Not on GitHub&amp;quot; &amp;quot;CodeCov&amp;quot; ...
 $ forks             : num  NA 4 NA 2 2 74 1 6 41 NA ...
 $ stars             : num  NA 19 NA 4 26 206 7 30 299 NA ...
 $ watchers          : num  NA 3 NA 4 4 45 2 2 37 NA ...
 $ last_commit       : num  NA NA NA 0.567 0.767 ...
 $ last_issue_closed : num  NA 64.8 NA 0.567 0.767 ...
 $ contributors      : num  NA 0 NA 1 2 6 3 0 6 NA ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This data about table-related packages can be turned tranformed with the &lt;strong&gt;formattable&lt;/strong&gt; package (&lt;em&gt;so meta!&lt;/em&gt;) into a beautiful table of package metrics:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/reQfEOo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As to the case study in expert user review: the start of a review of a selection of table-making packages can be found &lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/ropenscilabs/packagemetrics/blob/master/inst/doc/tableGallery.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-small-step-on-a-long-journey&#34;&gt;A small step on a long journey&lt;/h2&gt;

&lt;p&gt;At this stage of a project, there&amp;rsquo;s always a list of fixes and enhancements to make.  This project is no different, especially given that this is such a broad topic!&lt;/p&gt;

&lt;p&gt;The metrics currently reflect a first stab at priorities for us and other unconf participants - there is room for improvement. For instance, we&amp;rsquo;d like to gather more metrics to shape a comprehensive snapshot of various categories (e.g., level of engagement, newness, influence, &amp;hellip;). Another idea discussed prior to the unconf was that of attempting to capture (&lt;em&gt;an indication of&lt;/em&gt;) the functionality offered by a package via keyword search through the package&amp;rsquo;s DESCRIPTION, vignettes and help pages.&lt;/p&gt;

&lt;p&gt;We welcome suggestions and inputs via the &lt;a href=&#34;https://github.com/ropenscilabs/packagemetrics/issues&#34;&gt;issue tracker&lt;/a&gt;! This goes both for the calculated metrics and the package review process illustrated in the vignette.&lt;/p&gt;

&lt;p&gt;Based on ideas generated at the unconf, the packagemetrics approach may have the potential to be useful in various places:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Noam Ross &lt;a href=&#34;https://github.com/ropenscilabs/packagemetrics/issues/18&#34;&gt;suggested&lt;/a&gt; using packagemetrics as part of the required review of related packages during &lt;a href=&#34;https://github.com/ropensci/onboarding&#34;&gt;rOpenSci&amp;rsquo;s onboarding process&lt;/a&gt; for new packages.&lt;/li&gt;
&lt;li&gt;CRAN&amp;rsquo;s TaskViews are currently very broad.  E.g., there are dozens of packages for working on tables in R, but table creation constitutes only a small aspect of the &lt;a href=&#34;https://cran.r-project.org/web/views/ReproducibleResearch.html&#34;&gt;Reproducible Research Task View&lt;/a&gt; on CRAN. Guidance on how to do package reviews might be useful in this context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As to the broader problem of deciding what package to use: it remains both unsolved and worthy of future attention.  Those interested in this challenge should follow along at useR! 2017 in Brussels later this summer, where the session &lt;a href=&#34;https://user2017.brussels/news/2017/navigating-the-r-package-universe&#34;&gt;&amp;ldquo;Navigating the R Package Universe&amp;rdquo;&lt;/a&gt; looks particularly relevant.&lt;/p&gt;

&lt;p&gt;We look forward to community discussion on this, be it at useR! or elsewhere.  Thank you to rOpenSci and everyone involved for making #runconf17 such a wonderful event!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Hey! You there! You are welcome here</title>
      <link>https://ropensci.org/blog/2017/06/23/community/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/06/23/community/</guid>
      <description>
        
        

&lt;p&gt;What&amp;rsquo;s that? You&amp;rsquo;ve heard of R? You use R? You develop in R? You know someone else who&amp;rsquo;s mentioned R? Oh, you&amp;rsquo;re breathing? Well, in that case, welcome! Come join the R community!&lt;/p&gt;

&lt;p&gt;We recently had a group discussion at &lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt;&amp;rsquo;s  &lt;a href=&#34;https://twitter.com/search?q=%23runconf17&amp;amp;lang=en&#34;&gt;#runconf17&lt;/a&gt; in Los Angeles, CA about the R community. I initially opened the &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/63&#34;&gt;issue on GitHub&lt;/a&gt;. After this issue was well-received (check out the emoji-love below!), we realized people were keen to talk about this and decided to have an optional and informal discussion in person.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ShanEllis.github.io/images/github_feedback.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To get the discussion started I posed two general questions and then just let discussion fly. I prompted the group with the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The R community is such an asset. How do we make sure that everyone knows about it and feels both welcome and comfortable?&lt;/li&gt;
&lt;li&gt;What are other languages/communities doing that we&amp;rsquo;re not? How could we adopt their good ideas?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The discussion focused primarily on the first point, and I have to say the group&amp;rsquo;s answers&amp;hellip;were awesome. Take a look!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ShanEllis.github.io/images/ropensci-unconf17-community-nistara-randawa.jpg&#34; alt=&#34;Photo (c) Nistara Randawa&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-to-find-the-community&#34;&gt;How to find the community&lt;/h2&gt;

&lt;p&gt;Everyone seemed to be in agreement that (1) the community is one of R&amp;rsquo;s biggest strengths and (2) a lot within the R community happens on twitter. During discussion, &lt;a href=&#34;https://twitter.com/juliesquid&#34;&gt;Julia Lowndes&lt;/a&gt; mentioned she joined twitter because she heard that people asked and answered questions about R there, and others echoed this sentiment. Simply, the R community is &lt;em&gt;not&lt;/em&gt; just for &amp;lsquo;power users&amp;rsquo; or developers. It&amp;rsquo;s a place for users and people interested in learning more about R. So, if you want to get involved in the community and you are not already, consider &lt;a href=&#34;https://support.twitter.com/articles/100990&#34;&gt;getting a twitter account&lt;/a&gt; and check out the &lt;a href=&#34;https://twitter.com/search?q=%23rstats&#34;&gt;#rstats hashtag&lt;/a&gt;. We expect you&amp;rsquo;ll be surprised by how responsive, welcoming, and inclusive the community is.&lt;/p&gt;

&lt;p&gt;In addition to twitter, there are &lt;em&gt;many&lt;/em&gt; resources available within the R community where you can learn more about all things R. Below is a &lt;em&gt;brief&lt;/em&gt; list of resources mentioned during our discussion that had helped us feel more included in the community. Feel free to suggest more!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://rladies.org/&#34;&gt;R-Ladies&lt;/a&gt;&lt;/strong&gt; - - a world-wide organization focused on promoting gender diversity within the R community, with more than 30 local chapters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local R meetup groups&lt;/strong&gt; - a google search may show that there&amp;rsquo;s one in your area! If not, maybe consider starting one! Face-to-face meet-ups for users of all levels are incredibly valuable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://rweekly.org/&#34;&gt;Rweekly&lt;/a&gt;&lt;/strong&gt; - an incredible weekly recap of all things R&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.r-bloggers.com/&#34;&gt;R-bloggers&lt;/a&gt;&lt;/strong&gt; - an awesome resource to find posts from many different bloggers using R&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://www.datacarpentry.org/&#34;&gt;DataCarpentry&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://software-carpentry.org/&#34;&gt;Software Carpentry&lt;/a&gt;&lt;/strong&gt;  - a resource of openly available lessons that promote and model reproducible research&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/strong&gt; - chances are your R question has already been answered here (with additional resources for people looking for jobs)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;improving-inclusivity&#34;&gt;Improving inclusivity&lt;/h2&gt;

&lt;p&gt;No community is perfect, and being willing to consider our shortcomings and think about ways in which we can improve is so important. The group came up with a lot of great suggestions, including many I had not previously thought of personally.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/alice_data&#34;&gt;Alice Daish&lt;/a&gt; did a great job capturing the conversation and allowing for more discussion online:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Join the lunchtime &lt;a href=&#34;https://twitter.com/hashtag/runconf17?src=hash&#34;&gt;#runconf17&lt;/a&gt; discussion about the &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&#34;&gt;#rstats&lt;/a&gt; communities - what do we need to do to improve? &lt;a href=&#34;https://t.co/ztbXxNfqU7&#34;&gt;pic.twitter.com/ztbXxNfqU7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alice Data (@alice_data) &lt;a href=&#34;https://twitter.com/alice_data/status/868198529134510080&#34;&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;To summarize here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take the time to welcome new people. A simple hello can go a long way!&lt;/li&gt;
&lt;li&gt;Reach out to people we may be missing: high school students, people of different backgrounds, individuals in other countries, etc.&lt;/li&gt;
&lt;li&gt;Avoid the word &amp;ldquo;just&amp;rdquo; when helping others. &amp;ldquo;Here&amp;rsquo;s one way of thinking about that&amp;rdquo; &amp;gt;&amp;gt; &amp;ldquo;Just do it this way&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Include people whose primary language is not English in the conversation! Consider tweeting &amp;amp; retweeting in your own language to extend the community. This helps include others and spread knowledge!&lt;/li&gt;
&lt;li&gt;Be involved in open projects. If you chose to turn down an opportunity that is not open, do your best to explain why being involved in open projects is important to you.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/revodavid&#34;&gt;David Smith&lt;/a&gt; &lt;a href=&#34;https://twitter.com/revodavid/status/874687595120406528&#34;&gt;recently suggested&lt;/a&gt; getting &lt;a href=&#34;https://twitter.com/hashtag/rbeginners?src=hash&#34;&gt;#rbeginners&lt;/a&gt; to take off as a hashtag - a great way to direct newer members&amp;rsquo; attention to tips and resources!&lt;/li&gt;
&lt;li&gt;Be conscious of your tone. When in doubt, check out &lt;a href=&#34;http://politeness.cornell.edu/&#34;&gt;tone checker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you see someone being belittling in their answers, consider reaching out to the person who is behaving inappropriately. There was some agreement that reaching out privately may be more effective as a first approach than calling them out in public.Strong arguments against that strategy and in favor of a public response from &lt;a href=&#34;https://twitter.com/kopshtik&#34;&gt;Oliver Keyes&lt;/a&gt; can be found &lt;a href=&#34;https://ironholds.org/not-about-image/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Also, it&amp;rsquo;s often easier to defend on behalf of someone else than it is on one&amp;rsquo;s own behalf. Keep that in mind if you see negative things happening, and consider defending on someone else&amp;rsquo;s behalf.&lt;/li&gt;
&lt;li&gt;Having a code of conduct is important. &lt;a href=&#34;http://unconf.ropensci.org/coc.html&#34;&gt;rOpenSci has one&lt;/a&gt;, and we like it a whole lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, when times get tough, look to your community. Get out there. Be active. Communicate with one another. &lt;a href=&#34;https://twitter.com/timothy_phan&#34;&gt;Tim Phan&lt;/a&gt; brilliantly summarized the importance of action and community in this thread:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Dear &lt;a href=&#34;https://twitter.com/hashtag/runconf17?src=hash&#34;&gt;#runconf17&lt;/a&gt;, bye for now!Thanks to the organizers for all you do. Here&amp;#39;s an incoming tweet storm on R, community, and open science 1/6 &lt;a href=&#34;https://t.co/7DpkceOUC8&#34;&gt;pic.twitter.com/7DpkceOUC8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Timothy Phan (@timothy_phan) &lt;a href=&#34;https://twitter.com/timothy_phan/status/868231965266325504&#34;&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&#34;thank-you&#34;&gt;Thank you&lt;/h2&gt;

&lt;p&gt;Thank you to all who participated in this conversation and all who contribute to the community to make R such a fun language in which to work and develop! Thank you to rOpenSci for hosting and giving us all the opportunity to get to know one another and work together. I&amp;rsquo;m excited to see where this community goes moving forward!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Tackling the Research Compendium at runconf17</title>
      <link>https://ropensci.org/blog/2017/06/20/checkers/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/06/20/checkers/</guid>
      <description>
        
        

&lt;p&gt;Two years ago at &lt;a href=&#34;https://twitter.com/hashtag/runconf15&#34;&gt;#runconf15&lt;/a&gt;, there was a great discussion about best practices for organizing R-based analysis projects that yielded a &lt;a href=&#34;https://github.com/ropensci/rrrpkg&#34;&gt;nice guidance document&lt;/a&gt; describing &lt;em&gt;research compendia&lt;/em&gt;. Compendia, as we described them, were minimal products of reproducible research, using parts of R package structure to organize the inputs, analyses, and outputs of research projects.&lt;/p&gt;

&lt;p&gt;Since then, we&amp;rsquo;ve seen more examples and models of research compendia emerge (the organization of such projects is &lt;a href=&#34;https://discuss.ropensci.org/t/resources-on-project-directory-organization/340&#34;&gt;something of an obsession&lt;/a&gt; for some of the community). In parallel, there&amp;rsquo;s been much progress on a number of fronts with R &lt;em&gt;packages&lt;/em&gt;: rOpenSci&amp;rsquo;s &lt;a href=&#34;https://github.com/ropensci/onboarding&#34;&gt;package review process&lt;/a&gt; has expanded and we&amp;rsquo;ve worked out many kinks. Infrastructure for automated testing of package code has been developed and field tested. So at &lt;a href=&#34;unconf17.ropensci.org&#34;&gt;#runconf17&lt;/a&gt;, we wanted to see how much of this progress in review, testing, and automation could apply to research compendia.&lt;/p&gt;

&lt;p&gt;It turns out there&amp;rsquo;s a &lt;em&gt;lot&lt;/em&gt; to do here, and a lot of interest! We put up a proposal as a &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/5&#34;&gt;GitHub issue&lt;/a&gt;; before the unconf even began, the thread had over 50 posts and the discussion had yielded two design documents led by Hadley Wickham on &lt;a href=&#34;https://docs.google.com/document/d/1LzZKS44y4OEJa4Azg5reGToNAZL0e0HSUwxamNY7E-Y/edit&#34;&gt;research compendium organization&lt;/a&gt; and &lt;a href=&#34;https://docs.google.com/document/d/1avYAqjTS7zSZn7JAAOZhFPkhkPvYwaPVrSpo31Cu0Yc/edit#&#34;&gt;automated build systems&lt;/a&gt;. There were easily four or five projects wrapped up in the proposal.&lt;/p&gt;

&lt;p&gt;The thread also revealed many schools of thought. As &lt;a href=&#34;https://twitter.com/nj_tierney&#34;&gt;Nick&lt;/a&gt; put it, &amp;ldquo;The problem with &lt;a href=&#34;https://www.rstudio.com/resources/videos/opinionated-analysis-development/&#34;&gt;opinionated analysis development&lt;/a&gt; is that everyone has an opinion.&amp;rdquo; We never reached consensus on basic issues like directory structure and build systems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://imgur.com/RpjyfL8.jpeg&#34; alt=&#34;Wading our way through a thorny bramble of opinions (photo: Alice Daish)&#34; /&gt;
&lt;em&gt;Wading our way through a thorny bramble of opinions (photo: Alice Daish)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the face of a beast of a topic, and so many unresolved decisions, we decided to tackle a modest slice - a guide for compendium review, and a first pass at a package for automated checks of various best practices.&lt;/p&gt;

&lt;h3 id=&#34;reviewing-a-research-compendium&#34;&gt;Reviewing a research compendium&lt;/h3&gt;

&lt;p&gt;How does one do peer review for a research compendium in the face of so much heterogeneity in types and styles of analysis?  We spent the better part of our first day brainstorming everything that one might review, from the meta-topics (&amp;ldquo;Is there a clear question?&amp;rdquo;) to  minutiae (&amp;ldquo;Are &lt;code&gt;library()&lt;/code&gt; calls at the top of the script?&amp;ldquo;), and mapping these out on an ever more data-dense whiteboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://imgur.com/vb4E3JV.jpeg&#34; alt=&#34;Nick, Jennifer and Molly discussing analysis best practices (photo: Alice Daish)&#34; /&gt;
 &lt;em&gt;Nick, Jennifer, Molly and Alice discussing analysis best practices (photo: Alice Daish)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dIT1sjK.jpg&#34; alt=&#34;The team prioritizing data analysis workflow best practice into tiers (photo: Nistara Randhawa)&#34; /&gt;
 &lt;em&gt;The team prioritizing data analysis workflow best practice into tiers (photo: Nistara Randhawa)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://imgur.com/8klgK7Q.jpeg&#34; alt=&#34;With our 7th team member, Wy T. Board (photo: Alice Daish)&#34; /&gt;
&lt;em&gt;With our 7th team member, Wy T. Board (photo: Alice Daish)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These review topics made their way into a &lt;a href=&#34;https://docs.google.com/document/d/1OYcWJUk-MiM2C1TIHB1Rn6rXoF5fHwRX-7_C12Blx8g/edit#heading=h.dyoxrtoo15mm&#34;&gt;Google doc&lt;/a&gt; which will form the basis of a review guide along the lines of rOpenSci&amp;rsquo;s &lt;a href=&#34;https://github.com/ropensci/onboarding/#-useful-documents-in-this-repository&#34;&gt;package review guides&lt;/a&gt;.  One major organizing dimension we hit upon was &amp;ldquo;Tiers&amp;rdquo; - as the number of best practices can be overwhelming, it is better to prioritize them so that users have a way of advancing through escalating levels of detail.  Another was &amp;ldquo;automatability,&amp;rdquo; which is key to the other half of our work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/lWpcEfb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;checkers-r-cmd-check-for-your-data-analysis&#34;&gt;&lt;strong&gt;checkers&lt;/strong&gt;: R CMD check for your data analysis&lt;/h3&gt;

&lt;p&gt;One of the lessons of the rOpenSci package review process has been that reviews work better when we let reviewers focus on the tasks that humans are best at, and find ways to automate tedious or tiny tasks. So for the second aim of our project, we built a package to run the automatable components of  review and create reports for analysts and reviewers.  The package, &lt;strong&gt;&lt;a href=&#34;https://github.com/ropenscilabs/checkers&#34;&gt;checkers&lt;/a&gt;&lt;/strong&gt;, is meant to be, as Hadley coined it, &amp;ldquo;&lt;code&gt;R CMD check&lt;/code&gt; for your data analysis.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;checkers&lt;/strong&gt; scans the project directory and delivers advice on how to improve project code, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; checkers::gp_check()
─────────────────────────────────────────────────────────────────────
It is good practice to

  ✖ Place your project under version control. You are using
    neither git nor svn. See http://happygitwithr.com/ for more
    info
  ✖ Use preferred packages. xml2 is preferred to XML.
──────────────────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One area we had to tackle was the need for both &lt;em&gt;opinionated defaults&lt;/em&gt; and &lt;em&gt;configurability&lt;/em&gt;.  So we built in the ability for individuals or teams to select or define their own best practices in a shared YAML configuration file.&lt;/p&gt;

&lt;h3 id=&#34;stone-soup-development-at-the-unconf&#34;&gt;Stone soup development at the unconf&lt;/h3&gt;

&lt;p&gt;The review guide and &lt;strong&gt;checkers&lt;/strong&gt; are works in progress, but both made great leaps forward in two days thanks to the tremendous catalyzing environment of the unconf.  While our team of six only formed the morning of the first day, the &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/5&#34;&gt;pre-unconf discussion&lt;/a&gt; meant that many more people from the community shaped contours of the project.&lt;/p&gt;

&lt;p&gt;Also, one of the great things about the unconf is that so many experienced developers are on hand to chip in with their areas of expertise. Hadley Wickham joined in to brainstorm some of the initial best practices to include in our guide. Later, we decided to base our checks system on Gábor Csárdi&amp;rsquo;s &lt;strong&gt;&lt;a href=&#34;https://github.com/MangoTheCat/goodpractice/&#34;&gt;goodpractice&lt;/a&gt;&lt;/strong&gt;, and Gábor worked with us to build a flexible extension system into that package. Jim Hester was on hand to answer questions about &lt;strong&gt;&lt;a href=&#34;https://github.com/jimhester/lintr/&#34;&gt;lintr&lt;/a&gt;&lt;/strong&gt; internals, and we&amp;rsquo;ll be sending some changes upstream to that as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/uWYKR1e.jpg&#34; alt=&#34;Laura and Gábor practicing goodpractices (photo: Nistara Randhawa)&#34; /&gt;
&lt;em&gt;Laura and Gábor practicing goodpractices (photo: Nistara Randhawa)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://imgur.com/Dw0yTwi.jpeg&#34; alt=&#34;Team reviewing framework and package development examples (photo: Alice Daish)&#34; /&gt;
&lt;em&gt;Team reviewing framework and package development examples (photo: Alice Daish)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re excited about the potential for this project, and just as excited about the potential of what else we&amp;rsquo;ll make with our new friends and collaborators. Thanks to rOpenSci and everyone who made #runconf17 such a tremendously productive and fun event!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Unconf projects 5: mwparser, Gargle, arresteddev</title>
      <link>https://ropensci.org/blog/2017/06/09/unconf_recap_5/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/06/09/unconf_recap_5/</guid>
      <description>
        
        

&lt;p&gt;And finally, we end our series of &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/02/unconf2017&#34;&gt;unconf&lt;/a&gt; project summaries (&lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/05/unconf_recap_1&#34;&gt;day 1&lt;/a&gt;, &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/06/unconf_recap_2&#34;&gt;day 2&lt;/a&gt;, &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/07/unconf_projects_3&#34;&gt;day 3&lt;/a&gt;, &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/08/unconf_recap_4&#34;&gt;day 4&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;mwparser&#34;&gt;&lt;code&gt;mwparser&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  Wikimarkup is the language used on Wikipedia and similar projects, and as such contains a lot of valuable data both for scientists studying collaborative systems and people studying things documented on or in Wikipedia. mwparser parses wikimarkup, allowing a user to filter down to specific types of tags such as links or templates, and then extract components of those tags.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; Oliver Keyes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/Ironholds/mwparser&#34;&gt;https://github.com/Ironholds/mwparser&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;gargle&#34;&gt;&lt;code&gt;Gargle&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; Gargle is a library that provides authentication for Google APIs but without all the agonizing pain. The package provides helper functions (for &lt;code&gt;httr&lt;/code&gt;) to support automatic retries, paging, and progress bars for API calls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; Craig Citro&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/r-lib/gargle&#34;&gt;https://github.com/r-lib/gargle&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;arresteddev&#34;&gt;&lt;code&gt;arresteddev&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; This package is designed to help troubleshoot errors that come up during package and analysis development. As of now, the package helps track tracebacks and errors but more functionality is planned for the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; Lucy D&amp;rsquo;Agostino McGowan, Karthik Ram, Miles McBain&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/arresteddev&#34;&gt;https://github.com/ropenscilabs/arresteddev&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Unconf projects 4: cityquant, notary, packagemetrics, pegax</title>
      <link>https://ropensci.org/blog/2017/06/08/unconf_recap_4/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/06/08/unconf_recap_4/</guid>
      <description>
        
        

&lt;p&gt;Continuing our series of blog posts (&lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/05/unconf_recap_1&#34;&gt;day 1&lt;/a&gt;, &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/06/unconf_recap_2&#34;&gt;day 2&lt;/a&gt;, &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/07/unconf_projects_3&#34;&gt;day 3&lt;/a&gt;) this week about &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/02/unconf2017&#34;&gt;unconf 17&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cityquant&#34;&gt;&lt;code&gt;cityquant&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  The goal with the &lt;code&gt;cityquant&lt;/code&gt; project was to build a digital dashboard for sustainable cities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sustainsb.github.io/images/scores_flower-plot_sbcounty.png&#34; alt=&#34;sustain&#34; /&gt;&lt;/p&gt;

&lt;p&gt;They also had a &amp;ldquo;spin-off&amp;rdquo; project called &lt;a href=&#34;https://github.com/maczokni/selfquant&#34;&gt;selfquant&lt;/a&gt; to get data from a quantified self google sheets template to keep track of weekly performance in various categories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; &lt;a href=&#34;https://github.com/maczokni&#34;&gt;Reka Solymosi&lt;/a&gt;, &lt;a href=&#34;https://github.com/bbest&#34;&gt;Ben Best&lt;/a&gt;, &lt;a href=&#34;https://github.com/chursaner&#34;&gt;Chelsea Ursaner&lt;/a&gt;, &lt;a href=&#34;https://github.com/timphan&#34;&gt;Tim Phan&lt;/a&gt;, &lt;a href=&#34;https://github.com/jasdumas&#34;&gt;Jasmine Dumas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/cityquant&#34;&gt;https://github.com/ropenscilabs/cityquant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;notary&#34;&gt;&lt;code&gt;notary&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; &lt;code&gt;notary&lt;/code&gt; is actually two things:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;notary&lt;/code&gt;: An R package for signing and verification of R packages. It has functions for installing and verifying packages, validating GitHub releases, sourcing files with verification, and more.&lt;/p&gt;

&lt;!-- ![notary](/assets/blog-images/2017-06-08-unconf_recap_4/notarylogo.png) --&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-08-unconf_recap_4/notarylogo.png&#34; width=&#34;300&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;r-security-practices&lt;/code&gt;: A &lt;a href=&#34;https://ropenscilabs.github.io/r-security-practices/index.html&#34;&gt;bookdown book&lt;/a&gt; targeting users, developers, and admins on R security best practices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-08-unconf_recap_4/rsecuritybook.png&#34; alt=&#34;securitybook&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; &lt;a href=&#34;https://github.com/stephlocke&#34;&gt;Stephanie Locke&lt;/a&gt;, &lt;a href=&#34;https://github.com/Ironholds&#34;&gt;Oliver Keyes&lt;/a&gt;, &lt;a href=&#34;https://github.com/richfitz&#34;&gt;Rich FitzJohn&lt;/a&gt;, &lt;a href=&#34;https://github.com/hrbrmstr&#34;&gt;Bob Rudis&lt;/a&gt;, &lt;a href=&#34;https://github.com/jeroen&#34;&gt;Joroen Ooms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/notary&#34;&gt;https://github.com/ropenscilabs/notary&lt;/a&gt; / &lt;a href=&#34;https://github.com/ropenscilabs/r-security-practices&#34;&gt;https://github.com/ropenscilabs/r-security-practices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;packagemetrics&#34;&gt;&lt;code&gt;packagemetrics&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  &lt;code&gt;packagemetrics&lt;/code&gt; is a package for helping you choose which package to use. Their tool collects metrics including CRAN downloads, GitHub stars, whether it&amp;rsquo;s tidyverse compatible, whether it has tests and vignettes, number of contributors, and more!&lt;/p&gt;

&lt;p&gt;This project combined two ideas from our brainstorming stage: &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/78&#34;&gt;Avoiding redundant / overlapping packages&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/69&#34;&gt;A framework for reproducible tables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-08-unconf_recap_4/pkgmetrics.png&#34; alt=&#34;packagemetrics&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; &lt;a href=&#34;https://github.com/eringrand&#34;&gt;Erin Grand&lt;/a&gt;, &lt;a href=&#34;https://github.com/sfirke&#34;&gt;Sam Firke&lt;/a&gt;, &lt;a href=&#34;https://github.com/hfrick&#34;&gt;Hannah Frick&lt;/a&gt;, &lt;a href=&#34;https://github.com/bzkrouse&#34;&gt;Becca Krouse&lt;/a&gt;, &lt;a href=&#34;https://github.com/lshep&#34;&gt;Lori Shepherd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/packagemetrics&#34;&gt;https://github.com/ropenscilabs/packagemetrics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;pegax&#34;&gt;&lt;code&gt;pegax&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  &lt;code&gt;pegax&lt;/code&gt; is a very alpha client for parsing taxonomic names. Taxonomic names are things such as &lt;em&gt;Homo sapiens&lt;/em&gt; (human beings) &lt;a href=&#34;https://species.wikimedia.org/wiki/Homo_sapiens&#34;&gt;wikispecies&lt;/a&gt;, or &lt;em&gt;Ursus americanus&lt;/em&gt; (american black bear) &lt;a href=&#34;https://species.wikimedia.org/wiki/Ursus_americanus&#34;&gt;wikispecies&lt;/a&gt;, or &lt;em&gt;Balaenoptera musculus&lt;/em&gt; (blue whale) &lt;a href=&#34;https://species.wikimedia.org/wiki/Balaenoptera_musculus&#34;&gt;wikispecies&lt;/a&gt;. Taxonomic names can be hard to parse - and thus something called &lt;a href=&#34;https://en.wikipedia.org/wiki/Parsing_expression_grammar&#34;&gt;Parsing Expression Grammar (PEG)&lt;/a&gt; can be employed to help. We were lucky that Oliver Keyes just started an R package for PEGs in R called &lt;a href=&#34;https://github.com/Ironholds/piton&#34;&gt;piton&lt;/a&gt; - which is now used in &lt;code&gt;pegax&lt;/code&gt; to parse taxonomic names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-08-unconf_recap_4/pegax.png&#34; alt=&#34;plot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sckott&#34;&gt;Scott Chamberlain&lt;/a&gt; (with help from &lt;a href=&#34;https://github.com/kellobri&#34;&gt;Oliver Keyes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/pegax&#34;&gt;https://github.com/ropenscilabs/pegax&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Unconf projects 3: available, miner, rcheatsheet, ponyexpress</title>
      <link>https://ropensci.org/blog/2017/06/07/unconf_projects_3/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/06/07/unconf_projects_3/</guid>
      <description>
        
        

&lt;p&gt;Continuing our series of blog posts (&lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/05/unconf_recap_1&#34;&gt;day 1&lt;/a&gt;, &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/06/unconf_recap_2&#34;&gt;day 2&lt;/a&gt;) this week about &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/02/unconf2017&#34;&gt;unconf 17&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;available&#34;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  Ever have trouble naming your software package? Find a great name and realize it&amp;rsquo;s already taken on CRAN, or further along in development on GitHub? The &lt;code&gt;available&lt;/code&gt; package makes it easy to check for valid, available names, and also checks various sources for any unintended meanings. The package can also suggest names based on the description and title of your package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/k6J5hQr.png&#34; alt=&#34;available Package&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; Jim Hester, Carl Ganz, Gábor Csárdi, Molly Lewis, Rachel Tatman&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/available&#34;&gt;https://github.com/ropenscilabs/available&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;miner&#34;&gt;&lt;code&gt;miner&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;
The &lt;code&gt;miner&lt;/code&gt; package provides a nice interface to the Minecraft API and allows users to manipulate the Minecraft world from a few simple functions. The package is designed with the intention of encouraging new users to learn R by writing scripts to automate activities inside Minecraft.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zggCAYAfjXE&#34; title=&#34;ggplot2 with Minecraft&#34;&gt;&lt;img src=&#34;https://i.imgur.com/G0PComZ.png&#34; alt=&#34;Inserting ggplots into MineCraft&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; Brooke Anderson, Karl Broman, Gergely Daróczi, Mario Inchiosa, David Smith, Ali Zaidi&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/EBVkz7G.jpg&#34; alt=&#34;miner team&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ROpenSciLabs/miner&#34;&gt;https://github.com/ROpenSciLabs/miner&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;rcheatsheet&#34;&gt;&lt;code&gt;rcheatsheet&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  RStudio pioneered the idea of having beautiful cheatsheets for R packages. Creating them however, is quite time consuming and requires effort to maintain as packages evolve.  The &lt;code&gt;rcheatsheet&lt;/code&gt; package makes it easy for any package author to quickly generate beautiful cheatsheets from a simple table stored on a Google sheet or a local table. This short slide deck provides a &lt;a href=&#34;https://gitpitch.com/ramnathv/rcheatsheet/master?grs=github&amp;amp;t=moon&#34;&gt;quick overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JUC3Ljh.gif&#34; alt=&#34;R cheat sheet&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; Diana Ly, Ramnath Vaidyanathan&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/rcheatsheet&#34;&gt;https://github.com/ropenscilabs/rcheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ponyexpress&#34;&gt;&lt;code&gt;ponyexpress&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;
Need to write custom emails to a large group of people? &lt;code&gt;ponyexpress&lt;/code&gt; makes it possible to create custom emails based on various fields of a data frame (final grades for a class, abstract acceptances for a workshop, project assignments for a hackathon, or just about anything else) and quickly sends them from your Gmail account.&lt;/p&gt;

&lt;p&gt;The package also provides custom template to make it easy to write rich html emails.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; Karthik Ram, Lucy D&amp;rsquo;Agostino McGowan&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/ponyexpress&#34;&gt;https://github.com/ropenscilabs/ponyexpress&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Unconf projects 2: checkers, gramr, data-packages, exploRingJSON</title>
      <link>https://ropensci.org/blog/2017/06/06/unconf_recap_2/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/06/06/unconf_recap_2/</guid>
      <description>
        
        

&lt;p&gt;Following up on Stefanie&amp;rsquo;s recap of &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/02/unconf2017&#34;&gt;unconf 17&lt;/a&gt;, we are following up this entire week with summaries of projects developed at the event. We plan to highlight 4-5 projects each day, with detailed posts from a handful of teams to follow.&lt;/p&gt;

&lt;h2 id=&#34;checkers&#34;&gt;&lt;code&gt;checkers&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  &lt;code&gt;checkers&lt;/code&gt; is a framework for reviewing analysis projects. It provides automated checks for best practices, using extensions on the goodpractice package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-06-unconf_recap_2/checkers_version_control.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In addition, checkers includes a &lt;a href=&#34;https://docs.google.com/document/d/1OYcWJUk-MiM2C1TIHB1Rn6rXoF5fHwRX-7_C12Blx8g/edit#&#34;&gt;descriptive guide for best practices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-06-unconf_recap_2/compendium.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ldecicco-USGS&#34;&gt;Laura DeCicco&lt;/a&gt;, &lt;a href=&#34;https://github.com/noamross&#34;&gt;Noam Ross&lt;/a&gt;, &lt;a href=&#34;https://github.com/adaish&#34;&gt;Alice Daish&lt;/a&gt;, &lt;a href=&#34;https://github.com/mllewis&#34;&gt;Molly Lewis&lt;/a&gt;, &lt;a href=&#34;https://github.com/nistara&#34;&gt;Nistara Randhawa&lt;/a&gt;, &lt;a href=&#34;https://github.com/jenniferthompson&#34;&gt;Jennifer Thompson&lt;/a&gt;, &lt;a href=&#34;https://github.com/njtierney&#34;&gt;Nicholas Tierney&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/checkers&#34;&gt;https://github.com/ropenscilabs/checkers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;gramr&#34;&gt;&lt;code&gt;gramr&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; &lt;code&gt;gramr&lt;/code&gt; is a package that wraps the command line tool &lt;a href=&#34;https://github.com/btford/write-good&#34;&gt;write-good&lt;/a&gt; to provide grammar checking functions for Rmd or md documents. It can be used as an RStudio Addin, or from the console or command line by supplying an Rmd or md filename.&lt;/p&gt;

&lt;p&gt;p.s. Two of the three (Ben/Gordon) were remote participants.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-06-unconf_recap_2/gramr.png&#34; alt=&#34;plot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; &lt;a href=&#34;https://github.com/jasdumas&#34;&gt;Jasmine Dumas&lt;/a&gt;, &lt;a href=&#34;https://github.com/benmarwick&#34;&gt;Ben Marwick&lt;/a&gt;, &lt;a href=&#34;https://github.com/GShotwell&#34;&gt;Gordon Shotwell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/gramr&#34;&gt;https://github.com/ropenscilabs/gramr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;data-packages&#34;&gt;&lt;code&gt;data-packages&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  The &lt;code&gt;data-packages&lt;/code&gt; team created a suite of outputs, including a flexdashboard with a searchable table to query dataset metadata.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-06-unconf_recap_2/pkg.png&#34; alt=&#34;datapackages&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In addition, the team created a &lt;a href=&#34;https://docs.google.com/document/d/1xhJmt0v4p49jpwINNak9N7AMMb5yohTwwNOXH8WzqqQ/edit#heading=h.7qg6st1kgh5x&#34;&gt;best practices document for data packages&lt;/a&gt;, a Twitter bot &lt;a href=&#34;https://twitter.com/rstatsdata&#34;&gt;@rstatsdata&lt;/a&gt; that tweets about datasets in R packages on CRAN, and they have plans for &lt;a href=&#34;https://github.com/ropenscilabs/data-packages#potential-future-work&#34;&gt;future work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; &lt;a href=&#34;https://github.com/Nowosad&#34;&gt;Jakub Nowosad&lt;/a&gt;, &lt;a href=&#34;https://github.com/ateucher&#34;&gt;Andy Teucher&lt;/a&gt;, &lt;a href=&#34;https://github.com/jsta&#34;&gt;Joseph Stachelek&lt;/a&gt;, &lt;a href=&#34;https://github.com/richierocks&#34;&gt;Richie Cotton&lt;/a&gt;, &lt;a href=&#34;https://github.com/cvitolo&#34;&gt;Claudia Vitolo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/data-packages&#34;&gt;https://github.com/ropenscilabs/data-packages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;exploringjson&#34;&gt;&lt;code&gt;exploRingJSON&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  The &lt;code&gt;exploRingJSON&lt;/code&gt; project includes a &lt;a href=&#34;https://github.com/ropenscilabs/exploRingJSON#survey-of-json-affiliated-r-packages&#34;&gt;survey of R packages that deal with JSON data&lt;/a&gt;, a package (&lt;a href=&#34;https://github.com/sctyner/JSOmetaN&#34;&gt;https://github.com/sctyner/JSOmetaN&lt;/a&gt;) to get high level metadata for JSON data, and a Shiny app to explore JSON.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-06-unconf_recap_2/applistview.png&#34; alt=&#34;plot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sctyner&#34;&gt;Sam Tyner&lt;/a&gt;, &lt;a href=&#34;https://github.com/kellobri&#34;&gt;Kelly O&amp;rsquo;Briant&lt;/a&gt;, &lt;a href=&#34;https://github.com/drscranto&#34;&gt;Katherine Scranton&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/exploRingJSON&#34;&gt;https://github.com/ropenscilabs/exploRingJSON&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Unconf projects 1: skimr, emldown, testrmd, webrockets</title>
      <link>https://ropensci.org/blog/2017/06/05/unconf_recap_1/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/06/05/unconf_recap_1/</guid>
      <description>
        
        

&lt;p&gt;Following up on Stefanie&amp;rsquo;s recap of &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/02/unconf2017&#34;&gt;unconf 17&lt;/a&gt;, we are following up this entire week with summaries of projects developed at the event. We plan to highlight 4-5 projects each day, with detailed posts from a handful of teams to follow.&lt;/p&gt;

&lt;h2 id=&#34;skimr&#34;&gt;&lt;code&gt;skimr&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  &lt;code&gt;skimr&lt;/code&gt;, a package inspired by Hadley Wickham&amp;rsquo;s &lt;a href=&#34;https://github.com/hadley/precis&#34;&gt;precis package&lt;/a&gt;, aims to provide summary statistics iteratively and interactively as part of a pipeline. The package provides easily skimmable summary statistics to help you better understand your data and see what is missing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/abwJOHh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt;
Amelia McNamara, Eduardo Arino de la Rubia, Hao Zhu, Julia Lowndes, Shannon Ellis, Elin Waring, Michael Quinn, Hope McLeod&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cqPh8pk.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/skimr&#34;&gt;https://github.com/ropenscilabs/skimr&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;emldown&#34;&gt;&lt;code&gt;emldown&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; &lt;code&gt;emldown&lt;/code&gt; is a package for creating a helpful website based on EML metadata. Ecological Metadata Language (EML) is a metadata specification developed by the ecology discipline and for the ecology discipline. EML is implemented as a series of XML document types that can by used in a modular and extensible manner to document ecological data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; Maëlle Salmon, Kara Woo, Andrew McDonald, Carl Boettiger&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/emldown&#34;&gt;https://github.com/ropenscilabs/emldown&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;testrmd&#34;&gt;&lt;code&gt;testrmd&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  &lt;code&gt;testrmd&lt;/code&gt; provides facilities to enable testing of and reporting on tested R Markdown chunks. When running R Markdown documents as part of a workflow where the data are likely to change with each render, &lt;code&gt;testrmd&lt;/code&gt; ensures that each chunk will alert the reader to any problems that may arise as a result of such subtle changes in data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropenscilabs/testrmd/raw/master/testrmd.gif&#34; alt=&#34;testRmd&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt; Mara Averick, Christopher Tull, Joe Cheng, Robert Flight&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/testrmd&#34;&gt;https://github.com/ropenscilabs/testrmd&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;webrockets&#34;&gt;&lt;code&gt;webrockets&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;  The &lt;code&gt;webrockets&lt;/code&gt; package implements a basic websocket listener in R. The implementation draws heavily on &lt;a href=&#34;https://twitter.com/hrbrmstr&#34;&gt;@hrbrmstr&amp;rsquo;s&lt;/a&gt; wrapper of &lt;code&gt;easywsclient&lt;/code&gt; in &lt;a href=&#34;https://github.com/ropenscilabs/decapitated&#34;&gt;https://github.com/ropenscilabs/decapitated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Miles McBain, Alicia Schep, Carl Ganz, Bob Rudis, Henrik Bengtsson, Joe Cheng&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/ropenscilabs/webrockets&#34;&gt;https://github.com/ropenscilabs/webrockets&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Bringing Together People and Projects at Unconf17</title>
      <link>https://ropensci.org/blog/2017/06/02/unconf2017/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/06/02/unconf2017/</guid>
      <description>
        
        

&lt;p&gt;We held our &lt;a href=&#34;http://unconf17.ropensci.org/&#34;&gt;4th annual unconference&lt;/a&gt; in Los Angeles, May 25-26, 2017. Scientists, R-software users and developers, and open data enthusiasts from academia, industry, government, and non-profits came together for two days to hack on projects they dreamed up and to give our online community an opportunity to connect in-person.&lt;/p&gt;

&lt;p&gt;The result? 70 people from 7 countries on 3 continents proposed 69 ideas leading to 21 projects in 2 days, and one awesome community just upped its game!&lt;/p&gt;

&lt;h3 id=&#34;look-what-we-made&#34;&gt;Look What We Made!&lt;/h3&gt;

&lt;p&gt;&lt;img title=&#34;unconf17 rOpenSci stickers. Photo (c) Nistara Randawa&#34; src=&#34;https://ropensci.org/assets/blog-images/2017-06-01-unconf17/ropensci-unconf17-stickers.jpg&#34; width=&#34;15%&#34; align=&#34;left&#34;&gt;&lt;/p&gt;

&lt;p&gt;People proposed and discussed &lt;a href=&#34;https://github.com/ropensci/unconf17/issues/&#34;&gt;project ideas in GitHub issues&lt;/a&gt; in the weeks leading up to the unconf to the point that we had almost as many project ideas as participants. On the morning of Day 1, people sticker-voted for projects they’d like to work on in order to reduce the number under consideration. After some brief discussions and self-sorting, teams settled in to work around the &lt;a href=&#34;http://www.crosscamp.us/site/locations/cross-campus-downtown-la.html&#34;&gt;Cross Campus DTLA&lt;/a&gt; co-working space for the next day and a half.&lt;/p&gt;

&lt;!---&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-06-01-unconf17/ropensci-unconf17-whiteboard1.jpg&#34; width=&#34;40%&#34; align=&#34;left&#34;&gt;---&gt;

&lt;p&gt;&lt;img title=&#34;unconf17 Research Compendium. Photo (c) Jennifer Thompson&#34; src=&#34;https://ropensci.org/assets/blog-images/2017-06-01-unconf17/ropensci-unconf17-whiteboard2_960_720.jpg&#34; width=&#34;36%&#34;  align=&#34;left&#34;&gt;
&lt;img title=&#34;unconf17 working groups. Photo (c) Karthik Ram&#34; src=&#34;https://ropensci.org/assets/blog-images/2017-06-01-unconf17/ropensci-unconf17-workgroups_1620_1080.jpg&#34; width=&#34;40%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Not only did our funders and sponsors - &lt;a href=&#34;http://helmsleytrust.org/&#34;&gt;Helmsley Charitable Trust&lt;/a&gt;, &lt;a href=&#34;https://sloan.org/&#34;&gt;Alfred P. Sloan Foundation&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/cloud-platform/r-server&#34;&gt;Microsoft&lt;/a&gt;, &lt;a href=&#34;https://www.google.com/&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://www.datacamp.com/&#34;&gt;DataCamp&lt;/a&gt;, and &lt;a href=&#34;https://www.numfocus.org/&#34;&gt;NumFOCUS&lt;/a&gt; - help us make this happen, but representatives from Microsoft, Google and DataCamp fully participated in unconf projects!&lt;/p&gt;

&lt;p&gt;Near the end of Day 2, each group had three minutes with the mic to report on their projects with only their README.md to use as presentation material. The code for all projects is available at &lt;a href=&#34;https://github.com/ropenscilabs&#34;&gt;ropenscilabs&lt;/a&gt;, our “in-development” home on GitHub. Thanks to &lt;a href=&#34;https://github.com/seankross&#34;&gt;Sean Kross&lt;/a&gt;, you can easily &lt;a href=&#34;https://ropenscilabs.github.io/runconf17-projects/&#34;&gt;browse all unconf17 projects&lt;/a&gt;. Soon we&amp;rsquo;ll publish a series of short posts covering all of them.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-partner=&#34;tweetdeck&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;For a FULL LIST of &lt;a href=&#34;https://twitter.com/hashtag/runconf17?src=hash&#34;&gt;#runconf17&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&#34;&gt;#rstats&lt;/a&gt; projects here is a link (including awesome emojis) 📦🎉⭐️💻&lt;a href=&#34;https://t.co/FsoOu5gUAr&#34;&gt;https://t.co/FsoOu5gUAr&lt;/a&gt; &lt;a href=&#34;https://t.co/gHbZOfBNTV&#34;&gt;pic.twitter.com/gHbZOfBNTV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alice Data (@alice_data) &lt;a href=&#34;https://twitter.com/alice_data/status/868336229992890368&#34;&gt;May 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Here&amp;rsquo;s a sample:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/skimr&#34;&gt;&lt;code&gt;skimr&lt;/code&gt;&lt;/a&gt; is a package that provides tidy summary statistics directly from a pipe. The outputs are generic and allow users to quickly understand their data and learn what is missing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/notary&#34;&gt;&lt;code&gt;notary&lt;/code&gt;&lt;/a&gt; is an R package that verifies the integrity of R packages so that a user only installs signed releases. The package also verifies release signatures.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/emldown&#34;&gt;&lt;code&gt;emldown&lt;/code&gt;&lt;/a&gt; provides a way to easily visualize complex markup from the Ecological Metadata Language. The package generates summary html using Twitter bootstrap and provides summary information about the data, temporal + spatial coverage, data tables, units and more.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/checkers&#34;&gt;&lt;code&gt;checkers&lt;/code&gt;&lt;/a&gt; is a framework for reviewing analysis projects. It provides both automated checks for best practises as well as a descriptive guide for best practices.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We shared brief summaries of ALL projects in a series of five posts:
- &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/05/unconf_recap_1&#34;&gt;skimr, emldown, testrmd, webrockets&lt;/a&gt;
- &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/06/unconf_recap_2&#34;&gt;checkers, gramr, data-packages, exploRingJSON&lt;/a&gt;
- &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/07/unconf_projects_3&#34;&gt;available, miner, rcheatsheet, ponyexpress&lt;/a&gt;
- &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/08/unconf_recap_4&#34;&gt;cityquant, notary, packagemetrics, pegax&lt;/a&gt;
- &lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/09/unconf_recap_5&#34;&gt;mwparser, Gargle, arresteddev&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;community-is-one-of-rstats-best-assets&#34;&gt;Community is One of #rstats Best Assets&lt;/h3&gt;

&lt;p&gt;As rOpenSci&amp;rsquo;s Community Manager, my favorite aspects of unconf17 were watching connections being made between people, hearing them reflect on their (context-dependent) place in the R community, and being able to step back and support community-focussed discussions and activities initiated by the participants themselves! There are so many community-minded people flying under the radar, I can&amp;rsquo;t afford to name just a few.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Join the lunchtime &lt;a href=&#34;https://twitter.com/hashtag/runconf17?src=hash&#34;&gt;#runconf17&lt;/a&gt; discussion about the &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&#34;&gt;#rstats&lt;/a&gt; communities - what do we need to do to improve? &lt;a href=&#34;https://t.co/ztbXxNfqU7&#34;&gt;pic.twitter.com/ztbXxNfqU7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alice Data (@alice_data) &lt;a href=&#34;https://twitter.com/alice_data/status/868198529134510080&#34;&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Speaking of awesome community, &lt;a href=&#34;https://rladies.org/&#34;&gt;R-Ladies&lt;/a&gt; - a world-wide organization to promote gender diversity in the R community - was incredibly well-represented by founders of the global organization as well as of local chapters.&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;unconf17 R-Ladies. Photo (c) Nistara Randawa&#34; src=&#34;https://ropensci.org/assets/blog-images/2017-06-01-unconf17/ropensci-unconf17-rladies.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;rOpenSci aims to help people see what they can be. Over 45% of participants were women or other underrepresented genders. With an aim of reducing barriers to participation, we covered the cost up front for anyone who requested it.&lt;/p&gt;

&lt;h3 id=&#34;what-s-your-story&#34;&gt;What&amp;rsquo;s Your Story?&lt;/h3&gt;

&lt;p&gt;Several people have already written about their unconf17 experience. Have you? Share the link in the comments below and we&amp;rsquo;ll add it here.&lt;/p&gt;

&lt;h4 id=&#34;projects-posts&#34;&gt;Projects posts&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dataimpact.co.uk/2017/05/25/ropensci-runconf17-checker-project/&#34;&gt;rOpenSci #runconf17 : checker project&lt;/a&gt;, by Alice Daish&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/20/checkers&#34;&gt;Tackling the Research Compendium at #runconf17&lt;/a&gt;, by Noam Ross, Alice Daish, Laura DeCicco, Molly Lewis, Nistara Randhawa, Jennifer Thompson, Nick Tierney&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/27/packagemetrics&#34;&gt;packagemetrics - Helping you choose a package since #runconf17&lt;/a&gt;, by Becca Krouse, Erin Grand, Hannah Frick, Lori Shepherd, Sam Firke, William Ampeh&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/blog/2017/07/05/webrockets&#34;&gt;Launching webrockets at runconf17&lt;/a&gt;, by Alicia Schep, Miles McBain&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/blog/2017/07/11/skimr&#34;&gt;skimr for useful and tidy summary statistics&lt;/a&gt;, by Eduardo Arino de la Rubia, Shannon Ellis, Julia Stewart Lowndes, Hope McLeod, Amelia McNamara, Michael Quinn, Elin Waring, Hao Zhu&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/blog/2017/07/25/notary&#34;&gt;notary - Signing &amp;amp; Verification of R Packages&lt;/a&gt;, by Rich FitzJohn, Oliver Keyes, Stephanie Locke, Jeroen Ooms, Bob Rudis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/blog/2017/08/01/emldown&#34;&gt;emldown - From machine readable EML metadata to a pretty documentation website&lt;/a&gt;, by Maëlle Salmon, Andrew MacDonald, Kara Woo, Carl Boettiger, Jeff Hollister&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/blog/2017/08/08/unconfroadsnottaken&#34;&gt;Unconf 2017: The Roads Not Taken&lt;/a&gt;, by Noam Ross&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;community-posts&#34;&gt;Community posts&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/blog/blog/2017/06/23/community&#34;&gt;Hey! You there! You are welcome here&lt;/a&gt;, by Shannon Ellis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rud.is/b/2017/05/28/l-a-unconf-idential-a-k-a-an-ropensci-runconf17-retrospective/&#34;&gt;L.A. Unconf-idential : a.k.a. an rOpenSci #runconf17 Retrospective&lt;/a&gt;, by Bob Rudis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jasdumas.github.io/2017-05-28-runconf17-experience/&#34;&gt;My Experience at the 2017 rOpenSci Unconference. &lt;sup&gt;13&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;, would attend again!&lt;/a&gt;, by Jasmine Dumas&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://seankross.com/2017/06/07/A-Year-of-rOpenScis-Unconf.html&#34;&gt;A Year of rOpenSci&amp;rsquo;s Unconf&lt;/a&gt;, by Sean Kross&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.revolutionanalytics.com/2017/05/runconf17.html&#34;&gt;Reflections on rOpenSci Unconference 2017&lt;/a&gt;, by David Smith&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kbroman.org/blog/2017/05/27/ropensci-unconf-2017/&#34;&gt;rOpenSci Unconf 2017&lt;/a&gt;, by Karl Broman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://livefreeordichotomize.com/2017/06/03/runconf17-an-analysis-of-emoji-use/&#34;&gt;runconf17, an analysis of emoji use&lt;/a&gt;, by Lucy McGowan&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://maraaverick.netlify.com/2017/06/ceci-n-est-pas-un-conf/&#34;&gt;Ceci n&amp;rsquo;est pas un conf.&lt;/a&gt;, by Mara Averick&lt;/li&gt;
&lt;li&gt;Sense the enthusiasm for what happened via the Twitter hashtag: &lt;a href=&#34;https://twitter.com/search/?q=%23runconf17&#34;&gt;#runconf17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get a taste of the unconf interactions from Karthik Ram&amp;rsquo;s &lt;a href=&#34;https://storify.com/_inundata/4th-annual-ropensci-unconf&#34;&gt;storify of unconf17 tweets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know that unconf17 had a big impact on many people, including me. Our vibrant example of walking the talk of being welcoming, creative, respectful and supportive - all while being &lt;a href=&#34;#look-what-we-made&#34;&gt;wildly productive&lt;/a&gt; - is bound to have a lasting impact on the R community in general.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Thank you all you wonderful people who participated in &lt;a href=&#34;https://twitter.com/hashtag/runconf17?src=hash&#34;&gt;#runconf17&lt;/a&gt; ! &lt;a href=&#34;https://t.co/8fxEhC5zDG&#34;&gt;pic.twitter.com/8fxEhC5zDG&lt;/a&gt;&lt;/p&gt;&amp;mdash; rOpenSci (@rOpenSci) &lt;a href=&#34;https://twitter.com/rOpenSci/status/868539206842187776&#34;&gt;May 27, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;unconf17 group. Photo (c) Karthik Ram&#34; src=&#34;https://ropensci.org/assets/blog-images/2017-06-01-unconf17/ropensci-unconf17-group.jpg&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Apply to attend rOpenSci unconf 2017!</title>
      <link>https://ropensci.org/blog/2017/02/02/unconf2017/</link>
      <pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/02/02/unconf2017/</guid>
      <description>
        
        &lt;p&gt;For a fourth year running, we are excited to announce the &lt;a href=&#34;http://unconf17.ropensci.org/&#34;&gt;rOpenSci unconference&lt;/a&gt;, our annual event loosely modeled on &lt;a href=&#34;https://en.wikipedia.org/wiki/Foo_Camp&#34;&gt;Foo Camp&lt;/a&gt;. We&amp;rsquo;re organizing &lt;a href=&#34;https://twitter.com/search?f=tweets&amp;amp;q=%23runconf17&#34;&gt;#runconf17&lt;/a&gt; to bring together scientists, developers, and open data enthusiasts from academia, industry, government, and non-profits to get together for a couple of days to hack on various projects and generally enrich our community. The agenda is mostly decided during the unconference itself. &lt;a href=&#34;https://github.com/ropensci/unconf16&#34;&gt;Past projects&lt;/a&gt; have related to open data, data visualization, data publication and open science using R. This event is unlike many other unconferences in that it is primarily invite-only, with a few spots set aside for self-nominations from the community at large. That&amp;rsquo;s you!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-02-01-unconf2017/ropensci_v3.mp4.Still002.jpg&#34; alt=&#34;unconf-ropensci&#34; /&gt;&lt;/p&gt;

&lt;p&gt;rOpenSci is committed to providing a welcoming community for all participants. One of our priorities is to increase and retain the diversity of contributors to open research by helping people “see what they can be”. Therefore, we strongly encourage applications from women, people of color, LGBTQ, differently-abled individuals, and any other underrepresented minorities in research. To ensure a safe, enjoyable, and friendly experience for everyone who participates, we follow a &lt;a href=&#34;http://unconf17.ropensci.org/coc.html&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://unconf17.ropensci.org&#34;&gt;&lt;img src=&#34;http://unconf17.ropensci.org/images/LA.png&#34; alt=&#34;unconf-ropensci&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; Downtown Los Angeles, CA&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; May 25-26th, 2017&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apply:&lt;/strong&gt; If you&amp;rsquo;d like to attend, it only takes a few minutes to &lt;a href=&#34;http://unconf17.ropensci.org/apply&#34;&gt;nominate yourself&lt;/a&gt;. Submissions close Wednesday, February 22, 2017 at midnight Pacific Time.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re grateful to &lt;a href=&#34;http://unconf17.ropensci.org/#sponsors&#34;&gt;our sponsors&lt;/a&gt; for making #runconf17 possible.&lt;/p&gt;

&lt;p&gt;Questions? Contact &lt;a href=&#34;http://ropensci.org/contact.html&#34;&gt;info at ropensci org&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
