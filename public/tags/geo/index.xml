<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geo on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/geo/</link>
    <description>Recent content in Geo on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Mar 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/geo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>rOpenSci geospatial libraries</title>
      <link>https://ropensci.org/blog/2016/03/17/ropensci-geospatial-stack/</link>
      <pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2016/03/17/ropensci-geospatial-stack/</guid>
      <description>
        
        

&lt;p&gt;Geospatial data input/output, manipulation, and vizualization are tasks that are common to many disciplines. Thus, we&amp;rsquo;re keenly interested in making great tools in this space. We have an increasing set of spatial tools, each of which we&amp;rsquo;ll cover sparingly. See the &lt;strong&gt;cran&lt;/strong&gt; and &lt;strong&gt;github&lt;/strong&gt; badges for more information.&lt;/p&gt;

&lt;p&gt;We are not trying to replace the current R geospatial libraries - rather, we&amp;rsquo;re trying to fill in gaps and create smaller tools to make it easy to plug in just the tools you need to your workflow.&lt;/p&gt;

&lt;h2 id=&#34;geojsonio&#34;&gt;geojsonio&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/geojsonio/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/geojsonio&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/geojsonio&#34;&gt;geojsonio&lt;/a&gt; - A tool for converting to and from geojson data. Convert data to/from GeoJSON from various R classes, including vectors, lists, data frames, shape files, and spatial classes.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geojsonio&amp;quot;)
geojson_json(c(-99.74, 32.45), pretty = TRUE)
#&amp;gt; {
#&amp;gt;   &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot;,
#&amp;gt;   &amp;quot;features&amp;quot;: [
#&amp;gt;     {
#&amp;gt;       &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;,
#&amp;gt;       &amp;quot;geometry&amp;quot;: {
#&amp;gt;         &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;,
#&amp;gt;         &amp;quot;coordinates&amp;quot;: [-99.74, 32.45]
#&amp;gt;       },
#&amp;gt;       &amp;quot;properties&amp;quot;: {}
#&amp;gt;     }
#&amp;gt;   ]
#&amp;gt; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wellknown&#34;&gt;wellknown&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/wellknown/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/wellknown&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/wellknown&#34;&gt;wellknown&lt;/a&gt; - A tool for converting to and from well-known text data. Convert WKT/WKB to GeoJSON and vice versa. Functions included for converting between GeoJSON to WKT/WKB, creating both GeoJSON features, and non-features, creating WKT/WKB from R objects (e.g., lists, data.frames, vectors), and linting WKT.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;wellknown&amp;quot;)
point(data.frame(lon = -116.4, lat = 45.2))
#&amp;gt; [1] &amp;quot;POINT (-116.4000000000000057 45.2000000000000028)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gistr&#34;&gt;gistr&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/gistr/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/gistr&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/gistr&#34;&gt;gistr&lt;/a&gt; - This is not a geospatial tool per se, but it&amp;rsquo;s extremely useful for sharing maps. For example, with just a few lines, you can share an interactive map to GitHub.&lt;/p&gt;

&lt;p&gt;e.g. using &lt;code&gt;geojsonio&lt;/code&gt; from above&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;gistr&amp;quot;)
cat(geojson_json(us_cities[1:100,], lat = &#39;lat&#39;, lon = &#39;long&#39;), file = &amp;quot;map.geojson&amp;quot;)
gist_create(&amp;quot;map.geojson&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/map.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;lawn&#34;&gt;lawn&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/lawn/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/lawn&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An R client for &lt;a href=&#34;http://turfjs.org/&#34;&gt;turf.js&lt;/a&gt;, an &lt;em&gt;Advanced geospatial analysis for browsers and node&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lawn&lt;/code&gt; has a function for every method in &lt;code&gt;turf.js&lt;/code&gt;. In addition, there&amp;rsquo;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a few functions wrapping the
Node package &lt;code&gt;geojson-random&lt;/code&gt; &lt;a href=&#34;https://github.com/mapbox/geojson-random&#34;&gt;https://github.com/mapbox/geojson-random&lt;/a&gt; for making random geojson features&lt;/li&gt;
&lt;li&gt;a helper function &lt;code&gt;view()&lt;/code&gt; to easily visualize results from calls to &lt;code&gt;lawn&lt;/code&gt; functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;lawn&amp;quot;)
lawn_hex_grid(c(-96,31,-84,40), 50, &#39;miles&#39;) %&amp;gt;% view
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/hexgridmap.png&#34; alt=&#34;hexgridmap&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;geoaxe&#34;&gt;geoaxe&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/geoaxe/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropenscilabs/geoaxe&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An R client for splitting geospatial objects into pieces.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geoaxe&amp;quot;)
library(&amp;quot;rgeos&amp;quot;)
wkt &amp;lt;- &amp;quot;POLYGON((-180 -20, -140 55, 10 0, -140 -60, -180 -20))&amp;quot;
poly &amp;lt;- rgeos::readWKT(wkt)
polys &amp;lt;- chop(x = poly)
plot(poly, lwd = 6, mar = c(0, 0, 0, 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/unnamed-chunk-6-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-6&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add chopped up polygon bits&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(polys, add = TRUE, mar = c(0, 0, 0, 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/unnamed-chunk-7-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-7&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;proj&#34;&gt;proj&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;label label-default&#34;&gt;cran&lt;/span&gt; &lt;a href=&#34;https://github.com/ropensci/proj&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An R client for &lt;a href=&#34;https://github.com/proj4js/proj4js&#34;&gt;proj4js&lt;/a&gt;, a Javascript library for projections.  &lt;code&gt;proj&lt;/code&gt; is not on CRAN yet.&lt;/p&gt;

&lt;h2 id=&#34;getlandsat&#34;&gt;getlandsat&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;label label-default&#34;&gt;cran&lt;/span&gt; &lt;a href=&#34;https://github.com/ropenscilabs/getlandsat&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An R client to fetch Landsat data from AWS public data sets. &lt;code&gt;getlandsat&lt;/code&gt; is not on CRAN yet.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;getlandsat&amp;quot;)
head(lsat_scenes())
#&amp;gt;                entityId     acquisitionDate cloudCover processingLevel
#&amp;gt; 1 LC80101172015002LGN00 2015-01-02 15:49:05      80.81            L1GT
#&amp;gt; 2 LC80260392015002LGN00 2015-01-02 16:56:51      90.84            L1GT
#&amp;gt; 3 LC82270742015002LGN00 2015-01-02 13:53:02      83.44            L1GT
#&amp;gt; 4 LC82270732015002LGN00 2015-01-02 13:52:38      52.29             L1T
#&amp;gt; 5 LC82270622015002LGN00 2015-01-02 13:48:14      38.85             L1T
#&amp;gt; 6 LC82111152015002LGN00 2015-01-02 12:30:31      22.93            L1GT
#&amp;gt;   path row   min_lat    min_lon   max_lat    max_lon
#&amp;gt; 1   10 117 -79.09923 -139.66082 -77.75440 -125.09297
#&amp;gt; 2   26  39  29.23106  -97.48576  31.36421  -95.16029
#&amp;gt; 3  227  74 -21.28598  -59.27736 -19.17398  -57.07423
#&amp;gt; 4  227  73 -19.84365  -58.93258 -17.73324  -56.74692
#&amp;gt; 5  227  62  -3.95294  -55.38896  -1.84491  -53.32906
#&amp;gt; 6  211 115 -78.54179  -79.36148 -75.51003  -69.81645
#&amp;gt;                                                                                 download_url
#&amp;gt; 1 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/010/117/LC80101172015002LGN00/index.html
#&amp;gt; 2 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/026/039/LC80260392015002LGN00/index.html
#&amp;gt; 3 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/227/074/LC82270742015002LGN00/index.html
#&amp;gt; 4 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/227/073/LC82270732015002LGN00/index.html
#&amp;gt; 5 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/227/062/LC82270622015002LGN00/index.html
#&amp;gt; 6 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/211/115/LC82111152015002LGN00/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;siftgeojson&#34;&gt;siftgeojson&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;label label-default&#34;&gt;cran&lt;/span&gt; &lt;a href=&#34;https://github.com/ropenscilabs/siftgeojson&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Slice and dice GeoJSON just as easily as you would a data.frame. This is built on top of &lt;code&gt;jqr&lt;/code&gt;, an R wrapper for &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt;, a JSON processor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;siftgeojson&amp;quot;)
# get sample data
file &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;zillow_or.geojson&amp;quot;, package = &amp;quot;siftgeojson&amp;quot;)
json &amp;lt;- paste0(readLines(file), collapse = &amp;quot;&amp;quot;)
# sift to Multnomah County only, and check that only Multnomah County came back
sifter(json, COUNTY == Multnomah) %&amp;gt;% jqr::index() %&amp;gt;% jqr::dotstr(properties.COUNTY)
#&amp;gt; [
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;maps&#34;&gt;Maps&lt;/h2&gt;

&lt;p&gt;rOpenSci has an offering in this space: &lt;code&gt;plotly&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;plotly&#34;&gt;plotly&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/plotly/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/plotly&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/plotly&#34;&gt;plotly&lt;/a&gt; is an R client for &lt;a href=&#34;https://plot.ly/&#34;&gt;Plotly&lt;/a&gt; - a web interface and API for creating interactive graphics.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;plotly&amp;quot;)
plot_ly(iris, x = Petal.Length, y = Petal.Width,
        color = Species, mode = &amp;quot;markers&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/plotly.png&#34; alt=&#34;plotly&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;maptools-task-view&#34;&gt;Maptools Task View&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/maptools&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jwhollister.com/&#34;&gt;Jeff Hollister&lt;/a&gt; is leading the &lt;a href=&#34;https://github.com/ropensci/maptools&#34;&gt;maptools task view&lt;/a&gt; to organize R mapping tools packages, sources of data, projections, static and interactive mapping, data transformation, and more.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
