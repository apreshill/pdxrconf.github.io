<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wkt on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/wkt/</link>
    <description>Recent content in Wkt on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Apr 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/wkt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Random GeoJSON and WKT with randgeo</title>
      <link>https://ropensci.org/technotes/2017/04/20/randgeo/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/technotes/2017/04/20/randgeo/</guid>
      <description>
        
        

&lt;p&gt;&lt;strong&gt;randgeo&lt;/strong&gt; generates random points and shapes in GeoJSON and WKT formats for
use in examples, teaching, or statistical applications.&lt;/p&gt;

&lt;p&gt;Points and shapes are generated in the long/lat coordinate system and with
appropriate spherical geometry; random points are distributed evenly across
the globe, and random shapes are sized according to a maximum great-circle
distance from the center of the shape.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;randgeo&lt;/strong&gt; was adapted from &lt;a href=&#34;https://github.com/tmcw/geojson-random&#34;&gt;https://github.com/tmcw/geojson-random&lt;/a&gt; to have
a pure R implementation without any dependencies as well as appropriate
geometry. Data generated by &lt;strong&gt;randgeo&lt;/strong&gt; may be processed or displayed of with
packages such as &lt;a href=&#34;https://cran.r-project.org/package=sf&#34;&gt;&lt;strong&gt;sf&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=wicket&#34;&gt;&lt;strong&gt;wicket&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=geojson&#34;&gt;&lt;strong&gt;geojson&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=wellknown&#34;&gt;&lt;strong&gt;wellknown&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=geojsonio&#34;&gt;&lt;strong&gt;geojsonio&lt;/strong&gt;&lt;/a&gt;, or
&lt;a href=&#34;https://cran.r-project.org/package=lawn&#34;&gt;&lt;strong&gt;lawn&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Package API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rg_position&lt;/code&gt; - random position (lon, lat)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geo_point&lt;/code&gt; - random GeoJSON point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geo_polygon&lt;/code&gt; - random GeoJSON polygon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wkt_point&lt;/code&gt; - random WKT point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wkt_polygon&lt;/code&gt; - random WKT polygon&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Install &lt;code&gt;randgeo&lt;/code&gt; - and we&amp;rsquo;ll need a few other packages for examples below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;randgeo&amp;quot;)
install.packages(c(&#39;leaflet&#39;, &#39;lawn&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(randgeo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions that start with &lt;code&gt;geo&lt;/code&gt; are for creating GeoJSON data in JSON format.
If you want to create an R list or data.frame, you can use &lt;code&gt;jsonlite::fromJSON&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;random&#34;&gt;Random&lt;/h2&gt;

&lt;p&gt;Evenly distributed across the sphere.  The &lt;code&gt;bbox&lt;/code&gt; option allows
you to limit points to within long/lat bounds.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geo_point()
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry
#&amp;gt; $features[[1]]$geometry$type
#&amp;gt; [1] &amp;quot;Point&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates
#&amp;gt; [1] 105.95999 -46.58477
#&amp;gt;
#&amp;gt;
#&amp;gt; $features[[1]]$properties
#&amp;gt; NULL
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; attr(,&amp;quot;class&amp;quot;)
#&amp;gt; [1] &amp;quot;geo_list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Centered on a random point, with default maximum size&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geo_polygon()
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry
#&amp;gt; $features[[1]]$geometry$type
#&amp;gt; [1] &amp;quot;Polygon&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates
#&amp;gt; $features[[1]]$geometry$coordinates[[1]]
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[1]]
#&amp;gt; [1] -138.49434  -25.11895
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[2]]
#&amp;gt; [1] -145.95566  -28.17623
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[3]]
#&amp;gt; [1] -145.87817  -28.74364
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[4]]
#&amp;gt; [1] -146.61325  -28.59748
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[5]]
#&amp;gt; [1] -139.18167  -31.07703
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[6]]
#&amp;gt; [1] -140.88748  -31.24708
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[7]]
#&amp;gt; [1] -143.50402  -33.93551
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[8]]
#&amp;gt; [1] -146.48114  -30.43185
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[9]]
#&amp;gt; [1] -144.68315  -35.45465
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[10]]
#&amp;gt; [1] -157.58084  -24.52897
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[11]]
#&amp;gt; [1] -138.49434  -25.11895
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; $features[[1]]$properties
#&amp;gt; NULL
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; attr(,&amp;quot;class&amp;quot;)
#&amp;gt; [1] &amp;quot;geo_list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visualize your shapes with &lt;strong&gt;lawn&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lawn::view(jsonlite::toJSON(unclass(geo_polygon(count = 4)), auto_unbox = TRUE))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-20-randgeo/plot1.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wkt&#34;&gt;WKT&lt;/h2&gt;

&lt;p&gt;Functions prefixed with &lt;code&gt;wkt&lt;/code&gt; create random Well-Known Text (WKT) data. These functions
wrap the GeoJSON versions, but then convert the data to WKT.&lt;/p&gt;

&lt;p&gt;Random point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wkt_point()
#&amp;gt; [1] &amp;quot;POINT (179.8795330 -29.1106238)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Random polygon:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wkt_polygon()
#&amp;gt; [1] &amp;quot;POLYGON ((-60.0870329 -12.9315478, -61.5073816 -25.3204334, -62.6987366 -24.5766272, -64.1853669 -24.0497260, -67.7152546 -27.4752321, -68.4190340 -26.9510818, -67.6018452 -21.5489551, -64.3083560 -21.6772242, -63.1471630 -21.9415438, -64.1137279 -14.2398013, -60.0870329 -12.9315478))&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-case&#34;&gt;Use case&lt;/h2&gt;

&lt;p&gt;Example of geospatial data manipulation, using &lt;code&gt;randgeo&lt;/code&gt;, &lt;code&gt;leaflet&lt;/code&gt; and
&lt;code&gt;lawn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate random overlapping polygons&lt;/li&gt;
&lt;li&gt;Calculate a single polygon from overlapping polygons&lt;/li&gt;
&lt;li&gt;Map polygon&lt;/li&gt;
&lt;li&gt;Generate random locaitons (points)&lt;/li&gt;
&lt;li&gt;Clip locations to the polygon&lt;/li&gt;
&lt;li&gt;Overlay locations (more random points) on the polygon&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(randgeo)
library(lawn)
library(leaflet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;generate random data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(5)
polys &amp;lt;- randgeo::geo_polygon(count = 2, num_vertices = 4, bbox = c(-120, 40, -100, 50))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get intersection of polygons&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polysinter &amp;lt;- lawn::lawn_intersect(polys$features[[1]], polys$features[[2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Map polygons&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polysinter %&amp;gt;% lawn::view()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-20-randgeo/plot2.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Generate random points - clip points to polygon&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pts &amp;lt;- randgeo::geo_point(count = 500, bbox = c(-120, 40, -100, 50))
pts &amp;lt;- lawn::lawn_within(
  points = lawn_featurecollection(pts),
  polygons = lawn_featurecollection(polysinter)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Draw polygon + points on map&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polysinter %&amp;gt;%
  view() %&amp;gt;%
  addGeoJSON(geojson = jsonlite::toJSON(unclass(pts)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-20-randgeo/plot3.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Let us know what you think!  &lt;code&gt;randgeo&lt;/code&gt; doesn&amp;rsquo;t have any revdep&amp;rsquo;s on CRAN yet, but
is being &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=%22randgeo%22+language%3AR+-user%3Acran+-user%3Aropensci&amp;amp;type=Code&#34;&gt;used in one package on GitHub&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
