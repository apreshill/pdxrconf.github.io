<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maps on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/maps/</link>
    <description>Recent content in Maps on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Apr 2014 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/maps/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Make your ggplots shareable, collaborative, and with D3</title>
      <link>https://ropensci.org/blog/2014/04/17/plotly/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/04/17/plotly/</guid>
      <description>
        
        

&lt;p&gt;&lt;em&gt;Editor&amp;rsquo;s note: This is a guest post by Matt Sundquist from &lt;a href=&#34;https://plot.ly/&#34;&gt;Plot.ly&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can access the source code for this post at &lt;a href=&#34;https://gist.github.com/sckott/10991885&#34;&gt;https://gist.github.com/sckott/10991885&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/plotly&#34;&gt;Ggplotly&lt;/a&gt; and &lt;a href=&#34;https://plot.ly/api/r&#34;&gt;Plotly&amp;rsquo;s R API&lt;/a&gt; let you make ggplot2 plots, add &lt;code&gt;py$ggplotly()&lt;/code&gt;, and make your plots interactive, online, and drawn with D3. Let&amp;rsquo;s make some.&lt;/p&gt;

&lt;h2 id=&#34;1-getting-started-and-examples&#34;&gt;1. Getting Started and Examples&lt;/h2&gt;

&lt;p&gt;Here is Fisher&amp;rsquo;s iris data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;ggplot2&amp;quot;)
ggiris &amp;lt;- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
print(ggiris)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-04-17-plotly/unnamed-chunk-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make it in Plotly. Install:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
library(&amp;quot;devtools&amp;quot;)
install_github(&amp;quot;plotly&amp;quot;, &amp;quot;ropensci&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Load.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;plotly&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Loading required package: RCurl
## Loading required package: bitops
## Loading required package: RJSONIO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sign up &lt;a href=&#34;https://plot.ly&#34;&gt;online&lt;/a&gt;, use our public keys below, or sign up like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;signup(&amp;quot;new_username&amp;quot;, &amp;quot;your_email@domain.com&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should have responded with your new key. Use that to create a plotly interface object, or use ours:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;py &amp;lt;- plotly(&amp;quot;RgraphingAPI&amp;quot;, &amp;quot;ektgzomjbx&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It just works.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;py$ggplotly(ggiris)
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe height=&#34;600&#34; id=&#34;igraph&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;
                src=&#34;https://plot.ly/~RgraphingAPI/554&#34; width=&#34;600&#34; frameBorder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;The call opens a browser tab. Or in an &lt;code&gt;.Rmd&lt;/code&gt; document, the plot is embedded if you specify the &lt;code&gt;plotly=TRUE&lt;/code&gt; chunk option (see &lt;a href=&#34;https://gist.github.com/sckott/10991885&#34;&gt;source&lt;/a&gt;). If you&amp;rsquo;re running this from the source, it makes all the graphs at once in your browser. Reaction my first time: here be dragons.&lt;/p&gt;

&lt;p&gt;If you click the &lt;em&gt;data and graph&lt;/em&gt; link in the embed, it takes you to Plotly&amp;rsquo;s GUI, where you can edit the graph, see the data, and share your plot with collaborators.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-2-maps&#34;&gt;1.2 Maps&lt;/h3&gt;

&lt;p&gt;Next: Maps!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(canada.cities, package=&amp;quot;maps&amp;quot;)
viz &amp;lt;- ggplot(canada.cities, aes(long, lat)) +
  borders(regions=&amp;quot;canada&amp;quot;, name=&amp;quot;borders&amp;quot;) +
  coord_equal() +
  geom_point(aes(text=name, size=pop), colour=&amp;quot;red&amp;quot;, alpha=1/2, name=&amp;quot;cities&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call Plotly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;py$ggplotly(viz)
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe height=&#34;600&#34; id=&#34;igraph&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;
                src=&#34;https://plot.ly/~RgraphingAPI/555&#34; width=&#34;600&#34; frameBorder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-3-scatter&#34;&gt;1.3 Scatter&lt;/h3&gt;

&lt;p&gt;Want to make a scatter and add a &lt;a href=&#34;http://docs.ggplot2.org/current/geom_smooth.html&#34;&gt;smoothed conditional mean&lt;/a&gt;? Here&amp;rsquo;s how to do it in Plotly. For the rest of the plots, we&amp;rsquo;ll just print the Plotly version to save space. You can hover on text to get data, or click and drag across a section to zoom in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- lm(mpg ~ wt + factor(cyl), data=mtcars)
grid &amp;lt;- with(mtcars, expand.grid(
  wt = seq(min(wt), max(wt), length = 20),
  cyl = levels(factor(cyl))
))

grid$mpg &amp;lt;- stats::predict(model, newdata=grid)

viz2 &amp;lt;- qplot(wt, mpg, data=mtcars, colour=factor(cyl)) + geom_line(data=grid)
py$ggplotly(viz2)
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe height=&#34;600&#34; id=&#34;igraph&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;
                src=&#34;https://plot.ly/~RgraphingAPI/556&#34; width=&#34;600&#34; frameBorder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-4-lines&#34;&gt;1.4 Lines&lt;/h3&gt;

&lt;p&gt;Or, take &lt;code&gt;ggplotly&lt;/code&gt; for a spin with the orange dataset:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;orange &amp;lt;- qplot(age, circumference, data = Orange, colour = Tree, geom = &amp;quot;line&amp;quot;)
py$ggplotly(orange)
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe height=&#34;600&#34; id=&#34;igraph&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;
                src=&#34;https://plot.ly/~RgraphingAPI/557&#34; width=&#34;600&#34; frameBorder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-5-alpha-blend&#34;&gt;1.5 Alpha blend&lt;/h3&gt;

&lt;p&gt;Or, make plots &lt;a href=&#34;http://mandymejia.wordpress.com/2013/11/13/10-reasons-to-switch-to-ggplot-7/&#34;&gt;beautiful&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;prettyPlot &amp;lt;- ggplot(data=diamonds, aes(x=carat, y=price, colour=clarity))
prettyPlot &amp;lt;- prettyPlot + geom_point(alpha = 1/10)
py$ggplotly(prettyPlot)
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe height=&#34;600&#34; id=&#34;igraph&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;
                src=&#34;https://plot.ly/~RgraphingAPI/558&#34; width=&#34;600&#34; frameBorder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-6-functions&#34;&gt;1.6 Functions&lt;/h3&gt;

&lt;p&gt;Want to &lt;a href=&#34;http://stackoverflow.com/questions/1853703/plotting-functions-in-r&#34;&gt;draw functions&lt;/a&gt; with a &lt;code&gt;curve&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eq &amp;lt;- function(x) {x*x}
tmp &amp;lt;- data.frame(x=1:50, y=eq(1:50))

# Make plot object
p &amp;lt;- qplot(x, y, data=tmp, xlab=&amp;quot;X-axis&amp;quot;, ylab=&amp;quot;Y-axis&amp;quot;)
c &amp;lt;- stat_function(fun=eq)

py$ggplotly(p + c)
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe height=&#34;600&#34; id=&#34;igraph&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;
                src=&#34;https://plot.ly/~RgraphingAPI/559&#34; width=&#34;600&#34; frameBorder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-a-github-for-data-and-graphs&#34;&gt;2. A GitHub for data and graphs&lt;/h2&gt;

&lt;p&gt;Like we might work together on code on GitHub or a project in a Google Doc, we can edit graphs and data together on Plotly. Here&amp;rsquo;s how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your URL is shareable.&lt;/li&gt;
&lt;li&gt;Public use is free.&lt;/li&gt;
&lt;li&gt;You can set &lt;a href=&#34;http://plot.ly/api/r/docs/privacy&#34;&gt;the privacy&lt;/a&gt; of your graph.&lt;/li&gt;
&lt;li&gt;You can edit and add to plots from our GUI or with R or &lt;a href=&#34;https://plot.ly/api&#34;&gt;APIs&lt;/a&gt; for Python, MATLA, Julia, Perl, Arduino, Raspberry Pi, and REST.&lt;/li&gt;
&lt;li&gt;You get a profile of graphs, like &lt;a href=&#34;https://plot.ly/~RhettAllain/&#34;&gt;Rhett Allain&lt;/a&gt; from Wired Science.&lt;/li&gt;
&lt;li&gt;You can &lt;a href=&#34;http://plot.ly/api/r/docs/iframes&#34;&gt;embed interactive graphs in iframes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-1-inspiration-and-team&#34;&gt;2.1 Inspiration and team&lt;/h3&gt;

&lt;p&gt;Plotly&amp;rsquo;s API is part of &lt;code&gt;rOpenSci&lt;/code&gt; and being developed by the brilliant &lt;a href=&#34;http://cbio.ensmp.fr/~thocking/&#34;&gt;Toby Hocking&lt;/a&gt; and Plotly&amp;rsquo;s own &lt;a href=&#34;https://github.com/chriddyp&#34;&gt;Chris Parmer&lt;/a&gt;. You can find it on &lt;a href=&#34;https://github.com/ropensci/plotly&#34;&gt;GitHub&lt;/a&gt;. Your thoughts, issues, and pull requests are welcome. Right now, you can make scatter and line plots; let us know what you&amp;rsquo;d like to see next.&lt;/p&gt;

&lt;p&gt;The project was inspired by &lt;a href=&#34;https://github.com/hadley/&#34;&gt;Hadley Wickham&lt;/a&gt; and the elegance and precision of &lt;a href=&#34;http://ggplot2.org/&#34;&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;. Thanks to &lt;a href=&#34;http://scottchamberlain.info/&#34;&gt;Scott Chamberlain&lt;/a&gt;, &lt;a href=&#34;https://github.com/jcheng5&#34;&gt;Joe Cheng&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/efvmw&#34;&gt;Elizabeth Morrison-Wells&lt;/a&gt; for their help.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-ggthemes-and-plotly&#34;&gt;3. ggthemes and Plotly&lt;/h2&gt;

&lt;p&gt;Using &lt;a href=&#34;https://github.com/jrnold/ggthemes&#34;&gt;&lt;code&gt;ggthemes&lt;/code&gt;&lt;/a&gt; opens up another set of custom graph filters for styling your graphs. To get started, you&amp;rsquo;ll want to install &lt;code&gt;ggthemes&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;devtools&amp;quot;)
install_github(&amp;quot;ggthemes&amp;quot;, &amp;quot;jrnold&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and load your data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;ggplot2&amp;quot;)
library(&amp;quot;ggthemes&amp;quot;)
dsamp &amp;lt;- diamonds[sample(nrow(diamonds), 1000), ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Inverse gray.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gray &amp;lt;- (qplot(carat, price, data = dsamp, colour = cut) +
           theme_igray())
py$ggplotly(gray)
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe height=&#34;600&#34; id=&#34;igraph&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;
                src=&#34;https://plot.ly/~RgraphingAPI/560&#34; width=&#34;600&#34; frameBorder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
The Tableau scale.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tableau &amp;lt;- (qplot(carat, price, data = dsamp, colour = cut) +
              theme_igray() +
              scale_colour_tableau())
py$ggplotly(tableau)
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe height=&#34;600&#34; id=&#34;igraph&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;
                src=&#34;https://plot.ly/~RgraphingAPI/561&#34; width=&#34;600&#34; frameBorder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href=&#34;http://www.perceptualedge.com/articles/visual_business_intelligence/rules_for_using_color.pdf&#34;&gt;Stephen Few&amp;rsquo;s&lt;/a&gt; scale.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;few &amp;lt;- (qplot(carat, price, data = dsamp, colour = cut) +
          theme_few() +
          scale_colour_few())
py$ggplotly(few)
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe height=&#34;600&#34; id=&#34;igraph&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;
                src=&#34;https://plot.ly/~RgraphingAPI/562&#34; width=&#34;600&#34; frameBorder=&#34;0&#34;&gt;&lt;/iframe&gt;

      </description>
    </item>
    
    <item>
      <title>Species occurrence data to CartoDB</title>
      <link>https://ropensci.org/blog/2013/11/04/data-to-cartodb/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/11/04/data-to-cartodb/</guid>
      <description>
        
        

&lt;p&gt;We have previously written about creating interactive maps on the web from R, with the interactive maps on Github. See &lt;a href=&#34;http://ropensci.org/blog/2013/10/23/style-geojson-polygon/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://ropensci.org/blog/2013/07/17/style-geojson/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;http://recology.info/2013/06/geojson/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A different approach is to use &lt;a href=&#34;http://cartodb.com/&#34;&gt;CartoDB&lt;/a&gt;, &lt;a href=&#34;http://cartodb.com/pricing/&#34;&gt;a freemium service&lt;/a&gt; with sql interface to your data tables that provides a map to visualize data in those tables. They released an R interace to their sql API &lt;a href=&#34;https://github.com/Vizzuality/cartodb-r&#34;&gt;on Github here&lt;/a&gt; - which we can use to make an interactive map from R.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll first get some data from GBIF, ~500 occurrences of &lt;em&gt;Puma concolor&lt;/em&gt; in the US, then push that data to a CartoDB table. There are a couple more non-programmatic steps in this workflow than with pushing geojson file to Github as outlined in the previous linked above (i.e., going to the CartoDB site and making a visualization, and making it public).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;install-packages&#34;&gt;Install packages&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
library(devtools)
install_github(&amp;quot;rgbif&amp;quot;, &amp;quot;ropensci&amp;quot;, ref = &amp;quot;newapi&amp;quot;)
install_github(&amp;quot;cartodb-r&amp;quot;, &amp;quot;Vizzuality&amp;quot;, subdir = &amp;quot;CartoDB&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-em&#34;&gt;Load em&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgbif)
library(CartoDB)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;get-some-data-from-gbif&#34;&gt;Get some data from GBIF&lt;/h2&gt;

&lt;p&gt;Here, we&amp;rsquo;ll get data for Puma concolor, the &lt;em&gt;hello, world&lt;/em&gt; for biodiversity data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;key &amp;lt;- gbif_lookup(name = &amp;quot;Puma concolor&amp;quot;, kingdom = &amp;quot;animals&amp;quot;)$speciesKey
data &amp;lt;- occ_search(taxonKey = key, limit = 500, georeferenced = TRUE, country = &amp;quot;US&amp;quot;,
    return = &amp;quot;data&amp;quot;)
head(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                             name longitude latitude
## 1 Puma concolor (Linnaeus, 1771)    -108.9    32.70
## 2 Puma concolor (Linnaeus, 1771)    -108.0    32.88
## 3 Puma concolor (Linnaeus, 1771)    -105.5    32.95
## 4 Puma concolor (Linnaeus, 1771)    -107.8    33.61
## 5 Puma concolor (Linnaeus, 1771)    -107.5    33.00
## 6 Puma concolor (Linnaeus, 1771)    -106.5    36.69
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	500 obs. of  3 variables:
##  $ name     : Factor w/ 7 levels &amp;quot;Animalia&amp;quot;,&amp;quot;Carnivora&amp;quot;,..: 7 7 7 7 7 7 7 7 7 7 ...
##  $ longitude: num  -109 -108 -105 -108 -107 ...
##  $ latitude : num  32.7 32.9 33 33.6 33 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, we have some data. Now let&amp;rsquo;s make a map.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;push-data-up-to-cartodb&#34;&gt;Push data up to CartoDB&lt;/h2&gt;

&lt;p&gt;I frist crated a table in my CartoDB account named &lt;code&gt;pumamap&lt;/code&gt;. Then, I need to initialize the connection with CartoDB with my account name and API key. Note that I am pulling up my key from my .Rprofile file on my machine for ease and so it&amp;rsquo;s not revealed to you :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;key = getOption(&amp;quot;mycartodbkey&amp;quot;)
cartodb(&amp;quot;recology&amp;quot;, api.key = key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to push data to our &lt;code&gt;pumamap&lt;/code&gt; table using the function &lt;code&gt;cartodb.row.insert&lt;/code&gt;. It accepts one row of data, so we&amp;rsquo;ll pass each row of data with an &lt;code&gt;lapply&lt;/code&gt; call.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rows &amp;lt;- apply(data, 1, as.list)
lapply(rows, function(x) cartodb.row.insert(name = &amp;quot;pumamap&amp;quot;, columns = list(&amp;quot;name&amp;quot;,
    &amp;quot;longitude&amp;quot;, &amp;quot;latitude&amp;quot;), values = x))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the upload is finished, I had to make sure the table was georeferenced, and played with settings to suit my style. And then I made a visualization from the &lt;code&gt;pumamap&lt;/code&gt; dataset and made it public. And that&amp;rsquo;s it!  You can find the map &lt;a href=&#34;http://cdb.io/1fbvgCG&#34;&gt;here&lt;/a&gt;, and it can be embedded:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;iframe width=&#39;100%&#39; height=&#39;400&#39; frameborder=&#39;0&#39; src=&#39;http://recology.cartodb.com/viz/76a5598e-444b-11e3-8a8c-5404a6a69006/embed_map?title=false&amp;description=false&amp;search=false&amp;shareable=false&amp;cartodb_logo=true&amp;layer_selector=false&amp;legends=false&amp;scrollwheel=true&amp;sublayer_options=1&amp;sql=&amp;zoom=3&amp;center_lat=37.61423141542417&amp;center_lon=-100.72265625&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;And we can examine a row from the table in our CartoDB account with a single line of code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cartodb.row.get(name = &amp;quot;pumamap&amp;quot;, cartodb_id = 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   cartodb_id                           name description
## 1          1 Puma concolor (Linnaeus, 1771)        NULL
##                 created_at               updated_at
## 1 2013-11-03T06:40:12+0100 2013-11-03T06:46:55+0100
##                                             the_geom the_geom_webmercator
## 1 0101000020E610000089247A19C5365BC08C15359886594040                 NULL
##   latitude longitude
## 1     32.7    -108.9
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Interactive maps with polygons using R, Geojson, and Github</title>
      <link>https://ropensci.org/blog/2013/10/23/style-geojson-polygon/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/10/23/style-geojson-polygon/</guid>
      <description>
        
        

&lt;p&gt;Previously on this blog we have discussed making geojson maps and uploading to Github for interactive visualization &lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;with USGS BISON data&lt;/a&gt;, and &lt;a href=&#34;http://ropensci.org/blog/2013/07/17/style-geojson/&#34;&gt;with GBIF data&lt;/a&gt;, and on &lt;a href=&#34;http://sckott.github.io/2013/06/geojson/&#34;&gt;my own personal blog&lt;/a&gt;. This is done using a file format called &lt;a href=&#34;http://en.wikipedia.org/wiki/GeoJSON&#34;&gt;&lt;em&gt;geojson&lt;/em&gt;&lt;/a&gt;, a file format based on JSON (JavaScript Object Notation) in which you can specify geographic data along with any other metadata.&lt;/p&gt;

&lt;p&gt;In two the previous posts about &lt;em&gt;geojson&lt;/em&gt;, I described how you could get data from the USGS BISON API using our &lt;a href=&#34;https://github.com/ropensci/rbison&#34;&gt;rbison package&lt;/a&gt;, and from the GBIF API using the &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;rgbif package&lt;/a&gt;, then make a &lt;em&gt;geojson&lt;/em&gt; file, and send to Github. In both examples, the data were points. What about polygons?  This is a relatively common use case in which an area is defined on a map instead of points - and polygons are supported in geojson.  How do we do this with the R to geojson to Github workflow?&lt;/p&gt;

&lt;p&gt;Using our package rgbif you can get a interactive map with polygons up on Github in just four lines of code! Of course creating a .shp file will take more than four lines of code.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;install-rgbif&#34;&gt;Install rgbif&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll need devtools packge to install rgbif from Github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
library(devtools)
install_github(&amp;quot;rgbif&amp;quot;, &amp;quot;ropensci&amp;quot;, ref=&amp;quot;newapi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-rgbif&#34;&gt;Load rgbif&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgbif)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;make-the-map&#34;&gt;Make the map&lt;/h2&gt;

&lt;p&gt;There are various ways of getting a .shp file. I won&amp;rsquo;t go over those here, so we&amp;rsquo;ll just use a .shp file from the web. I downloaded a zip file for &lt;em&gt;Abies magnifica&lt;/em&gt; for its range map from the book &lt;em&gt;Atlas of United States Trees&lt;/em&gt; from &lt;a href=&#34;http://esp.cr.usgs.gov/data/little/&#34;&gt;this site&lt;/a&gt; - here is the link for the zip file: &lt;a href=&#34;http://esp.cr.usgs.gov/data/little/abiemagn.zip&#34;&gt;http://esp.cr.usgs.gov/data/little/abiemagn.zip&lt;/a&gt;. I unzipped the file locally on my machine, and here we just use the &lt;code&gt;abiemagn.shp&lt;/code&gt; file within that zip file.&lt;/p&gt;

&lt;p&gt;The first line of code in the next code block uses the function &lt;code&gt;togeojson&lt;/code&gt; to make a geojson file, which is written locally on your machine (a message tells you where it is located, but you can specify where you want it to go with the &lt;code&gt;destpath&lt;/code&gt; parameter). Note that the input argument to &lt;code&gt;togeojson&lt;/code&gt; goes to the directory for &lt;code&gt;abiemagn/abiemagn.shp&lt;/code&gt;, but for this to work you need the associated other two files, in this case: abiemagn.dbf and abiemagn.shx.&lt;/p&gt;

&lt;p&gt;The second line of code uses the &lt;code&gt;gist&lt;/code&gt; function to upload your .geojson file as a gist on Github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- &amp;quot;~/abiemagn/abiemagn.shp&amp;quot;
togeojson(input = file, method = &amp;quot;local&amp;quot;, outfilename = &amp;quot;abiesmagmap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Success! File is at /Users/scottmac2/abiesmagmap.geojson
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gist(&amp;quot;~/abiesmagmap.geojson&amp;quot;, description = &amp;quot;Abies magnifica polygons&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Your gist has been published
## View gist at https://gist.github.com/sckott/7121053
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! The map is immediately available on the web, see &lt;a href=&#34;https://gist.github.com/sckott/7121053&#34;&gt;here&lt;/a&gt; for the one we just created. And you can embed the map too, like here:&lt;/p&gt;

&lt;!-- &lt;iframe src=&#34;https://gist.github.com/sckott/7121053?scroll=false&#34;&gt;&lt;/iframe&gt; --&gt;

&lt;script src=&#34;https://gist.github.com/sckott/7121053.js&#34;&gt;&lt;/script&gt;

      </description>
    </item>
    
    <item>
      <title>Overlaying climate data with species occurrence data</title>
      <link>https://ropensci.org/blog/2013/07/29/rwbclimate-rgbif/</link>
      <pubDate>Mon, 29 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/07/29/rwbclimate-rgbif/</guid>
      <description>
        
        

&lt;p&gt;One of our primary goals at ROpenSci is to wrap as many science API&amp;rsquo;s as possible.  While each package can be used as a standalone interface, there&amp;rsquo;s lots of ways our packages can overlap and complement each other.  Sure &lt;a href=&#34;http://www.youtube.com/watch?v=7yeA7a0uS3A&#34;&gt;He-Man&lt;/a&gt; usually rode &lt;a href=&#34;http://en.wikipedia.org/wiki/Battle_Cat&#34;&gt;Battle Cat&lt;/a&gt;, but there&amp;rsquo;s no reason he couldn&amp;rsquo;t ride a &lt;a href=&#34;http://drawception.com/pub/panels/2012/5-14/swgpnXLCRm-8.png&#34;&gt;my little pony&lt;/a&gt; sometimes too.  That&amp;rsquo;s the case with our packages for &lt;a href=&#34;http://www.gbif.org/&#34;&gt;GBIF&lt;/a&gt; and the &lt;a href=&#34;http://data.worldbank.org/developers/climate-data-api&#34;&gt;worldbank climate data api&lt;/a&gt;.  Both packages will give you lots and lots of data, but a shared feature of both is the ability to plot spatial information.  The &lt;a href=&#34;https://github.com/ropensci/rWBclimate&#34;&gt;rWBclimate&lt;/a&gt; package provides a robust mapping ability on top of access to climate data.  At it&amp;rsquo;s most bare bones, it can be used as alternative to the built in mapping facilities included in &lt;a href=&#34;https://github.com/ropensci/rgbif/&#34;&gt;rgbif&lt;/a&gt;.  Building on the example in the &lt;a href=&#34;http://www.ropensci.org/tutorials/rgbif_tutorial.html#occurrencelist&#34;&gt;rgbif tutorial&lt;/a&gt; we&amp;rsquo;ll plot data for two species in the US and Mexico, the dark eyed junco (&lt;em&gt;Junco hyemalis&lt;/em&gt;) and the wood duck (&lt;em&gt;Aix sponsa&lt;/em&gt;).  Here&amp;rsquo;s how you can use the kml interface from rWBclimate to download a map of the US and Mexico and overlay it with data from rgbif.
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
library(ggplot2)
library(rWBclimate)
library(rgbif)
## Grab some occurrence data

splist &amp;lt;- c(&amp;quot;Junco hyemalis&amp;quot;, &amp;quot;Aix sponsa&amp;quot;)
out &amp;lt;- occurrencelist_many(splist, coordinatestatus = TRUE, maxresults = 1000)

## Set the map data path
options(kmlpath = &amp;quot;/Users/edmundhart/kmltemp&amp;quot;)
sp.map.df &amp;lt;- create_map_df(c(&amp;quot;USA&amp;quot;,&amp;quot;MEX&amp;quot;))

## create map plot
sp.map &amp;lt;- ggplot(sp.map.df,aes(x=long,y=lat,group=group))+geom_polygon(fill=&amp;quot;white&amp;quot;,colour=&amp;quot;black&amp;quot;)+xlim(-130,-65)+ylim(12,50)

## Overlay occurrence data
sp.map + geom_point(data=gbifdata(out),aes(y=decimalLatitude,x=decimalLongitude,group=taxonName,colour=taxonName))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-07-29-rWBclimate-rgbif/gbifmap1.png&#34; alt=&#34;center&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;overlaying-climate-data-with-occurrence-data&#34;&gt;Overlaying climate data with occurrence data&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s how you could make a basic map, but what if you want to overlay climate data with occurrence data?  That&amp;rsquo;s easy too.  You repeat essentially the same steps as above, but be sure to grab some climate data too. In this example I&amp;rsquo;ve chose to grab data for 8 different tree species that exhibit somewhat of a lattitudinal gradient.  I&amp;rsquo;ll map them on top of historical temperature data.  In this case I&amp;rsquo;ll be using the average annual temperature from 1990 to 2000.  Because I want a bit better spatial resolution I&amp;rsquo;ll be using basin level data instead of country level data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
### Download map data
usmex &amp;lt;- c(273:284,328:365)
usmex.basin &amp;lt;- create_map_df(usmex)

## Download temperature data
temp.dat &amp;lt;- get_historical_temp(usmex, &amp;quot;decade&amp;quot; )
temp.dat &amp;lt;- subset(temp.dat,temp.dat$year == 2000 )


#create my climate map
usmex.map.df &amp;lt;- climate_map(usmex.basin,temp.dat,return_map=F)


## Grab some species occurrence data for the 8 tree species.

splist &amp;lt;- c(&amp;quot;Acer saccharum&amp;quot;,
            &amp;quot;Abies balsamea&amp;quot;,
            &amp;quot;Arbutus texana&amp;quot;,
            &amp;quot;Betula alleghaniensis&amp;quot;,
            &amp;quot;Chilopsis linearis&amp;quot;,
            &amp;quot;Conocarpus erectus&amp;quot;,
            &amp;quot;Populus tremuloides&amp;quot;,
            &amp;quot;Larix laricina&amp;quot;)
out &amp;lt;- occurrencelist_many(splist, coordinatestatus=TRUE, maxresults=1000, fixnames=&amp;quot;match&amp;quot;)

## Now just create the base temperature map
usmex.map &amp;lt;- ggplot()+geom_polygon(data=usmex.map.df,aes(x=long,y=lat,group=group,fill=data,alpha=.8))+scale_fill_continuous(&amp;quot;Average annual \n temp: 1990-2000&amp;quot;,low=&amp;quot;yellow&amp;quot;,high=&amp;quot;red&amp;quot;)+ guides(alpha=F)+theme_bw()


## And overlay of gbif data
usmex.map + geom_point(data=gbifdata(out),aes(y=decimalLatitude,x=decimalLongitude,group=taxonName,colour= taxonName)) + xlim(-125,-59)+ylim(5,55)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-07-29-rWBclimate-rgbif/gbifmap2.png&#34; alt=&#34;center&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The map doesn&amp;rsquo;t have borders because it&amp;rsquo;s created at the basin level, but it would be easy enough to add an outline for the countries.  You could also plot any of your own data over climate maps because they are based on decimal lattitude and longitude coordinates, or data from multiple sources.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Making maps of climate change</title>
      <link>https://ropensci.org/blog/2013/07/19/rwbclimate-maps/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/07/19/rwbclimate-maps/</guid>
      <description>
        
        

&lt;p&gt;A recent video on the &lt;a href=&#34;http://video.pbs.org/program/idea-channel/&#34;&gt;PBS Ideas Channel&lt;/a&gt; posited that the discovery of &lt;a href=&#34;http://www.youtube.com/watch?v=1M1BPz0nY3s&#34;&gt;climate change is humanities greatest scientific achievement&lt;/a&gt;. It took synthesizing generations of data from thousands of scientists, hundreds of thousands (if not more) of hours of computer time to run models at institutions all over the world.  But how can the individual researcher get their hands of some this data?  Right now the &lt;a href=&#34;http://www.worldbank.org&#34;&gt;World Bank&lt;/a&gt; provides access to global circulation model (GCM) output from between 1900 and 2100 in 20 year intervals via their &lt;a href=&#34;http://data.worldbank.org/developers/climate-data-api&#34;&gt;climate data api&lt;/a&gt;.  Using our new package &lt;a href=&#34;https://github.com/ropensci/rWBclimate&#34;&gt;rWBclimate&lt;/a&gt; you can access model output from 15 different GCM&amp;rsquo;s, ensemble data from all GCM&amp;rsquo;s aggregated, and historical climate data.  This data is available at two different spatial scales, individual countries or watershed basins. On top of access to all this data, the API provides a way to download &lt;a href=&#34;https://developers.google.com/kml/documentation/&#34;&gt;KML&lt;/a&gt; definitions for each corresponding spatial element (country or basin).  This means with our package it&amp;rsquo;s easy to download climate data and create maps of any of the thousands of datapoints you have access to via the API.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;install-rwbclimate&#34;&gt;Install rWBclimate&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install_github(&#39;rWBclimate&#39;, &#39;ropensci&#39;)
library(rWBclimate)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;map-of-north-american-precipitation-anomalies&#34;&gt;Map of North American precipitation anomalies&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Aside from access to both temperature and preciptation data, you can download anomaly data, showing the change from some time period and a control period of 1961-2009.  Let&amp;rsquo;s create a precipitation anomaly map to see how much change there will be across North America.  The first thing we&amp;rsquo;ll need to do is download the data and subset it so we have one piece of spatial information per KML polygon.  We&amp;rsquo;ll be using examples with preloaded basin ID&amp;rsquo;s, in this case &lt;em&gt;NoAm_basin&lt;/em&gt;.  However you can download data with a vector of numbers for &lt;a href=&#34;http://data.worldbank.org/sites/default/files/climate_data_api_basins.pdf&#34;&gt;basins&lt;/a&gt; or countries using three letter &lt;a href=&#34;http://unstats.un.org/unsd/methods/m49/m49alpha.htm&#34;&gt;ISO country codes&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Download data for all basins in North America in the 2080-2100 period
prp.dat &amp;lt;- get_ensemble_precip(NoAm_basin,&amp;quot;annualanom&amp;quot;,2080,2100)

#subset the data to the 50th percentile
prp.dat &amp;lt;- subset(prp.dat, prp.dat$scenario == &amp;quot;a2&amp;quot; &amp;amp; prp.dat$percentile == 50)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we should have all the data we need, we need to download the KML files to map.  rWBclimate locally stores KML files in a directory you specify until they are deleted.  You&amp;rsquo;ll need to set kmlpath in the options as follows: &lt;code&gt;options(kmlpath=&amp;quot;/Users/edmundhart/kmltemp&amp;quot;)&lt;/code&gt; KML files can be large so when first downloading it can take some time to create a map dataframe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(kmlpath=&amp;quot;/Users/edmundhart/kmltemp&amp;quot;)
#First create a mapable data frame with the same basin ID&#39;s that were used to download data.
prp.map &amp;lt;- create_map_df(NoAm_basin)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you have your data as well as your dataframe of polygons we just need to use one last function to create a map.  You have two options with this function.  It can return a dataframe that you can map yourself, or a ggplot2 map that can be modified as you see fit like in this example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pranom.map &amp;lt;- climate_map(prp.map,prp.dat)
pranom.map &amp;lt;- pranom.map + scale_fill_continuous(&amp;quot;Precipitation \n anomaly (mm)&amp;quot;, low=&amp;quot;Red&amp;quot;,high = &amp;quot;Blue&amp;quot;)+ylab(&amp;quot;Latitude&amp;quot;)+xlab(&amp;quot;Longitude&amp;quot;) + theme_bw()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you can see that northern latitudes are expected to get much rainier while as you move closer to the equator the climate will become drier.
&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-07-19-rWBclimate-maps/precipMap.png&#34; alt=&#34;center&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;creating-a-global-temperature-map&#34;&gt;Creating a global temperature map&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;
You could also create custom global maps.  Let&amp;rsquo;s put it all together and make a world map at the basin level for temperature anomaly.  This will take a bit of time to run beacuse you&amp;rsquo;re downloading 438 kml files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
wtemp.dat &amp;lt;- get_ensemble_temp(1:468,&amp;quot;annualanom&amp;quot;,2080,2100)
wtemp.dat &amp;lt;- subset(wtemp.dat, wtemp.dat$scenario == &amp;quot;a2&amp;quot; &amp;amp; wtemp.dat$percentile == 50)
wtemp.map.df &amp;lt;- create_map_df(1:468)
wtemp.map &amp;lt;- climate_map(wtemp.map.df,wtemp.dat)

wtemp.map &amp;lt;- wtemp.map + scale_fill_continuous(&amp;quot;Temperature \n anomaly&amp;quot;, low=&amp;quot;Yellow&amp;quot;,high = &amp;quot;red&amp;quot;)+ylab(&amp;quot;Latitude&amp;quot;)+xlab(&amp;quot;Longitude&amp;quot;) + theme_bw()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2013-07-19-rWBclimate-maps/wtempMap.png&#34; alt=&#34;center&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This creates a world map of temperature anomalies. There&amp;rsquo;s a tremendous amount of data available that you can map and and plot available from the climate data api, check out the &lt;a href=&#34;https://github.com/ropensci/rWBclimate/blob/master/README.md&#34;&gt;vignette up on the github webpage for a full tutorial.&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Style GeoJSON</title>
      <link>https://ropensci.org/blog/2013/07/17/style-geojson/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/07/17/style-geojson/</guid>
      <description>
        
        

&lt;p&gt;&lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;Previously on this blog&lt;/a&gt; and on &lt;a href=&#34;http://sckott.github.io/2013/06/geojson/&#34;&gt;my own personal blog&lt;/a&gt;, I have discussed how easy it is to create interactive maps on Github using a combination of R, git and Github. This is done using a file format called &lt;a href=&#34;http://en.wikipedia.org/wiki/GeoJSON&#34;&gt;&lt;em&gt;geojson&lt;/em&gt;&lt;/a&gt;, a file format based on JSON (JavaScript Object Notation) in which you can specify geographic data along with any other metadata.&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;previous post on this blog&lt;/a&gt; about &lt;em&gt;geojson&lt;/em&gt;, I described how you could get data from the USGS BISON API using our &lt;a href=&#34;https://github.com/ropensci/rbison&#34;&gt;rbison package&lt;/a&gt;, then make a &lt;em&gt;geojson&lt;/em&gt; file, then push to Github. Here, I describe briefly how you can style your map. This time, we&amp;rsquo;ll get data from &lt;a href=&#34;http://www.gbif.org/&#34;&gt;GBIF&lt;/a&gt; using the &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;rgbif package&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;load-package&#34;&gt;Load package&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install_github(&#39;rgbif&#39;, &#39;ropensci&#39;)
library(rgbif)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;get-data-from-gbif&#34;&gt;Get data from GBIF&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;splist &amp;lt;- c(&amp;quot;Accipiter erythronemius&amp;quot;, &amp;quot;Junco hyemalis&amp;quot;, &amp;quot;Aix sponsa&amp;quot;)
out &amp;lt;- occurrencelist_many(splist, coordinatestatus = TRUE, maxresults = 100)
dat &amp;lt;- gbifdata(out)
head(dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                taxonName decimalLatitude decimalLongitude
1 Accipiter erythronemius          -25.91           -54.36
2 Accipiter erythronemius          -25.86           -54.52
3 Accipiter erythronemius          -25.86           -54.52
4 Accipiter erythronemius          -27.35           -65.60
5 Accipiter erythronemius          -27.35           -65.60
6 Accipiter erythronemius          -27.35           -65.60
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;style&#34;&gt;Style&lt;/h2&gt;

&lt;p&gt;We first need to convert column names to be &lt;em&gt;latitude&lt;/em&gt; and &lt;em&gt;longitude&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(dat)[names(dat) %in% c(&amp;quot;decimalLatitude&amp;quot;, &amp;quot;decimalLongitude&amp;quot;)] &amp;lt;- c(&amp;quot;latitude&amp;quot;,
    &amp;quot;longitude&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then use a new function &lt;code&gt;stylegeojson&lt;/code&gt; to simply add new columns to the data.frame. With &lt;code&gt;stylegeojson&lt;/code&gt; you can add marker colors, symbols, and size. Note that this only works for point/marker maps (not polygon/line) for now. You could also simply edit the geojson file, but that can get very tedious with large files. You can specify color, symbol type, and symbol size all for the same variable, or each of those for different variables - where the ordering of the vector of colors, symbol types and sizes follows the ordering of the unique variable levels. Here we specify a separate color and size for each of the three species within the &lt;em&gt;taxonName&lt;/em&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat &amp;lt;- stylegeojson(input = dat, var = &amp;quot;taxonName&amp;quot;, color = c(&amp;quot;#976AAE&amp;quot;, &amp;quot;#6B944D&amp;quot;,
    &amp;quot;#BD5945&amp;quot;), size = &amp;quot;small&amp;quot;)
head(dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                taxonName latitude longitude marker-color marker-size
1 Accipiter erythronemius   -25.91    -54.36      #976AAE       small
2 Accipiter erythronemius   -25.86    -54.52      #976AAE       small
3 Accipiter erythronemius   -25.86    -54.52      #976AAE       small
4 Accipiter erythronemius   -27.35    -65.60      #976AAE       small
5 Accipiter erythronemius   -27.35    -65.60      #976AAE       small
6 Accipiter erythronemius   -27.35    -65.60      #976AAE       small
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, specify one color for all three species, and make them all size medium.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat &amp;lt;- stylegeojson(input = dat, var = &amp;quot;taxonName&amp;quot;, color = &amp;quot;#6B944D&amp;quot;, size = &amp;quot;medium&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then write the data.frame to disk, and convert to a &lt;em&gt;geojson&lt;/em&gt; file using the function &lt;code&gt;togeojson&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;write.csv(dat, &amp;quot;~/github/sac/mygeojson/rgbif_data.csv&amp;quot;)
file &amp;lt;- &amp;quot;~/github/sac/mygeojson/rgbif_data.csv&amp;quot;
togeojson(file, method = &amp;quot;web&amp;quot;, destpath = &amp;quot;~/github/sac/mygeojson/&amp;quot;, outfilename = &amp;quot;rgbif_data&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-er-done&#34;&gt;Git &amp;lsquo;er done&lt;/h2&gt;

&lt;p&gt;All we need to do now is go to the command line or your git GUI client and push the changes to Github. If you need help with that see Step 3 in the &lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;previous geojson post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go &lt;a href=&#34;https://render.github.com/view/geojson?url=https://raw.github.com/sckott/mygeojson/master/rgbif_data.geojson&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; to see the map.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. have a look at your map, have fun, and let us know if you have any feature requests or bug reports at our Github issues tracker for rgbif &lt;a href=&#34;https://github.com/ropensci/rgbif/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
