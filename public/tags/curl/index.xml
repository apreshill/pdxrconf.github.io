<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curl on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/curl/</link>
    <description>Recent content in Curl on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 18 Dec 2014 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/curl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Curling - exploring web request options</title>
      <link>https://ropensci.org/blog/2014/12/18/curl-options/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/12/18/curl-options/</guid>
      <description>
        
        

&lt;p&gt;rOpenSci specializes in creating R libraries for accessing data resources on the web from R. Most times you request data from the web in R with our packages, you should have no problem. However, you evenutally will run into problems. In addition, there are advanced things you can do modifying requests to web resources that fall in the &lt;em&gt;advanced stuff&lt;/em&gt; category.&lt;/p&gt;

&lt;p&gt;Underlying almost all of our packages are requests to web resources served over the &lt;code&gt;http&lt;/code&gt; protocol via &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;. &lt;code&gt;curl&lt;/code&gt; &lt;em&gt;is a command line tool and library for transferring data with URL syntax, supporting (lots of protocols)&lt;/em&gt; . &lt;code&gt;curl&lt;/code&gt; has many options that you may not know about.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll go over some of the common and less commonly used curl options, and try to explain why you may want to use some of them.&lt;/p&gt;

&lt;h2 id=&#34;discover-curl-options&#34;&gt;Discover curl options&lt;/h2&gt;

&lt;p&gt;You can go to the source, that is the curl manual page at &lt;a href=&#34;http://curl.haxx.se/docs/manpage.html&#34;&gt;http://curl.haxx.se/docs/manpage.html&lt;/a&gt;. In R: &lt;code&gt;RCurl::listCurlOptions()&lt;/code&gt; for finding curl options, give website for more info and equivalent call in &lt;code&gt;httr&lt;/code&gt; is &lt;code&gt;httr::httr_options()&lt;/code&gt;. &lt;code&gt;httr::httr_options()&lt;/code&gt; gives more information for each curl option, including the libcurl variable name (e.g., &lt;code&gt;CURLOPT_CERTINFO&lt;/code&gt;) and the type of variable (e.g., logical).&lt;/p&gt;

&lt;h2 id=&#34;other-ways-to-use-curl-besides-r&#34;&gt;Other ways to use curl besides R&lt;/h2&gt;

&lt;p&gt;Perhaps the canonical way to use curl is on the command line. You can get curl for your operating system at &lt;a href=&#34;http://curl.haxx.se/download.html&#34;&gt;http://curl.haxx.se/download.html&lt;/a&gt;, though hopefully you already have curl. Once you have curl, you can have lots of fun. For example, get the contents of the Google landing page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl https://www.google.com
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If you like that you may also like &lt;a href=&#34;https://github.com/jakubroztocil/httpie&#34;&gt;httpie&lt;/a&gt;, a Python command line tool that is a little more convenient than curl (e.g., JSON output is automatically parsed and colorized).&lt;/li&gt;
&lt;li&gt;Alot of data from the web is in JSON format. A great command line tool to pair with &lt;code&gt;curl&lt;/code&gt; is &lt;a href=&#34;http://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: if you are on windows you may require extra setup if you want to play with curl on the command line. OSX and linux have it by default. On Windows 8, installing the latest version from here &lt;a href=&#34;http://curl.haxx.se/download.html#Win64&#34;&gt;http://curl.haxx.se/download.html#Win64&lt;/a&gt; worked for me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;install-httr&#34;&gt;Install httr&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code&gt;RCurl&lt;/code&gt; is a dependency, so you&amp;rsquo;ll get it when you install &lt;code&gt;httr&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;httr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are some new features in &lt;code&gt;httr&lt;/code&gt; dev version you may want. If so, do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;hadley/httr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Load &lt;code&gt;httr&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;httr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;general-option-setting&#34;&gt;general option setting&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;httr&lt;/code&gt; you can either set globally for an R session like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set_config(timeout(seconds = 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use &lt;code&gt;with_config()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;with_config(verbose(), {
  GET(&amp;quot;http://www.google.com/search&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or extensions to &lt;code&gt;with_*&lt;/code&gt;, like for &lt;code&gt;verbose&lt;/code&gt; output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;with_verbose(
  GET(&amp;quot;http://www.google.com/search&amp;quot;)
)
#&amp;gt; Response [http://www.google.com/webhp]
#&amp;gt;   Date: 2014-12-17 07:54
#&amp;gt;   Status: 200
#&amp;gt;   Content-Type: text/html; charset=ISO-8859-1
#&amp;gt;   Size: 19.3 kB
#&amp;gt; &amp;lt;!doctype html&amp;gt;&amp;lt;html itemscope=&amp;quot;&amp;quot; itemtype=&amp;quot;http://schema.org/WebPage&amp;quot; l...
#&amp;gt; function _gjh(){!_gjuc()&amp;amp;&amp;amp;window.google&amp;amp;&amp;amp;google.x&amp;amp;&amp;amp;google.x({id:&amp;quot;GJH&amp;quot;},f...
#&amp;gt; if (!iesg){document.f&amp;amp;&amp;amp;document.f.q.focus();document.gbqf&amp;amp;&amp;amp;document.gbqf...
#&amp;gt; }
#&amp;gt; })();&amp;lt;/script&amp;gt;&amp;lt;div id=&amp;quot;mngb&amp;quot;&amp;gt;   &amp;lt;div id=gbar&amp;gt;&amp;lt;nobr&amp;gt;&amp;lt;b class=gb1&amp;gt;Search&amp;lt;/...
#&amp;gt; a.i.Z,window.gbar.elr&amp;amp;&amp;amp;a.i.$(window.gbar.elr()),window.gbar.elc&amp;amp;&amp;amp;window....
#&amp;gt; });})();&amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/span&amp;gt;&amp;lt;br clear=&amp;quot;all&amp;quot; id=&amp;quot;lgpd&amp;quot;&amp;gt;&amp;lt;div id=&amp;quot;lga&amp;quot;&amp;gt;...
#&amp;gt; });})();&amp;lt;/script&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span id=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;div style=&amp;quot;font-size:10p...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or pass into each function call&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;GET(&amp;quot;http://www.google.com/search&amp;quot;, query=list(q=&amp;quot;httr&amp;quot;), timeout(seconds = 0.5))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;RCurl&lt;/code&gt; you can set options for a function call by passing curl options to the &lt;code&gt;.opts&lt;/code&gt; parameter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;getForm(&amp;quot;http://www.google.com/search?q=RCurl&amp;quot;, btnG=&amp;quot;Search&amp;quot;, .opts = list(timeout.ms = 20))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all examples below I&amp;rsquo;ll use &lt;code&gt;httr&lt;/code&gt;, and pass in config options to function calls.&lt;/p&gt;

&lt;h2 id=&#34;curl-options-in-ropensci-packages&#34;&gt;curl options in rOpenSci packages&lt;/h2&gt;

&lt;p&gt;In most of our packages we allow you to pass in any curl options, either via &lt;code&gt;...&lt;/code&gt; or a named parameter. We are increasingly making our packages consistent, but they may not all have this ability yet. For example, using the &lt;code&gt;rgbif&lt;/code&gt; package, an R client for &lt;a href=&#34;http://www.gbif.org/&#34;&gt;GBIF&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;rgbif&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;verbose output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;rgbif&amp;quot;)
res &amp;lt;- occ_search(geometry=c(-125.0,38.4,-121.8,40.9), limit=20, config=verbose())
#&amp;gt; -&amp;gt; GET /v1/occurrence/search?geometry=POLYGON%28%28-125%2038.4%2C%20-121.8%2038.4%2C%20-121.8%2040.9%2C%20-125%2040.9%2C%20-125%2038.4%29%29&amp;amp;limit=20&amp;amp;offset=0 HTTP/1.1
#&amp;gt; -&amp;gt; User-Agent: curl/7.37.1 Rcurl/1.95.4.5 httr/0.6.0
#&amp;gt; -&amp;gt; Host: api.gbif.org
#&amp;gt; -&amp;gt; Accept-Encoding: gzip
#&amp;gt; -&amp;gt; Accept: application/json, text/xml, application/xml, */*
#&amp;gt; -&amp;gt;
#&amp;gt; &amp;lt;- HTTP/1.1 200 OK
#&amp;gt; &amp;lt;- Content-Type: application/json
#&amp;gt; &amp;lt;- Access-Control-Allow-Origin: *
#&amp;gt; &amp;lt;- Server: Jetty(9.1.z-SNAPSHOT)
#&amp;gt; &amp;lt;- x-api-url: /v1/occurrence/search?geometry=POLYGON%28%28-125%2038.4%2C%20-121.8%2038.4%2C%20-121.8%2040.9%2C%20-125%2040.9%2C%20-125%2038.4%29%29&amp;amp;limit=20&amp;amp;offset=0
#&amp;gt; &amp;lt;- Content-Length: 48698
#&amp;gt; &amp;lt;- Accept-Ranges: bytes
#&amp;gt; &amp;lt;- Date: Tue, 16 Dec 2014 23:35:52 GMT
#&amp;gt; &amp;lt;- X-Varnish: 1067986052 1067940827
#&amp;gt; &amp;lt;- Age: 209
#&amp;gt; &amp;lt;- Via: 1.1 varnish
#&amp;gt; &amp;lt;- Connection: keep-alive
#&amp;gt; &amp;lt;-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Print progress&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- occ_search(geometry=c(-125.0,38.4,-121.8,40.9), limit=20, config=progress())
#&amp;gt; |===================================================================| 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also combine curl options - use &lt;code&gt;c()&lt;/code&gt; in this case to combine them&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(verbose(), progress())
#&amp;gt; Config:
#&amp;gt; List of 4
#&amp;gt;  $ debugfunction   :function (...)
#&amp;gt;  $ verbose         :TRUE
#&amp;gt;  $ noprogress      :FALSE
#&amp;gt;  $ progressfunction:function (...)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- occ_search(geometry=c(-125.0,38.4,-121.8,40.9), limit=20, config=c(verbose(), progress()))
#&amp;gt; -&amp;gt; GET /v1/occurrence/search?geometry=POLYGON%28%28-125%2038.4%2C%20-121.8%2038.4%2C%20-121.8%2040.9%2C%20-125%2040.9%2C%20-125%2038.4%29%29&amp;amp;limit=20&amp;amp;offset=0 HTTP/1.1
#&amp;gt; -&amp;gt; User-Agent: curl/7.37.1 Rcurl/1.95.4.5 httr/0.6.0
#&amp;gt; -&amp;gt; Host: api.gbif.org
#&amp;gt; -&amp;gt; Accept-Encoding: gzip
#&amp;gt; -&amp;gt; Accept: application/json, text/xml, application/xml, */*
#&amp;gt; -&amp;gt;
#&amp;gt; &amp;lt;- HTTP/1.1 200 OK
#&amp;gt; &amp;lt;- Content-Type: application/json
#&amp;gt; &amp;lt;- Access-Control-Allow-Origin: *
#&amp;gt; &amp;lt;- Server: Jetty(9.1.z-SNAPSHOT)
#&amp;gt; &amp;lt;- x-api-url: /v1/occurrence/search?geometry=POLYGON%28%28-125%2038.4%2C%20-121.8%2038.4%2C%20-121.8%2040.9%2C%20-125%2040.9%2C%20-125%2038.4%29%29&amp;amp;limit=20&amp;amp;offset=0
#&amp;gt; &amp;lt;- Content-Length: 48698
#&amp;gt; &amp;lt;- Accept-Ranges: bytes
#&amp;gt; &amp;lt;- Date: Tue, 16 Dec 2014 23:35:52 GMT
#&amp;gt; &amp;lt;- X-Varnish: 1067986052 1067940827
#&amp;gt; &amp;lt;- Age: 209
#&amp;gt; &amp;lt;- Via: 1.1 varnish
#&amp;gt; &amp;lt;- Connection: keep-alive
#&amp;gt; &amp;lt;-
#&amp;gt;   |======================================================================| 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;timeout&#34;&gt;timeout&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Set a timeout for a request. If request exceeds timeout, request stops.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httr&lt;/code&gt;: &lt;code&gt;timeout(seconds=2)&lt;/code&gt; Here, the value is in seconds - converted to ms internally&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RCurl&lt;/code&gt;: &lt;code&gt;timeout.ms=2000&lt;/code&gt; Here, the value is in ms&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: For this section and those following, I&amp;rsquo;ll mention an &lt;code&gt;RCurl&lt;/code&gt; equivalent if there is one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;GET(&amp;quot;http://www.google.com/search&amp;quot;, timeout(0.01))
#&amp;gt; Error in function (type, msg, asError = TRUE)  :
#&amp;gt;   Connection timed out after 16 milliseconds
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why use this?&lt;/em&gt; You sometimes are working with a web resource that is somewhat unreliable. For example, if you want to run a script on a server that may take many hours, and the web resource could be down at some point during that time, you could set the timeout and error catch the response so that the script doesn&amp;rsquo;t hang on a server that&amp;rsquo;s not responding. Another example could be if you call a web resource in an R package. In your test suite, you may want to test that a web resource is responding quickly, so you could set a timeout, and not test if that fails.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;verbose&#34;&gt;verbose&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Print detailed info on a curl call&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httr&lt;/code&gt;: &lt;code&gt;verbose()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RCurl&lt;/code&gt;: &lt;code&gt;verbose=TRUE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just do a &lt;code&gt;HEAD&lt;/code&gt; request so we don&amp;rsquo;t have to deal with big output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;HEAD(&amp;quot;http://www.google.com/search&amp;quot;, verbose())
#&amp;gt; -&amp;gt; HEAD / HTTP/1.1
#&amp;gt; -&amp;gt; User-Agent: curl/7.37.1 Rcurl/1.95.4.5 httr/0.6.0
#&amp;gt; -&amp;gt; Host: had.co.nz
#&amp;gt; -&amp;gt; Accept-Encoding: gzip
#&amp;gt; -&amp;gt; Accept: application/json, text/xml, application/xml, */*
#&amp;gt; -&amp;gt;
#&amp;gt; &amp;lt;- HTTP/1.1 200 OK
#&amp;gt; &amp;lt;- X-Powered-By: PHP/4.4.6
#&amp;gt; &amp;lt;- Content-type: text/html
#&amp;gt; &amp;lt;- Date: Tue, 16 Dec 2014 21:03:21 GMT
#&amp;gt; &amp;lt;- Server: LiteSpeed
#&amp;gt; &amp;lt;- Connection: Keep-Alive
#&amp;gt; &amp;lt;- Keep-Alive: timeout=5, max=100
#&amp;gt; &amp;lt;-
#&amp;gt; Response [http://had.co.nz/]
#&amp;gt;   Date: 2014-12-16 12:29
#&amp;gt;   Status: 200
#&amp;gt;   Content-Type: text/html
#&amp;gt; &amp;lt;EMPTY BODY&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why use this?&lt;/em&gt; As you can see verbose output gives you lots of information that may be useful for debugging a request. You typically don&amp;rsquo;t need verbose output unless you want to inspect a request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;headers&#34;&gt;headers&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Add headers to modify requests, including authentication, setting content-type, accept type, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httr&lt;/code&gt;: &lt;code&gt;add_headers()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RCurl&lt;/code&gt;: &lt;code&gt;httpheader&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- HEAD(&amp;quot;http://www.google.com/search&amp;quot;, add_headers(Accept = &amp;quot;application/json&amp;quot;))
res$request$opts$httpheader
#&amp;gt;             Accept
#&amp;gt; &amp;quot;application/json&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: there are shortcuts for &lt;code&gt;add_headers(Accept = &amp;quot;application/json&amp;quot;)&lt;/code&gt; and add_headers(Accept = &amp;ldquo;application/xml&amp;rdquo;): &lt;code&gt;accept_json()&lt;/code&gt;, and &lt;code&gt;accept_xml()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why use this?&lt;/em&gt; For some web resources, using headers is mandatory, and &lt;code&gt;httr&lt;/code&gt; makes including them quite easy. Headers are nice too because e.g., passing authentication in the header instead of the URL string means your private data is not as exposed to prying eyes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;authenticate&#34;&gt;authenticate&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Set authentication details for a resource&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httr&lt;/code&gt;: &lt;code&gt;authenticate()&lt;/code&gt;, &lt;code&gt;oauth2.0_token()&lt;/code&gt;, &lt;code&gt;oauth_app()&lt;/code&gt;, &lt;code&gt;oauth_endpoint()&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RCurl&lt;/code&gt;: various&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;authenticate()&lt;/code&gt; for basic username/password authentication&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;authenticate(user = &amp;quot;foo&amp;quot;, password = &amp;quot;bar&amp;quot;)
#&amp;gt; Config:
#&amp;gt; List of 2
#&amp;gt;  $ httpauth:1
#&amp;gt;   ..- attr(*, &amp;quot;names&amp;quot;)=&amp;quot;basic&amp;quot;
#&amp;gt;  $ userpwd :&amp;quot;foo:bar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use an API key, this depends on the data provider. They may request it one or either of the header (in multiple different ways)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;HEAD(&amp;quot;http://www.google.com/search&amp;quot;, add_headers(Authorization = &amp;quot;Bearer 234kqhrlj2342&amp;quot;))
# or
HEAD(&amp;quot;http://www.google.com/search&amp;quot;, add_headers(&amp;quot;token&amp;quot; = &amp;quot;234kqhrlj2342&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or as a query parameter (which is passed in the URL string)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;HEAD(&amp;quot;http://www.google.com/search&amp;quot;, query = list(api_key = &amp;quot;&amp;lt;your key&amp;gt;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another authentication options is OAuth workflows. &lt;code&gt;OAuth2&lt;/code&gt; is probably more commonly used than &lt;code&gt;OAuth1&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find OAuth settings for github &lt;a href=&#34;http://developer.github.com/v3/oauth/&#34;&gt;http://developer.github.com/v3/oauth/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;endpts &amp;lt;- oauth_endpoint(authorize = &amp;quot;authorize&amp;quot;, access = &amp;quot;access_token&amp;quot;, base_url = &amp;quot;https://github.com/login/oauth&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Register an application at &lt;a href=&#34;https://github.com/settings/applications&#34;&gt;https://github.com/settings/applications&lt;/a&gt;. Use any URL you would like for the homepage URL (&lt;a href=&#34;http://github.com&#34;&gt;http://github.com&lt;/a&gt; is fine) and &lt;a href=&#34;http://localhost:1410&#34;&gt;http://localhost:1410&lt;/a&gt; as the callback url. Insert your client ID and secret below - if secret is omitted, it will look it up in the GITHUB_CONSUMER_SECRET environmental variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;myapp &amp;lt;- oauth_app(appname = &amp;quot;github&amp;quot;, key = &amp;quot;&amp;lt;key&amp;gt;&amp;quot;, secret = &amp;quot;&amp;lt;secret&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get OAuth credentials&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;github_token &amp;lt;- oauth2.0_token(endpts, myapp)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Use API&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gtoken &amp;lt;- config(token = github_token)
req &amp;lt;- GET(&amp;quot;https://api.github.com/rate_limit&amp;quot;, gtoken)
content(req)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cookies&#34;&gt;cookies&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Set or get cookies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httr&lt;/code&gt;: &lt;code&gt;set_cookies()&lt;/code&gt;, &lt;code&gt;cookies()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RCurl&lt;/code&gt;: &lt;code&gt;cookie&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set cookies&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;GET(&amp;quot;http://httpbin.org/cookies&amp;quot;, set_cookies(a = 1, b = 2))
#&amp;gt; Response [http://httpbin.org/cookies]
#&amp;gt;   Date: 2014-12-17 07:54
#&amp;gt;   Status: 200
#&amp;gt;   Content-Type: application/json
#&amp;gt;   Size: 50 B
#&amp;gt; {
#&amp;gt;   &amp;quot;cookies&amp;quot;: {
#&amp;gt;     &amp;quot;a&amp;quot;: &amp;quot;1&amp;quot;,
#&amp;gt;     &amp;quot;b&amp;quot;: &amp;quot;2&amp;quot;
#&amp;gt;   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there are cookies in a response, you can access them easily with &lt;code&gt;cookies()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- GET(&amp;quot;http://httpbin.org/cookies/set&amp;quot;, query = list(a = 1, b = 2))
cookies(res)
#&amp;gt; $b
#&amp;gt; [1] 2
#&amp;gt;
#&amp;gt; $a
#&amp;gt; [1] 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;progress&#34;&gt;progress&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Print curl progress&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httr&lt;/code&gt;: &lt;code&gt;progress()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RCurl&lt;/code&gt;: &lt;code&gt;progressfunction&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- GET(&amp;quot;http://httpbin.org&amp;quot;, progress())
#&amp;gt; |==================================| 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why use this?&lt;/em&gt; As you could imagine, this is increasingly useful as a request for a web resource takes longer and longer. For very long requests, this will help you know approximately when a request will finish.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;proxies&#34;&gt;proxies&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;When behind a proxy, give authentiction details for your proxy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httr&lt;/code&gt;: &lt;code&gt;use_proxy()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RCurl&lt;/code&gt;: See various curl options that start with &lt;code&gt;proxy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;GET(&amp;quot;http://www.google.com/search&amp;quot;, use_proxy(url = &amp;quot;125.39.66.66&amp;quot;, port = 80, username = &amp;quot;username&amp;quot;, password = &amp;quot;password&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why use this?&lt;/em&gt; Most of us likely don&amp;rsquo;t need to worry about this. However, if you are in a work place, or maybe in certain geographic locations, you may have to use a proxy. I haven&amp;rsquo;t personally used a proxy in R, so any feedback on this is great.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;user-agent&#34;&gt;user agent&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Some resources require a user-agent string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;httr&lt;/code&gt;: &lt;code&gt;user_agent()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RCurl&lt;/code&gt;: &lt;code&gt;useragent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the default user agent set if using &lt;code&gt;httr&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;GET(&amp;quot;http://httpbin.org/user-agent&amp;quot;)
#&amp;gt; Response [http://httpbin.org/user-agent]
#&amp;gt;   Date: 2014-12-17 07:54
#&amp;gt;   Status: 200
#&amp;gt;   Content-Type: application/json
#&amp;gt;   Size: 59 B
#&amp;gt; {
#&amp;gt;   &amp;quot;user-agent&amp;quot;: &amp;quot;curl/7.37.1 Rcurl/1.95.4.5 httr/0.6.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set a user agent string&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;GET(&amp;quot;http://httpbin.org/user-agent&amp;quot;, user_agent(&amp;quot;its me!&amp;quot;))
#&amp;gt; Response [http://httpbin.org/user-agent]
#&amp;gt;   Date: 2014-12-17 07:54
#&amp;gt;   Status: 200
#&amp;gt;   Content-Type: application/json
#&amp;gt;   Size: 29 B
#&amp;gt; {
#&amp;gt;   &amp;quot;user-agent&amp;quot;: &amp;quot;its me!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why use this?&lt;/em&gt; This is set by default in a http request, as you can see in the first example above for user agent. Some web APIs require that you set a specific user agent. For example, the &lt;a href=&#34;https://developer.github.com/v3/#user-agent-required&#34;&gt;GitHub API&lt;/a&gt; requires that you include a user agent string in the header of each request that is your username or the name of your application so they can contact you if there is a problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;questions&#34;&gt;Questions?&lt;/h2&gt;

&lt;p&gt;Let us know if you have any questions. To a &lt;code&gt;curl&lt;/code&gt; newbie, it may seem a bit overwhelming, but we&amp;rsquo;re here to help.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
