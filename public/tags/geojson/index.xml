<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geojson on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/geojson/</link>
    <description>Recent content in Geojson on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Apr 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/geojson/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Random GeoJSON and WKT with randgeo</title>
      <link>https://ropensci.org/technotes/2017/04/20/randgeo/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/technotes/2017/04/20/randgeo/</guid>
      <description>
        
        

&lt;p&gt;&lt;strong&gt;randgeo&lt;/strong&gt; generates random points and shapes in GeoJSON and WKT formats for
use in examples, teaching, or statistical applications.&lt;/p&gt;

&lt;p&gt;Points and shapes are generated in the long/lat coordinate system and with
appropriate spherical geometry; random points are distributed evenly across
the globe, and random shapes are sized according to a maximum great-circle
distance from the center of the shape.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;randgeo&lt;/strong&gt; was adapted from &lt;a href=&#34;https://github.com/tmcw/geojson-random&#34;&gt;https://github.com/tmcw/geojson-random&lt;/a&gt; to have
a pure R implementation without any dependencies as well as appropriate
geometry. Data generated by &lt;strong&gt;randgeo&lt;/strong&gt; may be processed or displayed of with
packages such as &lt;a href=&#34;https://cran.r-project.org/package=sf&#34;&gt;&lt;strong&gt;sf&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=wicket&#34;&gt;&lt;strong&gt;wicket&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=geojson&#34;&gt;&lt;strong&gt;geojson&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=wellknown&#34;&gt;&lt;strong&gt;wellknown&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=geojsonio&#34;&gt;&lt;strong&gt;geojsonio&lt;/strong&gt;&lt;/a&gt;, or
&lt;a href=&#34;https://cran.r-project.org/package=lawn&#34;&gt;&lt;strong&gt;lawn&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Package API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rg_position&lt;/code&gt; - random position (lon, lat)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geo_point&lt;/code&gt; - random GeoJSON point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geo_polygon&lt;/code&gt; - random GeoJSON polygon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wkt_point&lt;/code&gt; - random WKT point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wkt_polygon&lt;/code&gt; - random WKT polygon&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Install &lt;code&gt;randgeo&lt;/code&gt; - and we&amp;rsquo;ll need a few other packages for examples below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;randgeo&amp;quot;)
install.packages(c(&#39;leaflet&#39;, &#39;lawn&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(randgeo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions that start with &lt;code&gt;geo&lt;/code&gt; are for creating GeoJSON data in JSON format.
If you want to create an R list or data.frame, you can use &lt;code&gt;jsonlite::fromJSON&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;random&#34;&gt;Random&lt;/h2&gt;

&lt;p&gt;Evenly distributed across the sphere.  The &lt;code&gt;bbox&lt;/code&gt; option allows
you to limit points to within long/lat bounds.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geo_point()
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry
#&amp;gt; $features[[1]]$geometry$type
#&amp;gt; [1] &amp;quot;Point&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates
#&amp;gt; [1] 105.95999 -46.58477
#&amp;gt;
#&amp;gt;
#&amp;gt; $features[[1]]$properties
#&amp;gt; NULL
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; attr(,&amp;quot;class&amp;quot;)
#&amp;gt; [1] &amp;quot;geo_list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Centered on a random point, with default maximum size&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geo_polygon()
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry
#&amp;gt; $features[[1]]$geometry$type
#&amp;gt; [1] &amp;quot;Polygon&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates
#&amp;gt; $features[[1]]$geometry$coordinates[[1]]
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[1]]
#&amp;gt; [1] -138.49434  -25.11895
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[2]]
#&amp;gt; [1] -145.95566  -28.17623
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[3]]
#&amp;gt; [1] -145.87817  -28.74364
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[4]]
#&amp;gt; [1] -146.61325  -28.59748
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[5]]
#&amp;gt; [1] -139.18167  -31.07703
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[6]]
#&amp;gt; [1] -140.88748  -31.24708
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[7]]
#&amp;gt; [1] -143.50402  -33.93551
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[8]]
#&amp;gt; [1] -146.48114  -30.43185
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[9]]
#&amp;gt; [1] -144.68315  -35.45465
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[10]]
#&amp;gt; [1] -157.58084  -24.52897
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[11]]
#&amp;gt; [1] -138.49434  -25.11895
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; $features[[1]]$properties
#&amp;gt; NULL
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; attr(,&amp;quot;class&amp;quot;)
#&amp;gt; [1] &amp;quot;geo_list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visualize your shapes with &lt;strong&gt;lawn&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lawn::view(jsonlite::toJSON(unclass(geo_polygon(count = 4)), auto_unbox = TRUE))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-20-randgeo/plot1.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wkt&#34;&gt;WKT&lt;/h2&gt;

&lt;p&gt;Functions prefixed with &lt;code&gt;wkt&lt;/code&gt; create random Well-Known Text (WKT) data. These functions
wrap the GeoJSON versions, but then convert the data to WKT.&lt;/p&gt;

&lt;p&gt;Random point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wkt_point()
#&amp;gt; [1] &amp;quot;POINT (179.8795330 -29.1106238)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Random polygon:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wkt_polygon()
#&amp;gt; [1] &amp;quot;POLYGON ((-60.0870329 -12.9315478, -61.5073816 -25.3204334, -62.6987366 -24.5766272, -64.1853669 -24.0497260, -67.7152546 -27.4752321, -68.4190340 -26.9510818, -67.6018452 -21.5489551, -64.3083560 -21.6772242, -63.1471630 -21.9415438, -64.1137279 -14.2398013, -60.0870329 -12.9315478))&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-case&#34;&gt;Use case&lt;/h2&gt;

&lt;p&gt;Example of geospatial data manipulation, using &lt;code&gt;randgeo&lt;/code&gt;, &lt;code&gt;leaflet&lt;/code&gt; and
&lt;code&gt;lawn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate random overlapping polygons&lt;/li&gt;
&lt;li&gt;Calculate a single polygon from overlapping polygons&lt;/li&gt;
&lt;li&gt;Map polygon&lt;/li&gt;
&lt;li&gt;Generate random locaitons (points)&lt;/li&gt;
&lt;li&gt;Clip locations to the polygon&lt;/li&gt;
&lt;li&gt;Overlay locations (more random points) on the polygon&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(randgeo)
library(lawn)
library(leaflet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;generate random data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(5)
polys &amp;lt;- randgeo::geo_polygon(count = 2, num_vertices = 4, bbox = c(-120, 40, -100, 50))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get intersection of polygons&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polysinter &amp;lt;- lawn::lawn_intersect(polys$features[[1]], polys$features[[2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Map polygons&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polysinter %&amp;gt;% lawn::view()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-20-randgeo/plot2.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Generate random points - clip points to polygon&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pts &amp;lt;- randgeo::geo_point(count = 500, bbox = c(-120, 40, -100, 50))
pts &amp;lt;- lawn::lawn_within(
  points = lawn_featurecollection(pts),
  polygons = lawn_featurecollection(polysinter)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Draw polygon + points on map&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polysinter %&amp;gt;%
  view() %&amp;gt;%
  addGeoJSON(geojson = jsonlite::toJSON(unclass(pts)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-20-randgeo/plot3.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Let us know what you think!  &lt;code&gt;randgeo&lt;/code&gt; doesn&amp;rsquo;t have any revdep&amp;rsquo;s on CRAN yet, but
is being &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=%22randgeo%22+language%3AR+-user%3Acran+-user%3Aropensci&amp;amp;type=Code&#34;&gt;used in one package on GitHub&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>ccafs - client for CCAFS General Circulation Models data</title>
      <link>https://ropensci.org/technotes/2017/03/01/ccafs-release/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/technotes/2017/03/01/ccafs-release/</guid>
      <description>
        
        

&lt;p&gt;I&amp;rsquo;ve recently released the new package &lt;a href=&#34;https://github.com/ropensci/ccafs&#34;&gt;ccafs&lt;/a&gt;, which provides access
to data from Climate Change, Agriculture and Food Security
(CCAFS; &lt;a href=&#34;http://ccafs-climate.org/&#34;&gt;http://ccafs-climate.org/&lt;/a&gt;) General Circulation Models (GCM) data.
GCM&amp;rsquo;s are a particular type of climate model, used for weather forecasting,
and climate change forecasting - read more at
&lt;a href=&#34;https://en.wikipedia.org/wiki/General_circulation_model&#34;&gt;https://en.wikipedia.org/wiki/General_circulation_model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ccafs&lt;/code&gt; falls in the data client camp - its focus is on getting users
data - many &lt;a href=&#34;https://ropensci.org/packages/#data_access&#34;&gt;rOpenSci packages&lt;/a&gt;
fall into this area. These kinds of packages are important so that
scientists don&amp;rsquo;t have to recreate the wheel themselves every time, but
instead use one client that everyone else uses.&lt;/p&gt;

&lt;p&gt;CCAFS GCM data files are &lt;code&gt;.zip&lt;/code&gt; files with a bunch of files inside. The
individual files are in ARC ASCII format (&lt;a href=&#34;https://en.wikipedia.org/wiki/Esri_grid#ASCII&#34;&gt;https://en.wikipedia.org/wiki/Esri_grid#ASCII&lt;/a&gt;) -
a plain text data format, but still require painful manipulation/wrangling to
get into an easily consumable format. The files have a &lt;code&gt;.asc&lt;/code&gt; file extension.&lt;/p&gt;

&lt;p&gt;For each &lt;code&gt;.asc&lt;/code&gt; file, the first 6 lines of each file indicate the reference of
the grid (number of columns and rows, corner coordinates, cellsize, and missing
data value), followed by the actual data values, delimited with single
space characters.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a related binary format - but its proprietary, so nevermind.&lt;/p&gt;

&lt;p&gt;The workflow with &lt;code&gt;ccafs&lt;/code&gt; for most users will likely be as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search for data they want: &lt;code&gt;cc_search()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fetch/download data: &lt;code&gt;cc_data_fetch()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reaad data: &lt;code&gt;cc_data_read()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll dive into more details below.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;First, install the package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ccafs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then load &lt;code&gt;ccafs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;ccafs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;search-for-data&#34;&gt;Search for data&lt;/h2&gt;

&lt;p&gt;Searching CCAF&amp;rsquo;s data holdings is not as easy as it could be as they don&amp;rsquo;t
provide any programmatic way to do so. However, we provide a way to search
using their web interface from R.&lt;/p&gt;

&lt;p&gt;You can search by the numbers representing each possible value for
each parameter. See the &lt;code&gt;?&#39;ccafs-search&#39;&lt;/code&gt; for help on what the numbers
refer to.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(result1 &amp;lt;- cc_search(file_set = 4, scenario = 6, model = 2, extent = &amp;quot;global&amp;quot;,
  format = &amp;quot;ascii&amp;quot;, period = 5, variable = 2, resolution = 3))
#&amp;gt; [1] &amp;quot;http://gisweb.ciat.cgiar.org/ccafs_climate/files/data/ipcc_4ar_ciat/sres_b1/2040s/bccr_bcm2_0/5min/bccr_bcm2_0_sres_b1_2040s_prec_5min_no_tile_asc.zip&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, you can use the helper list &lt;code&gt;cc_params&lt;/code&gt; where you can reference
options by name; the downside is that this leads to very verbose code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(result2 &amp;lt;- cc_search(file_set = cc_params$file_set$`Delta method IPCC AR4`,
                  scenario = cc_params$scenario$`SRES B1`,
                  model = cc_params$model$bccr_bcm2_0,
                  extent = cc_params$extent$global,
                  format = cc_params$format$ascii,
                  period = cc_params$period$`2040s`,
                  variable = cc_params$variable$Precipitation,
                  resolution = cc_params$resolution$`5 minutes`))
#&amp;gt; [1] &amp;quot;http://gisweb.ciat.cgiar.org/ccafs_climate/files/data/ipcc_4ar_ciat/sres_b1/2040s/bccr_bcm2_0/5min/bccr_bcm2_0_sres_b1_2040s_prec_5min_no_tile_asc.zip&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you already know what you want in terms of file paths, you can query
Amazon S3 directly with &lt;code&gt;cc_list_keys()&lt;/code&gt; (the data file come from Amazon S3):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cc_list_keys(max = 3)
#&amp;gt; # A tibble: 3 × 5
#&amp;gt;                                              Key             LastModified
#&amp;gt;                                            &amp;lt;chr&amp;gt;                    &amp;lt;chr&amp;gt;
#&amp;gt; 1                                         ccafs/ 2014-02-28T15:15:45.000Z
#&amp;gt; 2 ccafs/2014-05-24-01-19-33-3A0DFF1F86F3E7F7.txt 2014-07-01T02:15:51.000Z
#&amp;gt; 3                                 ccafs/amzn.csv 2014-02-28T15:21:32.000Z
#&amp;gt; # ... with 3 more variables: ETag &amp;lt;chr&amp;gt;, Size &amp;lt;chr&amp;gt;, StorageClass &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using &lt;code&gt;cc_list_keys()&lt;/code&gt;, you&amp;rsquo;ll get not just &lt;code&gt;.zip&lt;/code&gt; files that can be
downloaded, but also directories. So beware that if you&amp;rsquo;re going after grabbing
&amp;ldquo;keys&amp;rdquo; for files that can be downloaded, you&amp;rsquo;re looking for &lt;code&gt;.zip&lt;/code&gt; files.&lt;/p&gt;

&lt;h2 id=&#34;fetch-and-read-data&#34;&gt;Fetch and read data&lt;/h2&gt;

&lt;p&gt;Once you get links from &lt;code&gt;cc_search()&lt;/code&gt; or &amp;ldquo;keys&amp;rdquo; from &lt;code&gt;cc_list_keys()&lt;/code&gt;, you
can pass either to &lt;code&gt;cc_data_fetch()&lt;/code&gt; - which normalizes the input - so it
doesn&amp;rsquo;t matter whether you pass in e.g.,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://gisweb.ciat.cgiar.org/ccafs_climate/files/data/ipcc_4ar_ciat/&lt;/code&gt;
&lt;code&gt;sres_b1/2040s/bccr_bcm2_0/5min/bccr_bcm2_0_sres_b1_2040s_prec_5min_no_tile_asc.zip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ccafs_climate/files/data/ipcc_4ar_ciat/sres_b1/2040s/bccr_bcm2_0/5min/&lt;/code&gt;
&lt;code&gt;bccr_bcm2_0_sres_b1_2040s_prec_5min_no_tile_asc.zip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s download data with &lt;code&gt;cc_data_fetch()&lt;/code&gt; using the result we got above
using &lt;code&gt;cc_search()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xx &amp;lt;- cc_data_fetch(result2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can read data with &lt;code&gt;cc_data_read()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(dat &amp;lt;- cc_data_read(xx))
#&amp;gt; class       : RasterStack
#&amp;gt; dimensions  : 1800, 4320, 7776000, 12  (nrow, ncol, ncell, nlayers)
#&amp;gt; resolution  : 0.08333333, 0.08333333  (x, y)
#&amp;gt; extent      : -180, 180, -60, 90  (xmin, xmax, ymin, ymax)
#&amp;gt; coord. ref. : NA
#&amp;gt; names       :      prec_1,     prec_10,     prec_11,     prec_12,      prec_2,      prec_3,      prec_4,      prec_5,      prec_6,      prec_7,      prec_8,      prec_9
#&amp;gt; min values  : -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648
#&amp;gt; max values  :  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which gives a &lt;code&gt;raster&lt;/code&gt; class object, which you are likely familiar with - which
opens up all the tools that deal with &lt;code&gt;raster&lt;/code&gt; class objects, yay!&lt;/p&gt;

&lt;p&gt;You can easily plot the data with the &lt;code&gt;plot&lt;/code&gt; method from the  &lt;code&gt;raster&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;raster&amp;quot;)
plot(dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-03-01-ccafs-release/unnamed-chunk-9-1.png&#34; alt=&#34;plot&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;caching&#34;&gt;Caching&lt;/h2&gt;

&lt;p&gt;For a better user experience, we cache files for you. That means
when we download data, we put the files in a known location. When a
user tries to download the same data again, we look to see if it&amp;rsquo;s already
been downloaded, and use the cached version - if we don&amp;rsquo;t have it
already, we download it.&lt;/p&gt;

&lt;p&gt;Of course, CCAFS may change their files, so you may not want the cached
version, but the new version from them. We provide tools to inspect your
cached files, and delete them.&lt;/p&gt;

&lt;p&gt;List your cached files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cc_cache_list()
#&amp;gt;   [1] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc&amp;quot;
#&amp;gt;   [2] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc.zip&amp;quot;
#&amp;gt;   [3] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_1.asc&amp;quot;
#&amp;gt;   [4] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_10.asc&amp;quot;
#&amp;gt;   [5] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_11.asc&amp;quot;
#&amp;gt;   [6] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_12.asc&amp;quot;
#&amp;gt;   [7] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_13.asc&amp;quot;
#&amp;gt;   [8] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_14.asc&amp;quot;
#&amp;gt;   [9] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_15.asc&amp;quot;
#&amp;gt;  [10] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_16.asc&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get details on all files or a specific file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# cc_cache_details() # details for all files
cc_cache_details(cc_cache_list()[1])
#&amp;gt; &amp;lt;ccafs cached files&amp;gt;
#&amp;gt;   directory: /Users/sacmac/Library/Caches/ccafs
#&amp;gt;
#&amp;gt;   file: /bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc
#&amp;gt;   size: 0.001 mb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be careful with &lt;code&gt;cc_cache_delete_all()&lt;/code&gt; as you will delete all your cached
files.&lt;/p&gt;

&lt;h2 id=&#34;ccafs-software-review&#34;&gt;ccafs software review&lt;/h2&gt;

&lt;p&gt;I want to touch briefly on the software review for this package. The reviews
for &lt;code&gt;ccafs&lt;/code&gt; were great, and I think the package was greatly improved via the
review process.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mikoontz&#34;&gt;Michael Koontz&lt;/a&gt; and &lt;a href=&#34;https://github.com/manuramon&#34;&gt;Manuel Ramon&lt;/a&gt;
did reviews for &lt;code&gt;ccafs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One thing in particular that improved about &lt;code&gt;ccafs&lt;/code&gt; was the user interface -
that is, the programmatic interface. One feature about the interface was
adding the &lt;code&gt;cc_search()&lt;/code&gt; function. When I started developing &lt;code&gt;ccafs&lt;/code&gt;, I didn&amp;rsquo;t
see a way to programmatically search CCAFS data - other than the Amazon S3
data, which isn&amp;rsquo;t really search, but more like listing files in a directory -
so I just left it at that. During the reviews, reviewers wanted a clear workflow
for potential users - the package as submitted for review didn&amp;rsquo;t really have a
clear workflow; it was&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Know what you want already (&lt;code&gt;cc_list_keys&lt;/code&gt; helped get real paths at least)&lt;/li&gt;
&lt;li&gt;Download data&lt;/li&gt;
&lt;li&gt;Read data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which is not ideal. There should be a discovery portion to the workflow. So
I decided to dig into possibly querying the CCAFS web portal itself. That panned
out, and the workflow we have now is much better:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search for data with all the same variables you would on the CCAFS website&lt;/li&gt;
&lt;li&gt;Download data&lt;/li&gt;
&lt;li&gt;Read data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is much better!&lt;/p&gt;

&lt;p&gt;As always, reviews improved the documentation a lot by pointing out areas that
could use improvement - which all users will greatly benefit from.&lt;/p&gt;

&lt;p&gt;A new vignette (&lt;a href=&#34;https://cran.rstudio.com/web/packages/ccafs/vignettes/amazon_s3_keys.html&#34;&gt;https://cran.rstudio.com/web/packages/ccafs/vignettes/amazon_s3_keys.html&lt;/a&gt;)
was added in the review process to explain how to get a &amp;ldquo;key&amp;rdquo;, a URL for CCAFS data.&lt;/p&gt;

&lt;h2 id=&#34;to-do-and-feedback&#34;&gt;To Do and Feedback&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s probably lots of improvements that can be made - I&amp;rsquo;m looking forward
to getting feedback from users on any bugs or feature requests. One immediate
thing is to &lt;a href=&#34;https://github.com/ropensci/ccafs/issues/22&#34;&gt;make the cache details more compact&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Interactive maps with polygons using R, Geojson, and Github</title>
      <link>https://ropensci.org/blog/2013/10/23/style-geojson-polygon/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/10/23/style-geojson-polygon/</guid>
      <description>
        
        

&lt;p&gt;Previously on this blog we have discussed making geojson maps and uploading to Github for interactive visualization &lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;with USGS BISON data&lt;/a&gt;, and &lt;a href=&#34;http://ropensci.org/blog/2013/07/17/style-geojson/&#34;&gt;with GBIF data&lt;/a&gt;, and on &lt;a href=&#34;http://sckott.github.io/2013/06/geojson/&#34;&gt;my own personal blog&lt;/a&gt;. This is done using a file format called &lt;a href=&#34;http://en.wikipedia.org/wiki/GeoJSON&#34;&gt;&lt;em&gt;geojson&lt;/em&gt;&lt;/a&gt;, a file format based on JSON (JavaScript Object Notation) in which you can specify geographic data along with any other metadata.&lt;/p&gt;

&lt;p&gt;In two the previous posts about &lt;em&gt;geojson&lt;/em&gt;, I described how you could get data from the USGS BISON API using our &lt;a href=&#34;https://github.com/ropensci/rbison&#34;&gt;rbison package&lt;/a&gt;, and from the GBIF API using the &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;rgbif package&lt;/a&gt;, then make a &lt;em&gt;geojson&lt;/em&gt; file, and send to Github. In both examples, the data were points. What about polygons?  This is a relatively common use case in which an area is defined on a map instead of points - and polygons are supported in geojson.  How do we do this with the R to geojson to Github workflow?&lt;/p&gt;

&lt;p&gt;Using our package rgbif you can get a interactive map with polygons up on Github in just four lines of code! Of course creating a .shp file will take more than four lines of code.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;install-rgbif&#34;&gt;Install rgbif&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll need devtools packge to install rgbif from Github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
library(devtools)
install_github(&amp;quot;rgbif&amp;quot;, &amp;quot;ropensci&amp;quot;, ref=&amp;quot;newapi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-rgbif&#34;&gt;Load rgbif&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgbif)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;make-the-map&#34;&gt;Make the map&lt;/h2&gt;

&lt;p&gt;There are various ways of getting a .shp file. I won&amp;rsquo;t go over those here, so we&amp;rsquo;ll just use a .shp file from the web. I downloaded a zip file for &lt;em&gt;Abies magnifica&lt;/em&gt; for its range map from the book &lt;em&gt;Atlas of United States Trees&lt;/em&gt; from &lt;a href=&#34;http://esp.cr.usgs.gov/data/little/&#34;&gt;this site&lt;/a&gt; - here is the link for the zip file: &lt;a href=&#34;http://esp.cr.usgs.gov/data/little/abiemagn.zip&#34;&gt;http://esp.cr.usgs.gov/data/little/abiemagn.zip&lt;/a&gt;. I unzipped the file locally on my machine, and here we just use the &lt;code&gt;abiemagn.shp&lt;/code&gt; file within that zip file.&lt;/p&gt;

&lt;p&gt;The first line of code in the next code block uses the function &lt;code&gt;togeojson&lt;/code&gt; to make a geojson file, which is written locally on your machine (a message tells you where it is located, but you can specify where you want it to go with the &lt;code&gt;destpath&lt;/code&gt; parameter). Note that the input argument to &lt;code&gt;togeojson&lt;/code&gt; goes to the directory for &lt;code&gt;abiemagn/abiemagn.shp&lt;/code&gt;, but for this to work you need the associated other two files, in this case: abiemagn.dbf and abiemagn.shx.&lt;/p&gt;

&lt;p&gt;The second line of code uses the &lt;code&gt;gist&lt;/code&gt; function to upload your .geojson file as a gist on Github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- &amp;quot;~/abiemagn/abiemagn.shp&amp;quot;
togeojson(input = file, method = &amp;quot;local&amp;quot;, outfilename = &amp;quot;abiesmagmap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Success! File is at /Users/scottmac2/abiesmagmap.geojson
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gist(&amp;quot;~/abiesmagmap.geojson&amp;quot;, description = &amp;quot;Abies magnifica polygons&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Your gist has been published
## View gist at https://gist.github.com/sckott/7121053
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! The map is immediately available on the web, see &lt;a href=&#34;https://gist.github.com/sckott/7121053&#34;&gt;here&lt;/a&gt; for the one we just created. And you can embed the map too, like here:&lt;/p&gt;

&lt;!-- &lt;iframe src=&#34;https://gist.github.com/sckott/7121053?scroll=false&#34;&gt;&lt;/iframe&gt; --&gt;

&lt;script src=&#34;https://gist.github.com/sckott/7121053.js&#34;&gt;&lt;/script&gt;

      </description>
    </item>
    
    <item>
      <title>Style GeoJSON</title>
      <link>https://ropensci.org/blog/2013/07/17/style-geojson/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/07/17/style-geojson/</guid>
      <description>
        
        

&lt;p&gt;&lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;Previously on this blog&lt;/a&gt; and on &lt;a href=&#34;http://sckott.github.io/2013/06/geojson/&#34;&gt;my own personal blog&lt;/a&gt;, I have discussed how easy it is to create interactive maps on Github using a combination of R, git and Github. This is done using a file format called &lt;a href=&#34;http://en.wikipedia.org/wiki/GeoJSON&#34;&gt;&lt;em&gt;geojson&lt;/em&gt;&lt;/a&gt;, a file format based on JSON (JavaScript Object Notation) in which you can specify geographic data along with any other metadata.&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;previous post on this blog&lt;/a&gt; about &lt;em&gt;geojson&lt;/em&gt;, I described how you could get data from the USGS BISON API using our &lt;a href=&#34;https://github.com/ropensci/rbison&#34;&gt;rbison package&lt;/a&gt;, then make a &lt;em&gt;geojson&lt;/em&gt; file, then push to Github. Here, I describe briefly how you can style your map. This time, we&amp;rsquo;ll get data from &lt;a href=&#34;http://www.gbif.org/&#34;&gt;GBIF&lt;/a&gt; using the &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;rgbif package&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;load-package&#34;&gt;Load package&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install_github(&#39;rgbif&#39;, &#39;ropensci&#39;)
library(rgbif)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;get-data-from-gbif&#34;&gt;Get data from GBIF&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;splist &amp;lt;- c(&amp;quot;Accipiter erythronemius&amp;quot;, &amp;quot;Junco hyemalis&amp;quot;, &amp;quot;Aix sponsa&amp;quot;)
out &amp;lt;- occurrencelist_many(splist, coordinatestatus = TRUE, maxresults = 100)
dat &amp;lt;- gbifdata(out)
head(dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                taxonName decimalLatitude decimalLongitude
1 Accipiter erythronemius          -25.91           -54.36
2 Accipiter erythronemius          -25.86           -54.52
3 Accipiter erythronemius          -25.86           -54.52
4 Accipiter erythronemius          -27.35           -65.60
5 Accipiter erythronemius          -27.35           -65.60
6 Accipiter erythronemius          -27.35           -65.60
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;style&#34;&gt;Style&lt;/h2&gt;

&lt;p&gt;We first need to convert column names to be &lt;em&gt;latitude&lt;/em&gt; and &lt;em&gt;longitude&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(dat)[names(dat) %in% c(&amp;quot;decimalLatitude&amp;quot;, &amp;quot;decimalLongitude&amp;quot;)] &amp;lt;- c(&amp;quot;latitude&amp;quot;,
    &amp;quot;longitude&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then use a new function &lt;code&gt;stylegeojson&lt;/code&gt; to simply add new columns to the data.frame. With &lt;code&gt;stylegeojson&lt;/code&gt; you can add marker colors, symbols, and size. Note that this only works for point/marker maps (not polygon/line) for now. You could also simply edit the geojson file, but that can get very tedious with large files. You can specify color, symbol type, and symbol size all for the same variable, or each of those for different variables - where the ordering of the vector of colors, symbol types and sizes follows the ordering of the unique variable levels. Here we specify a separate color and size for each of the three species within the &lt;em&gt;taxonName&lt;/em&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat &amp;lt;- stylegeojson(input = dat, var = &amp;quot;taxonName&amp;quot;, color = c(&amp;quot;#976AAE&amp;quot;, &amp;quot;#6B944D&amp;quot;,
    &amp;quot;#BD5945&amp;quot;), size = &amp;quot;small&amp;quot;)
head(dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                taxonName latitude longitude marker-color marker-size
1 Accipiter erythronemius   -25.91    -54.36      #976AAE       small
2 Accipiter erythronemius   -25.86    -54.52      #976AAE       small
3 Accipiter erythronemius   -25.86    -54.52      #976AAE       small
4 Accipiter erythronemius   -27.35    -65.60      #976AAE       small
5 Accipiter erythronemius   -27.35    -65.60      #976AAE       small
6 Accipiter erythronemius   -27.35    -65.60      #976AAE       small
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, specify one color for all three species, and make them all size medium.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat &amp;lt;- stylegeojson(input = dat, var = &amp;quot;taxonName&amp;quot;, color = &amp;quot;#6B944D&amp;quot;, size = &amp;quot;medium&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then write the data.frame to disk, and convert to a &lt;em&gt;geojson&lt;/em&gt; file using the function &lt;code&gt;togeojson&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;write.csv(dat, &amp;quot;~/github/sac/mygeojson/rgbif_data.csv&amp;quot;)
file &amp;lt;- &amp;quot;~/github/sac/mygeojson/rgbif_data.csv&amp;quot;
togeojson(file, method = &amp;quot;web&amp;quot;, destpath = &amp;quot;~/github/sac/mygeojson/&amp;quot;, outfilename = &amp;quot;rgbif_data&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;git-er-done&#34;&gt;Git &amp;lsquo;er done&lt;/h2&gt;

&lt;p&gt;All we need to do now is go to the command line or your git GUI client and push the changes to Github. If you need help with that see Step 3 in the &lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;previous geojson post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go &lt;a href=&#34;https://render.github.com/view/geojson?url=https://raw.github.com/sckott/mygeojson/master/rgbif_data.geojson&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; to see the map.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. have a look at your map, have fun, and let us know if you have any feature requests or bug reports at our Github issues tracker for rgbif &lt;a href=&#34;https://github.com/ropensci/rgbif/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>From occurrence data to interactive maps on the web</title>
      <link>https://ropensci.org/blog/2013/07/04/rbison-geoson/</link>
      <pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/07/04/rbison-geoson/</guid>
      <description>
        
        

&lt;p&gt;We have a number of packages for getting species occurrence data: &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;rgbif&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropensci/rbison&#34;&gt;rbison&lt;/a&gt;. The power of R is that you can pull down this occurrence data, manipulate the data, do some analyses, and visualize the data - all in one open source framework.&lt;/p&gt;

&lt;p&gt;However, when dealing with occurrence data on maps, it is often useful to be able to interact with the visualization. &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;, a code hosting and collaboration site, now renders a particular type of map file format as an interactive map. This file format is called &lt;code&gt;.geojson&lt;/code&gt;. Here is an example of an interactive map hosted on Github, embedded here:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script src=&#34;https://embed.github.com/view/geojson/geobabbler/geodata/master/geojson/leonardtown_bldgs.geojson&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Note that you can go full screen on these maps too. Check it out &lt;a href=&#34;https://render.github.com/view/geojson?url=https://raw.github.com/geobabbler/geodata/master/geojson/leonardtown_bldgs.geojson&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To demonstrate how easy it can be to do this on your own, the following is a small demo of searching for occurrence data, converting to geojson, and pushing up to Github.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;install-rbison-from-github&#34;&gt;Install rbison from Github&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install_github(&#39;rbison&#39;, &#39;ropensci&#39;) # uncomment if you haven&#39;t
# installed it
library(rbison)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;step-1-seach-for-some-occurrence-data&#34;&gt;Step 1: Seach for some occurrence data&lt;/h3&gt;

&lt;p&gt;Search for data on the bison.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat &amp;lt;- bison(species = &amp;quot;Bison bison&amp;quot;, count = 500)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a peak at the data just to make sure we have some occurrence data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(bison_data(dat, &amp;quot;data_df&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;         id        name longitude latitude
1 686467428 Bison bison    -118.8    43.31
2 656975776 Bison bison    -118.8    43.31
3 785794942 Bison bison    -111.1    44.66
4 687029742 Bison bison    -110.7    44.46
5 687027385 Bison bison    -110.7    44.61
6 773434631 Bison bison    -110.6    44.83
                                      provider
1  University of Kansas Biodiversity Institute
2 Natural History Museum of Los Angeles County
3               Museum of Southwestern Biology
4                              iNaturalist.org
5                              iNaturalist.org
6                              iNaturalist.org
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;step-2-convert-the-data-to-geojson-format&#34;&gt;Step 2: Convert the data to geojson format&lt;/h3&gt;

&lt;p&gt;Before this step I made a folder called &lt;em&gt;mygeojson&lt;/em&gt; to write data in to, which will also be a Github repository.&lt;/p&gt;

&lt;p&gt;In this example, we are using the option method=&amp;lsquo;web&amp;rsquo; in the &lt;code&gt;togeojson&lt;/code&gt; function, but we could also use method=&amp;lsquo;local&amp;rsquo; which wouldl use the &lt;code&gt;rgdal&lt;/code&gt; package to convert to a geojson file format locally. Specifying method=&amp;lsquo;web&amp;rsquo; uses the &lt;a href=&#34;http://ogre.adc4gis.com/&#34;&gt;Ogre web client&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat_df &amp;lt;- bison_data(dat, &amp;quot;data_df&amp;quot;)
write.csv(dat_df, &amp;quot;~/github/sac/mygeojson/bison_bison.csv&amp;quot;)
file &amp;lt;- &amp;quot;~/github/sac/mygeojson/bison_bison.csv&amp;quot;
togeojson(file, method = &amp;quot;web&amp;quot;, destpath = &amp;quot;~/github/sac/mygeojson/&amp;quot;, outfilename = &amp;quot;bison_bison&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;step-3-go-to-your-terminal-or-git-gui-and-push-up-the-new-geojson-file&#34;&gt;Step 3: Go to your terminal or git GUI and push up the new geojson file&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/github/sac/mygeojson/
git init
git add .
git commit -a -m &#39;my first geojson file&#39;
git remote add origin https://github.com/sckott/mygeojson.git
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Then go to your new repo on Github and click on the &lt;code&gt;.geojson&lt;/code&gt; file you created, and you&amp;rsquo;ll get a map. You can share this with others, and even embed the interactive map in other web sites, as you can see below. Try clicking on the points - they give metadata associated with each point.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;script src=&#34;https://embed.github.com/view/geojson/sckott/mygeojson/master/bison_bison.geojson&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Check out the full screen version &lt;a href=&#34;https://render.github.com/view/geojson?url=https://raw.github.com/sckott/mygeojson/master/bison_bison.geojson&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It is as easy as that! We&amp;rsquo;ll add this functionality into our &lt;code&gt;rgbif&lt;/code&gt; package as well.&lt;/p&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.geomusings.com/2013/06/18/geojson-on-github-now-what/&#34;&gt;http://blog.geomusings.com/2013/06/18/geojson-on-github-now-what/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I wrote earlier about this topic on my own blog &lt;a href=&#34;http://sckott.github.io/2013/06/geojson/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Github help for geojson file &lt;a href=&#34;https://help.github.com/articles/mapping-geojson-files-on-github#embedding-your-map-elsewhere&#34;&gt;https://help.github.com/articles/mapping-geojson-files-on-github#embedding-your-map-elsewhere&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
