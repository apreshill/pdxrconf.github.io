<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Biodiversity on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/biodiversity/</link>
    <description>Recent content in Biodiversity on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 25 Jan 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/biodiversity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Extracting and Enriching Ocean Biogeographic Information System (OBIS) Data with R</title>
      <link>https://ropensci.org/blog/2017/01/25/obis/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/01/25/obis/</guid>
      <description>
        
        &lt;p&gt;Programmatic access to biodiversity data is revolutionising large-scale, reproducible biodiversity research. In the marine realm, the largest global database of species occurrence records is the Ocean Biogeographic Information System, &lt;a href=&#34;http://www.iobis.org/&#34;&gt;OBIS&lt;/a&gt;. As of January 2017, OBIS contains 47.78 million occurrences of 117,345 species, all openly available and accessible via the &lt;a href=&#34;http://www.iobis.org/manual/api/&#34;&gt;OBIS API&lt;/a&gt;. The number of questions to address using these kinds of resources is as large as the number of investigators, but certain operations commonly crop up in many workflows. In my group, &lt;a href=&#34;https://shefmeme.org/&#34;&gt;shefmeme.org&lt;/a&gt;, these typically involve checking the taxonomy of a list of species, extracting occurrence records for each species, mapping these and matching them to various environmental and geographic data layers, all using R. I recently wrote up these common operations in a &lt;a href=&#34;http://www.iobis.org/2016/11/22/sorbycollection/&#34;&gt;detailed tutorial for OBIS&lt;/a&gt;, with &lt;a href=&#34;https://github.com/iobis/training/tree/master/sorbycollection&#34;&gt;associated code and data on GitHub&lt;/a&gt;. This tutorial made extensive use of &lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt; packages and expertise, and so I’m delighted to have the opportunity to present an edited version here. (Please note that the code chunks included here are a subset of our original code, and are for illustration - if you want to run these examples we suggest visiting the original post.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Starting point, journey, and destination&lt;/p&gt;

&lt;p&gt;We start with a list of taxonomic names of unknown quality. In our experience this is a common situation: you may have obtained a dataset from a collaborator, or from the literature, which documents some characteristics of a number of taxa, and you wish to tidy up this dataset and enrich it with some occurrence data. We generated a taxon list from a museum exhibit in the &lt;a href=&#34;http://www.sheffield.ac.uk/aps&#34;&gt;Department of Animal and Plant Sciences at the University of Sheffield&lt;/a&gt;: a collection of 80 marine specimens created by the 19th Century Sheffield microscopist, geologist, and naturalist &lt;a href=&#34;https://en.wikipedia.org/wiki/Henry_Clifton_Sorby&#34;&gt;Henry Clifton Sorby&lt;/a&gt;. This provides a useful test-case for modern biodiversity computational methods, as there is considerable taxonomic breadth (including fish as well as numerous invertebrate groups), but the names recorded are of inconsistent taxonomic rank, and - having been recorded well over 100 years ago - many are almost certainly no longer current.&lt;/p&gt;

&lt;p&gt;The first stage of our journey then - after transcribing the names into a spreadsheet - is to check their &lt;strong&gt;taxonomy&lt;/strong&gt;. Once we are confident in the names, and have restricted the dataset to a suitable taxonomic rank (species, here), we can start to examine &lt;strong&gt;occurrences&lt;/strong&gt; as recorded in OBIS. Once we have done this, for individual species and for groups of species, we can start to enrich the basic occurrence data in various ways. In particular, we show how to match the occurrences to various &lt;strong&gt;environmental layers&lt;/strong&gt;, including depth and climate. And we show how to perform more sophisticated geographic searches using &lt;strong&gt;georeferenced boundaries and regions&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Taxonomy&lt;/p&gt;

&lt;p&gt;OBIS uses the &lt;a href=&#34;http://www.marinespecies.org/&#34;&gt;WoRMS&lt;/a&gt; standard taxonomy. This means that names within OBIS’s realisation of the WoRMS Aphia database will be matched correctly, but it is still often worthwhile to check your taxonomy in advance, especially if you are working with large sets of taxa (as macroecologists frequently are), or with unusual sets of names, such as the Sorby Collection. This will help to identify any potential problems or ambiguities, and also gives more flexibility for identifying and dealing with minor typos and misspellings. The tools provided by rOpenSci have made it possible to rapidly match names to WoRMS by calling the WoRMS web services directly from within R. In our original post, we provide examples using the &lt;a href=&#34;https://github.com/ropensci/taxizesoap&#34;&gt;taxizesoap&lt;/a&gt; package. WoRMS have recently updated their web services, and here we use instead the new rOpenSci package &lt;a href=&#34;https://github.com/ropensci/worrms&#34;&gt;worrms&lt;/a&gt; - now incorporated into &lt;a href=&#34;https://github.com/ropensci/taxize&#34;&gt;taxize&lt;/a&gt;. Both options provide much of the WoRMS taxon matching functionality, for instance fuzzy (or approximate) name matching is possible, and is a convenient, scripted way of generating a taxonomically robust dataset.&lt;/p&gt;

&lt;p&gt;First, load the required libraries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(worrms)
library(dplyr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Check taxonomy of a single taxon&lt;/p&gt;

&lt;p&gt;Get the WoRMS ID for a single species - here, Atlantic cod, &lt;em&gt;Gadus morhua&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_aphia &amp;lt;- wm_name2id(name = &amp;quot;Gadus morhua&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then get the full WoRMS record, as a list by Aphia ID:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- wm_record(id = my_sp_aphia)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or as a tibble by name - here specifying exact match only &lt;code&gt;(fuzzy = FALSE)&lt;/code&gt; and restricting to marine species &lt;code&gt;(marine_only = TRUE)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- wm_records_names(name = &amp;quot;Gadus morhua&amp;quot;, fuzzy = FALSE, marine_only = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Get taxonomy for multiple species&lt;/p&gt;

&lt;p&gt;Start with a data frame of species names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp &amp;lt;- data_frame(sciname = c(&amp;quot;Gadus morhua&amp;quot;, &amp;quot;Solea vulgaris&amp;quot;, &amp;quot;Pleuronectes platessa&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then get the WoRMS records for each:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- wm_records_names(name = my_sp$sciname, fuzzy = FALSE, marine_only = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For &amp;lsquo;n&amp;rsquo; species this returns a list of &amp;lsquo;n&amp;rsquo; tables. Convert these into a single table with &amp;lsquo;n&amp;rsquo; rows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- bind_rows(my_sp_taxo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And look at the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;glimpse(my_sp_taxo)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Observations: 3
## Variables: 25
## $ AphiaID         &amp;lt;int&amp;gt; 126436, 154712, 127143
## $ url             &amp;lt;chr&amp;gt; &amp;quot;http://www.marinespecies.org/aphia.php?p=taxd...
## $ scientificname  &amp;lt;chr&amp;gt; &amp;quot;Gadus morhua&amp;quot;, &amp;quot;Solea vulgaris&amp;quot;, &amp;quot;Pleuronecte...
## $ authority       &amp;lt;chr&amp;gt; &amp;quot;Linnaeus, 1758&amp;quot;, &amp;quot;Quensel, 1806&amp;quot;, &amp;quot;Linnaeus, ...
## $ status          &amp;lt;chr&amp;gt; &amp;quot;accepted&amp;quot;, &amp;quot;unaccepted&amp;quot;, &amp;quot;accepted&amp;quot;
## $ unacceptreason  &amp;lt;chr&amp;gt; NA, &amp;quot;synonym&amp;quot;, NA
## $ rank            &amp;lt;chr&amp;gt; &amp;quot;Species&amp;quot;, &amp;quot;Species&amp;quot;, &amp;quot;Species&amp;quot;
## $ valid_AphiaID   &amp;lt;int&amp;gt; 126436, 127160, 127143
## $ valid_name      &amp;lt;chr&amp;gt; &amp;quot;Gadus morhua&amp;quot;, &amp;quot;Solea solea&amp;quot;, &amp;quot;Pleuronectes p...
## $ valid_authority &amp;lt;chr&amp;gt; &amp;quot;Linnaeus, 1758&amp;quot;, &amp;quot;(Linnaeus, 1758)&amp;quot;, &amp;quot;Linnaeu...
## $ kingdom         &amp;lt;chr&amp;gt; &amp;quot;Animalia&amp;quot;, &amp;quot;Animalia&amp;quot;, &amp;quot;Animalia&amp;quot;
## $ phylum          &amp;lt;chr&amp;gt; &amp;quot;Chordata&amp;quot;, &amp;quot;Chordata&amp;quot;, &amp;quot;Chordata&amp;quot;
## $ class           &amp;lt;chr&amp;gt; &amp;quot;Actinopteri&amp;quot;, &amp;quot;Actinopteri&amp;quot;, &amp;quot;Actinopteri&amp;quot;
## $ order           &amp;lt;chr&amp;gt; &amp;quot;Gadiformes&amp;quot;, &amp;quot;Pleuronectiformes&amp;quot;, &amp;quot;Pleuronect...
## $ family          &amp;lt;chr&amp;gt; &amp;quot;Gadidae&amp;quot;, &amp;quot;Soleidae&amp;quot;, &amp;quot;Pleuronectidae&amp;quot;
## $ genus           &amp;lt;chr&amp;gt; &amp;quot;Gadus&amp;quot;, &amp;quot;Solea&amp;quot;, &amp;quot;Pleuronectes&amp;quot;
## $ citation        &amp;lt;chr&amp;gt; &amp;quot;Bailly, N. (2008). Gadus morhua Linnaeus, 175...
## $ lsid            &amp;lt;chr&amp;gt; &amp;quot;urn:lsid:marinespecies.org:taxname:126436&amp;quot;, &amp;quot;...
## $ isMarine        &amp;lt;int&amp;gt; 1, 1, 1
## $ isBrackish      &amp;lt;int&amp;gt; 1, 1, 1
## $ isFreshwater    &amp;lt;int&amp;gt; 0, 0, 0
## $ isTerrestrial   &amp;lt;int&amp;gt; 0, 0, 0
## $ isExtinct       &amp;lt;lgl&amp;gt; NA, NA, NA
## $ match_type      &amp;lt;chr&amp;gt; &amp;quot;exact&amp;quot;, &amp;quot;exact&amp;quot;, &amp;quot;exact&amp;quot;
## $ modified        &amp;lt;chr&amp;gt; &amp;quot;2008-01-15T18:27:08Z&amp;quot;, &amp;quot;2008-02-28T14:41:08Z&amp;quot;...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the name we supplied is correct for cod and plaice, but &lt;em&gt;Solea vulgaris&lt;/em&gt; is not valid and has the valid name &lt;em&gt;Solea solea&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Getting occurrences&lt;/p&gt;

&lt;p&gt;Once you have your taxon name, or list of names, it is straightforward to extract their OBIS occurrences using the &lt;a href=&#34;https://github.com/iobis/robis&#34;&gt;robis&lt;/a&gt; package. And armed with a list of occurrences for a given taxon, or list of species, you probably want to map them. Here we show how to obtain and map occurrence records for a single species.&lt;/p&gt;

&lt;p&gt;First install and load additional required packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install robis package using devtools
library(devtools)
devtools::install_github(&amp;quot;iobis/robis&amp;quot;)
# NB - you also need the dev version of ggmap for the satellite maps to work
devtools::install_github(&amp;quot;dkahle/ggmap&amp;quot;)
library(robis)
library(ggmap)
library(raster)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get occurrences for sole - note that this may take some time to run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_occs &amp;lt;- occurrence(scientificname = my_sp_taxo$valid_name[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is the bounding box for these occurrences?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bb_occs &amp;lt;- bbox(cbind(my_occs$decimalLongitude, my_occs$decimalLatitude))
bb_occs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##        min     max
## x -42.0288 151.639
## y -33.0868  61.250
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a base world map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;world &amp;lt;- map_data(&amp;quot;world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a map from these data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;worldmap &amp;lt;- ggplot(world, aes(x=long, y=lat)) +
  geom_polygon(aes(group=group)) +
  scale_y_continuous(breaks = (-2:2) * 30) +
  scale_x_continuous(breaks = (-4:4) * 45) +
  theme(panel.background = element_rect(fill = &amp;quot;steelblue&amp;quot;)) +
  coord_equal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plot the map and add the occurrence data for sole that we have just returned:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(occ_map &amp;lt;- worldmap + geom_point(data = my_occs, aes(x = decimalLongitude, y = decimalLatitude),
                                 colour = &amp;quot;darkorange&amp;quot;, shape = 21, alpha = 2/3)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/occurrence-data-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can wrap this in a function to rapidly plot occurrences returned from OBIS onto a map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obis_map &amp;lt;- function(occ_dat, map_type = c(&amp;quot;satellite&amp;quot;, &amp;quot;world&amp;quot;), map_zoom = NULL, plotit = TRUE){

  bb_occ &amp;lt;- bbox(cbind(occ_dat$decimalLongitude, occ_dat$decimalLatitude))

  if(map_type == &amp;quot;satellite&amp;quot;){
    if(is.null(map_zoom)){
      base_map &amp;lt;- get_map(location = bb_occ, maptype = &amp;quot;satellite&amp;quot;)
    } else {
      base_map &amp;lt;- get_map(location = bb_occ, maptype = &amp;quot;satellite&amp;quot;, zoom = map_zoom)
    }
    obis_map &amp;lt;- ggmap(base_map)
  } else if(map_type == &amp;quot;world&amp;quot;){
    base_map &amp;lt;- map_data(&amp;quot;world&amp;quot;)
    obis_map &amp;lt;- ggplot(base_map, aes(x=long, y=lat)) +
      geom_polygon(aes(group=group)) +
      scale_y_continuous(breaks = (-2:2) * 30) +
      scale_x_continuous(breaks = (-4:4) * 45) +
      theme(panel.background = element_rect(fill = &amp;quot;steelblue&amp;quot;)) +
      coord_equal()
  } else {
    stop(&amp;quot;map_type must be one of &#39;satellite&#39; or &#39;world&#39;&amp;quot;,
         call. = FALSE)
  }

  # Now add the occurrence points
  obis_map &amp;lt;- obis_map + geom_point(data = occ_dat, aes(x = decimalLongitude, y = decimalLatitude),
                                    colour = &amp;quot;darkorange&amp;quot;, shape = 21, alpha = 2/3)

  if(plotit == T){print(obis_map)}

  return(obis_map)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_map &amp;lt;- obis_map(my_occs, map_type = &amp;quot;world&amp;quot;, plotit = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/plot using this function-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In our original post we give more examples of plotting records from individual species and multiple species, including gridded richness maps. We &lt;a href=&#34;http://www.iobis.org/2016/11/22/sorbycollection/#understanding&#34;&gt;also explain&lt;/a&gt; the many fields returned by OBIS for each record, and provide examples of filtering results both pre- and post-query on a number of criteria (e.g. date, dataset, and various quality control flags), which can bring important memory savings when the returned set of occurrences is very large.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Enriching occurrence data&lt;/p&gt;

&lt;p&gt;Matching species occurrences to environmental variables is a very common requirement of macroecological analyses, particularly those considering environmental drivers of species distributions, and how distributions are expected to shift as the climate changes. Environmental or geographical data layers of interest may be purely spatial (e.g. bathymetry), or spatio-temporal (e.g. sea surface temperature, SST). In our original post we show how to use the packages &lt;a href=&#34;https://github.com/iobis/robis&#34;&gt;robis&lt;/a&gt; and &lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0073051&#34;&gt;marmap (Pante &amp;amp; Simon-Bouhet 2013)&lt;/a&gt; to match occurrence records to bathymetry, necessary to perform the kinds of analyses we published &lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0010223&#34;&gt;here&lt;/a&gt;. We also show how to match occurrence records to locally-stored spatial datasets, such as the global marine environmental layers that can be downloaded from &lt;a href=&#34;http://gmed.auckland.ac.nz/&#34;&gt;GMED&lt;/a&gt;. In this post, we focus on obtaining &lt;a href=&#34;http://www.esrl.noaa.gov/psd/data/gridded/data.noaa.oisst.v2.html&#34;&gt;NOAA gridded monthly mean Sea Surface Temperature&lt;/a&gt; data and show how to match occurrence records to temperature in both space and time. This code is from a package in development with ROpenSci called spenv, see &lt;a href=&#34;https://github.com/ropenscilabs/spenv&#34;&gt;here&lt;/a&gt;, but we use slightly modified versions of spenv functions here.&lt;/p&gt;

&lt;p&gt;First, we use a function to download SST data from NOAA. Specifically, it downloads monthly mean data at 1 degree resolution from the Optimum Interpolation Seas Surface Temperature V2 dataset, see &lt;a href=&#34;http://www.esrl.noaa.gov/psd/data/gridded/data.noaa.oisst.v2.html&#34;&gt;here&lt;/a&gt;. The data are served as a NetCDF file, but for convenience we transform this into a raster brick - this is essentially a stacked set of global rasters, each layer representing a single month in the time series. The first time you run this the file will be downloaded (takes ~10 seconds). It will then be stored locally for future use.&lt;/p&gt;

&lt;p&gt;Start by loading additional required packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ncdf4)
library(lubridate)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtain the SST data from NOAA and convert to raster brick format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sst_prep &amp;lt;- function(path = &amp;quot;~/.spenv/noaa_sst&amp;quot;) {
  x &amp;lt;- file.path(path, &amp;quot;sst.mnmean.nc&amp;quot;)
  if (!file.exists(x)) {
    dir.create(dirname(x), recursive = TRUE, showWarnings = FALSE)
    download.file(&amp;quot;ftp://ftp.cdc.noaa.gov/Datasets/noaa.oisst.v2/sst.mnmean.nc&amp;quot;, destfile = x)
  }
  raster::brick(x, varname = &amp;quot;sst&amp;quot;)
}
sst_dat &amp;lt;- sst_prep()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View the structure of the data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sst_dat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## class       : RasterBrick
## dimensions  : 180, 360, 64800, 417  (nrow, ncol, ncell, nlayers)
## resolution  : 1, 1  (x, y)
## extent      : 0, 360, -90, 90  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0
## data source : /Users/alunjones/.spenv/noaa_sst/sst.mnmean.nc
## names       : X1981.12.01, X1982.01.01, X1982.02.01, X1982.03.01, X1982.04.01, X1982.05.01, X1982.06.01, X1982.07.01, X1982.08.01, X1982.09.01, X1982.10.01, X1982.11.01, X1982.12.01, X1983.01.01, X1983.02.01, ...
## Date        : 1981-12-01, 2016-08-01 (min, max)
## varname     : sst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is a wrapper function that takes your input data (x), together with identifiers for latitude, longitude, and date, and gets SST data from the NOAA SST gridded dataset. The origin argument enables conversion between the date formats of the NOAA data and your occurrence data. Note that this data also calculates an adjusted longitude, as occupancy data typically come with longitude in the range -180 (180 West) to +180 (180 East), whereas the NOAA data codes longitude as 0 to 360 degrees (running eastwards from 0 degrees):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sp_extract_gridded_date &amp;lt;- function(x, from = &amp;quot;noaa_sst&amp;quot;, latitude = NULL,
                                    longitude = NULL, samp_date = NULL, origin = as.Date(&amp;quot;1800-1-1&amp;quot;)) {

  x &amp;lt;- spenv_guess_latlondate(x, latitude, longitude, samp_date)
  switch(from,
         noaa_sst = {
           mb &amp;lt;- sst_prep()
           out &amp;lt;- list()
           x &amp;lt;- x[ !is.na(x$date), ]
           x$date &amp;lt;- as.Date(x$date)
           x &amp;lt;- x[x$date &amp;gt;= min(mb@z[[&amp;quot;Date&amp;quot;]]), ]
           x$lon_adj &amp;lt;- x$longitude
           x$lon_adj[x$lon_adj &amp;lt; 0] &amp;lt;- x$lon_adj[x$lon_adj &amp;lt; 0] + 360
           for (i in seq_len(NROW(x))) {
             out[[i]] &amp;lt;- get_env_par_space_x_time(mb, x[i, ], origin = origin)
           }
           x$sst &amp;lt;- unlist(out)
           x
         }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also need these utility functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spenv_guess_latlondate &amp;lt;- function(x, lat = NULL, lon = NULL, samp_date = NULL) {
  xnames &amp;lt;- names(x)
  if (is.null(lat) &amp;amp;&amp;amp; is.null(lon)) {
    lats &amp;lt;- xnames[grep(&amp;quot;^(lat|latitude)$&amp;quot;, xnames, ignore.case = TRUE)]
    lngs &amp;lt;- xnames[grep(&amp;quot;^(lon|lng|long|longitude)$&amp;quot;, xnames, ignore.case = TRUE)]

    if (length(lats) == 1 &amp;amp;&amp;amp; length(lngs) == 1) {
      if (length(x) &amp;gt; 2) {
        message(&amp;quot;Assuming &#39;&amp;quot;, lngs, &amp;quot;&#39; and &#39;&amp;quot;, lats,
                &amp;quot;&#39; are longitude and latitude, respectively&amp;quot;)
      }
      x &amp;lt;- rename(x, setNames(&#39;latitude&#39;, eval(lats)))
      x &amp;lt;- rename(x, setNames(&#39;longitude&#39;, eval(lngs)))
    } else {
      stop(&amp;quot;Couldn&#39;t infer longitude/latitude columns, please specify with &#39;lat&#39;/&#39;lon&#39; parameters&amp;quot;, call. = FALSE)
    }
  } else {
    message(&amp;quot;Using user input &#39;&amp;quot;, lon, &amp;quot;&#39; and &#39;&amp;quot;, lat,
            &amp;quot;&#39; as longitude and latitude, respectively&amp;quot;)
    x &amp;lt;- plyr::rename(x, setNames(&#39;latitude&#39;, eval(lat)))
    x &amp;lt;- plyr::rename(x, setNames(&#39;longitude&#39;, eval(lon)))
  }

  if(is.null(samp_date)){
    dates &amp;lt;- xnames[grep(&amp;quot;date&amp;quot;, xnames, ignore.case = TRUE)]
    if(length(dates) == 1){
      if(length(x) &amp;gt; 2){
        message(&amp;quot;Assuming &#39;&amp;quot;, dates, &amp;quot;&#39; are sample dates&amp;quot;)
      }
      x &amp;lt;- rename(x, setNames(&#39;date&#39;, eval(dates)))
    } else {
      stop(&amp;quot;Couldn&#39;t infer sample date column, please specify with &#39;date&#39; parameter&amp;quot;, call. = FALSE)
    }

  } else {
    message(&amp;quot;Using user input &#39;&amp;quot;, samp_date, &amp;quot;&#39; as sample date&amp;quot;)
    x &amp;lt;- plyr::rename(x, setNames(&#39;date&#39;, eval(samp_date)))
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_env_par_space_x_time &amp;lt;- function(
  env_dat, occ_dat, origin = as.Date(&amp;quot;1800-1-1&amp;quot;)){

  # calculate starting julian day for each month in env_dat
  month_intervals &amp;lt;- as.numeric(env_dat@z[[&amp;quot;Date&amp;quot;]] - origin)
  # calculate julian day for the focal date (eventDate in occ_dat)
  focal_date &amp;lt;- as.numeric(occ_dat$date - origin)

  # extract environmental variable (SST here) for this point
  as.numeric(raster::extract(
    env_dat,
    cbind(occ_dat$lon_adj, occ_dat$latitude),
    layer = findInterval(focal_date, month_intervals),
    nl = 1
  ))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Get SST values associated with the sole occupancy data&lt;/p&gt;

&lt;p&gt;First, do some cleaning of the sole data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_occs &amp;lt;- as_data_frame(filter(
  my_occs, !is.na(depth) &amp;amp; !is.na(yearcollected) &amp;amp; !is.na(individualCount) &amp;amp; depth != -9 &amp;amp; yearcollected &amp;gt;= 1981))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will now add an SST value for each occurrence. CAUTION - this may take a while to run. See our original post for a trick to speed this up!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_sst &amp;lt;- sp_extract_gridded_date(x = sole_occs,
                                    latitude = &amp;quot;decimalLatitude&amp;quot;, longitude = &amp;quot;decimalLongitude&amp;quot;, samp_date = &amp;quot;eventDate&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now plot sole occurrences by lon and lat, colour coded by temperature, faceted by month (1 = Jan to 12 = Dec) - this first requires defining a month variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_sst$month &amp;lt;- month(sole_sst$date)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create the plot like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(sole_sst_plot &amp;lt;- (ggplot(sole_sst, aes(x = longitude, y = latitude)) +
                     geom_point(aes(colour = sst), alpha = 2/3) +
                     scale_colour_gradient(low = &amp;quot;blue&amp;quot;, high = &amp;quot;red&amp;quot;) +
                     facet_wrap(~ month))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/create the plot-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you may want to look at trends over time in SST matched to sole occurrences, again faceted by month:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(sole_sst_trends &amp;lt;- ggplot(sole_sst, aes(x = yearcollected, y = sst)) +
  geom_point(colour = &amp;quot;steelblue&amp;quot;, alpha = 1/3) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, colour = &amp;quot;darkorange&amp;quot;) +
  facet_wrap(~ month)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/look at trends in SST matched to sole occurrences-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Adding geography&lt;/p&gt;

&lt;p&gt;All of the examples above have been global in scale, meaning that we have placed no spatial restrictions on the queries to OBIS - we have simply requested all occurrences that have been recorded anywhere on earth. However, we are frequently interested in sub-global analyses, either extracting data for an individual region of interest (such as a specific country’s EEZ), or summarising global data by region (e.g. records per regional sea). Here we show how OBIS queries can be refined using specific geometries, either supplied manually or as named regions obtained from the &lt;a href=&#34;http://www.marineregions.org/&#34;&gt;Marine Regions database&lt;/a&gt;. In these examples we return all records for a focal species within a region of interest, and also return a full species list for a focal region. In our original post we also showed how to combine geographic and environmental filters, for example returning all species occurring in regions of the North Atlantic that are &amp;lt;1000m deep.&lt;/p&gt;

&lt;p&gt;Start by loading additional required packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgdal)
library(mregions)
library(rgeos)
library(broom)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the UK EEZ shape file from marineregions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;uk_eez &amp;lt;- mr_shp(&amp;quot;MarineRegions:eez&amp;quot;,
	maxFeatures = NULL, filter = &amp;quot;United Kingdom Exclusive Economic Zone&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For convenience, simplify this and convert it to a data frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;uk_eez_simple &amp;lt;- SpatialPolygonsDataFrame(gSimplify(
	uk_eez, tol = 0.01, topologyPreserve = TRUE), data = uk_eez@data)
uk_eez_df &amp;lt;- tidy(uk_eez_simple)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get occurrences for a species (here, basking shark) within the UK EEZ:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;basking_shark &amp;lt;- occurrence(
	scientificname = &amp;quot;Cetorhinus maximus&amp;quot;, geometry = mr_as_wkt(uk_eez_simple))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the occurrence plot, then add the EEZ:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;basking_map &amp;lt;- obis_map(basking_shark, map_type = &amp;quot;satellite&amp;quot;, map_zoom = 4, plotit = F)
basking_map +
  geom_polygon(data = uk_eez_df, aes(x = long, y = lat, group = group),
               colour = &amp;quot;green&amp;quot;, fill = NA, size = 0.25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/p1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To get a list of species for a given region, use checklist, and specify your geometry (here an arbitrary 5 x 5 degree square in the NE Atlantic):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_taxa &amp;lt;- tbl_df(checklist(
	geometry = &amp;quot;POLYGON ((-20 50, -20 55, -15 55, -15 50, -20 50))&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then filter this to taxa with species rank:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_species &amp;lt;- filter(my_taxa, rank_name == &amp;quot;Species&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is a tibble of the 930 species found in this grid square, plus their full taxonomy and some additional summary information, including the number of records in OBIS (&lt;code&gt;records&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_species
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 930 × 18
##        id valid_id parent_id rank_name                   tname
##     &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;                   &amp;lt;chr&amp;gt;
## 1  395754   395754    695236   Species     Acanthephyra eximia
## 2  395764   395764    695236   Species   Acanthephyra pelagica
## 3  395973   395973    395971   Species Acanthoica quattrospina
## 4  396173   396173    767483   Species Acanthoscina acanthodes
## 5  398225   398225    767500   Species      Adagnesia charcoti
## 6  398227   398227    767500   Species        Adagnesia rimosa
## 7  398647   398647    398644   Species        Aetideus armatus
## 8  400887   400887    400884   Species          Amperima rosea
## 9  401559   401559    738082   Species   Amphissa acutecostata
## 10 402079   402079    768595   Species      Amuletta abyssorum
## # ... with 920 more rows, and 13 more variables: tauthor &amp;lt;chr&amp;gt;,
## #   worms_id &amp;lt;int&amp;gt;, records &amp;lt;int&amp;gt;, datasets &amp;lt;int&amp;gt;, phylum &amp;lt;chr&amp;gt;,
## #   order &amp;lt;chr&amp;gt;, family &amp;lt;chr&amp;gt;, genus &amp;lt;chr&amp;gt;, species &amp;lt;chr&amp;gt;, class &amp;lt;chr&amp;gt;,
## #   redlist &amp;lt;lgl&amp;gt;, status &amp;lt;chr&amp;gt;, hab &amp;lt;lgl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Next steps
The above describes some of the kinds of procedures that we use regularly in our group. Next steps could include further enrichment of occurrence data. For instance, there is a major initiative within WoRMS to link biological trait data to the existing taxonomy (see &lt;a href=&#34;http://www.marinespecies.org/traits/&#34;&gt;http://www.marinespecies.org/traits/&lt;/a&gt;) and we are thinking about how to filter OBIS queries by particular kinds of traits, or mapping the distribution of traits. We are also investigating how to mine the temporal dimension of OBIS data to &lt;a href=&#34;http://www.iobis.org/2016/11/15/occmod/&#34;&gt;derive robust estimates of trends in marine biodiversity&lt;/a&gt;. Keep an eye out for these developments on the &lt;a href=&#34;http://www.iobis.org/news/&#34;&gt;OBIS news site&lt;/a&gt;, and please do get in touch with requests or suggestions for improvements!&lt;/p&gt;

&lt;hr /&gt;

      </description>
    </item>
    
    <item>
      <title>finch - parse Darwin Core files</title>
      <link>https://ropensci.org/technotes/2016/12/23/finch-release/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/technotes/2016/12/23/finch-release/</guid>
      <description>
        
        

&lt;p&gt;&lt;code&gt;finch&lt;/code&gt; has just been released to CRAN (binaries should be up soon).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;finch&lt;/code&gt; is a package to parse Darwin Core files. &lt;a href=&#34;http://rs.tdwg.org/dwc/&#34;&gt;Darwin Core&lt;/a&gt; (&lt;code&gt;DwC&lt;/code&gt;) is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a body of standards. It includes a glossary of terms (in other contexts these might be called properties, elements, fields, columns, attributes, or concepts) intended to facilitate the sharing of information about biological diversity by providing reference definitions, examples, and commentaries. The Darwin Core is primarily based on taxa, their occurrence in nature as documented by observations, specimens, samples, and related information. &amp;hellip; The Simple Darwin Core [SIMPLEDWC] is a specification for one particular way to use the terms - to share data about taxa and their occurrences in a simply structured way - and is probably what is meant if someone suggests to &amp;ldquo;format your data according to the Darwin Core&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GBIF (Global Biodiversity Information Facility) is the biggest holder of biodiversity data. When you request
data in bulk format from GBIF they call give it to you in what&amp;rsquo;s called a Darwin Core Archive, or
&lt;code&gt;DwC-A&lt;/code&gt;. GBIF has a validator for DwC-A files as well: &lt;a href=&#34;http://tools.gbif.org/dwca-validator/&#34;&gt;http://tools.gbif.org/dwca-validator/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of our most used packages is probably &lt;code&gt;rgbif&lt;/code&gt;, a client to interact with GBIF&amp;rsquo;s web services.
There&amp;rsquo;s a series of functions in &lt;code&gt;rgbif&lt;/code&gt; to request data in bulk format (see functions starting
with &lt;code&gt;occ_download&lt;/code&gt;), and from this you get a DwC-A file. This is where &lt;code&gt;finch&lt;/code&gt; comes in:
it can parse these DwC-A files into something useable inside R.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;finch&amp;quot;)
# or from source if binary not available yet
install.packages(&amp;quot;finch&amp;quot;, type = &amp;quot;source&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;finch&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To parse a simple darwin core file like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;SimpleDarwinRecordSet
 xmlns=&amp;quot;http://rs.tdwg.org/dwc/xsd/simpledarwincore/&amp;quot;
 xmlns:dc=&amp;quot;http://purl.org/dc/terms/&amp;quot;
 xmlns:dwc=&amp;quot;http://rs.tdwg.org/dwc/terms/&amp;quot;
 xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
 xsi:schemaLocation=&amp;quot;http://rs.tdwg.org/dwc/xsd/simpledarwincore/ ../../xsd/tdwg_dwc_simple.xsd&amp;quot;&amp;gt;
 &amp;lt;SimpleDarwinRecord&amp;gt;
  &amp;lt;dwc:occurrenceID&amp;gt;urn:catalog:YPM:VP.057488&amp;lt;/dwc:occurrenceID&amp;gt;
  &amp;lt;dc:type&amp;gt;PhysicalObject&amp;lt;/dc:type&amp;gt;
  &amp;lt;dc:modified&amp;gt;2009-02-12T12:43:31&amp;lt;/dc:modified&amp;gt;
  &amp;lt;dc:language&amp;gt;en&amp;lt;/dc:language&amp;gt;
  &amp;lt;dwc:basisOfRecord&amp;gt;FossilSpecimen&amp;lt;/dwc:basisOfRecord&amp;gt;
  &amp;lt;dwc:institutionCode&amp;gt;YPM&amp;lt;/dwc:institutionCode&amp;gt;
  &amp;lt;dwc:collectionCode&amp;gt;VP&amp;lt;/dwc:collectionCode&amp;gt;
  &amp;lt;dwc:catalogNumber&amp;gt;VP.057488&amp;lt;/dwc:catalogNumber&amp;gt;
  &amp;lt;dwc:individualCount&amp;gt;1&amp;lt;/dwc:individualCount&amp;gt;
  &amp;lt;dwc:locationID xsi:nil=&amp;quot;true&amp;quot;/&amp;gt;
  &amp;lt;dwc:continent&amp;gt;North America&amp;lt;/dwc:continent&amp;gt;
  &amp;lt;dwc:country&amp;gt;United States&amp;lt;/dwc:country&amp;gt;
  &amp;lt;dwc:countryCode&amp;gt;US&amp;lt;/dwc:countryCode&amp;gt;
  &amp;lt;dwc:stateProvince&amp;gt;Montana&amp;lt;/dwc:stateProvince&amp;gt;
  &amp;lt;dwc:county&amp;gt;Garfield&amp;lt;/dwc:county&amp;gt;
  &amp;lt;dwc:scientificName&amp;gt;Tyrannosourus rex&amp;lt;/dwc:scientificName&amp;gt;
  &amp;lt;dwc:genus&amp;gt;Tyrannosourus&amp;lt;/dwc:genus&amp;gt;
  &amp;lt;dwc:specificEpithet&amp;gt;rex&amp;lt;/dwc:specificEpithet&amp;gt;
  &amp;lt;dwc:earliestPeriodOrHighestSystem&amp;gt;Creataceous&amp;lt;/dwc:earliestPeriodOrHighestSystem&amp;gt;
  &amp;lt;dwc:latestPeriodOrHighestSystem&amp;gt;Creataceous&amp;lt;/dwc:latestPeriodOrHighestSystem&amp;gt;
  &amp;lt;dwc:earliestEonOrHighestEonothem&amp;gt;Late Cretaceous&amp;lt;/dwc:earliestEonOrHighestEonothem&amp;gt;
  &amp;lt;dwc:latestEonOrHighestEonothem&amp;gt;Late Cretaceous&amp;lt;/dwc:latestEonOrHighestEonothem&amp;gt;
 &amp;lt;/SimpleDarwinRecord&amp;gt;
&amp;lt;/SimpleDarwinRecordSet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file is in this package as an example file, get the file, then &lt;code&gt;simple()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;example_simple_fossil.xml&amp;quot;, package = &amp;quot;finch&amp;quot;)
out &amp;lt;- simple_read(file)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Index to &lt;code&gt;meta&lt;/code&gt;, &lt;code&gt;dc&lt;/code&gt; or &lt;code&gt;dwc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$dc
#&amp;gt; [[1]]
#&amp;gt; [[1]]$type
#&amp;gt; [1] &amp;quot;PhysicalObject&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; [[2]]$modified
#&amp;gt; [1] &amp;quot;2009-02-12T12:43:31&amp;quot;
#&amp;gt; 
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt; [[3]]$language
#&amp;gt; [1] &amp;quot;en&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parse-darwin-core-archive&#34;&gt;Parse Darwin Core Archive&lt;/h2&gt;

&lt;p&gt;To parse a Darwin Core Archive like can be gotten from GBIF use &lt;code&gt;dwca_read()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dwca_read()&lt;/code&gt; can parse a DwC-A file as a directory, zipped file, or from a URL.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an example Darwin Core Archive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;0000154-150116162929234.zip&amp;quot;, package = &amp;quot;finch&amp;quot;)
(out &amp;lt;- dwca_read(file, read = TRUE))
#&amp;gt; &amp;lt;gbif dwca&amp;gt;
#&amp;gt;   Package ID: 6cfaaf9c-d518-4ca3-8dc5-f5aadddc0390
#&amp;gt;   No. data sources: 10
#&amp;gt;   No. datasets: 3
#&amp;gt;   Dataset occurrence.txt: [225 X 443]
#&amp;gt;   Dataset multimedia.txt: [15 X 1]
#&amp;gt;   Dataset verbatim.txt: [209 X 443]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List files in the archive&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$files
#&amp;gt; $xml_files
#&amp;gt; [1] &amp;quot;/Library/Frameworks/R.framework/Versions/3.3/Resources/library/finch/examples/0000154-150116162929234/meta.xml&amp;quot;    
#&amp;gt; [2] &amp;quot;/Library/Frameworks/R.framework/Versions/3.3/Resources/library/finch/examples/0000154-150116162929234/metadata.xml&amp;quot;
#&amp;gt; 
#&amp;gt; $txt_files
#&amp;gt; [1] &amp;quot;/Library/Frameworks/R.framework/Versions/3.3/Resources/library/finch/examples/0000154-150116162929234/citations.txt&amp;quot; 
#&amp;gt; [2] &amp;quot;/Library/Frameworks/R.framework/Versions/3.3/Resources/library/finch/examples/0000154-150116162929234/multimedia.txt&amp;quot;
#&amp;gt; [3] &amp;quot;/Library/Frameworks/R.framework/Versions/3.3/Resources/library/finch/examples/0000154-150116162929234/occurrence.txt&amp;quot;
#&amp;gt; [4] &amp;quot;/Library/Frameworks/R.framework/Versions/3.3/Resources/library/finch/examples/0000154-150116162929234/rights.txt&amp;quot;    
#&amp;gt; [5] &amp;quot;/Library/Frameworks/R.framework/Versions/3.3/Resources/library/finch/examples/0000154-150116162929234/verbatim.txt&amp;quot;  
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;High level metadata for the whole archive (printing a subset for brevity)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$emlmeta
#&amp;gt; &amp;lt;eml packageId=&amp;quot;6cfaaf9c-d518-4ca3-8dc5-f5aadddc0390&amp;quot; system=&amp;quot;http://gbif.org&amp;quot; scope=&amp;quot;system&amp;quot; xml:lang=&amp;quot;en&amp;quot; xsi:schemaLocation=&amp;quot;eml://ecoinformatics.org/eml-2.1.1 http://rs.gbif.org/schema/eml-gbif-profile/1.0.2/eml.xsd&amp;quot;&amp;gt;
#&amp;gt;   &amp;lt;dataset&amp;gt;
#&amp;gt;     &amp;lt;title&amp;gt;GBIF Occurrence Download 0000154-150116162929234&amp;lt;/title&amp;gt;
#&amp;gt;     &amp;lt;creator&amp;gt;
#&amp;gt;       &amp;lt;individualName&amp;gt;
#&amp;gt;         &amp;lt;surName&amp;gt;GBIF Download Service&amp;lt;/surName&amp;gt;
#&amp;gt;       &amp;lt;/individualName&amp;gt;
#&amp;gt;     &amp;lt;/creator&amp;gt;
#&amp;gt;     &amp;lt;metadataProvider&amp;gt;
#&amp;gt;       &amp;lt;individualName&amp;gt;
#&amp;gt;         &amp;lt;surName&amp;gt;GBIF Download Service&amp;lt;/surName&amp;gt;
#&amp;gt;       &amp;lt;/individualName&amp;gt;
#&amp;gt;     &amp;lt;/metadataProvider&amp;gt;
#&amp;gt;     &amp;lt;associatedParty&amp;gt;
#&amp;gt;       &amp;lt;organizationName&amp;gt;OZCAM (Online Zoological Collections of Australian Museums) Provider&amp;lt;/organizationName&amp;gt;
#&amp;gt;       &amp;lt;onlineUrl&amp;gt;http://www.ozcam.org.au/&amp;lt;/onlineUrl&amp;gt;
#&amp;gt;       &amp;lt;role&amp;gt;CONTENT_PROVIDER&amp;lt;/role&amp;gt;
#&amp;gt;     &amp;lt;/associatedParty&amp;gt;
#&amp;gt;     &amp;lt;associatedParty&amp;gt;
#&amp;gt;       &amp;lt;individualName&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;High level metadata for each data file, there&amp;rsquo;s many files, but we&amp;rsquo;ll just look at one&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hm &amp;lt;- out$highmeta
head( hm$occurrence.txt )
#&amp;gt;   index                                        term delimitedBy
#&amp;gt; 1     0         http://rs.gbif.org/terms/1.0/gbifID        &amp;lt;NA&amp;gt;
#&amp;gt; 2     1           http://purl.org/dc/terms/abstract        &amp;lt;NA&amp;gt;
#&amp;gt; 3     2       http://purl.org/dc/terms/accessRights        &amp;lt;NA&amp;gt;
#&amp;gt; 4     3      http://purl.org/dc/terms/accrualMethod        &amp;lt;NA&amp;gt;
#&amp;gt; 5     4 http://purl.org/dc/terms/accrualPeriodicity        &amp;lt;NA&amp;gt;
#&amp;gt; 6     5      http://purl.org/dc/terms/accrualPolicy        &amp;lt;NA&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get the same metadata as above for each dataset that went into the tabular dataset downloaded&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out$dataset_meta[[1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View one of the datasets, brief overview.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(out$data[[1]][,c(1:5)])
#&amp;gt;      gbifID abstract accessRights accrualMethod accrualPeriodicity
#&amp;gt; 1  50280003       NA                         NA                 NA
#&amp;gt; 2 477550574       NA                         NA                 NA
#&amp;gt; 3 239703844       NA                         NA                 NA
#&amp;gt; 4 239703843       NA                         NA                 NA
#&amp;gt; 5 239703833       NA                         NA                 NA
#&amp;gt; 6 477550692       NA                         NA                 NA
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(out$data[[1]])[1:20]
#&amp;gt;  [1] &amp;quot;gbifID&amp;quot;                &amp;quot;abstract&amp;quot;             
#&amp;gt;  [3] &amp;quot;accessRights&amp;quot;          &amp;quot;accrualMethod&amp;quot;        
#&amp;gt;  [5] &amp;quot;accrualPeriodicity&amp;quot;    &amp;quot;accrualPolicy&amp;quot;        
#&amp;gt;  [7] &amp;quot;alternative&amp;quot;           &amp;quot;audience&amp;quot;             
#&amp;gt;  [9] &amp;quot;available&amp;quot;             &amp;quot;bibliographicCitation&amp;quot;
#&amp;gt; [11] &amp;quot;conformsTo&amp;quot;            &amp;quot;contributor&amp;quot;          
#&amp;gt; [13] &amp;quot;coverage&amp;quot;              &amp;quot;created&amp;quot;              
#&amp;gt; [15] &amp;quot;creator&amp;quot;               &amp;quot;date&amp;quot;                 
#&amp;gt; [17] &amp;quot;dateAccepted&amp;quot;          &amp;quot;dateCopyrighted&amp;quot;      
#&amp;gt; [19] &amp;quot;dateSubmitted&amp;quot;         &amp;quot;description&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-with-rgbif&#34;&gt;Using with rgbif&lt;/h2&gt;

&lt;p&gt;Now that we have &lt;code&gt;finch&lt;/code&gt; we can make working with GBIF bulk downloads from R a
richer experience.&lt;/p&gt;

&lt;p&gt;Right now, we make it easy to import just the occurrence data from DwC-A files
via &lt;code&gt;occ_download_import()&lt;/code&gt;, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgbif)
res &amp;lt;- occ_download(&#39;taxonKey = 7264332&#39;, &#39;hasCoordinate = TRUE&#39;)
dat &amp;lt;- occ_download_get(res)
occ_download_import(dat)
#&amp;gt; Download file size: 0.26 MB
#&amp;gt;
#&amp;gt;        gbifID abstract accessRights accrualMethod accrualPeriodicity accrualPolicy
#&amp;gt; 1  1269880600       NA                         NA                 NA            NA
#&amp;gt; 2  1269861719       NA                         NA                 NA            NA
#&amp;gt; 3  1269850111       NA                         NA                 NA            NA
#&amp;gt; 4  1265524086       NA                         NA                 NA            NA
#&amp;gt; 5  1257400209       NA                         NA                 NA            NA
#&amp;gt; 6  1257396860       NA                         NA                 NA            NA
#&amp;gt; 7  1257391874       NA                         NA                 NA            NA
#&amp;gt; 8  1257390731       NA                         NA                 NA            NA
#&amp;gt; 9  1257383844       NA                         NA                 NA            NA
#&amp;gt; 10 1257375500       NA                         NA                 NA            NA
#&amp;gt; ..        ...      ...          ...           ...                ...           ...
#&amp;gt; Variables not shown: accrualPolicy (lgl), alternative (lgl), audience (lgl),
#&amp;gt;      available (lgl), bibliographicCitation (lgl), conformsTo (lgl),
#&amp;gt;      contributor (lgl), coverage (lgl), created (lgl), creator (lgl), date
#&amp;gt;      (lgl), dateAccepted (lgl), dateCopyrighted (lgl), dateSubmitted (lgl),
#&amp;gt;      description (lgl), educationLevel (lgl), extent (lgl), format (lgl),
#&amp;gt;      hasFormat (lgl), hasPart (lgl), hasVersion (lgl), identifier (chr),
#&amp;gt;      instructionalMethod (lgl), isFormatOf (lgl), isPartOf (lgl),
#&amp;gt;      isReferencedBy (lgl), isReplacedBy (lgl), isRequiredBy (lgl), ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;finch&lt;/code&gt;, you can access all the data in the DwC-A file. &lt;code&gt;finch&lt;/code&gt; is not integrated
into &lt;code&gt;rgbif&lt;/code&gt;, though we may in the future.&lt;/p&gt;

&lt;p&gt;The object returned from &lt;code&gt;occ_download_get&lt;/code&gt; is just a path, so we can use that
with &lt;code&gt;finch&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(finch)
(out &amp;lt;- dwca_read(dat[1], read = TRUE))
#&amp;gt; &amp;lt;gbif dwca&amp;gt;
#&amp;gt;   Package ID: 10.15468/dl.mmecqc
#&amp;gt;   No. data sources: 8
#&amp;gt;   No. datasets: 3
#&amp;gt;   Dataset occurrence.txt: [235 X 1371]
#&amp;gt;   Dataset multimedia.txt: [15 X 0]
#&amp;gt;   Dataset verbatim.txt: [217 X 1371]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have access to not just the occurrence data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(out$data$occurrence.txt)[,1:5]
#&amp;gt;       gbifID abstract accessRights accrualMethod accrualPeriodicity
#&amp;gt; 1 1269880600       NA                         NA                 NA
#&amp;gt; 2 1269861719       NA                         NA                 NA
#&amp;gt; 3 1269850111       NA                         NA                 NA
#&amp;gt; 4 1265524086       NA                         NA                 NA
#&amp;gt; 5 1257400209       NA                         NA                 NA
#&amp;gt; 6 1257396860       NA                         NA                 NA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But all the rich metadata in the other files. Yay!&lt;/p&gt;

&lt;h2 id=&#34;future-work&#34;&gt;Future work&lt;/h2&gt;

&lt;p&gt;DwC-A files can be very large - This is for sure going to be a pain point for some.
We&amp;rsquo;ll continue to test and refine on big data files.&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback?&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;d love to know what people think about this package.&lt;/p&gt;

&lt;p&gt;Documentation can be better, e.g., there&amp;rsquo;s no vignette yet (but adding
that soon).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Accessing iNaturalist data</title>
      <link>https://ropensci.org/blog/2014/03/26/rinat/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/03/26/rinat/</guid>
      <description>
        
        &lt;p&gt;The &lt;a href=&#34;http://www.inaturalist.org/&#34;&gt;iNaturalist&lt;/a&gt; project is a really cool way to both engage people in citizen science and collect species occurrence data.  The premise is pretty simple, users download an app for their smartphone, and then can easily geo reference any specimen they see, uploading it to the iNaturalist website.  It let&amp;rsquo;s users turn casual observations into meaningful crowdsourced species occurrence data. They also provide a nice robust API to access almost all of their data.  We&amp;rsquo;ve developed a package &lt;a href=&#34;https://github.com/ropensci/rinat&#34;&gt;&lt;code&gt;rinat&lt;/code&gt;&lt;/a&gt; that can easily access all of that data in R.  Our package &lt;a href=&#34;https://github.com/ropensci/spocc&#34;&gt;&lt;code&gt;spocc&lt;/code&gt;&lt;/a&gt; uses iNaturalist data as one of it&amp;rsquo;s sources, &lt;code&gt;rinat&lt;/code&gt; provides an interface for all the features available in the API.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Searching&lt;/em&gt;
Currently you can get access to iNaturalist occurrence records from our package &lt;code&gt;spocc&lt;/code&gt;, which works great for scenarios where you want lot&amp;rsquo;s of data from many sources, but &lt;code&gt;rinat&lt;/code&gt; will get you full details on every record and offers other searching on terms other than species names. First let&amp;rsquo;s see how this matches with what you can get with &lt;code&gt;spocc&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(stringsAsFactors = F)
library(spocc)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rinat)
out &amp;lt;- occ(query = &amp;quot;Accipiter striatus&amp;quot;, from = &amp;quot;inat&amp;quot;)
inat_out &amp;lt;- get_inat_obs(taxon = &amp;quot;Accipiter striatus&amp;quot;, maxresults = 25)
### Compare Id&#39;s and see that results are the same without viewing full tables
cbind(out$inat$data$Accipiter_striatus$Id[1:5], inat_out$Id[1:5])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##        [,1]   [,2]
## [1,] 581369 581369
## [2,] 574433 574433
## [3,] 570635 570635
## [4,] 555214 555214
## [5,] 551405 551405
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results are the same, the &lt;code&gt;rinat&lt;/code&gt; package will offer a bit more flexiblity in searching.  You can search for records by a fuzzy search query, a taxon (used above in &lt;code&gt;spocc&lt;/code&gt;), a location in a bounding box, or by date.  Let&amp;rsquo;s say you just want to search by for records of Mayflies, you can use the taxon parameter to search for all lower level taxonomic matches below order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;may_flies &amp;lt;- get_inat_obs(taxon = &amp;quot;Ephemeroptera&amp;quot;)
## See what species names come back.
may_flies$Species.guess[1:10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Mayfly&amp;quot;               &amp;quot;Heptageniidae&amp;quot;        &amp;quot;Ephemerella subvaria&amp;quot;
##  [4] &amp;quot;Ephemerella subvaria&amp;quot; &amp;quot;Mayflies&amp;quot;             &amp;quot;Stream Mayflies&amp;quot;
##  [7] &amp;quot;Mayflies&amp;quot;             &amp;quot;Mayflies&amp;quot;             &amp;quot;Mayflies&amp;quot;
## [10] &amp;quot;Hexagenia&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could also search using the fuzzy query parameter, looking for mentions of a specific habitat or a common name. Below I&amp;rsquo;ll search for one of my favorite habitats, vernal ponds and see what species come back.  Also we can search for common names and see the scientific names (which should be all the same).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vp_obs &amp;lt;- get_inat_obs(query = &amp;quot;vernal pool&amp;quot;)
vp_obs$Species.guess[1:10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Docks (Genus Rumex)&amp;quot;
##  [2] &amp;quot;Blennosperma bakeri&amp;quot;
##  [3] &amp;quot;Rails, Gallinules, and Coots&amp;quot;
##  [4] &amp;quot;Western Spadefoot&amp;quot;
##  [5] &amp;quot;Western Spadefoot&amp;quot;
##  [6] &amp;quot;Eupsilia&amp;quot;
##  [7] &amp;quot;upland chorus frog&amp;quot;
##  [8] &amp;quot;Wood Frog&amp;quot;
##  [9] &amp;quot;Striped Meadowhawk (Sympetrum pallipes)&amp;quot;
## [10] &amp;quot;Ambystoma maculatum&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
# Now le&#39;ts look up by common name:

deer &amp;lt;- get_inat_obs(query = &amp;quot;Mule Deer&amp;quot;)
deer$Scientific.name[1:10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot;
##  [4] &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot;
##  [7] &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus&amp;quot;
## [10] &amp;quot;Odocoileus hemionus&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of these general searching functions return a dataframe that is m x 32 (where m is the requested number of results).  The column names are mostly self-explanatory, including, common names, species names, observer id&amp;rsquo;s, observer names, data quality, licenses and url&amp;rsquo;s for images so you can go look at the photo a user took.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Filtering&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All searches can also be filtered by space and time.  You can search for records within a specific bounding box, or on a specific date (but not a range).  We can redo our deer search using a bounding box for the western United States.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bounds &amp;lt;- c(38.44047, -125, 40.86652, -121.837)
deer &amp;lt;- get_inat_obs(query = &amp;quot;Mule Deer&amp;quot;, bounds = bounds)
cat(paste(&amp;quot;The number of records found in your bunding box:&amp;quot;, dim(deer)[1],
    sep = &amp;quot; &amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The number of records found in your bunding box: 47
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By checking the dimensions, we can see only 47 records were found.  We could try the samething for a given day, month or year. Let&amp;rsquo;s try searhing for cumulative totals of observations of Ephemeroptera and see if we can detect seasonality.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
out &amp;lt;- rep(NA, 12)
for (i in 1:12) {
    out[i] &amp;lt;- dim(get_inat_obs(taxon = &amp;quot;Ephemeroptera&amp;quot;, month = i, maxresults = 200))[1]
}
out &amp;lt;- data.frame(out)
out$month &amp;lt;- factor(month.name, levels = month.name)
ggplot(out, aes(x = month, y = out, group = 1)) + geom_point() + stat_smooth(se = FALSE) +
    xlab(&amp;quot;Month&amp;quot;) + ylab(&amp;quot;Cumulative of Mayfly observations&amp;quot;) + theme_bw(16)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-26-rinat/filter_date.png&#34; alt=&#34;plot of chunk filter_date&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Exactly as you&amp;rsquo;d expect observations of this season insect tend to peak in the summer and then slowly decline.  Except for September peak, it follows the expected trend.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;User and project data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are several other functions from the API that allow you to access data about projects and users. You can grab detailed data about projects, users and observations.  Let&amp;rsquo;s look at the &lt;a href=&#34;http://www.inaturalist.org/projects/state-flowers-of-the-united-states-eol-collection&#34;&gt;EOL state flowers project&lt;/a&gt;.  First we can grab some basic info on the project by searching for it based on it&amp;rsquo;s &amp;ldquo;slug&amp;rdquo;.  You can find this in the URL of the project: &amp;ldquo;&lt;a href=&#34;http://www.inaturalist.org/projects/state-flowers-of-the-united-states-eol-collection&amp;quot;&#34;&gt;http://www.inaturalist.org/projects/state-flowers-of-the-united-states-eol-collection&amp;quot;&lt;/a&gt;, which is the section of text after &amp;ldquo;projects/&amp;rdquo;, so in this case it would be &amp;ldquo;state-flowers-of-the-united-states-eol-collection&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s grab some info on the project by getting observations but set the &lt;code&gt;type&lt;/code&gt; as &amp;ldquo;info&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eol_flow &amp;lt;- get_inat_obs_project(&amp;quot;state-flowers-of-the-united-states-eol-collection&amp;quot;,
    type = &amp;quot;info&amp;quot;, raw = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 204  Records
## 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### See how many taxa there are, and how many counts there have been
cat(paste(&amp;quot;The project has observed this many species:&amp;quot;, eol_flow$taxa_number,
    sep = &amp;quot; &amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The project has observed this many species: 20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cat(paste(&amp;quot;The project has observed this many occurrences:&amp;quot;, eol_flow$taxa_count,
    sep = &amp;quot; &amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The project has observed this many occurrences: 204
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can grab all the observations from the project as well just by setting the &lt;code&gt;type&lt;/code&gt; as &amp;ldquo;observations&amp;rdquo;.  Then it&amp;rsquo;s easy to to get details about specific observations or users.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eol_obs &amp;lt;- get_inat_obs_project(&amp;quot;state-flowers-of-the-united-states-eol-collection&amp;quot;,
    type = &amp;quot;observations&amp;quot;, raw = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 204  Records
## 0-100-200-300
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## See just the first few details of an observation.
head(get_inat_obs_id(eol_obs$Id[1]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $captive
## NULL
##
## $comments_count
## [1] 0
##
## $community_taxon_id
## [1] 48225
##
## $created_at
## [1] &amp;quot;2013-04-08T15:49:15-07:00&amp;quot;
##
## $delta
## [1] FALSE
##
## $description
## [1] &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## See the first five species this user has recorded
head(get_inat_obs_user(as.character(eol_obs$User.login[1]), maxresults = 20))[,
    1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Lynx rufus&amp;quot;              &amp;quot;Melanerpes formicivorus&amp;quot;
## [3] &amp;quot;Lontra canadensis&amp;quot;       &amp;quot;Buteo lineatus&amp;quot;
## [5] &amp;quot;Icteridae&amp;quot;               &amp;quot;Pelecanus occidentalis&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many more details that you can get, like counts of observations by place ID (extracted from the project or observation, but not well exposed to users), the most common species by date, or by user.  There is almost no end to the details you can extract.  If you ever wanted to do a case study of a citizen science project, you could get data to answer almost any question you had about the iNaturalist project with &lt;code&gt;rinat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, what species occurrence package wouldn&amp;rsquo;t be complete without some basic mapping.  This function will generate a quick map for you based on a data frame of observations from &lt;code&gt;rinat&lt;/code&gt;. These can be from functions such as &lt;code&gt;get_inat_obs&lt;/code&gt;, or &lt;code&gt;get_inat_obs_project&lt;/code&gt;.  Let&amp;rsquo;s end by plotting all the observations from the EOL state flowers project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### Set plot to false so it returns a ggplot2 object, and that let&#39;s us modify
### it.
eol_map &amp;lt;- inat_map(eol_obs, plot = FALSE)
### Now we can modify the returned map
eol_map + borders(&amp;quot;state&amp;quot;) + theme_bw() + xlim(-125, -65) + ylim(25, 50)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-26-rinat/eol_plot.png&#34; alt=&#34;plot of chunk eol_plot&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Species occurrence data</title>
      <link>https://ropensci.org/blog/2014/03/17/spocc/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/03/17/spocc/</guid>
      <description>
        
        

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
UPDATE: mapping functions are in a separate package now (&lt;a href=&#34;https://cran.rstudio.com/web/packages/mapr&#34;&gt;mapr&lt;/a&gt;). Examples that do mapping below have been updated.
&lt;/div&gt;

&lt;p&gt;The rOpenSci projects aims to provide programmatic access to scientific data repositories on the web. A vast majority of the packages in our current suite retrieve some form of biodiversity or taxonomic data. Since several of these datasets have been georeferenced, it provides numerous opportunities for visualizing species distributions, building species distribution maps, and for using it analyses such as species distribution models. In an effort to streamline access to these data, we have developed a package called Spocc, which provides a unified API to all the biodiversity sources that we provide. The obvious advantage is that a user can interact with a common API and not worry about the nuances in syntax that differ between packages. As more data sources come online, users can access even more data without significant changes to their code. However, it is important to note that spocc will never replicate the full functionality that exists within specific packages. Therefore users with a strong interest in one of the specific data sources listed below would benefit from familiarising themselves with the inner working of the appropriate packages.&lt;/p&gt;

&lt;h2 id=&#34;data-sources&#34;&gt;Data Sources&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;spocc&lt;/code&gt; currently interfaces with five major biodiversity repositories. Many of these packages have been part of the rOpenSci suite:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Global Biodiversity Information Facility (&lt;code&gt;rgbif&lt;/code&gt;)
&lt;a href=&#34;http://www.gbif.org/&#34;&gt;GBIF&lt;/a&gt; is a government funded open data repository with several partner organizations with the express goal of providing access to data on Earth&amp;rsquo;s biodiversity. The data are made available by a network of member nodes, coordinating information from various participant organizations and government agencies.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://ecoengine.berkeley.edu/&#34;&gt;Berkeley Ecoengine&lt;/a&gt; (&lt;code&gt;ecoengine&lt;/code&gt;)
The ecoengine is an open API built by the &lt;a href=&#34;http://globalchange.berkeley.edu/&#34;&gt;Berkeley Initiative for Global Change Biology&lt;/a&gt;. The repository provides access to over 3 million specimens from various Berkeley natural history museums. These data span more than a century and provide access to georeferenced specimens, species checklists, photographs, vegetation surveys and resurveys and a variety of measurements from environmental sensors located at reserves across University of California&amp;rsquo;s natural reserve system. (&lt;a href=&#34;http://ropensci.org/blog/2014/01/30/ecoengine/&#34;&gt;related blog post&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;iNaturalist&lt;/strong&gt; (&lt;code&gt;rinat&lt;/code&gt;)
iNaturalist provides access to crowd sourced citizen science data on species observations.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://vertnet.org/index.php&#34;&gt;VertNet&lt;/a&gt; (&lt;code&gt;rvertnet&lt;/code&gt;)
Similar to &lt;code&gt;rgbif&lt;/code&gt;, ecoengine, and &lt;code&gt;rbison&lt;/code&gt; (see below), VertNet provides access to more than 80 million vertebrate records spanning a large number of institutions and museums primarly covering four major disciplines (mammology, herpetology, ornithology, and icthyology). &lt;strong&gt;Note that we don&amp;rsquo;t currenlty support VertNet data in this package, but we should soon&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bison.usgs.ornl.gov/&#34;&gt;Biodiversity Information Serving Our Nation&lt;/a&gt; (&lt;code&gt;rbison&lt;/code&gt;)
Built by the US Geological Survey&amp;rsquo;s core science analytic team, BISON is a portal that provides access to species occurrence data from several participating institutions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://ebird.org/content/ebird/&#34;&gt;eBird&lt;/a&gt; (&lt;code&gt;rebird&lt;/code&gt;)
ebird is a database developed and maintained by the Cornell Lab of Ornithology and the National Audubon Society. It provides real-time access to checklist data, data on bird abundance and distribution, and communtiy reports from birders.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://antweb.org&#34;&gt;AntWeb&lt;/a&gt; (&lt;code&gt;AntWeb&lt;/code&gt;)
AntWeb is the world&amp;rsquo;s largest online database of images, specimen records, and natural history information on ants. It is community driven and open to contribution from anyone with specimen records, natural history comments, or images. (&lt;a href=&#34;http://ropensci.org/blog/2014/02/18/antweb/&#34;&gt;related blog post&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It&amp;rsquo;s important to keep in mind that several data providers interface with many of the above mentioned repositories. This means that occurence data obtained from BISON may be duplicates of data that are also available through GBIF. We do not have a way to resolve these duplicates or overlaps at this time but it is an issue we are hoping to address in future versions of the package.&lt;/p&gt;

&lt;h2 id=&#34;installing-the-package&#34;&gt;Installing the package&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;spocc&amp;quot;)
# or install the most recent version
devtools::install_github(&amp;quot;ropensci/spocc&amp;quot;)
library(spocc)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;spocc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;searching-species-occurrence-data&#34;&gt;Searching species occurrence data&lt;/h2&gt;

&lt;p&gt;The main workhorse function of the package is called &lt;code&gt;occ&lt;/code&gt;. The function allows you to search for occurrence records on a single species or list of species and from particular sources of interest or several. The main input is a &lt;code&gt;query&lt;/code&gt; with sources specified under the argument &lt;code&gt;from&lt;/code&gt;. So to look at a really simply query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;results &amp;lt;- occ(query = &#39;Accipiter striatus&#39;, from = &#39;gbif&#39;)
results
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; Searched: gbif
#&amp;gt; Occurrences - Found: 529,471, Returned: 500
#&amp;gt; Search type: Scientific
#&amp;gt;   gbif: Accipiter striatus (500)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returns the results as an S3 class with a slot for each data source. Since we only requested data from &lt;code&gt;gbif&lt;/code&gt;, the remaining slots are empty. To view the data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;results$gbif
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; Species [Accipiter striatus (500)]
#&amp;gt; First 10 rows of [Accipiter_striatus]
#&amp;gt;
#&amp;gt; Source: local data frame [500 x 117]
#&amp;gt;
#&amp;gt;                  name  longitude latitude  prov                 issues
#&amp;gt;                 &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;
#&amp;gt; 1  Accipiter striatus  -97.94314 30.04580  gbif         cdround,gass84
#&amp;gt; 2  Accipiter striatus -122.40089 37.49201  gbif         cdround,gass84
#&amp;gt; 3  Accipiter striatus  -97.63810 30.24674  gbif    cdround,cudc,gass84
#&amp;gt; 4  Accipiter striatus  -81.85267 28.81852  gbif                 gass84
#&amp;gt; 5  Accipiter striatus -106.31531 31.71593  gbif         cdround,gass84
#&amp;gt; 6  Accipiter striatus  -97.81493 26.03150  gbif cdround,cucdmis,gass84
#&amp;gt; 7  Accipiter striatus  -95.50117 29.76086  gbif         cdround,gass84
#&amp;gt; 8  Accipiter striatus -116.67145 32.94147  gbif         cdround,gass84
#&amp;gt; 9  Accipiter striatus  -96.91463 32.82949  gbif         cdround,gass84
#&amp;gt; 10 Accipiter striatus  -75.65139 45.44557  gbif         cdround,gass84
#&amp;gt; ..                ...        ...      ...   ...                    ...
#&amp;gt; Variables not shown: key &amp;lt;int&amp;gt;, datasetKey &amp;lt;chr&amp;gt;, publishingOrgKey &amp;lt;chr&amp;gt;,
#&amp;gt;   publishingCountry &amp;lt;chr&amp;gt;, protocol &amp;lt;chr&amp;gt;, lastCrawled &amp;lt;chr&amp;gt;, lastParsed
#&amp;gt;   &amp;lt;chr&amp;gt;, extensions &amp;lt;chr&amp;gt;, basisOfRecord &amp;lt;chr&amp;gt;, taxonKey &amp;lt;int&amp;gt;, kingdomKey
#&amp;gt;   &amp;lt;int&amp;gt;, phylumKey &amp;lt;int&amp;gt;, classKey &amp;lt;int&amp;gt;, orderKey &amp;lt;int&amp;gt;, familyKey &amp;lt;int&amp;gt;,
#&amp;gt;   genusKey &amp;lt;int&amp;gt;, speciesKey &amp;lt;int&amp;gt;, scientificName &amp;lt;chr&amp;gt;, kingdom &amp;lt;chr&amp;gt;,
#&amp;gt;   phylum &amp;lt;chr&amp;gt;, order &amp;lt;chr&amp;gt;, family &amp;lt;chr&amp;gt;, genus &amp;lt;chr&amp;gt;, species &amp;lt;chr&amp;gt;,
#&amp;gt;   genericName &amp;lt;chr&amp;gt;, specificEpithet &amp;lt;chr&amp;gt;, taxonRank &amp;lt;chr&amp;gt;,
#&amp;gt;   dateIdentified &amp;lt;chr&amp;gt;, coordinateUncertaintyInMeters &amp;lt;dbl&amp;gt;, year &amp;lt;int&amp;gt;,
#&amp;gt;   month &amp;lt;int&amp;gt;, day &amp;lt;int&amp;gt;, eventDate &amp;lt;date&amp;gt;, modified &amp;lt;chr&amp;gt;,
#&amp;gt;   lastInterpreted &amp;lt;chr&amp;gt;, references &amp;lt;chr&amp;gt;, identifiers &amp;lt;chr&amp;gt;, facts &amp;lt;chr&amp;gt;,
#&amp;gt;   relations &amp;lt;chr&amp;gt;, geodeticDatum &amp;lt;chr&amp;gt;, class &amp;lt;chr&amp;gt;, countryCode &amp;lt;chr&amp;gt;,
#&amp;gt;   country &amp;lt;chr&amp;gt;, rightsHolder &amp;lt;chr&amp;gt;, identifier &amp;lt;chr&amp;gt;, informationWithheld
#&amp;gt;   &amp;lt;chr&amp;gt;, verbatimEventDate &amp;lt;chr&amp;gt;, datasetName &amp;lt;chr&amp;gt;, verbatimLocality
#&amp;gt;   &amp;lt;chr&amp;gt;, collectionCode &amp;lt;chr&amp;gt;, gbifID &amp;lt;chr&amp;gt;, occurrenceID &amp;lt;chr&amp;gt;, taxonID
#&amp;gt;   &amp;lt;chr&amp;gt;, license &amp;lt;chr&amp;gt;, catalogNumber &amp;lt;chr&amp;gt;, recordedBy &amp;lt;chr&amp;gt;,
#&amp;gt;   http...unknown.org.occurrenceDetails &amp;lt;chr&amp;gt;, institutionCode &amp;lt;chr&amp;gt;,
#&amp;gt;   rights &amp;lt;chr&amp;gt;, eventTime &amp;lt;chr&amp;gt;, identificationID &amp;lt;chr&amp;gt;, occurrenceRemarks
#&amp;gt;   &amp;lt;chr&amp;gt;, individualCount &amp;lt;int&amp;gt;, elevation &amp;lt;dbl&amp;gt;, elevationAccuracy &amp;lt;dbl&amp;gt;,
#&amp;gt;   continent &amp;lt;chr&amp;gt;, stateProvince &amp;lt;chr&amp;gt;, institutionID &amp;lt;chr&amp;gt;, county &amp;lt;chr&amp;gt;,
#&amp;gt;   identificationVerificationStatus &amp;lt;chr&amp;gt;, language &amp;lt;chr&amp;gt;, type &amp;lt;chr&amp;gt;,
#&amp;gt;   locationAccordingTo &amp;lt;chr&amp;gt;, preparations &amp;lt;chr&amp;gt;, identifiedBy &amp;lt;chr&amp;gt;,
#&amp;gt;   georeferencedDate &amp;lt;chr&amp;gt;, higherGeography &amp;lt;chr&amp;gt;, nomenclaturalCode &amp;lt;chr&amp;gt;,
#&amp;gt;   georeferencedBy &amp;lt;chr&amp;gt;, georeferenceProtocol &amp;lt;chr&amp;gt;, endDayOfYear &amp;lt;chr&amp;gt;,
#&amp;gt;   georeferenceVerificationStatus &amp;lt;chr&amp;gt;, locality &amp;lt;chr&amp;gt;,
#&amp;gt;   verbatimCoordinateSystem &amp;lt;chr&amp;gt;, otherCatalogNumbers &amp;lt;chr&amp;gt;, organismID
#&amp;gt;   &amp;lt;chr&amp;gt;, previousIdentifications &amp;lt;chr&amp;gt;, identificationQualifier &amp;lt;chr&amp;gt;,
#&amp;gt;   samplingProtocol &amp;lt;chr&amp;gt;, accessRights &amp;lt;chr&amp;gt;, higherClassification &amp;lt;chr&amp;gt;,
#&amp;gt;   georeferenceSources &amp;lt;chr&amp;gt;, sex &amp;lt;chr&amp;gt;, establishmentMeans &amp;lt;chr&amp;gt;,
#&amp;gt;   occurrenceStatus &amp;lt;chr&amp;gt;, disposition &amp;lt;chr&amp;gt;, startDayOfYear &amp;lt;chr&amp;gt;,
#&amp;gt;   dynamicProperties &amp;lt;chr&amp;gt;, infraspecificEpithet &amp;lt;chr&amp;gt;, georeferenceRemarks
#&amp;gt;   &amp;lt;chr&amp;gt;, and 12 more &amp;lt;...&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you prefer data from more than one source, simply pass a vector of source names for the &lt;code&gt;from&lt;/code&gt; argument. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;occ(query = &#39;Accipiter striatus&#39;, from = c(&#39;ecoengine&#39;, &#39;gbif&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; Searched: ecoengine, gbif
#&amp;gt; Occurrences - Found: 530,224, Returned: 1,000
#&amp;gt; Search type: Scientific
#&amp;gt;   gbif: Accipiter striatus (500)
#&amp;gt;   ecoengine: Accipiter striatus (500)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also search for multiple species across multiple engines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;species_list &amp;lt;- c(&amp;quot;Accipiter gentilis&amp;quot;, &amp;quot;Accipiter poliogaster&amp;quot;, &amp;quot;Accipiter badius&amp;quot;)
res_set &amp;lt;- occ(species_list, from = c(&#39;gbif&#39;, &#39;ecoengine&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, we can search for data on the Sharp-shinned Hawk from other data sources too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;occ(query = &#39;Accipiter striatus&#39;, from = &#39;ecoengine&#39;)
# or look for data on other species
occ(query = &#39;Danaus plexippus&#39;, from = &#39;inat&#39;)
occ(query = &#39;Bison bison&#39;, from = &#39;bison&#39;)
occ(query = &amp;quot;acanthognathus brevicornis&amp;quot;, from = &amp;quot;antweb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;occ&lt;/code&gt; is also extremely flexible and can take package specific arguments for any source you might be querying. You can pass these as a list under &lt;code&gt;package_name_opts&lt;/code&gt; (e.g. &lt;code&gt;antweb_opts&lt;/code&gt;, &lt;code&gt;ecoengine_opts&lt;/code&gt;). See the help file for &lt;code&gt;?occ&lt;/code&gt; for more information.&lt;/p&gt;

&lt;h2 id=&#34;visualizing-biodiversity-data&#34;&gt;Visualizing biodiversity data&lt;/h2&gt;

&lt;p&gt;We provide several methods to visualize the resulting data. Current options include Leaflet.js, ggmap, a Mapbox implementation in a GitHub gist, or a static map.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mapping with Leaflet&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UPDATE: mapping functions are in a separate package called &lt;code&gt;mapr&lt;/code&gt;. Eg below updated&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spp &amp;lt;- c(&amp;quot;Danaus plexippus&amp;quot;, &amp;quot;Accipiter striatus&amp;quot;, &amp;quot;Pinus contorta&amp;quot;)
dat &amp;lt;- occ(query = spp, from = &amp;quot;gbif&amp;quot;, has_coords = TRUE, limit = 50)
library(&amp;quot;mapr&amp;quot;)
map_leaflet(dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-17-spocc/leaflet_map.png&#34; alt=&#34;leaflet_map&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Render a geojson file automatically as a GitHub gist&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To have a map automatically posted as a gist, you&amp;rsquo;ll need to set up your GitHub credentials ahead of time. You can either pass these as variables &lt;code&gt;github.username&lt;/code&gt; and &lt;code&gt;github.password&lt;/code&gt;, or store them in your options (taking regular precautions as you would with passwords of course). If you don&amp;rsquo;t have these stored, you&amp;rsquo;ll be prompted to enter them before posting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spp &amp;lt;- c(&amp;quot;Danaus plexippus&amp;quot;, &amp;quot;Accipiter striatus&amp;quot;, &amp;quot;Pinus contorta&amp;quot;)
dat &amp;lt;- occ(query = spp, from = &amp;quot;gbif&amp;quot;, has_coords = TRUE)
dat &amp;lt;- fixnames(dat)
library(&amp;quot;mapr&amp;quot;)
map_gist(dat, color = c(&amp;quot;#976AAE&amp;quot;, &amp;quot;#6B944D&amp;quot;, &amp;quot;#BD5945&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/sckott/daa7077cf80f2d2fbf2c5a41a9a00836.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Static maps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If interactive maps aren&amp;rsquo;t your cup of tea, or you prefer to have one that you can embed in a paper, try one of our static map options. You can go with the more elegant &lt;code&gt;ggmap&lt;/code&gt; option or stick with something from base graphics.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ecoengine_data &amp;lt;- occ(query = &amp;quot;Lynx rufus californicus&amp;quot;, from = &amp;quot;ecoengine&amp;quot;, has_coords = TRUE)
map_ggplot(ecoengine_data, map = &amp;quot;usa&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-17-spocc/ggplot.png&#34; alt=&#34;ggplot_maps&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spnames &amp;lt;- c(&amp;quot;Accipiter striatus&amp;quot;, &amp;quot;Setophaga caerulescens&amp;quot;, &amp;quot;Spinus tristis&amp;quot;)
base_data &amp;lt;- occ(query = spnames, from = &amp;quot;gbif&amp;quot;, has_coords = TRUE)
map_plot(base_data, cex = 1, pch = 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-17-spocc/base_maps.png&#34; alt=&#34;base_maps&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As soon as we have an updated &lt;code&gt;rvertnet&lt;/code&gt; package, we&amp;rsquo;ll add the ability to query VertNet data from spocc.&lt;/li&gt;
&lt;li&gt;We will add &lt;code&gt;rCharts&lt;/code&gt; as an official import once the package is on CRAN (Eta end of March)&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;re helping on a new package rMaps to make interactive maps using various Javascript mapping libraries, which will give access to a variety of awesome interactive maps. We will integrate rMaps once it&amp;rsquo;s on CRAN.&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ll add a function to make interactive maps using RStudio&amp;rsquo;s Shiny in a future version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, &lt;a href=&#34;https://github.com/ropensci/spocc/issues?page=1&amp;amp;state=open&#34;&gt;issues&lt;/a&gt; or &lt;a href=&#34;https://github.com/ropensci/spocc/pulls&#34;&gt;pull requests&lt;/a&gt; are welcome directly on the &lt;a href=&#34;http://ropensci.org/spocc&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>AntWeb - programmatic interface to ant biodiversity data</title>
      <link>https://ropensci.org/blog/2014/02/18/antweb/</link>
      <pubDate>Tue, 18 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/02/18/antweb/</guid>
      <description>
        
        

&lt;!-- &lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
This post was updated on August 20, 2014, with &lt;code&gt;AntWeb&lt;/code&gt; version &lt;code&gt;0.7.2.99&lt;/code&gt;. Please install an updated version to make sure the code works.
&lt;/div&gt; --&gt;

&lt;blockquote&gt;
&lt;p&gt;This post was updated on August 20, 2014, with &lt;code&gt;AntWeb&lt;/code&gt; version &lt;code&gt;0.7.2.99&lt;/code&gt;. Please install an updated version to make sure the code works.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-02-18-antweb/casent0003205_h_1_high.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Data on more than &lt;code&gt;10,000&lt;/code&gt; species of ants recorded worldwide are available through from &lt;a href=&#34;http://www.calacademy.org/&#34;&gt;California Academy of Sciences&lt;/a&gt;&amp;rsquo; &lt;a href=&#34;http://www.antweb.org/&#34;&gt;AntWeb&lt;/a&gt;, a repository that boasts a wealth of natural history data, digital images, and specimen records on ant species from a large community of museum curators.&lt;/p&gt;

&lt;p&gt;Digging through some of the earliest announcements of AntWeb, I came across a Nature News piece titled &lt;strong&gt;&amp;ldquo;Mashups mix data into global service&amp;rdquo;&lt;/strong&gt; from January 2006. The article contains this great quote from &lt;a href=&#34;http://en.wikipedia.org/wiki/Roderic_D.M._Page&#34;&gt;Roderic Page&lt;/a&gt; &lt;em&gt;&amp;ldquo;If you could pool data from every museum or lab in the world, you could do amazing things&amp;rdquo;&lt;/em&gt;. The article also says &lt;em&gt;&amp;ldquo;So far, only researchers with advanced programming skills, working in fields organized enough to have data online and tagged appropriately, have been able to do this.&amp;rdquo;&lt;/em&gt;  In many ways this really is motivation for why we develop interfaces to these rich data repositories. Our express intent is to facilitate researchers explore amazing opportunities that lie within such data by lowering techinical barriers to use. Right on the heels of our most recent package (&lt;a href=&#34;http://ropensci.org/blog/2014/01/30/ecoengine/&#34;&gt;&lt;code&gt;ecoengine&lt;/code&gt;&lt;/a&gt;), we are now happy to first release of an interface to  &lt;a href=&#34;http://www.antweb.org/&#34;&gt;AntWeb&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A stable version of our R package &lt;a href=&#34;http://ropensci.org/AntWeb.html&#34;&gt;AntWeb&lt;/a&gt; is now available from CRAN. The API currently does not require a key for access  but larger requests will be throttled on the server side. It is worth noting that much of these same data are also ported through the Global Biodiversity Information Facility and accessible through our &lt;a href=&#34;http://ropensci.org/rgbif.html&#34;&gt;&lt;code&gt;gbif&lt;/code&gt;&lt;/a&gt; package. This package provides a more direct interface to more of the ant specific natural history data.&lt;/p&gt;

&lt;h2 id=&#34;installing-the-package&#34;&gt;Installing the package&lt;/h2&gt;

&lt;p&gt;A stable version of the package (&lt;code&gt;0.7&lt;/code&gt;) is now available on CRAN.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;AntWeb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or you can install the latest development version (the master branch is also always stable &amp;amp; deployable and most up-to-date. Current version is &lt;code&gt;0.5.3&lt;/code&gt; at the time of this writing).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(devtools)
install_github(&amp;quot;ropensci/AntWeb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;searching-through-the-database&#34;&gt;Searching through the database&lt;/h2&gt;

&lt;p&gt;As with most of our packages, there are several ways to search through an API. In the case of AntWeb, you can search by a genus or full species name or by other taxonomic ranks like sub-phylum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data on ants&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To obtain data on any taxonomic group, you can make a request using the &lt;code&gt;aw_data()&lt;/code&gt; function. It&amp;rsquo;s possible to search easily by a taxonomic rank (e.g. a genus) or by passing a complete scientific name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Searching by Genus&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(AntWeb)
# To get data on an ant genus found widely through Central and South America
data_genus_only &amp;lt;- aw_data(genus = &amp;quot;acanthognathus&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  430 results available for query.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;leaf_cutter_ants  &amp;lt;- aw_data(genus = &amp;quot;acromyrmex&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  713 results available for query.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unique(leaf_cutter_ants$data$scientific_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;   [1] &amp;quot;acromyrmex versicolor&amp;quot;   &amp;quot;acromyrmex striatus&amp;quot;
   [3] &amp;quot;acromyrmex balzani&amp;quot;      &amp;quot;acromyrmex coronatus&amp;quot;
   [5] &amp;quot;acromyrmex crassispinus&amp;quot; &amp;quot;acromyrmex heyeri&amp;quot;
   [7] &amp;quot;acromyrmex lundii&amp;quot;       &amp;quot;acromyrmex fracticornis&amp;quot;
   [9] &amp;quot;acromyrmex niger&amp;quot;        &amp;quot;acromyrmex nigrosetosus&amp;quot;
  [11] &amp;quot;acromyrmex rugosus&amp;quot;      &amp;quot;acromyrmex subterraneus&amp;quot;
  [13] &amp;quot;acromyrmex alw01&amp;quot;        &amp;quot;acromyrmex alw02&amp;quot;
  [15] &amp;quot;acromyrmex alw03&amp;quot;        &amp;quot;acromyrmex alw04&amp;quot;
  [17] &amp;quot;acromyrmex octospinosus&amp;quot; &amp;quot;acromyrmex lobicornis&amp;quot;
  [19] &amp;quot;acromyrmex silvestrii&amp;quot;   &amp;quot;acromyrmex landolti&amp;quot;
  [21] &amp;quot;acromyrmex ambiguus&amp;quot;     &amp;quot;acromyrmex hystrix&amp;quot;
  [23] &amp;quot;acromyrmex laticeps&amp;quot;     &amp;quot;acromyrmex indet&amp;quot;
  [25] &amp;quot;acromyrmex echinatior&amp;quot;   &amp;quot;acromyrmex volcanus&amp;quot;
  [27] &amp;quot;acromyrmex disciger&amp;quot;     &amp;quot;acromyrmex aspersus&amp;quot;
  [29] &amp;quot;acromyrmex pubescens&amp;quot;    &amp;quot;acromyrmex moelleri&amp;quot;
  [31] &amp;quot;acromyrmex evenkul&amp;quot;      &amp;quot;acromyrmex hispidus&amp;quot;
  [33] &amp;quot;acromyrmex nobilis&amp;quot;      &amp;quot;acromyrmex pulvereus&amp;quot;
  [35] &amp;quot;acromyrmex lundi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Searching by species&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# You can request data on any particular species
acanthognathus_df &amp;lt;- aw_data(scientific_name = &amp;quot;acanthognathus brevicornis&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  2 results available for query.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(acanthognathus_df)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  $count
  [1] 2

  $call
  $call$genus
  [1] &amp;quot;acanthognathus&amp;quot;

  $call$species
  [1] &amp;quot;brevicornis&amp;quot;


  $data
                                                                url
  1 http://antweb.org/api/v2/?occurrenceId=CAS:ANTWEB:casent0280684
  2 http://antweb.org/api/v2/?occurrenceId=CAS:ANTWEB:casent0637708
    catalogNumber     family  subfamily          genus specificEpithet
  1 casent0280684 formicidae myrmicinae Acanthognathus     brevicornis
  2 casent0637708 formicidae myrmicinae Acanthognathus     brevicornis
               scientific_name typeStatus stateProvince  country
  1 acanthognathus brevicornis                          Colombia
  2 acanthognathus brevicornis
    dateIdentified habitat minimumElevationInMeters
  1                                              NA
  2     2013-09-12                               NA
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# You can also limit queries to observation records that have been geoferenced
acanthognathus_df_geo &amp;lt;- aw_data(genus = &amp;quot;acanthognathus&amp;quot;, species = &amp;quot;brevicornis&amp;quot;, georeferenced = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s also possible to search for records around any location by specifying a search radius.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data_by_loc &amp;lt;- aw_coords(coord = &amp;quot;37.76,-122.45&amp;quot;, r = 2)
# This will search for data on a 2 km radius around that latitude/longitude
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Image data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most specimens in the database have images associated with them. These include high, medium, and low resolution version of the head, dorsal side, full profile, and the specimen label. For example we can retrieve data on a specimen of &lt;em&gt;Ecitoninaeeciton burchellii&lt;/em&gt; with the following call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Data and images for Ecitoninaeeciton burchellii
eb &amp;lt;- aw_code(occurrenceid =&amp;quot;CAS:ANTWEB:casent0003205&amp;quot;)
eb$image_data$high[[2]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re primarily interested in ant images and would like to keep up with recent additions to the database, you can also use the &lt;code&gt;aw_images&lt;/code&gt; function. This function takes two arguments: &lt;code&gt;since&lt;/code&gt;, the number of days to search backward, and a &lt;code&gt;type&lt;/code&gt;. Possible options for type are &lt;code&gt;h&lt;/code&gt; for head, &lt;code&gt;d&lt;/code&gt; for dorsal, &lt;code&gt;p&lt;/code&gt; for profile, and &lt;code&gt;l&lt;/code&gt; for label. If a type is not specified, all available images are retrieved.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Retrieve only dorsal images for the last five days
head(aw_images(since = 5, img_type = &amp;quot;d&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                                                                     high
  1 http://www.antweb.org/images/casent0914000/casent0914000_d_1_high.jpg
  2 http://www.antweb.org/images/antweb1008677/antweb1008677_d_1_high.jpg
  3 http://www.antweb.org/images/casent0906977/casent0906977_d_1_high.jpg
  4 http://www.antweb.org/images/casent0914012/casent0914012_d_1_high.jpg
  5 http://www.antweb.org/images/antweb1008691/antweb1008691_d_1_high.jpg
  6 http://www.antweb.org/images/casent0906997/casent0906997_d_1_high.jpg
                                                                     med
  1 http://www.antweb.org/images/casent0914000/casent0914000_d_1_low.jpg
  2 http://www.antweb.org/images/antweb1008677/antweb1008677_d_1_low.jpg
  3 http://www.antweb.org/images/casent0906977/casent0906977_d_1_low.jpg
  4 http://www.antweb.org/images/casent0914012/casent0914012_d_1_low.jpg
  5 http://www.antweb.org/images/antweb1008691/antweb1008691_d_1_low.jpg
  6 http://www.antweb.org/images/casent0906997/casent0906997_d_1_low.jpg
                                                                     low
  1 http://www.antweb.org/images/casent0914000/casent0914000_d_1_med.jpg
  2 http://www.antweb.org/images/antweb1008677/antweb1008677_d_1_med.jpg
  3 http://www.antweb.org/images/casent0906977/casent0906977_d_1_med.jpg
  4 http://www.antweb.org/images/casent0914012/casent0914012_d_1_med.jpg
  5 http://www.antweb.org/images/antweb1008691/antweb1008691_d_1_med.jpg
  6 http://www.antweb.org/images/casent0906997/casent0906997_d_1_med.jpg
                                                                     thumbnail
  1 http://www.antweb.org/images/casent0914000/casent0914000_d_1_thumbview.jpg
  2 http://www.antweb.org/images/antweb1008677/antweb1008677_d_1_thumbview.jpg
  3 http://www.antweb.org/images/casent0906977/casent0906977_d_1_thumbview.jpg
  4 http://www.antweb.org/images/casent0914012/casent0914012_d_1_thumbview.jpg
  5 http://www.antweb.org/images/antweb1008691/antweb1008691_d_1_thumbview.jpg
  6 http://www.antweb.org/images/casent0906997/casent0906997_d_1_thumbview.jpg
    img_type                                                catalog_id
  1        d http://www.antweb.org/api/v2/?catalogNumber=casent0914000
  2        d http://www.antweb.org/api/v2/?catalogNumber=antweb1008677
  3        d http://www.antweb.org/api/v2/?catalogNumber=casent0906977
  4        d http://www.antweb.org/api/v2/?catalogNumber=casent0914012
  5        d http://www.antweb.org/api/v2/?catalogNumber=antweb1008691
  6        d http://www.antweb.org/api/v2/?catalogNumber=casent0906997
            upload_date
  1 2014-08-15 15:11:14
  2 2014-08-20 13:52:13
  3 2014-08-15 15:11:14
  4 2014-08-15 15:11:15
  5 2014-08-20 13:52:13
  6 2014-08-15 15:11:15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s also possible to retrieve unique lists of any taxonomic rank using the &lt;code&gt;aw_unique&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;subfamily_list &amp;lt;- aw_distinct(rank = &amp;quot;subfamily&amp;quot;)
subfamily_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  [Total results on the server]: 67
  [Args]:
  rank = subfamily
  limit = 1000
  [Dataset]: [67 x 1]
  [Data preview] :
  [1] apidae     bethylidae
  67 Levels: aenictinae agroecomyrmecinae amblyoponinae ... xylocopinae
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;genus_list &amp;lt;- aw_distinct(rank = &amp;quot;genus&amp;quot;)
genus_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  [Total results on the server]: 490
  [Args]:
  rank = genus
  limit = 1000
  [Dataset]: [490 x 1]
  [Data preview] :
  [1] Aenictinae    Amblyoponinae
  490 Levels: Acanthognathus Acanthomyrmex Acanthoponera ... Zigrasimecia
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;species_list &amp;lt;- aw_distinct(rank = &amp;quot;species&amp;quot;)
species_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  [Total results on the server]: 10547
  [Args]:
  rank = species
  limit = 1000
  [Dataset]: [1000 x 1]
  [Data preview] :
  [1] basicerotini indet
  1000 Levels: a abbreviata abdelazizi abdera abdita abditivata ... orizabanum_complex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you work with existing specimens, you can also query directly by a specimen ID.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(data_by_code &amp;lt;- aw_code(catalogNumber=&amp;quot;inb0003695883&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  [Total results on the server]: 1
  [Args]:
  catalogNumber = inb0003695883
  [Dataset]: [1 x 16]
  [Data preview] :
                                                       specimens.url
  1  http://antweb.org/api/v2/?occurrenceId=CAS:ANTWEB:inb0003695883
  NA                                                            &amp;lt;NA&amp;gt;
     specimens.catalogNumber specimens.family specimens.subfamily
  1            inb0003695883       formicidae          myrmicinae
  NA                    &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;                &amp;lt;NA&amp;gt;
     specimens.genus specimens.specificEpithet specimens.scientific_name
  1   Acanthognathus                teledectus acanthognathus teledectus
  NA            &amp;lt;NA&amp;gt;                      &amp;lt;NA&amp;gt;                      &amp;lt;NA&amp;gt;
     specimens.typeStatus specimens.stateProvince specimens.country
  1                                       Heredia        Costa Rica
  NA                 &amp;lt;NA&amp;gt;                    &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;
     specimens.dateIdentified                       specimens.habitat
  1                2006-11-02 mature wet forest ex sifted leaf litter
  NA                     &amp;lt;NA&amp;gt;                                    &amp;lt;NA&amp;gt;
     specimens.minimumElevationInMeters specimens.geojson.type
  1                                  50                  point
  NA                               &amp;lt;NA&amp;gt;                   &amp;lt;NA&amp;gt;
     decimal_latitude decimal_longitude
  1         10.413477        -84.023636
  NA             &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# This will return a list with a metadata data.frame and a image data.frame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have a multiple specimen IDs, as is often the case when working with research data, you can get data on all of them at the same time. The function automatically retuns &lt;code&gt;NULL&lt;/code&gt; values when no data are found and you can have these removed using &lt;code&gt;plyr::compact&lt;/code&gt; (this happens automatically when you use a function call like &lt;code&gt;ldply&lt;/code&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;specimens &amp;lt;- c(&amp;quot;casent0908629&amp;quot;, &amp;quot;casent0908650&amp;quot;, &amp;quot;casent0908637&amp;quot;)
results &amp;lt;- lapply(specimens, function(x) aw_code(x))
names(results) &amp;lt;- specimens
length(results)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  [1] 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapping-ant-specimen-data&#34;&gt;Mapping ant specimen data&lt;/h2&gt;

&lt;p&gt;As with the previous ecoengine package, you can also visualize location data for any set of species. Adding &lt;code&gt;georeferenced = TRUE&lt;/code&gt; to a data retrieval call will filter out any data points without location information. Once retrieved the data are mapped with the open source &lt;a href=&#34;http://leafletjs.com/&#34;&gt;Leaflet.js&lt;/a&gt; and pushed to your default browser. Maps and associated &lt;code&gt;geoJSON&lt;/code&gt; files are also saved to a location specified (or defaults to your &lt;code&gt;/tmp&lt;/code&gt; folder). This feature is only available on the development version on GitHub (&lt;code&gt;0.5.2&lt;/code&gt; or greater; see above on how to install) and will be available from CRAN in version &lt;code&gt;0.6&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acd &amp;lt;- aw_data(genus = &amp;quot;acanthognathus&amp;quot;)
aw_map(acd)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-02-18-antweb/antweb_map.png&#34; alt=&#34;Distribution of long trap-jaw ants in Central and South America&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;integration-with-the-rest-of-our-biodiversity-suite&#34;&gt;Integration with the rest of our biodiversity suite&lt;/h2&gt;

&lt;p&gt;Our newest package on CRAN, &lt;a href=&#34;https://github.com/ropensci/spocc&#34;&gt;&lt;code&gt;spocc&lt;/code&gt;&lt;/a&gt; (Species Occurrence Data), currently in review at CRAN, integrates &lt;code&gt;AntWeb&lt;/code&gt; among other sources. More details on &lt;code&gt;spocc&lt;/code&gt; in our next blog post.&lt;/p&gt;

&lt;p&gt;As always please send &lt;a href=&#34;https://github.com/ropensci/AntWeb/issues/new&#34;&gt;suggestions, bug reports, and ideas&lt;/a&gt; related to the AntWeb R package directly to our repo.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Introducing the ecoengine package</title>
      <link>https://ropensci.org/blog/2014/01/30/ecoengine/</link>
      <pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/01/30/ecoengine/</guid>
      <description>
        
        

&lt;p&gt;Natural history museums have long been valuable repositories of data on species diversity. These data have been critical for fostering and shaping the development of fields such as  biogeography and systematics. The importance of these data repositories is becoming increasingly important, especially in the context of climate change, where a strong understanding of how species responded to past climate is key to understanding their responses in the future. Leading the way in opening up such valuable data is a new effort by the &lt;a href=&#34;http://globalchange.berkeley.edu/ecoinformatics-engine&#34;&gt; Berkeley Initiative in Global Change Biology&lt;/a&gt; called the &lt;a href=&#34;http://ecoengine.berkeley.edu/&#34;&gt;Ecoengine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The engine is a &lt;a href=&#34;http://ecoengine.berkeley.edu/&#34;&gt;fast and open API&lt;/a&gt; that provides access to over 3 million specimens and vegetation data from surveys. Many of these specimens have already been georeferenced opening up several use cases for such data. In addition, the engine also provides access to species checklists and sensor data from the Keck Hydrowatch project from the Eel river field station. Our newest package, &lt;code&gt;ecoengine&lt;/code&gt;, provides an easy interface to these data.&lt;/p&gt;

&lt;h3 id=&#34;installing-the-package&#34;&gt;Installing the package&lt;/h3&gt;

&lt;p&gt;A stable version of the package (&lt;code&gt;1.1&lt;/code&gt;) is now &lt;a href=&#34;http://cran.r-project.org/web/packages/ecoengine/index.html&#34;&gt;available on CRAN&lt;/a&gt;. To install:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ecoengine&amp;quot;)
# A small bug with factors (to be resolved in a couple of days in 1.1.2) requires strings as factors to be FALSE
options(stringsAsFactors = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also install a development version of the package that has additional features (more below), with several new updates that will appear on the next CRAN version (ETA mid-March). To install the development version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(devtools)
install_github(&amp;quot;ropensci/ecoengine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Observation data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The workhorse function of the package is &lt;code&gt;ee_observations()&lt;/code&gt; which provides a way to query any taxonomic field. Searches for any field are automatically fuzzy but one can request exact searches by adding &lt;code&gt;__exact&lt;/code&gt; (note the two underscores) to any field being searched. So for example, if you are interested in data on the genus lynx, one can query those data like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ecoengine)
lynx_data &amp;lt;- ee_observations(genus = &amp;quot;lynx&amp;quot;, progress = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Search contains 795 observations (downloading 1 of 1 pages)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lynx_data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [Total results]: 795
## [Args]:
## country = United States
## genus = lynx
## georeferenced = FALSE
## page_size = 25
## page = 1
## [Type]: observations
## [Number of results]: 25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All ecoengine queries are returned as &lt;code&gt;S3&lt;/code&gt; objects of class &lt;code&gt;ecoengine&lt;/code&gt;. The object includes a total number of results available, the arguments used (so someone else can reconstruct the same query), the type of data returned (&lt;code&gt;photos&lt;/code&gt;, &lt;code&gt;observations&lt;/code&gt;, &lt;code&gt;checklists&lt;/code&gt;, &lt;code&gt;sensor&lt;/code&gt;), and the actual data itself. The results are paginated to prevent large requests from hanging part way. Each call returns 25 observations (can be overridden) and one can request more data by passing a page argument (e.g. &lt;code&gt;page = 1&lt;/code&gt;). Pages can also be ranges, or &amp;ldquo;all&amp;rdquo; to request all available data for a query. The pagination method allows calls to be parallelized and reassembled easily, especially when requests may return tens of thousand of records. In this case there are only &lt;code&gt;795&lt;/code&gt; records so we can request everything in one go.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ecoengine)
lynx_data &amp;lt;- ee_observations(genus = &amp;quot;lynx&amp;quot;, progress = FALSE, page = &amp;quot;all&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Search contains 795 observations (downloading 32 of 32 pages)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The progress bar is useful on the command line but tends to clutter up
# documentation which is why it’s been turned off here. Messages can also be
# turned off with quiet = TRUE
lynx_data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [Total results]: 795
## [Args]:
## country = United States
## genus = lynx
## georeferenced = FALSE
## page_size = 25
## page = all
## [Type]: observations
## [Number of results]: 795
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other fields (all documented and available from &lt;code&gt;?ee_observations&lt;/code&gt;) include kingdom, phylum, clss (intentionally misspelled to avoid conflict with a sql keyword), genus and scientific_name. Any of these fields can also be searched exactly by adding &lt;code&gt;__exact&lt;/code&gt; at the end.&lt;/p&gt;

&lt;p&gt;We can request georeferenced data only for visualization purposes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lynx_data &amp;lt;- ee_observations(genus = &amp;quot;lynx&amp;quot;, progress = FALSE, page = &amp;quot;all&amp;quot;,
    georeferenced = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Search contains 714 observations (downloading 29 of 29 pages)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it’s easy to examine these data as an interactive map using the &lt;code&gt;ee_map&lt;/code&gt; function (the function is currently only available in the dev version).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ee_map(lynx_data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates an interactive Leaflet JS map and renders to your default browser. You can easily embed such maps into talks using iFrames and &lt;a href=&#34;http://slidify.org/&#34;&gt;Slidify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-01-30-ecoengine/ecoengine_map.png&#34; alt=&#34;Map of Lynx observations across North America&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The search possibilities are endless and the data can be supplemented by many other sources in our site (e.g. taxize). Here are a few example queries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pinus &amp;lt;- ee_observations(scientific_name = &amp;quot;Pinus&amp;quot;)
lynx_data &amp;lt;- ee_observations(genus = &amp;quot;Lynx&amp;quot;)
# Georeferenced data only
lynx_data &amp;lt;- ee_observations(genus = &amp;quot;Lynx&amp;quot;, georeferenced = TRUE)
animalia &amp;lt;- ee_observations(kingdom = &amp;quot;Animalia&amp;quot;)
Artemisia &amp;lt;- ee_observations(scientific_name = &amp;quot;Artemisia douglasiana&amp;quot;)
asteraceae &amp;lt;- ee_observationss(family = &amp;quot;asteraceae&amp;quot;)
vulpes &amp;lt;- ee_observations(genus = &amp;quot;vulpes&amp;quot;)
Anas &amp;lt;- ee_observations(scientific_name = &amp;quot;Anas cyanoptera&amp;quot;, page = &amp;quot;all&amp;quot;)
loons &amp;lt;- ee_observations(scientific_name = &amp;quot;Gavia immer&amp;quot;, page = &amp;quot;all&amp;quot;)
plantae &amp;lt;- ee_observations(kingdom = &amp;quot;plantae&amp;quot;)
chordata &amp;lt;- ee_observations(phylum = &amp;quot;chordata&amp;quot;)
# Class is clss since the former is a reserved keyword in SQL.
aves &amp;lt;- ee_observations(clss = &amp;quot;aves&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Checklist data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The museum contains checklists of species spanning a long time scale. To query checklists, use &lt;code&gt;ee_checklists()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all_lists &amp;lt;- ee_checklists()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Returning 57 checklists
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(all_lists[, c(&amp;quot;footprint&amp;quot;, &amp;quot;subject&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                                                        footprint
## 1   http://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
## 2   http://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
## 3   http://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
## 4 http://ecoengine.berkeley.edu/api/footprints/hastings-reserve/
## 5   http://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
## 6 http://ecoengine.berkeley.edu/api/footprints/hastings-reserve/
##      subject
## 1    Mammals
## 2     Mosses
## 3    Beetles
## 4    Spiders
## 5 Amphibians
## 6       Ants
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently there are 57 lists available. We can drill deeper into any list to get all the available data. We can also narrow our checklist search to groups of interest (see &lt;code&gt;unique(all_lists$subject)&lt;/code&gt;). For example, to get the list of Spiders:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spiders &amp;lt;- ee_checklists(subject = &amp;quot;Spiders&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Returning 2 checklists
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spiders
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                  record
## 4  bigcb:specieslist:15
## 10 bigcb:specieslist:20
##                                                         footprint
## 4  http://ecoengine.berkeley.edu/api/footprints/hastings-reserve/
## 10   http://ecoengine.berkeley.edu/api/footprints/angelo-reserve/
##                                                                       url
## 4  http://ecoengine.berkeley.edu/api/checklists/bigcb%3Aspecieslist%3A15/
## 10 http://ecoengine.berkeley.edu/api/checklists/bigcb%3Aspecieslist%3A20/
##                                           source subject
## 4  http://ecoengine.berkeley.edu/api/sources/18/ Spiders
## 10 http://ecoengine.berkeley.edu/api/sources/18/ Spiders
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can drill deep into each list. For this tutorial I&amp;rsquo;ll just retrieve data from the the two lists returned above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(plyr)
spider_details &amp;lt;- ldply(spiders$url, checklist_details)
names(spider_details)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;url&amp;quot;                              &amp;quot;observation_type&amp;quot;
##  [3] &amp;quot;scientific_name&amp;quot;                  &amp;quot;collection_code&amp;quot;
##  [5] &amp;quot;institution_code&amp;quot;                 &amp;quot;country&amp;quot;
##  [7] &amp;quot;state_province&amp;quot;                   &amp;quot;county&amp;quot;
##  [9] &amp;quot;locality&amp;quot;                         &amp;quot;coordinate_uncertainty_in_meters&amp;quot;
## [11] &amp;quot;begin_date&amp;quot;                       &amp;quot;end_date&amp;quot;
## [13] &amp;quot;kingdom&amp;quot;                          &amp;quot;phylum&amp;quot;
## [15] &amp;quot;clss&amp;quot;                             &amp;quot;order&amp;quot;
## [17] &amp;quot;family&amp;quot;                           &amp;quot;genus&amp;quot;
## [19] &amp;quot;specific_epithet&amp;quot;                 &amp;quot;infraspecific_epithet&amp;quot;
## [21] &amp;quot;source&amp;quot;                           &amp;quot;remote_resource&amp;quot;
## [23] &amp;quot;earliest_period_or_lowest_system&amp;quot; &amp;quot;latest_period_or_highest_system&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unique(spider_details$scientific_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;holocnemus pluchei&amp;quot;        &amp;quot;oecobius navus&amp;quot;
##  [3] &amp;quot;uloborus diversus&amp;quot;         &amp;quot;neriene litigiosa&amp;quot;
##  [5] &amp;quot;theridion sp. A&amp;quot;           &amp;quot;tidarren sp.&amp;quot;
##  [7] &amp;quot;dictyna sp. A&amp;quot;             &amp;quot;dictyna sp. B&amp;quot;
##  [9] &amp;quot;mallos sp.&amp;quot;                &amp;quot;yorima sp.&amp;quot;
## [11] &amp;quot;hahnia sanjuanensis&amp;quot;       &amp;quot;cybaeus sp.&amp;quot;
## [13] &amp;quot;zanomys sp.&amp;quot;               &amp;quot;anachemmis sp.&amp;quot;
## [15] &amp;quot;titiotus sp.&amp;quot;              &amp;quot;oxyopes scalaris&amp;quot;
## [17] &amp;quot;zora hespera&amp;quot;              &amp;quot;drassinella sp.&amp;quot;
## [19] &amp;quot;phrurotimpus mateonus&amp;quot;     &amp;quot;scotinella sp.&amp;quot;
## [21] &amp;quot;castianeira luctifera&amp;quot;     &amp;quot;meriola californica&amp;quot;
## [23] &amp;quot;drassyllus insularis&amp;quot;      &amp;quot;herpyllus propinquus&amp;quot;
## [25] &amp;quot;micaria utahna&amp;quot;            &amp;quot;trachyzelotes lyonneti&amp;quot;
## [27] &amp;quot;ebo evansae&amp;quot;               &amp;quot;habronattus oregonensis&amp;quot;
## [29] &amp;quot;metaphidippus sp.&amp;quot;         &amp;quot;platycryptus californicus&amp;quot;
## [31] &amp;quot;calymmaria sp.&amp;quot;            &amp;quot;frontinella communis&amp;quot;
## [33] &amp;quot;undetermined sp.&amp;quot;          &amp;quot;latrodectus hesperus&amp;quot;
## [35] &amp;quot;theridion sp. B&amp;quot;           &amp;quot;agelenopsis oregonensis&amp;quot;
## [37] &amp;quot;pardosa spp.&amp;quot;              &amp;quot;schizocosa mccooki&amp;quot;
## [39] &amp;quot;hololena sp.&amp;quot;              &amp;quot;callobius sp.&amp;quot;
## [41] &amp;quot;pimus sp.&amp;quot;                 &amp;quot;aliatypus sp.&amp;quot;
## [43] &amp;quot;antrodiaetus sp.&amp;quot;          &amp;quot;antrodiaetus riversi&amp;quot;
## [45] &amp;quot;anyphaena californica&amp;quot;     &amp;quot;aculepeira packardi&amp;quot;
## [47] &amp;quot;araneus bispinosus&amp;quot;        &amp;quot;araniella displicata&amp;quot;
## [49] &amp;quot;cyclosa conica&amp;quot;            &amp;quot;cyclosa turbinata&amp;quot;
## [51] &amp;quot;brommella sp.&amp;quot;             &amp;quot;cicurina sp.&amp;quot;
## [53] &amp;quot;dictyna sp.&amp;quot;               &amp;quot;emblyna oregona&amp;quot;
## [55] &amp;quot;orodrassus sp.&amp;quot;            &amp;quot;sergiolus sp.&amp;quot;
## [57] &amp;quot;erigone sp.&amp;quot;               &amp;quot;pityohyphantes sp.&amp;quot;
## [59] &amp;quot;tachygyna sp.&amp;quot;             &amp;quot;alopecosa kochi&amp;quot;
## [61] &amp;quot;oxyopes salticus&amp;quot;          &amp;quot;philodromus sp.&amp;quot;
## [63] &amp;quot;tibellus oblongus&amp;quot;         &amp;quot;pimoa sp.&amp;quot;
## [65] &amp;quot;undetermined spp.&amp;quot;         &amp;quot;metaphidippus manni&amp;quot;
## [67] &amp;quot;thiodina sp.&amp;quot;              &amp;quot;diaea livens&amp;quot;
## [69] &amp;quot;metellina sp.&amp;quot;             &amp;quot;cobanus cambridgei&amp;quot;
## [71] &amp;quot;tetragnatha sp.&amp;quot;           &amp;quot;tetragnatha versicolor&amp;quot;
## [73] &amp;quot;dipoena sp.&amp;quot;               &amp;quot;theridion spp.&amp;quot;
## [75] &amp;quot;misumena vatia&amp;quot;            &amp;quot;misumenops sp.&amp;quot;
## [77] &amp;quot;tmarus angulatus&amp;quot;          &amp;quot;xysticus sp.&amp;quot;
## [79] &amp;quot;hyptiotes gertschi&amp;quot;        &amp;quot;mexigonus morosus&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Photo data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ecoengine also contains a large number of photos from various sources. It&amp;rsquo;s easy to query the photo database using similar arguments as above. One can search by taxa, location, source, collection and much more. To get all pictures of the California condor from the database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;condor &amp;lt;- ee_photos(scientific_name = &amp;quot;Gymnogyps californianus&amp;quot;, quiet = TRUE, progress = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;condor
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [Total results]: 8
## [Args]:
## page_size = 25
## scientific_name = Gymnogyps californianus
## georeferenced = FALSE
## page = 1
## [Type]: photos
## [Number of results]: 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package also provides functionality to quickly browse photos in the default browser. By calling &lt;code&gt;view_photos()&lt;/code&gt; on any &lt;code&gt;ecoengine&lt;/code&gt; object of type &lt;code&gt;photos&lt;/code&gt;, R will render a static html page with thumbnails and metadata and launch a default browser with additional links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;view_photos(ee_photos(scientific_name = &amp;quot;Gymnogyps californianus&amp;quot;, quiet = TRUE))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-01-30-ecoengine/ecoengine_photo_viewer.png&#34; alt=&#34;Ecoengine photo viewer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sensor data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sensor data come from the &lt;a href=&#34;http://nrs.ucop.edu/research/special_projects/Keck_HydroWatchl.htm&#34;&gt;Keck HydroWatch Center&lt;/a&gt;. Retrieving the data are simple. Three functions provides all the necessary functionality.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ee_list_sensors()&lt;/code&gt;  - provides a list of sensors and the data they provide.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ee_sensor_data()&lt;/code&gt; - retrieves data for any of these sensors (ids obtained by the previous function) and a date window.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ee_sensor_agg&lt;/code&gt; - provides aggregated data that can be requested in any interval (minutes, days, weeks, months, years).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;searching-the-engine&#34;&gt;Searching the engine&lt;/h3&gt;

&lt;p&gt;The search is &lt;a href=&#34;http://www.elasticsearch.org/&#34;&gt;elastic&lt;/a&gt; by default. One can search for any field in &lt;code&gt;ee_observations()&lt;/code&gt; across all available resources. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The search function runs an automatic elastic search across all resources
# available through the engine.
lynx_results &amp;lt;- ee_search(query = &amp;quot;genus:Lynx&amp;quot;)
lynx_results[, -3]
# This gives you a breakdown of what&#39;s available allowing you dig deeper.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Upcoming features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the next CRAN update we will add methods to retrieve all the vegetation data, the interactive maps, searching the data directly from the map (for example by drawing bounding boxes) and having a formatted query returned back to your R prompt for inclusion in a script.&lt;/p&gt;

&lt;p&gt;As with all of our packages we welcome contributions to the &lt;a href=&#34;https://github.com/ropensci/ecoengine&#34;&gt;GitHub repository&lt;/a&gt; as &lt;a href=&#34;https://github.com/ropensci/ecoengine/issues?page=1&amp;amp;state=open&#34;&gt;issues&lt;/a&gt; or &lt;a href=&#34;https://github.com/ropensci/ecoengine/pulls&#34;&gt;pull requests&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Introducing the BEFData package</title>
      <link>https://ropensci.org/blog/2013/05/10/introducing-befdata/</link>
      <pubDate>Fri, 10 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/05/10/introducing-befdata/</guid>
      <description>
        
        &lt;p&gt;&lt;em&gt;This is a guest post by Class-Thido Pfaff&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We here present the &lt;a href=&#34;https://github.com/ropensci/rbefdata&#34;&gt;BEFdata R package&lt;/a&gt; as part of the rOpenSci project. It is an API package that combines the strengths of the BEFdata portal in handling small, complex datasets with the powerful statics package R. The portal itself is free software as well and can be found &lt;a href=&#34;https://github.com/befdata/befdata&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The BEFdata platforms support interdisciplinary data sharing and harmonisation of distributed research projects collaborating with each other. They upload, validate and store data from a formatted Excel workbook. Metadata can be downloaded in Ecological Metadata Language (EML) format. BEFdata allows the harmonization of naming conventions by generating category lists from the primary data, which can be reviewed and managed via the Excel workbook or directly on the platform. BEFdata provides a secure environment during on-going analysis; project members can only access primary data from other researchers after the acceptance of a data request
The combination allows for efficient storage, description and access of research data. The package leverages the access to datasets as well as to workflows in form of R scripts stored on the portal for provenance tracking of computed results.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
