<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spatial on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/spatial/</link>
    <description>Recent content in Spatial on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 24 Aug 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/spatial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FedData - Getting assorted geospatial data into R</title>
      <link>https://ropensci.org/technotes/2017/08/24/feddata-release/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/technotes/2017/08/24/feddata-release/</guid>
      <description>
        
        

&lt;p&gt;The package &lt;a href=&#34;https://github.com/ropensci/FedData&#34;&gt;&lt;code&gt;FedData&lt;/code&gt;&lt;/a&gt; has gone through software review and is now part of &lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt;. &lt;code&gt;FedData&lt;/code&gt; includes functions to automate downloading geospatial data available from several federated data sources (mainly sources maintained by the US Federal government).&lt;/p&gt;

&lt;p&gt;Currently, the package enables extraction from six datasets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;http://ned.usgs.gov&#34;&gt;National Elevation Dataset (NED)&lt;/a&gt; digital elevation models (1 and &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; arc-second; USGS)&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://nhd.usgs.gov&#34;&gt;National Hydrography Dataset (NHD)&lt;/a&gt; (USGS)&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://websoilsurvey.sc.egov.usda.gov/&#34;&gt;Soil Survey Geographic (SSURGO) database&lt;/a&gt; from the National Cooperative Soil Survey (NCSS), which is led by the Natural Resources Conservation Service (NRCS) under the USDA,&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.ncdc.noaa.gov/data-access/land-based-station-data/land-based-datasets/global-historical-climatology-network-ghcn&#34;&gt;Global Historical Climatology Network (GHCN)&lt;/a&gt;, coordinated by National Climatic Data Center at NOAA,&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://daymet.ornl.gov/&#34;&gt;Daymet&lt;/a&gt; gridded estimates of daily weather parameters for North America, version 3, available from the Oak Ridge National Laboratory&amp;rsquo;s Distributed Active Archive Center (DAAC), and&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.ncdc.noaa.gov/data-access/paleoclimatology-data/datasets/tree-ring&#34;&gt;International Tree Ring Data Bank (ITRDB)&lt;/a&gt;, coordinated by National Climatic Data Center at NOAA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;FedData&lt;/code&gt; is designed with the large-scale geographic information system (GIS) use-case in mind: cases where the use of dynamic web-services is impractical due to the scale (spatial and/or temporal) of analysis. It functions primarily as a means of downloading tiled or otherwise spatially-defined datasets; additionally, it can preprocess those datasets by extracting data within an area of interest (AoI), defined spatially. It relies heavily on the &lt;a href=&#34;https://cran.r-project.org/package=sp&#34;&gt;&lt;code&gt;sp&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=raster&#34;&gt;&lt;code&gt;raster&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://cran.r-project.org/package=rgdal&#34;&gt;&lt;code&gt;rgdal&lt;/code&gt;&lt;/a&gt; packages.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Load &lt;code&gt;FedData&lt;/code&gt; and define a study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# FedData Tester
library(FedData)
library(magrittr)

# Extract data for the Village Ecodynamics Project &amp;quot;VEPIIN&amp;quot; study area:
# http://veparchaeology.org
vepPolygon &amp;lt;- polygon_from_extent(raster::extent(672800, 740000, 4102000, 4170000),
                                  proj4string = &amp;quot;+proj=utm +datum=NAD83 +zone=12&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get and plot the National Elevation Dataset for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the NED (USA ONLY)
# Returns a raster
NED &amp;lt;- get_ned(template = vepPolygon,
               label = &amp;quot;VEPIIN&amp;quot;)
# Plot with raster::plot
raster::plot(NED)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-6-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the Daymet dataset for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the DAYMET (North America only)
# Returns a raster
DAYMET &amp;lt;- get_daymet(template = vepPolygon,
               label = &amp;quot;VEPIIN&amp;quot;,
               elements = c(&amp;quot;prcp&amp;quot;,&amp;quot;tmax&amp;quot;),
               years = 1980:1985)
# Plot with raster::plot
raster::plot(DAYMET$tmax$X1985.10.23)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-7-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the daily GHCN precipitation data for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the daily GHCN data (GLOBAL)
# Returns a list: the first element is the spatial locations of stations,
# and the second is a list of the stations and their daily data
GHCN.prcp &amp;lt;- get_ghcn_daily(template = vepPolygon,
                            label = &amp;quot;VEPIIN&amp;quot;,
                            elements = c(&#39;prcp&#39;))
# Plot the NED again
raster::plot(NED)
# Plot the spatial locations
sp::plot(GHCN.prcp$spatial,
         pch = 1,
         add = TRUE)
legend(&#39;bottomleft&#39;,
       pch = 1,
       legend=&amp;quot;GHCN Precipitation Records&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-8-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the daily GHCN temperature data for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Elements for which you require the same data
# (i.e., minimum and maximum temperature for the same days)
# can be standardized using standardize==T
GHCN.temp &amp;lt;- get_ghcn_daily(template = vepPolygon,
                            label = &amp;quot;VEPIIN&amp;quot;,
                            elements = c(&#39;tmin&#39;,&#39;tmax&#39;),
                            years = 1980:1985,
                            standardize = TRUE)
# Plot the NED again
raster::plot(NED)
# Plot the spatial locations
sp::plot(GHCN.temp$spatial,
         add = TRUE,
         pch = 1)
legend(&#39;bottomleft&#39;,
       pch = 1,
       legend = &amp;quot;GHCN Temperature Records&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-9-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the National Hydrography Dataset for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the NHD (USA ONLY)
NHD &amp;lt;- get_nhd(template = vepPolygon,
               label = &amp;quot;VEPIIN&amp;quot;)
# Plot the NED again
raster::plot(NED)
# Plot the NHD data
NHD %&amp;gt;%
  lapply(sp::plot,
         col = &#39;black&#39;,
         add = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-10-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the NRCS SSURGO data for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the NRCS SSURGO data (USA ONLY)
SSURGO.VEPIIN &amp;lt;- get_ssurgo(template = vepPolygon,
                     label = &amp;quot;VEPIIN&amp;quot;)
#&amp;gt; Warning: 1 parsing failure.
#&amp;gt; row # A tibble: 1 x 5 col     row     col               expected actual expected   &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; actual 1  1276 slope.r no trailing characters     .5 file # ... with 1 more variables: file &amp;lt;chr&amp;gt;
# Plot the NED again
raster::plot(NED)
# Plot the SSURGO mapunit polygons
plot(SSURGO.VEPIIN$spatial,
     lwd = 0.1,
     add = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-11-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the NRCS SSURGO data for particular soil survey areas&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Or, download by Soil Survey Area names
SSURGO.areas &amp;lt;- get_ssurgo(template = c(&amp;quot;CO670&amp;quot;,&amp;quot;CO075&amp;quot;),
                           label = &amp;quot;CO_TEST&amp;quot;)

# Let&#39;s just look at spatial data for CO675
SSURGO.areas.CO675 &amp;lt;- SSURGO.areas$spatial[SSURGO.areas$spatial$AREASYMBOL==&amp;quot;CO075&amp;quot;,]

# And get the NED data under them for pretty plotting
NED.CO675 &amp;lt;- get_ned(template = SSURGO.areas.CO675,
                            label = &amp;quot;SSURGO_CO675&amp;quot;)

# Plot the SSURGO mapunit polygons, but only for CO675
plot(NED.CO675)
plot(SSURGO.areas.CO675,
     lwd = 0.1,
     add = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-12-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the ITRDB chronology locations in the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the ITRDB records
ITRDB &amp;lt;- get_itrdb(template = vepPolygon,
                        label = &amp;quot;VEPIIN&amp;quot;,
                        makeSpatial = TRUE)
# Plot the NED again
raster::plot(NED)
# Map the locations of the tree ring chronologies
plot(ITRDB$metadata,
     pch = 1,
     add = TRUE)
legend(&#39;bottomleft&#39;,
       pch = 1,
       legend = &amp;quot;ITRDB chronologies&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-13-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The current CRAN version of &lt;code&gt;FedData&lt;/code&gt;, v2.4.6, will (hopefully) be the final CRAN release of &lt;code&gt;FedData&lt;/code&gt; 2. &lt;code&gt;FedData&lt;/code&gt; 3 will be released in the coming months, but some code built on &lt;code&gt;FedData&lt;/code&gt; 2 will not be compatible with FedData 3.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FedData&lt;/code&gt; was initially developed prior to widespread use of modern web mapping services and RESTful APIs by many Federal data-holders. Future releases of &lt;code&gt;FedData&lt;/code&gt; will limit data transfer by utilizing server-side geospatial and data queries. We will also implement &lt;a href=&#34;https://github.com/hadley/dplyr&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt;&lt;/a&gt; verbs, tidy data structures, (&lt;a href=&#34;https://github.com/tidyverse/magrittr&#34;&gt;&lt;code&gt;magrittr&lt;/code&gt;&lt;/a&gt;) piping, functional programming using &lt;a href=&#34;https://github.com/hadley/purrr&#34;&gt;&lt;code&gt;purrr&lt;/code&gt;&lt;/a&gt;, simple features for spatial data from &lt;a href=&#34;https://github.com/edzer/sfr&#34;&gt;&lt;code&gt;sf&lt;/code&gt;&lt;/a&gt;, and local data storage in OGC-compliant data formats (probably GeoJSON and NetCDF). I am also aiming for 100% testing coverage.&lt;/p&gt;

&lt;p&gt;All that being said, much of the functionality of the &lt;code&gt;FedData&lt;/code&gt; package could be spun off into more domain-specific packages. For example, ITRDB download functions could be part of the &lt;a href=&#34;https://r-forge.r-project.org/projects/dplr/&#34;&gt;&lt;code&gt;dplR&lt;/code&gt;&lt;/a&gt; dendrochronology package; concepts/functions having to do with the GHCN data integrated into &lt;a href=&#34;https://github.com/ropensci/rnoaa&#34;&gt;&lt;code&gt;rnoaa&lt;/code&gt;&lt;/a&gt;; and Daymet concepts integrated into &lt;a href=&#34;https://github.com/khufkens/daymetr&#34;&gt;&lt;code&gt;daymetr&lt;/code&gt;&lt;/a&gt;. I welcome any and all suggestions about how to improve the utility of FedData; please &lt;a href=&#34;https://github.com/ropensci/FedData/issues&#34;&gt;submit an issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FedData&lt;/code&gt; is a product of SKOPE (&lt;a href=&#34;http://www.openskope.org&#34;&gt;Synthesizing Knowledge of Past Environments&lt;/a&gt;) and the &lt;a href=&#34;http://veparchaeology.org/&#34;&gt;Village Ecodynamics Project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FedData&lt;/code&gt; was reviewed for &lt;a href=&#34;https://ropensci.org&#34;&gt;rOpenSci&lt;/a&gt; by &lt;a href=&#34;https://github.com/jooolia&#34;&gt;@jooolia&lt;/a&gt;, with &lt;a href=&#34;https://github.com/sckott&#34;&gt;@sckott&lt;/a&gt; as onboarding editor, and was greatly improved as a result.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>rOpenSci geospatial libraries</title>
      <link>https://ropensci.org/blog/2016/03/17/ropensci-geospatial-stack/</link>
      <pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2016/03/17/ropensci-geospatial-stack/</guid>
      <description>
        
        

&lt;p&gt;Geospatial data input/output, manipulation, and vizualization are tasks that are common to many disciplines. Thus, we&amp;rsquo;re keenly interested in making great tools in this space. We have an increasing set of spatial tools, each of which we&amp;rsquo;ll cover sparingly. See the &lt;strong&gt;cran&lt;/strong&gt; and &lt;strong&gt;github&lt;/strong&gt; badges for more information.&lt;/p&gt;

&lt;p&gt;We are not trying to replace the current R geospatial libraries - rather, we&amp;rsquo;re trying to fill in gaps and create smaller tools to make it easy to plug in just the tools you need to your workflow.&lt;/p&gt;

&lt;h2 id=&#34;geojsonio&#34;&gt;geojsonio&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/geojsonio/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/geojsonio&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/geojsonio&#34;&gt;geojsonio&lt;/a&gt; - A tool for converting to and from geojson data. Convert data to/from GeoJSON from various R classes, including vectors, lists, data frames, shape files, and spatial classes.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geojsonio&amp;quot;)
geojson_json(c(-99.74, 32.45), pretty = TRUE)
#&amp;gt; {
#&amp;gt;   &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot;,
#&amp;gt;   &amp;quot;features&amp;quot;: [
#&amp;gt;     {
#&amp;gt;       &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;,
#&amp;gt;       &amp;quot;geometry&amp;quot;: {
#&amp;gt;         &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;,
#&amp;gt;         &amp;quot;coordinates&amp;quot;: [-99.74, 32.45]
#&amp;gt;       },
#&amp;gt;       &amp;quot;properties&amp;quot;: {}
#&amp;gt;     }
#&amp;gt;   ]
#&amp;gt; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wellknown&#34;&gt;wellknown&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/wellknown/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/wellknown&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/wellknown&#34;&gt;wellknown&lt;/a&gt; - A tool for converting to and from well-known text data. Convert WKT/WKB to GeoJSON and vice versa. Functions included for converting between GeoJSON to WKT/WKB, creating both GeoJSON features, and non-features, creating WKT/WKB from R objects (e.g., lists, data.frames, vectors), and linting WKT.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;wellknown&amp;quot;)
point(data.frame(lon = -116.4, lat = 45.2))
#&amp;gt; [1] &amp;quot;POINT (-116.4000000000000057 45.2000000000000028)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gistr&#34;&gt;gistr&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/gistr/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/gistr&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/gistr&#34;&gt;gistr&lt;/a&gt; - This is not a geospatial tool per se, but it&amp;rsquo;s extremely useful for sharing maps. For example, with just a few lines, you can share an interactive map to GitHub.&lt;/p&gt;

&lt;p&gt;e.g. using &lt;code&gt;geojsonio&lt;/code&gt; from above&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;gistr&amp;quot;)
cat(geojson_json(us_cities[1:100,], lat = &#39;lat&#39;, lon = &#39;long&#39;), file = &amp;quot;map.geojson&amp;quot;)
gist_create(&amp;quot;map.geojson&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/map.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;lawn&#34;&gt;lawn&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/lawn/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/lawn&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An R client for &lt;a href=&#34;http://turfjs.org/&#34;&gt;turf.js&lt;/a&gt;, an &lt;em&gt;Advanced geospatial analysis for browsers and node&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lawn&lt;/code&gt; has a function for every method in &lt;code&gt;turf.js&lt;/code&gt;. In addition, there&amp;rsquo;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a few functions wrapping the
Node package &lt;code&gt;geojson-random&lt;/code&gt; &lt;a href=&#34;https://github.com/mapbox/geojson-random&#34;&gt;https://github.com/mapbox/geojson-random&lt;/a&gt; for making random geojson features&lt;/li&gt;
&lt;li&gt;a helper function &lt;code&gt;view()&lt;/code&gt; to easily visualize results from calls to &lt;code&gt;lawn&lt;/code&gt; functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;lawn&amp;quot;)
lawn_hex_grid(c(-96,31,-84,40), 50, &#39;miles&#39;) %&amp;gt;% view
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/hexgridmap.png&#34; alt=&#34;hexgridmap&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;geoaxe&#34;&gt;geoaxe&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/geoaxe/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropenscilabs/geoaxe&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An R client for splitting geospatial objects into pieces.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geoaxe&amp;quot;)
library(&amp;quot;rgeos&amp;quot;)
wkt &amp;lt;- &amp;quot;POLYGON((-180 -20, -140 55, 10 0, -140 -60, -180 -20))&amp;quot;
poly &amp;lt;- rgeos::readWKT(wkt)
polys &amp;lt;- chop(x = poly)
plot(poly, lwd = 6, mar = c(0, 0, 0, 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/unnamed-chunk-6-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-6&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add chopped up polygon bits&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(polys, add = TRUE, mar = c(0, 0, 0, 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/unnamed-chunk-7-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-7&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;proj&#34;&gt;proj&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;label label-default&#34;&gt;cran&lt;/span&gt; &lt;a href=&#34;https://github.com/ropensci/proj&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An R client for &lt;a href=&#34;https://github.com/proj4js/proj4js&#34;&gt;proj4js&lt;/a&gt;, a Javascript library for projections.  &lt;code&gt;proj&lt;/code&gt; is not on CRAN yet.&lt;/p&gt;

&lt;h2 id=&#34;getlandsat&#34;&gt;getlandsat&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;label label-default&#34;&gt;cran&lt;/span&gt; &lt;a href=&#34;https://github.com/ropenscilabs/getlandsat&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An R client to fetch Landsat data from AWS public data sets. &lt;code&gt;getlandsat&lt;/code&gt; is not on CRAN yet.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;getlandsat&amp;quot;)
head(lsat_scenes())
#&amp;gt;                entityId     acquisitionDate cloudCover processingLevel
#&amp;gt; 1 LC80101172015002LGN00 2015-01-02 15:49:05      80.81            L1GT
#&amp;gt; 2 LC80260392015002LGN00 2015-01-02 16:56:51      90.84            L1GT
#&amp;gt; 3 LC82270742015002LGN00 2015-01-02 13:53:02      83.44            L1GT
#&amp;gt; 4 LC82270732015002LGN00 2015-01-02 13:52:38      52.29             L1T
#&amp;gt; 5 LC82270622015002LGN00 2015-01-02 13:48:14      38.85             L1T
#&amp;gt; 6 LC82111152015002LGN00 2015-01-02 12:30:31      22.93            L1GT
#&amp;gt;   path row   min_lat    min_lon   max_lat    max_lon
#&amp;gt; 1   10 117 -79.09923 -139.66082 -77.75440 -125.09297
#&amp;gt; 2   26  39  29.23106  -97.48576  31.36421  -95.16029
#&amp;gt; 3  227  74 -21.28598  -59.27736 -19.17398  -57.07423
#&amp;gt; 4  227  73 -19.84365  -58.93258 -17.73324  -56.74692
#&amp;gt; 5  227  62  -3.95294  -55.38896  -1.84491  -53.32906
#&amp;gt; 6  211 115 -78.54179  -79.36148 -75.51003  -69.81645
#&amp;gt;                                                                                 download_url
#&amp;gt; 1 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/010/117/LC80101172015002LGN00/index.html
#&amp;gt; 2 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/026/039/LC80260392015002LGN00/index.html
#&amp;gt; 3 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/227/074/LC82270742015002LGN00/index.html
#&amp;gt; 4 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/227/073/LC82270732015002LGN00/index.html
#&amp;gt; 5 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/227/062/LC82270622015002LGN00/index.html
#&amp;gt; 6 https://s3-us-west-2.amazonaws.com/landsat-pds/L8/211/115/LC82111152015002LGN00/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;siftgeojson&#34;&gt;siftgeojson&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;label label-default&#34;&gt;cran&lt;/span&gt; &lt;a href=&#34;https://github.com/ropenscilabs/siftgeojson&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Slice and dice GeoJSON just as easily as you would a data.frame. This is built on top of &lt;code&gt;jqr&lt;/code&gt;, an R wrapper for &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt;, a JSON processor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;siftgeojson&amp;quot;)
# get sample data
file &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;zillow_or.geojson&amp;quot;, package = &amp;quot;siftgeojson&amp;quot;)
json &amp;lt;- paste0(readLines(file), collapse = &amp;quot;&amp;quot;)
# sift to Multnomah County only, and check that only Multnomah County came back
sifter(json, COUNTY == Multnomah) %&amp;gt;% jqr::index() %&amp;gt;% jqr::dotstr(properties.COUNTY)
#&amp;gt; [
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
#&amp;gt;     &amp;quot;Multnomah&amp;quot;,
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;maps&#34;&gt;Maps&lt;/h2&gt;

&lt;p&gt;rOpenSci has an offering in this space: &lt;code&gt;plotly&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;plotly&#34;&gt;plotly&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/plotly/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/plotly&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/plotly&#34;&gt;plotly&lt;/a&gt; is an R client for &lt;a href=&#34;https://plot.ly/&#34;&gt;Plotly&lt;/a&gt; - a web interface and API for creating interactive graphics.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;plotly&amp;quot;)
plot_ly(iris, x = Petal.Length, y = Petal.Width,
        color = Species, mode = &amp;quot;markers&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-03-17-ropensci-geospatial-stack/plotly.png&#34; alt=&#34;plotly&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;maptools-task-view&#34;&gt;Maptools Task View&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/maptools&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jwhollister.com/&#34;&gt;Jeff Hollister&lt;/a&gt; is leading the &lt;a href=&#34;https://github.com/ropensci/maptools&#34;&gt;maptools task view&lt;/a&gt; to organize R mapping tools packages, sources of data, projections, static and interactive mapping, data transformation, and more.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
