<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rgbif on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/rgbif/</link>
    <description>Recent content in Rgbif on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 04 Nov 2013 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/rgbif/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Species occurrence data to CartoDB</title>
      <link>https://ropensci.org/blog/2013/11/04/data-to-cartodb/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/11/04/data-to-cartodb/</guid>
      <description>
        
        

&lt;p&gt;We have previously written about creating interactive maps on the web from R, with the interactive maps on Github. See &lt;a href=&#34;http://ropensci.org/blog/2013/10/23/style-geojson-polygon/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://ropensci.org/blog/2013/07/17/style-geojson/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;http://recology.info/2013/06/geojson/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A different approach is to use &lt;a href=&#34;http://cartodb.com/&#34;&gt;CartoDB&lt;/a&gt;, &lt;a href=&#34;http://cartodb.com/pricing/&#34;&gt;a freemium service&lt;/a&gt; with sql interface to your data tables that provides a map to visualize data in those tables. They released an R interace to their sql API &lt;a href=&#34;https://github.com/Vizzuality/cartodb-r&#34;&gt;on Github here&lt;/a&gt; - which we can use to make an interactive map from R.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll first get some data from GBIF, ~500 occurrences of &lt;em&gt;Puma concolor&lt;/em&gt; in the US, then push that data to a CartoDB table. There are a couple more non-programmatic steps in this workflow than with pushing geojson file to Github as outlined in the previous linked above (i.e., going to the CartoDB site and making a visualization, and making it public).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;install-packages&#34;&gt;Install packages&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
library(devtools)
install_github(&amp;quot;rgbif&amp;quot;, &amp;quot;ropensci&amp;quot;, ref = &amp;quot;newapi&amp;quot;)
install_github(&amp;quot;cartodb-r&amp;quot;, &amp;quot;Vizzuality&amp;quot;, subdir = &amp;quot;CartoDB&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-em&#34;&gt;Load em&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgbif)
library(CartoDB)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;get-some-data-from-gbif&#34;&gt;Get some data from GBIF&lt;/h2&gt;

&lt;p&gt;Here, we&amp;rsquo;ll get data for Puma concolor, the &lt;em&gt;hello, world&lt;/em&gt; for biodiversity data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;key &amp;lt;- gbif_lookup(name = &amp;quot;Puma concolor&amp;quot;, kingdom = &amp;quot;animals&amp;quot;)$speciesKey
data &amp;lt;- occ_search(taxonKey = key, limit = 500, georeferenced = TRUE, country = &amp;quot;US&amp;quot;,
    return = &amp;quot;data&amp;quot;)
head(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                             name longitude latitude
## 1 Puma concolor (Linnaeus, 1771)    -108.9    32.70
## 2 Puma concolor (Linnaeus, 1771)    -108.0    32.88
## 3 Puma concolor (Linnaeus, 1771)    -105.5    32.95
## 4 Puma concolor (Linnaeus, 1771)    -107.8    33.61
## 5 Puma concolor (Linnaeus, 1771)    -107.5    33.00
## 6 Puma concolor (Linnaeus, 1771)    -106.5    36.69
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	500 obs. of  3 variables:
##  $ name     : Factor w/ 7 levels &amp;quot;Animalia&amp;quot;,&amp;quot;Carnivora&amp;quot;,..: 7 7 7 7 7 7 7 7 7 7 ...
##  $ longitude: num  -109 -108 -105 -108 -107 ...
##  $ latitude : num  32.7 32.9 33 33.6 33 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, we have some data. Now let&amp;rsquo;s make a map.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;push-data-up-to-cartodb&#34;&gt;Push data up to CartoDB&lt;/h2&gt;

&lt;p&gt;I frist crated a table in my CartoDB account named &lt;code&gt;pumamap&lt;/code&gt;. Then, I need to initialize the connection with CartoDB with my account name and API key. Note that I am pulling up my key from my .Rprofile file on my machine for ease and so it&amp;rsquo;s not revealed to you :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;key = getOption(&amp;quot;mycartodbkey&amp;quot;)
cartodb(&amp;quot;recology&amp;quot;, api.key = key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to push data to our &lt;code&gt;pumamap&lt;/code&gt; table using the function &lt;code&gt;cartodb.row.insert&lt;/code&gt;. It accepts one row of data, so we&amp;rsquo;ll pass each row of data with an &lt;code&gt;lapply&lt;/code&gt; call.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rows &amp;lt;- apply(data, 1, as.list)
lapply(rows, function(x) cartodb.row.insert(name = &amp;quot;pumamap&amp;quot;, columns = list(&amp;quot;name&amp;quot;,
    &amp;quot;longitude&amp;quot;, &amp;quot;latitude&amp;quot;), values = x))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the upload is finished, I had to make sure the table was georeferenced, and played with settings to suit my style. And then I made a visualization from the &lt;code&gt;pumamap&lt;/code&gt; dataset and made it public. And that&amp;rsquo;s it!  You can find the map &lt;a href=&#34;http://cdb.io/1fbvgCG&#34;&gt;here&lt;/a&gt;, and it can be embedded:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;iframe width=&#39;100%&#39; height=&#39;400&#39; frameborder=&#39;0&#39; src=&#39;http://recology.cartodb.com/viz/76a5598e-444b-11e3-8a8c-5404a6a69006/embed_map?title=false&amp;description=false&amp;search=false&amp;shareable=false&amp;cartodb_logo=true&amp;layer_selector=false&amp;legends=false&amp;scrollwheel=true&amp;sublayer_options=1&amp;sql=&amp;zoom=3&amp;center_lat=37.61423141542417&amp;center_lon=-100.72265625&#39;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;And we can examine a row from the table in our CartoDB account with a single line of code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cartodb.row.get(name = &amp;quot;pumamap&amp;quot;, cartodb_id = 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   cartodb_id                           name description
## 1          1 Puma concolor (Linnaeus, 1771)        NULL
##                 created_at               updated_at
## 1 2013-11-03T06:40:12+0100 2013-11-03T06:46:55+0100
##                                             the_geom the_geom_webmercator
## 1 0101000020E610000089247A19C5365BC08C15359886594040                 NULL
##   latitude longitude
## 1     32.7    -108.9
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Interactive maps with polygons using R, Geojson, and Github</title>
      <link>https://ropensci.org/blog/2013/10/23/style-geojson-polygon/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/10/23/style-geojson-polygon/</guid>
      <description>
        
        

&lt;p&gt;Previously on this blog we have discussed making geojson maps and uploading to Github for interactive visualization &lt;a href=&#34;http://ropensci.org/blog/2013/07/04/rbison-geoson/&#34;&gt;with USGS BISON data&lt;/a&gt;, and &lt;a href=&#34;http://ropensci.org/blog/2013/07/17/style-geojson/&#34;&gt;with GBIF data&lt;/a&gt;, and on &lt;a href=&#34;http://sckott.github.io/2013/06/geojson/&#34;&gt;my own personal blog&lt;/a&gt;. This is done using a file format called &lt;a href=&#34;http://en.wikipedia.org/wiki/GeoJSON&#34;&gt;&lt;em&gt;geojson&lt;/em&gt;&lt;/a&gt;, a file format based on JSON (JavaScript Object Notation) in which you can specify geographic data along with any other metadata.&lt;/p&gt;

&lt;p&gt;In two the previous posts about &lt;em&gt;geojson&lt;/em&gt;, I described how you could get data from the USGS BISON API using our &lt;a href=&#34;https://github.com/ropensci/rbison&#34;&gt;rbison package&lt;/a&gt;, and from the GBIF API using the &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;rgbif package&lt;/a&gt;, then make a &lt;em&gt;geojson&lt;/em&gt; file, and send to Github. In both examples, the data were points. What about polygons?  This is a relatively common use case in which an area is defined on a map instead of points - and polygons are supported in geojson.  How do we do this with the R to geojson to Github workflow?&lt;/p&gt;

&lt;p&gt;Using our package rgbif you can get a interactive map with polygons up on Github in just four lines of code! Of course creating a .shp file will take more than four lines of code.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;install-rgbif&#34;&gt;Install rgbif&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll need devtools packge to install rgbif from Github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;devtools&amp;quot;)
library(devtools)
install_github(&amp;quot;rgbif&amp;quot;, &amp;quot;ropensci&amp;quot;, ref=&amp;quot;newapi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-rgbif&#34;&gt;Load rgbif&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgbif)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;make-the-map&#34;&gt;Make the map&lt;/h2&gt;

&lt;p&gt;There are various ways of getting a .shp file. I won&amp;rsquo;t go over those here, so we&amp;rsquo;ll just use a .shp file from the web. I downloaded a zip file for &lt;em&gt;Abies magnifica&lt;/em&gt; for its range map from the book &lt;em&gt;Atlas of United States Trees&lt;/em&gt; from &lt;a href=&#34;http://esp.cr.usgs.gov/data/little/&#34;&gt;this site&lt;/a&gt; - here is the link for the zip file: &lt;a href=&#34;http://esp.cr.usgs.gov/data/little/abiemagn.zip&#34;&gt;http://esp.cr.usgs.gov/data/little/abiemagn.zip&lt;/a&gt;. I unzipped the file locally on my machine, and here we just use the &lt;code&gt;abiemagn.shp&lt;/code&gt; file within that zip file.&lt;/p&gt;

&lt;p&gt;The first line of code in the next code block uses the function &lt;code&gt;togeojson&lt;/code&gt; to make a geojson file, which is written locally on your machine (a message tells you where it is located, but you can specify where you want it to go with the &lt;code&gt;destpath&lt;/code&gt; parameter). Note that the input argument to &lt;code&gt;togeojson&lt;/code&gt; goes to the directory for &lt;code&gt;abiemagn/abiemagn.shp&lt;/code&gt;, but for this to work you need the associated other two files, in this case: abiemagn.dbf and abiemagn.shx.&lt;/p&gt;

&lt;p&gt;The second line of code uses the &lt;code&gt;gist&lt;/code&gt; function to upload your .geojson file as a gist on Github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- &amp;quot;~/abiemagn/abiemagn.shp&amp;quot;
togeojson(input = file, method = &amp;quot;local&amp;quot;, outfilename = &amp;quot;abiesmagmap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Success! File is at /Users/scottmac2/abiesmagmap.geojson
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gist(&amp;quot;~/abiesmagmap.geojson&amp;quot;, description = &amp;quot;Abies magnifica polygons&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Your gist has been published
## View gist at https://gist.github.com/sckott/7121053
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! The map is immediately available on the web, see &lt;a href=&#34;https://gist.github.com/sckott/7121053&#34;&gt;here&lt;/a&gt; for the one we just created. And you can embed the map too, like here:&lt;/p&gt;

&lt;!-- &lt;iframe src=&#34;https://gist.github.com/sckott/7121053?scroll=false&#34;&gt;&lt;/iframe&gt; --&gt;

&lt;script src=&#34;https://gist.github.com/sckott/7121053.js&#34;&gt;&lt;/script&gt;

      </description>
    </item>
    
    <item>
      <title>Revisiting our USGS app</title>
      <link>https://ropensci.org/blog/2013/06/19/usgs-app/</link>
      <pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/06/19/usgs-app/</guid>
      <description>
        
        &lt;p&gt;R has a reputation of not playing nice on the web. At rOpenSci, we write R pacakages to bring data from around the web into R on your local machine - so we mostly don&amp;rsquo;t do any dev for the web. However, the United States Geological Survey (USGS) recenty held &lt;a href=&#34;http://applifyingusgsdata.challenge.gov/submissions/14242-taxaviewer&#34;&gt;an app competition&lt;/a&gt; - it was a good opportunity to play with R on the web. We won best overall app as described in &lt;a href=&#34;http://ropensci.org/blog/2013/04/22/usgs_app/&#34;&gt;an earlier post on this blog&lt;/a&gt;. Check out our app &lt;strong&gt;TaxaViewer&lt;/strong&gt; &lt;a href=&#34;http://glimmer.rstudio.com/ropensci/usgs_app/&#34;&gt;here&lt;/a&gt;. Last week we presented the app to the USGS - a video of the presentation will be coming soon. A screenshot:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
{{ &amp;ldquo;assets/blog-images/usgsapp.png&amp;rdquo; | image_url }}
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;When we submitted the app we had static ggplot2 maps, but now the app has interactive maps that are a much better fit for a browser that isn&amp;rsquo;t restrained to static images. Ramnath Vaidyanathan helped us use &lt;a href=&#34;http://rcharts.github.io/&#34;&gt;rCharts&lt;/a&gt; to pass data from queries to the GBIF and BISON APIs to functions in rCharts to prepare the map page you see in the app. rCharts isn&amp;rsquo;t restricted to just maps - think interactive bar charts, scatter plots, etc.&lt;/p&gt;

&lt;p&gt;We didn&amp;rsquo;t originally have a tab for searching for mentions of taxonomic names in the literature - we added it in later (see the &lt;em&gt;Papers&lt;/em&gt; tab on the &lt;a href=&#34;http://glimmer.rstudio.com/ropensci/usgs_app/&#34;&gt;app&lt;/a&gt;), and people really liked it, suggesting that&amp;rsquo;s something we should explore more. How does it work? We take the list of taxonomic names input in the text box in the upper left, and query the &lt;a href=&#34;http://api.plos.org/&#34;&gt;PLOS search API&lt;/a&gt;, and return a table of papers listing the journal name and paper title. We provide a link to open an article from the search results in Macrodocs (thx &lt;a href=&#34;https://twitter.com/invisiblecomma&#34;&gt;@invisiblecomma&lt;/a&gt;!), like &lt;a href=&#34;http://macrodocs.org/?doi=10.1371/journal.pone.0017580&#34;&gt;this example&lt;/a&gt;. We chose PLOS as they have a relatively large set of articles, and they are all open access = immediate access to the text. Any interest in an app just for literature? Maybe litereature + metadata? And perhaps some text mining using the &lt;a href=&#34;http://cran.r-project.org/web/packages/tm/index.html&#34;&gt;tm package&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;We think of the USGS app as a visual interface to show what can be do in R on the command line, and give the code to do it. See the code (&amp;lt;/&amp;gt;) buttons that drop down in this screenshot below. This is a compelling use case for Shiny apps - show people what they can do visually - then give them the code to do it on their own machine.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
{{ &amp;ldquo;assets/blog-images/codemodal.png&amp;rdquo; | image_url }}
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Use case - how to get species occurrence data from GBIF for a genus</title>
      <link>https://ropensci.org/blog/2013/04/12/rgbif-genus/</link>
      <pubDate>Fri, 12 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/04/12/rgbif-genus/</guid>
      <description>
        
        

&lt;p&gt;Real use cases from people using our software are awesome. They are important for many reasons: 1) They make the code more useable because we may change code to make the interace and output easier to understand; 2) They may highlight bugs in our code; and 3) They show us what functions users care the most about (if we can assume number of questions equates to use).&lt;/p&gt;

&lt;p&gt;If someone has a question, others are likely to have the same, or a similar question. Thus, we are sharing use cases on our blog.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;the-use-case-how-do-i-get-gbif-occurrences-for-all-species-in-a-genus&#34;&gt;The use case: How do I get GBIF occurrences for all species in a genus?&lt;/h3&gt;

&lt;p&gt;The best way to approach this right now is to use the &lt;code&gt;scientificname&lt;/code&gt; argument in the &lt;code&gt;occurrencelist()&lt;/code&gt; function. For example, use an asterisk &amp;ldquo;*&amp;rdquo; after &lt;em&gt;Abies&lt;/em&gt;, which will get you everything in the genus &lt;em&gt;Abies&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;install-rgbif-from-github&#34;&gt;Install rgbif from Github&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install_github(&#39;rgbif&#39;, &#39;ropensci&#39;) # uncomment if you don&#39;t have it
# installed yet
library(rgbif)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lets-see-how-many-records-there-are-in-the-genus-with-lat-long-data-in-spain&#34;&gt;Lets see how many records there are in the genus with lat/long data in Spain&lt;/h3&gt;

&lt;p&gt;There are only 2975, so we can just set maxresults below to this number&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;occurrencecount(&amp;quot;Abies*&amp;quot;, coordinatestatus = TRUE, originisocountrycode = &amp;quot;ES&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 2975
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;lets-get-some-data&#34;&gt;Lets get some data&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dataout &amp;lt;- occurrencelist(scientificname = &amp;quot;Abies*&amp;quot;, coordinatestatus = TRUE,
    originisocountrycode = &amp;quot;ES&amp;quot;, removeZeros = TRUE, maxresults = 3000)

# take a quick peek
head(dataout[, 1:4])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##          taxonName country decimalLatitude decimalLongitude
## 1 Abies alba Mill.      ES           37.84          -4.8200
## 2 Abies alba Mill.      ES           43.02          -1.3444
## 3 Abies alba Mill.      ES           42.93          -0.8569
## 4 Abies alba Mill.      ES           42.93          -0.8569
## 5 Abies alba Mill.      ES           42.93          -0.8569
## 6 Abies alba Mill.      ES           42.76          -0.8810
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;in-the-dataout-data-frame-there-are-31-unique-names&#34;&gt;In the dataout data.frame there are 31 unique names&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(unique(dataout$taxonName))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 31
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;but-some-are-duplicates-just-spelled-in-different-ways-or-with-whitespace&#34;&gt;But some are duplicates just spelled in different ways, or with whitespace&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unique(dataout$taxonName)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Abies alba Mill.&amp;quot;
##  [2] &amp;quot;Abies alba L.&amp;quot;
##  [3] &amp;quot;Abies sp.&amp;quot;
##  [4] &amp;quot;Abies  alba&amp;quot;
##  [5] &amp;quot;Abies  alba                                                 M Miller&amp;quot;
##  [6] &amp;quot;Abies  alba Mill.&amp;quot;
##  [7] &amp;quot;Abies&amp;quot;
##  [8] &amp;quot;Abies pinsapo Boiss.&amp;quot;
##  [9] &amp;quot;Abies alba Miller&amp;quot;
## [10] &amp;quot;Abies pinsapo Boiss&amp;quot;
## [11] &amp;quot;Abies marocana Trab.&amp;quot;
## [12] &amp;quot;Abies nordmanniana (Steven) Spach&amp;quot;
## [13] &amp;quot;Abies concolor (Gord.) Lindl. &amp;amp; Hildebr.&amp;quot;
## [14] &amp;quot;Abies pinsapo&amp;quot;
## [15] &amp;quot;Abies koreana&amp;quot;
## [16] &amp;quot;Abies pinsapo var. \&amp;quot;Kelleris\&amp;quot;&amp;quot;
## [17] &amp;quot;Abies  excelsa DC.&amp;quot;
## [18] &amp;quot;Abies  nordmanniana&amp;quot;
## [19] &amp;quot;Abies  pinsapo Boiss.&amp;quot;
## [20] &amp;quot;Abies  pinsapo&amp;quot;
## [21] &amp;quot;Abies  alba Miller&amp;quot;
## [22] &amp;quot;Abies  pectinata DC.&amp;quot;
## [23] &amp;quot;Abies  pectinata&amp;quot;
## [24] &amp;quot;Abies pectinata DC.&amp;quot;
## [25] &amp;quot;Abies excelsa Poir.&amp;quot;
## [26] &amp;quot;Abies balsamea (L.) Mill.&amp;quot;
## [27] &amp;quot;Abies concolor Hildebr.&amp;quot;
## [28] &amp;quot;Abies numidica De Lannoy ex Carriere&amp;quot;
## [29] &amp;quot;Abies pinsapo Boiss. var. pinsapo&amp;quot;
## [30] &amp;quot;Abies concolor (Gord.) Lindl.ex Hildebr.&amp;quot;
## [31] &amp;quot;Abies cephalonica Loudon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;so-you-can-exlude-ones-you-don-t-want-or-change-names-using-regex-for-example-notice-one-name-replaced&#34;&gt;So you can exlude ones you don&amp;rsquo;t want or change names using regex, for example (notice one name replaced)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(stringr)
unique(gsub(&amp;quot;Abies pinsapo Boiss&amp;quot;, &amp;quot;Abies pinsapo&amp;quot;, dataout$taxonName, fixed = TRUE))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Abies alba Mill.&amp;quot;
##  [2] &amp;quot;Abies alba L.&amp;quot;
##  [3] &amp;quot;Abies sp.&amp;quot;
##  [4] &amp;quot;Abies  alba&amp;quot;
##  [5] &amp;quot;Abies  alba                                                 M Miller&amp;quot;
##  [6] &amp;quot;Abies  alba Mill.&amp;quot;
##  [7] &amp;quot;Abies&amp;quot;
##  [8] &amp;quot;Abies pinsapo.&amp;quot;
##  [9] &amp;quot;Abies alba Miller&amp;quot;
## [10] &amp;quot;Abies pinsapo&amp;quot;
## [11] &amp;quot;Abies marocana Trab.&amp;quot;
## [12] &amp;quot;Abies nordmanniana (Steven) Spach&amp;quot;
## [13] &amp;quot;Abies concolor (Gord.) Lindl. &amp;amp; Hildebr.&amp;quot;
## [14] &amp;quot;Abies koreana&amp;quot;
## [15] &amp;quot;Abies pinsapo var. \&amp;quot;Kelleris\&amp;quot;&amp;quot;
## [16] &amp;quot;Abies  excelsa DC.&amp;quot;
## [17] &amp;quot;Abies  nordmanniana&amp;quot;
## [18] &amp;quot;Abies  pinsapo Boiss.&amp;quot;
## [19] &amp;quot;Abies  pinsapo&amp;quot;
## [20] &amp;quot;Abies  alba Miller&amp;quot;
## [21] &amp;quot;Abies  pectinata DC.&amp;quot;
## [22] &amp;quot;Abies  pectinata&amp;quot;
## [23] &amp;quot;Abies pectinata DC.&amp;quot;
## [24] &amp;quot;Abies excelsa Poir.&amp;quot;
## [25] &amp;quot;Abies balsamea (L.) Mill.&amp;quot;
## [26] &amp;quot;Abies concolor Hildebr.&amp;quot;
## [27] &amp;quot;Abies numidica De Lannoy ex Carriere&amp;quot;
## [28] &amp;quot;Abies pinsapo. var. pinsapo&amp;quot;
## [29] &amp;quot;Abies concolor (Gord.) Lindl.ex Hildebr.&amp;quot;
## [30] &amp;quot;Abies cephalonica Loudon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;that-s-it&#34;&gt;That&amp;rsquo;s it!&lt;/h3&gt;

&lt;p&gt;Let us know if you have any questions on this tutorial.&lt;/p&gt;

&lt;p&gt;And keep those use cases/questions coming!&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
