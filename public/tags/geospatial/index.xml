<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geospatial on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/geospatial/</link>
    <description>Recent content in Geospatial on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 17 Oct 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/geospatial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data from Public Bicycle Hire Systems</title>
      <link>https://ropensci.org/blog/2017/10/17/bikedata/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/10/17/bikedata/</guid>
      <description>
        
        

&lt;p&gt;A new rOpenSci package provides access to data to which users may already have directly contributed, and for which contribution is fun, keeps you fit, and &lt;a href=&#34;http://www.bmj.com/content/357/bmj.j1456&#34;&gt;helps make the world a better place&lt;/a&gt;. The data come from using public bicycle hire schemes, and the package is called &lt;a href=&#34;https://github.com/ropensci/bikedata&#34;&gt;&lt;code&gt;bikedata&lt;/code&gt;&lt;/a&gt;. Public bicycle hire systems operate in many cities throughout the world, and most systems collect (generally anonymous) data, minimally consisting of the times and locations at which every single bicycle trip starts and ends. The &lt;a href=&#34;https://github.com/ropensci/bikedata&#34;&gt;&lt;code&gt;bikedata&lt;/code&gt;&lt;/a&gt; package provides access to data from all cities which openly publish these data, currently including &lt;a href=&#34;https://tfl.gov.uk/modes/cycling/santander-cycles&#34;&gt;London, U.K.&lt;/a&gt;, and in the U.S.A., &lt;a href=&#34;https://www.citibikenyc.com&#34;&gt;New York&lt;/a&gt;, &lt;a href=&#34;https://bikeshare.metro.net&#34;&gt;Los Angeles&lt;/a&gt;, &lt;a href=&#34;https://www.rideindego.com&#34;&gt;Philadelphia&lt;/a&gt;, &lt;a href=&#34;https://www.divvybikes.com&#34;&gt;Chicago&lt;/a&gt;, &lt;a href=&#34;https://www.thehubway.com&#34;&gt;Boston&lt;/a&gt;, and &lt;a href=&#34;https://www.capitalbikeshare.com&#34;&gt;Washington DC&lt;/a&gt;. The package will expand as more cities openly publish their data (with the newly enormously expanded San Francisco system &lt;a href=&#34;https://github.com/ropensci/bikedata/issues/2&#34;&gt;next on the list&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;why-bikedata&#34;&gt;Why bikedata?&lt;/h3&gt;

&lt;p&gt;The short answer to that question is that the package provides access to what is arguably one of the most spatially and temporally detailed databases of finely-scaled human movement throughout several of the world&amp;rsquo;s most important cities. Such data are likely to prove invaluable in the increasingly active and well-funded attempt to develop a science of cities. Such a science does not yet exist in any way comparable to most other well-established scientific disciplines, but the importance of developing a science of cities is indisputable, and reflected in such enterprises as the NYU-based &lt;a href=&#34;http://cusp.nyu.edu&#34;&gt;Center for Urban Science and Progress&lt;/a&gt;, or the UCL-based &lt;a href=&#34;https://www.ucl.ac.uk/bartlett/casa/&#34;&gt;Centre for Advanced Spatial Analysis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;People move through cities, yet at present anyone faced with the seemingly fundamental question of how, when, and where people do so would likely have to draw on some form of private data (typically operators of transport systems or mobile phone providers). There are very few open, public data providing insight into this question. The &lt;a href=&#34;https://github.com/ropensci/bikedata&#34;&gt;&lt;code&gt;bikedata&lt;/code&gt;&lt;/a&gt; package aims to be one contribution towards filling this gap. The data accessed by the package are entirely open, and are constantly updated, typically on a monthly basis. The package thus provides ongoing insight into the dynamic changes and reconfigurations of these cities. Data currently available via the package amounts to several tens of Gigabytes, and will expand rapidly both with time, and with the inclusion of more cities.&lt;/p&gt;

&lt;h3 id=&#34;why-are-these-data-published&#34;&gt;Why are these data published?&lt;/h3&gt;

&lt;p&gt;In answer to that question, all credit must rightfully go to &lt;a href=&#34;http://www.theregister.co.uk/2011/01/11/transport_for_london_foi/&#34;&gt;Adrian Short&lt;/a&gt;, who submitted a Freedom of Information request in 2011 to Transport for London for usage statistics from the relatively new, and largely publicly-funded, bicycle scheme. This request from one individual ultimately resulted in the data being openly published on an ongoing basis. All U.S. systems included in &lt;a href=&#34;https://github.com/ropensci/bikedata&#34;&gt;&lt;code&gt;bikedata&lt;/code&gt;&lt;/a&gt; commenced operation subsequent to that point in time, and many of them have openly published their data from the very beginning. The majority of the world&amp;rsquo;s public bicycle hire systems (&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_bicycle-sharing_systems&#34;&gt;see list here&lt;/a&gt;) nevertheless do not openly publish data, notably including very large systems in China, France, and Spain. One important aspiration of the &lt;a href=&#34;https://github.com/ropensci/bikedata&#34;&gt;&lt;code&gt;bikedata&lt;/code&gt;&lt;/a&gt; package is to demonstrate the positive benefit for the cities themselves of openly and easily facilitating complex analyses of usage data, which brings us to &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;what-s-important-about-these-data&#34;&gt;What&amp;rsquo;s important about these data?&lt;/h3&gt;

&lt;p&gt;As mentioned, the data really do provide uniquely valuable insights into the movement patterns and behaviour of people within some of the world&amp;rsquo;s major cities. While the more detailed explorations below demonstrate the kinds of things that can be done with the package, the variety of insights these data facilitate is best demonstrated through considering the work of other people, exemplified by &lt;a href=&#34;http://toddwschneider.com/posts/a-tale-of-twenty-two-million-citi-bikes-analyzing-the-nyc-bike-share-system/&#34;&gt;Todd Schneider&amp;rsquo;s high-profile blog piece&lt;/a&gt; on the New York City system. Todd&amp;rsquo;s analyses clearly demonstrate how these data can provide insight into where and when people move, into inter-relationships between various forms of transport, and into relationships with broader environmental factors such as weather. As cities evolve, and public bicycle hire schemes along with them, data from these systems can play a vital role in informing and guiding the ongoing processes of urban development. The &lt;a href=&#34;https://github.com/ropensci/bikedata&#34;&gt;&lt;code&gt;bikedata&lt;/code&gt;&lt;/a&gt; package greatly facilitates analysing such processes, not only through making data access and aggregation enormously easier, but through enabling analyses from any one system to be immediately applied to, and compared with, any other systems.&lt;/p&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;The package currently focusses on the data alone, and provides functionality for downloading, storage, and aggregation. The data are stored in an &lt;code&gt;SQLite3&lt;/code&gt; database, enabling newly published data to be continually added, generally with one simple line of code. It&amp;rsquo;s as easy as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;store_bikedata (city = &amp;quot;chicago&amp;quot;, bikedb = &amp;quot;bikedb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the nominated database (&lt;code&gt;bikedb&lt;/code&gt;) already holds data for Chicago, only new data will be added, otherwise all historical data will be downloaded and added. All bicycle hire systems accessed by &lt;code&gt;bikedata&lt;/code&gt; have fixed docking stations, and the primary means of aggregation is in terms of &amp;ldquo;trip matrices&amp;rdquo;, which are square matrices of numbers of trips between all pairs of stations, extracted with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trips &amp;lt;- bike_tripmat (bikedb = &amp;quot;bikedb&amp;quot;, city = &amp;quot;chi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that most parameters are highly flexible in terms of formatting, so pretty much anything starting with &lt;code&gt;&amp;quot;ch&amp;quot;&lt;/code&gt; will be recognised as Chicago. Of course, if the database only contains data for Chicago, the &lt;code&gt;city&lt;/code&gt; parameter may be omitted entirely. Trip matrices may be filtered by time, through combinations of year, month, day, hour, minute, or even second, as well as by demographic characteristics such as gender or date of birth for those systems which provide such data. (These latter data are freely provided by users of the systems, and there can be no guarantee of their accuracy.) These can all be combined in calls like the following, which further demonstrates the highly flexible ways of specifying the various parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trips &amp;lt;- bike_tripmat (&amp;quot;bikedb&amp;quot;, city = &amp;quot;london, innit&amp;quot;,
                       start_date = 20160101, end_date = &amp;quot;16,02,28&amp;quot;,
                       start_time = 6, end_time = 24,
                       birth_year = 1980:1990, gender = &amp;quot;f&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second mode of aggregation is as daily time series, via the &lt;code&gt;bike_daily_trips()&lt;/code&gt; function. See &lt;a href=&#34;https://ropensci.github.io/bikedata/articles/bikedata.html&#34;&gt;the vignette&lt;/a&gt; for further details.&lt;/p&gt;

&lt;h3 id=&#34;what-can-be-done-with-these-data&#34;&gt;What can be done with these data?&lt;/h3&gt;

&lt;p&gt;Lots of things. How about examining how far people ride. This requires getting the distances between all pairs of docking stations as routed through the street network, to yield a distance matrix corresponding to the trip matrix. The latest version of &lt;a href=&#34;https://github.com/ropensci/bikedata&#34;&gt;&lt;code&gt;bikedata&lt;/code&gt;&lt;/a&gt; has a brand new function to perform exactly that task, so it&amp;rsquo;s as easy as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github (&amp;quot;ropensci/bikedata&amp;quot;) # to install latest version
dists &amp;lt;- bike_distmat (bikedb = bikedb, city = &amp;quot;chicago&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are distances as routed through the underlying street network, with street types prioritised for bicycle travel. The network is extracted from OpenStreetMap using the &lt;a href=&#34;https://github.com/ropensci/osmdata&#34;&gt;rOpenSci &lt;code&gt;osmdata&lt;/code&gt; package&lt;/a&gt;, and the distances are calculated using a brand new package called &lt;a href=&#34;https://cran.r-project.org/package=dodgr&#34;&gt;&lt;code&gt;dodgr&lt;/code&gt;&lt;/a&gt; (Distances on Directed Graphs). (Disclaimer: It&amp;rsquo;s my package, and this is a shameless plug for it - please use it!)&lt;/p&gt;

&lt;p&gt;The distance matrix extracted with &lt;code&gt;bike_distmat&lt;/code&gt; is between all stations listed for a given system, which &lt;code&gt;bike_tripmat&lt;/code&gt; will return trip matrices only between those stations in operation over a specified time period. Because systems expand over time, the two matrices will generally not be directly comparable, so it is necessary to submit both to the &lt;code&gt;bikedata&lt;/code&gt; function &lt;code&gt;match_matrices()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim (trips); dim (dists)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 581 581

## [1] 636 636
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mats &amp;lt;- match_matrices (trips, dists)
trips &amp;lt;- mats$trip
dists &amp;lt;- mats$dist
dim (trips); dim (dists)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 581 581

## [1] 581 581
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;identical (rownames (trips), rownames (dists))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Distances can then be visually related to trip numbers to reveal their distributional form. These matrices contain too many values to plot directly, so the &lt;code&gt;hexbin&lt;/code&gt; package is used here to aggregate in a &lt;code&gt;ggplot&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library (hexbin)
library (ggplot2)
dat &amp;lt;- data.frame (distance = as.vector (dmat),
                   number = as.vector (trips))
ggplot (dat, aes (x = distance, y = number)) +
    stat_binhex(aes(fill = log (..count..))) +
    scale_x_log10 (breaks = c (0.1, 0.5, 1, 2, 5, 10, 20),
                   labels = c (&amp;quot;0.1&amp;quot;, &amp;quot;0.5&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;10&amp;quot;, &amp;quot;20&amp;quot;)) +
    scale_y_log10 (breaks = c (10, 100, 1000)) +
    scale_fill_gradientn(colours = c(&amp;quot;seagreen&amp;quot;,&amp;quot;goldenrod1&amp;quot;),
                         name = &amp;quot;Frequency&amp;quot;, na.value = NA) +
    guides (fill = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-10-17-bikedata/chicago.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The central region of the graph (yellow hexagons) reveals that numbers of trips generally decrease roughly exponentially with increasing distance (noting that scales are logarithmic), with most trip distances lying below 5km. What is the &amp;ldquo;average&amp;rdquo; distance travelled in Chicago? The easiest way to calculate this is as a weighted mean,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum (as.vector (dmat) * as.vector (trips) / sum (trips), na.rm = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 2.510285
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;giving a value of just over 2.5 kilometres. We could also compare differences in mean distances between cyclists who are registered with a system and causal users. These two categories may be loosely considered to reflect &amp;ldquo;residents&amp;rdquo; and &amp;ldquo;non-residents&amp;rdquo;. Let&amp;rsquo;s wrap this in a function so we can use it for even cooler stuff in a moment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dmean &amp;lt;- function (bikedb = &amp;quot;bikedb&amp;quot;, city = &amp;quot;chicago&amp;quot;)
{
    tm &amp;lt;- bike_tripmat (bikedb = bikedb, city = city)
    tm_memb &amp;lt;- bike_tripmat (bikedb = bikedb, city = city, member = TRUE)
    tm_nomemb &amp;lt;- bike_tripmat (bikedb = bikedb, city = city, member = FALSE)
    stns &amp;lt;- bike_stations (bikedb = bikedb, city = city)
    dists &amp;lt;- bike_distmat (bikedb = bikedb, city = city)
    mats &amp;lt;- match_mats (dists, tm_memb)
    tm_memb &amp;lt;- mats$trip
    mats &amp;lt;- match_mats (dists, tm_nomemb)
    tm_nomemb &amp;lt;- mats$trip
    mats &amp;lt;- match_mats (dists, tm)
    tm &amp;lt;- mats$trip
    dists &amp;lt;- mats$dists

    d0 &amp;lt;- sum (as.vector (dists) * as.vector (tm) / sum (tm), na.rm = TRUE)
    dmemb &amp;lt;- sum (as.vector (dists) * as.vector (tmemb) / sum (t_memb), na.rm = TRUE)
    dnomemb &amp;lt;- sum (as.vector (dists) * as.vector (tm_nomemb) / sum (tm_nomemb), na.rm = TRUE)
    res &amp;lt;- c (d0, dmemb / dnomemb)
    names (res) &amp;lt;- c (&amp;quot;dmean&amp;quot;, &amp;quot;ratio_memb_non&amp;quot;)
    return (res)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Differences in distances ridden between &amp;ldquo;resident&amp;rdquo; and &amp;ldquo;non-resident&amp;rdquo; cyclists can then be calculated with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dmean (bikedb = bikedb, city = &amp;quot;ch&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##          dmean ratio_memb_non
##       2.510698       1.023225
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And system members cycle slightly longer distances than non-members. (Do not at this point ask about statistical tests - these comparisons are made between millions&amp;ndash;often tens of millions&amp;ndash;of points, and statistical significance may always be assumed to be negligibly small.) Whatever the reason for this difference between &amp;ldquo;residents&amp;rdquo; and others, we can use this exact same code to compare equivalent distances for all cities which record whether users are members or not (which is all cities except London and Washington DC).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cities &amp;lt;- c (&amp;quot;ny&amp;quot;, &amp;quot;ch&amp;quot;, &amp;quot;bo&amp;quot;, &amp;quot;la&amp;quot;, &amp;quot;ph&amp;quot;) # NYC, Chicago, Boston, LA, Philadelphia
sapply (cities, function (i) dmean (bikedb = bikedb, city = i))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                       ny       ch       bo       la       ph
## dmean          2.8519131 2.510285 2.153918 2.156919 1.702372
## ratio_memb_non 0.9833729 1.023385 1.000635 1.360099 1.130929
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we thus discover that Boston manifests the greatest equality in terms of distances cycled between residents and non-residents, while LA manifests the greatest difference. New York City is the only one of these five in which non-members of the system actually cycle further than members. (And note that these two measures can&amp;rsquo;t be statistically compared in any direct way, because mean distances are also affected by relative numbers of member to non-member trips.) These results likely reflect a host of (scientifically) interesting cultural and geo-spatial differences between these cities, and demonstrate how the &lt;a href=&#34;https://github.com/ropensci/bikedata&#34;&gt;&lt;code&gt;bikedata&lt;/code&gt;&lt;/a&gt; package (combined with &lt;a href=&#34;https://github.com/gmost/dodgr&#34;&gt;&lt;code&gt;dodgr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropensci/osmdata&#34;&gt;&lt;code&gt;osmdata&lt;/code&gt;&lt;/a&gt;) can provide unique insight into differences in human behaviour between some of the most important cities in the U.S.&lt;/p&gt;

&lt;h3 id=&#34;visualisation&#34;&gt;Visualisation&lt;/h3&gt;

&lt;p&gt;Many users are likely to want to visualise how people use a given bicycle system, and in particular are likely to want to produce maps. This is also readily done with the &lt;a href=&#34;https://github.com/gmost/dodgr&#34;&gt;&lt;code&gt;dodgr&lt;/code&gt; package&lt;/a&gt;, which can route and aggregate transit flows for a particular mode of transport throughout a street network. Let&amp;rsquo;s plot bicycle flows for the Indego System of Philadelphia PA. First get the trip matrix, along with the coordinates of all bicycle stations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github (&amp;quot;gmost/dodgr&amp;quot;) # to install latest version
city &amp;lt;- &amp;quot;ph&amp;quot;
# store_bikedata (bikedb = bikedb, city = city) # if not already done
trips &amp;lt;- bike_tripmat (bikedb = bikedb, city = city)
stns &amp;lt;- bike_stations (bikedb = bikedb, city = city)
xy &amp;lt;- stns [, which (names (stns) %in% c (&amp;quot;longitude&amp;quot;, &amp;quot;latitude&amp;quot;))]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flows of cyclists are calculated between those &lt;code&gt;xy&lt;/code&gt;points, so the &lt;code&gt;trips&lt;/code&gt; table has to match the &lt;code&gt;stns&lt;/code&gt; table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;indx &amp;lt;- match (stns$stn_id, rownames (trips))
trips &amp;lt;- trips [indx, indx]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/gmost/dodgr&#34;&gt;&lt;code&gt;dodgr&lt;/code&gt; package&lt;/a&gt; can be used to extract the underlying street network surrounding those &lt;code&gt;xy&lt;/code&gt; points (expanded here by 50%):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;net &amp;lt;- dodgr_streetnet (pts = xy, expand = 0.5) %&amp;gt;%
    weight_streetnet (wt_profile = &amp;quot;bicycle&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then need to align the bicycle station coordinates in &lt;code&gt;xy&lt;/code&gt; to the nearest points (or &amp;ldquo;vertices&amp;rdquo;) in the street network:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;verts &amp;lt;- dodgr_vertices (net)
pts &amp;lt;- verts$id [match_pts_to_graph (verts, xy)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flows between these points can then be mapped onto the underlying street network with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flow &amp;lt;- dodgr_flows (net, from = pts, to = pts, flow = trips) %&amp;gt;%
    merge_directed_flows ()
net &amp;lt;- net [flow$edge_id, ]
net$flow &amp;lt;- flow$flow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/gmost/dodgr&#34;&gt;&lt;code&gt;dodgr&lt;/code&gt; documentation&lt;/a&gt; for further details of how this works. We&amp;rsquo;re now ready to plot those flows, but before we do, let&amp;rsquo;s overlay them on top of the rivers of Philadelphia, extracted with rOpenSci&amp;rsquo;s &lt;a href=&#34;https://github.com/ropensci/osmdata&#34;&gt;&lt;code&gt;osmdata&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;q &amp;lt;- opq (&amp;quot;Philadelphia pa&amp;quot;)
rivers1 &amp;lt;- q %&amp;gt;%
    add_osm_feature (key = &amp;quot;waterway&amp;quot;, value = &amp;quot;river&amp;quot;, value_exact = FALSE) %&amp;gt;%
    osmdata_sf (quiet = FALSE)
rivers2 &amp;lt;- q %&amp;gt;%
    add_osm_feature (key = &amp;quot;natural&amp;quot;, value = &amp;quot;water&amp;quot;) %&amp;gt;%
    osmdata_sf (quiet = FALSE)
rivers &amp;lt;- c (rivers1, rivers2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally plot the map, using rOpenSci&amp;rsquo;s &lt;a href=&#34;https://github.com/ropensci/osmplotr&#34;&gt;&lt;code&gt;osmplotr&lt;/code&gt; package&lt;/a&gt; to prepare a base map with the underlying rivers, and the &lt;code&gt;ggplot2::geom_segment()&lt;/code&gt; function to add the line segments with colours and widths weighted by bicycle flows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#gtlibrary (osmplotr)
require (ggplot2)
bb &amp;lt;- get_bbox (c (-75.22, 39.91, -75.10, 39.98))
cols &amp;lt;- colorRampPalette (c (&amp;quot;lawngreen&amp;quot;, &amp;quot;red&amp;quot;)) (30)
map &amp;lt;- osm_basemap (bb, bg = &amp;quot;gray10&amp;quot;) %&amp;gt;%
    add_osm_objects (rivers$osm_multipolygons, col = &amp;quot;gray20&amp;quot;) %&amp;gt;%
    add_osm_objects (rivers$osm_lines, col = &amp;quot;gray20&amp;quot;) %&amp;gt;%
    add_colourbar (zlims = range (net$flow / 1000), col = cols)
map &amp;lt;- map + geom_segment (data = net, size = net$flow / 50000,
                           aes (x = from_lon, y = from_lat, xend = to_lon, yend = to_lat,
                                colour = flow, size = flow)) +
    scale_colour_gradient (low = &amp;quot;lawngreen&amp;quot;, high = &amp;quot;red&amp;quot;, guide = &amp;quot;none&amp;quot;)
print_osm_map (map)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-10-17-bikedata/ph.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The colour bar on the right shows thousands of trips, with the map revealing the relatively enormous numbers crossing the South Street Bridge over the Schuylkill River, leaving most other flows coloured in the lower range of green or yellows. This map thus reveals that anyone wanting to see Philadelphia&amp;rsquo;s Indego bikes in action without braving the saddle themselves would be best advised to head straight for the South Street Bridge.&lt;/p&gt;

&lt;h3 id=&#34;future-plans&#34;&gt;Future plans&lt;/h3&gt;

&lt;p&gt;Although the &lt;a href=&#34;https://github.com/gmost/dodgr&#34;&gt;&lt;code&gt;dodgr&lt;/code&gt; package&lt;/a&gt; greatly facilitates the production of such maps, the code is nevertheless rather protracted, and it would probably be very useful to convert much of the code in the preceding section to an internal &lt;a href=&#34;https://github.com/ropensci/bikedata&#34;&gt;&lt;code&gt;bikedata&lt;/code&gt;&lt;/a&gt; function to map trips between pairs of stations onto corresponding flows through the underlying street networks.&lt;/p&gt;

&lt;p&gt;Beyond that point, and the list of currently open issues awaiting development on the &lt;a href=&#34;https://github.com/ropensci/bikedata/issues&#34;&gt;github repository&lt;/a&gt;, future development is likely to depend very much on how users use the package, and on what extra features people might want. How can you help? A great place to start might be the official &lt;a href=&#34;https://ropensci.org/blog/blog/2017/10/02/hacktoberfest&#34;&gt;Hacktoberfest issue&lt;/a&gt;, helping to import the next lot of data from &lt;a href=&#34;https://github.com/ropensci/bikedata/issues/34&#34;&gt;San Francisco&lt;/a&gt;. Or just use the package, and open up a new issue in response to any ideas that might pop up, no matter how minor they might seem. See the &lt;a href=&#34;https://github.com/ropensci/bikedata/blob/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for general advice.&lt;/p&gt;

&lt;h3 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h3&gt;

&lt;p&gt;Finally, this package wouldn&amp;rsquo;t be what it is without my co-author &lt;a href=&#34;https://github.com/richardellison&#34;&gt;Richard Ellison&lt;/a&gt;, who greatly accelerated development through encouraging C rather than C++ code for the SQL interfaces. &lt;a href=&#34;https://github.com/maelle&#34;&gt;Maëlle Salmon&lt;/a&gt; majestically guided the entire review process, and made the transformation of the package to its current polished form a joy and a pleasure. I remain indebted to both &lt;a href=&#34;https://github.com/chucheria&#34;&gt;Bea Hernández&lt;/a&gt; and &lt;a href=&#34;https://github.com/eamcvey&#34;&gt;Elaine McVey&lt;/a&gt; for offering their time to extensively test and &lt;a href=&#34;https://github.com/ropensci/onboarding/issues/116&#34;&gt;review the package&lt;/a&gt; as part of rOpenSci&amp;rsquo;s onboarding process. The review process has made the package what it is, and for that I am grateful to all involved!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>FedData - Getting assorted geospatial data into R</title>
      <link>https://ropensci.org/technotes/2017/08/24/feddata-release/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/technotes/2017/08/24/feddata-release/</guid>
      <description>
        
        

&lt;p&gt;The package &lt;a href=&#34;https://github.com/ropensci/FedData&#34;&gt;&lt;code&gt;FedData&lt;/code&gt;&lt;/a&gt; has gone through software review and is now part of &lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt;. &lt;code&gt;FedData&lt;/code&gt; includes functions to automate downloading geospatial data available from several federated data sources (mainly sources maintained by the US Federal government).&lt;/p&gt;

&lt;p&gt;Currently, the package enables extraction from six datasets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;http://ned.usgs.gov&#34;&gt;National Elevation Dataset (NED)&lt;/a&gt; digital elevation models (1 and &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; arc-second; USGS)&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://nhd.usgs.gov&#34;&gt;National Hydrography Dataset (NHD)&lt;/a&gt; (USGS)&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://websoilsurvey.sc.egov.usda.gov/&#34;&gt;Soil Survey Geographic (SSURGO) database&lt;/a&gt; from the National Cooperative Soil Survey (NCSS), which is led by the Natural Resources Conservation Service (NRCS) under the USDA,&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.ncdc.noaa.gov/data-access/land-based-station-data/land-based-datasets/global-historical-climatology-network-ghcn&#34;&gt;Global Historical Climatology Network (GHCN)&lt;/a&gt;, coordinated by National Climatic Data Center at NOAA,&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://daymet.ornl.gov/&#34;&gt;Daymet&lt;/a&gt; gridded estimates of daily weather parameters for North America, version 3, available from the Oak Ridge National Laboratory&amp;rsquo;s Distributed Active Archive Center (DAAC), and&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.ncdc.noaa.gov/data-access/paleoclimatology-data/datasets/tree-ring&#34;&gt;International Tree Ring Data Bank (ITRDB)&lt;/a&gt;, coordinated by National Climatic Data Center at NOAA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;FedData&lt;/code&gt; is designed with the large-scale geographic information system (GIS) use-case in mind: cases where the use of dynamic web-services is impractical due to the scale (spatial and/or temporal) of analysis. It functions primarily as a means of downloading tiled or otherwise spatially-defined datasets; additionally, it can preprocess those datasets by extracting data within an area of interest (AoI), defined spatially. It relies heavily on the &lt;a href=&#34;https://cran.r-project.org/package=sp&#34;&gt;&lt;code&gt;sp&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=raster&#34;&gt;&lt;code&gt;raster&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://cran.r-project.org/package=rgdal&#34;&gt;&lt;code&gt;rgdal&lt;/code&gt;&lt;/a&gt; packages.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Load &lt;code&gt;FedData&lt;/code&gt; and define a study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# FedData Tester
library(FedData)
library(magrittr)

# Extract data for the Village Ecodynamics Project &amp;quot;VEPIIN&amp;quot; study area:
# http://veparchaeology.org
vepPolygon &amp;lt;- polygon_from_extent(raster::extent(672800, 740000, 4102000, 4170000),
                                  proj4string = &amp;quot;+proj=utm +datum=NAD83 +zone=12&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get and plot the National Elevation Dataset for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the NED (USA ONLY)
# Returns a raster
NED &amp;lt;- get_ned(template = vepPolygon,
               label = &amp;quot;VEPIIN&amp;quot;)
# Plot with raster::plot
raster::plot(NED)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-6-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the Daymet dataset for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the DAYMET (North America only)
# Returns a raster
DAYMET &amp;lt;- get_daymet(template = vepPolygon,
               label = &amp;quot;VEPIIN&amp;quot;,
               elements = c(&amp;quot;prcp&amp;quot;,&amp;quot;tmax&amp;quot;),
               years = 1980:1985)
# Plot with raster::plot
raster::plot(DAYMET$tmax$X1985.10.23)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-7-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the daily GHCN precipitation data for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the daily GHCN data (GLOBAL)
# Returns a list: the first element is the spatial locations of stations,
# and the second is a list of the stations and their daily data
GHCN.prcp &amp;lt;- get_ghcn_daily(template = vepPolygon,
                            label = &amp;quot;VEPIIN&amp;quot;,
                            elements = c(&#39;prcp&#39;))
# Plot the NED again
raster::plot(NED)
# Plot the spatial locations
sp::plot(GHCN.prcp$spatial,
         pch = 1,
         add = TRUE)
legend(&#39;bottomleft&#39;,
       pch = 1,
       legend=&amp;quot;GHCN Precipitation Records&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-8-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the daily GHCN temperature data for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Elements for which you require the same data
# (i.e., minimum and maximum temperature for the same days)
# can be standardized using standardize==T
GHCN.temp &amp;lt;- get_ghcn_daily(template = vepPolygon,
                            label = &amp;quot;VEPIIN&amp;quot;,
                            elements = c(&#39;tmin&#39;,&#39;tmax&#39;),
                            years = 1980:1985,
                            standardize = TRUE)
# Plot the NED again
raster::plot(NED)
# Plot the spatial locations
sp::plot(GHCN.temp$spatial,
         add = TRUE,
         pch = 1)
legend(&#39;bottomleft&#39;,
       pch = 1,
       legend = &amp;quot;GHCN Temperature Records&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-9-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the National Hydrography Dataset for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the NHD (USA ONLY)
NHD &amp;lt;- get_nhd(template = vepPolygon,
               label = &amp;quot;VEPIIN&amp;quot;)
# Plot the NED again
raster::plot(NED)
# Plot the NHD data
NHD %&amp;gt;%
  lapply(sp::plot,
         col = &#39;black&#39;,
         add = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-10-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the NRCS SSURGO data for the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the NRCS SSURGO data (USA ONLY)
SSURGO.VEPIIN &amp;lt;- get_ssurgo(template = vepPolygon,
                     label = &amp;quot;VEPIIN&amp;quot;)
#&amp;gt; Warning: 1 parsing failure.
#&amp;gt; row # A tibble: 1 x 5 col     row     col               expected actual expected   &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; actual 1  1276 slope.r no trailing characters     .5 file # ... with 1 more variables: file &amp;lt;chr&amp;gt;
# Plot the NED again
raster::plot(NED)
# Plot the SSURGO mapunit polygons
plot(SSURGO.VEPIIN$spatial,
     lwd = 0.1,
     add = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-11-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the NRCS SSURGO data for particular soil survey areas&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Or, download by Soil Survey Area names
SSURGO.areas &amp;lt;- get_ssurgo(template = c(&amp;quot;CO670&amp;quot;,&amp;quot;CO075&amp;quot;),
                           label = &amp;quot;CO_TEST&amp;quot;)

# Let&#39;s just look at spatial data for CO675
SSURGO.areas.CO675 &amp;lt;- SSURGO.areas$spatial[SSURGO.areas$spatial$AREASYMBOL==&amp;quot;CO075&amp;quot;,]

# And get the NED data under them for pretty plotting
NED.CO675 &amp;lt;- get_ned(template = SSURGO.areas.CO675,
                            label = &amp;quot;SSURGO_CO675&amp;quot;)

# Plot the SSURGO mapunit polygons, but only for CO675
plot(NED.CO675)
plot(SSURGO.areas.CO675,
     lwd = 0.1,
     add = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-12-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get and plot the ITRDB chronology locations in the study area&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Get the ITRDB records
ITRDB &amp;lt;- get_itrdb(template = vepPolygon,
                        label = &amp;quot;VEPIIN&amp;quot;,
                        makeSpatial = TRUE)
# Plot the NED again
raster::plot(NED)
# Map the locations of the tree ring chronologies
plot(ITRDB$metadata,
     pch = 1,
     add = TRUE)
legend(&#39;bottomleft&#39;,
       pch = 1,
       legend = &amp;quot;ITRDB chronologies&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/ropensci/FedData/raw/master/inst/image/README-unnamed-chunk-13-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The current CRAN version of &lt;code&gt;FedData&lt;/code&gt;, v2.4.6, will (hopefully) be the final CRAN release of &lt;code&gt;FedData&lt;/code&gt; 2. &lt;code&gt;FedData&lt;/code&gt; 3 will be released in the coming months, but some code built on &lt;code&gt;FedData&lt;/code&gt; 2 will not be compatible with FedData 3.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FedData&lt;/code&gt; was initially developed prior to widespread use of modern web mapping services and RESTful APIs by many Federal data-holders. Future releases of &lt;code&gt;FedData&lt;/code&gt; will limit data transfer by utilizing server-side geospatial and data queries. We will also implement &lt;a href=&#34;https://github.com/hadley/dplyr&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt;&lt;/a&gt; verbs, tidy data structures, (&lt;a href=&#34;https://github.com/tidyverse/magrittr&#34;&gt;&lt;code&gt;magrittr&lt;/code&gt;&lt;/a&gt;) piping, functional programming using &lt;a href=&#34;https://github.com/hadley/purrr&#34;&gt;&lt;code&gt;purrr&lt;/code&gt;&lt;/a&gt;, simple features for spatial data from &lt;a href=&#34;https://github.com/edzer/sfr&#34;&gt;&lt;code&gt;sf&lt;/code&gt;&lt;/a&gt;, and local data storage in OGC-compliant data formats (probably GeoJSON and NetCDF). I am also aiming for 100% testing coverage.&lt;/p&gt;

&lt;p&gt;All that being said, much of the functionality of the &lt;code&gt;FedData&lt;/code&gt; package could be spun off into more domain-specific packages. For example, ITRDB download functions could be part of the &lt;a href=&#34;https://r-forge.r-project.org/projects/dplr/&#34;&gt;&lt;code&gt;dplR&lt;/code&gt;&lt;/a&gt; dendrochronology package; concepts/functions having to do with the GHCN data integrated into &lt;a href=&#34;https://github.com/ropensci/rnoaa&#34;&gt;&lt;code&gt;rnoaa&lt;/code&gt;&lt;/a&gt;; and Daymet concepts integrated into &lt;a href=&#34;https://github.com/khufkens/daymetr&#34;&gt;&lt;code&gt;daymetr&lt;/code&gt;&lt;/a&gt;. I welcome any and all suggestions about how to improve the utility of FedData; please &lt;a href=&#34;https://github.com/ropensci/FedData/issues&#34;&gt;submit an issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FedData&lt;/code&gt; is a product of SKOPE (&lt;a href=&#34;http://www.openskope.org&#34;&gt;Synthesizing Knowledge of Past Environments&lt;/a&gt;) and the &lt;a href=&#34;http://veparchaeology.org/&#34;&gt;Village Ecodynamics Project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FedData&lt;/code&gt; was reviewed for &lt;a href=&#34;https://ropensci.org&#34;&gt;rOpenSci&lt;/a&gt; by &lt;a href=&#34;https://github.com/jooolia&#34;&gt;@jooolia&lt;/a&gt;, with &lt;a href=&#34;https://github.com/sckott&#34;&gt;@sckott&lt;/a&gt; as onboarding editor, and was greatly improved as a result.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Random GeoJSON and WKT with randgeo</title>
      <link>https://ropensci.org/technotes/2017/04/20/randgeo/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/technotes/2017/04/20/randgeo/</guid>
      <description>
        
        

&lt;p&gt;&lt;strong&gt;randgeo&lt;/strong&gt; generates random points and shapes in GeoJSON and WKT formats for
use in examples, teaching, or statistical applications.&lt;/p&gt;

&lt;p&gt;Points and shapes are generated in the long/lat coordinate system and with
appropriate spherical geometry; random points are distributed evenly across
the globe, and random shapes are sized according to a maximum great-circle
distance from the center of the shape.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;randgeo&lt;/strong&gt; was adapted from &lt;a href=&#34;https://github.com/tmcw/geojson-random&#34;&gt;https://github.com/tmcw/geojson-random&lt;/a&gt; to have
a pure R implementation without any dependencies as well as appropriate
geometry. Data generated by &lt;strong&gt;randgeo&lt;/strong&gt; may be processed or displayed of with
packages such as &lt;a href=&#34;https://cran.r-project.org/package=sf&#34;&gt;&lt;strong&gt;sf&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=wicket&#34;&gt;&lt;strong&gt;wicket&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=geojson&#34;&gt;&lt;strong&gt;geojson&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=wellknown&#34;&gt;&lt;strong&gt;wellknown&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&#34;https://cran.r-project.org/package=geojsonio&#34;&gt;&lt;strong&gt;geojsonio&lt;/strong&gt;&lt;/a&gt;, or
&lt;a href=&#34;https://cran.r-project.org/package=lawn&#34;&gt;&lt;strong&gt;lawn&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Package API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rg_position&lt;/code&gt; - random position (lon, lat)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geo_point&lt;/code&gt; - random GeoJSON point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geo_polygon&lt;/code&gt; - random GeoJSON polygon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wkt_point&lt;/code&gt; - random WKT point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wkt_polygon&lt;/code&gt; - random WKT polygon&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Install &lt;code&gt;randgeo&lt;/code&gt; - and we&amp;rsquo;ll need a few other packages for examples below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;randgeo&amp;quot;)
install.packages(c(&#39;leaflet&#39;, &#39;lawn&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(randgeo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions that start with &lt;code&gt;geo&lt;/code&gt; are for creating GeoJSON data in JSON format.
If you want to create an R list or data.frame, you can use &lt;code&gt;jsonlite::fromJSON&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;random&#34;&gt;Random&lt;/h2&gt;

&lt;p&gt;Evenly distributed across the sphere.  The &lt;code&gt;bbox&lt;/code&gt; option allows
you to limit points to within long/lat bounds.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geo_point()
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry
#&amp;gt; $features[[1]]$geometry$type
#&amp;gt; [1] &amp;quot;Point&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates
#&amp;gt; [1] 105.95999 -46.58477
#&amp;gt;
#&amp;gt;
#&amp;gt; $features[[1]]$properties
#&amp;gt; NULL
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; attr(,&amp;quot;class&amp;quot;)
#&amp;gt; [1] &amp;quot;geo_list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Centered on a random point, with default maximum size&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geo_polygon()
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;FeatureCollection&amp;quot;
#&amp;gt;
#&amp;gt; $features
#&amp;gt; $features[[1]]
#&amp;gt; $features[[1]]$type
#&amp;gt; [1] &amp;quot;Feature&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry
#&amp;gt; $features[[1]]$geometry$type
#&amp;gt; [1] &amp;quot;Polygon&amp;quot;
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates
#&amp;gt; $features[[1]]$geometry$coordinates[[1]]
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[1]]
#&amp;gt; [1] -138.49434  -25.11895
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[2]]
#&amp;gt; [1] -145.95566  -28.17623
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[3]]
#&amp;gt; [1] -145.87817  -28.74364
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[4]]
#&amp;gt; [1] -146.61325  -28.59748
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[5]]
#&amp;gt; [1] -139.18167  -31.07703
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[6]]
#&amp;gt; [1] -140.88748  -31.24708
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[7]]
#&amp;gt; [1] -143.50402  -33.93551
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[8]]
#&amp;gt; [1] -146.48114  -30.43185
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[9]]
#&amp;gt; [1] -144.68315  -35.45465
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[10]]
#&amp;gt; [1] -157.58084  -24.52897
#&amp;gt;
#&amp;gt; $features[[1]]$geometry$coordinates[[1]][[11]]
#&amp;gt; [1] -138.49434  -25.11895
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; $features[[1]]$properties
#&amp;gt; NULL
#&amp;gt;
#&amp;gt;
#&amp;gt;
#&amp;gt; attr(,&amp;quot;class&amp;quot;)
#&amp;gt; [1] &amp;quot;geo_list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visualize your shapes with &lt;strong&gt;lawn&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lawn::view(jsonlite::toJSON(unclass(geo_polygon(count = 4)), auto_unbox = TRUE))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-20-randgeo/plot1.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;wkt&#34;&gt;WKT&lt;/h2&gt;

&lt;p&gt;Functions prefixed with &lt;code&gt;wkt&lt;/code&gt; create random Well-Known Text (WKT) data. These functions
wrap the GeoJSON versions, but then convert the data to WKT.&lt;/p&gt;

&lt;p&gt;Random point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wkt_point()
#&amp;gt; [1] &amp;quot;POINT (179.8795330 -29.1106238)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Random polygon:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wkt_polygon()
#&amp;gt; [1] &amp;quot;POLYGON ((-60.0870329 -12.9315478, -61.5073816 -25.3204334, -62.6987366 -24.5766272, -64.1853669 -24.0497260, -67.7152546 -27.4752321, -68.4190340 -26.9510818, -67.6018452 -21.5489551, -64.3083560 -21.6772242, -63.1471630 -21.9415438, -64.1137279 -14.2398013, -60.0870329 -12.9315478))&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-case&#34;&gt;Use case&lt;/h2&gt;

&lt;p&gt;Example of geospatial data manipulation, using &lt;code&gt;randgeo&lt;/code&gt;, &lt;code&gt;leaflet&lt;/code&gt; and
&lt;code&gt;lawn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate random overlapping polygons&lt;/li&gt;
&lt;li&gt;Calculate a single polygon from overlapping polygons&lt;/li&gt;
&lt;li&gt;Map polygon&lt;/li&gt;
&lt;li&gt;Generate random locaitons (points)&lt;/li&gt;
&lt;li&gt;Clip locations to the polygon&lt;/li&gt;
&lt;li&gt;Overlay locations (more random points) on the polygon&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(randgeo)
library(lawn)
library(leaflet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;generate random data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(5)
polys &amp;lt;- randgeo::geo_polygon(count = 2, num_vertices = 4, bbox = c(-120, 40, -100, 50))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get intersection of polygons&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polysinter &amp;lt;- lawn::lawn_intersect(polys$features[[1]], polys$features[[2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Map polygons&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polysinter %&amp;gt;% lawn::view()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-20-randgeo/plot2.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Generate random points - clip points to polygon&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pts &amp;lt;- randgeo::geo_point(count = 500, bbox = c(-120, 40, -100, 50))
pts &amp;lt;- lawn::lawn_within(
  points = lawn_featurecollection(pts),
  polygons = lawn_featurecollection(polysinter)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Draw polygon + points on map&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polysinter %&amp;gt;%
  view() %&amp;gt;%
  addGeoJSON(geojson = jsonlite::toJSON(unclass(pts)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-04-20-randgeo/plot3.png&#34; alt=&#34;map&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Let us know what you think!  &lt;code&gt;randgeo&lt;/code&gt; doesn&amp;rsquo;t have any revdep&amp;rsquo;s on CRAN yet, but
is being &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=%22randgeo%22+language%3AR+-user%3Acran+-user%3Aropensci&amp;amp;type=Code&#34;&gt;used in one package on GitHub&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>ccafs - client for CCAFS General Circulation Models data</title>
      <link>https://ropensci.org/technotes/2017/03/01/ccafs-release/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/technotes/2017/03/01/ccafs-release/</guid>
      <description>
        
        

&lt;p&gt;I&amp;rsquo;ve recently released the new package &lt;a href=&#34;https://github.com/ropensci/ccafs&#34;&gt;ccafs&lt;/a&gt;, which provides access
to data from Climate Change, Agriculture and Food Security
(CCAFS; &lt;a href=&#34;http://ccafs-climate.org/&#34;&gt;http://ccafs-climate.org/&lt;/a&gt;) General Circulation Models (GCM) data.
GCM&amp;rsquo;s are a particular type of climate model, used for weather forecasting,
and climate change forecasting - read more at
&lt;a href=&#34;https://en.wikipedia.org/wiki/General_circulation_model&#34;&gt;https://en.wikipedia.org/wiki/General_circulation_model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ccafs&lt;/code&gt; falls in the data client camp - its focus is on getting users
data - many &lt;a href=&#34;https://ropensci.org/packages/#data_access&#34;&gt;rOpenSci packages&lt;/a&gt;
fall into this area. These kinds of packages are important so that
scientists don&amp;rsquo;t have to recreate the wheel themselves every time, but
instead use one client that everyone else uses.&lt;/p&gt;

&lt;p&gt;CCAFS GCM data files are &lt;code&gt;.zip&lt;/code&gt; files with a bunch of files inside. The
individual files are in ARC ASCII format (&lt;a href=&#34;https://en.wikipedia.org/wiki/Esri_grid#ASCII&#34;&gt;https://en.wikipedia.org/wiki/Esri_grid#ASCII&lt;/a&gt;) -
a plain text data format, but still require painful manipulation/wrangling to
get into an easily consumable format. The files have a &lt;code&gt;.asc&lt;/code&gt; file extension.&lt;/p&gt;

&lt;p&gt;For each &lt;code&gt;.asc&lt;/code&gt; file, the first 6 lines of each file indicate the reference of
the grid (number of columns and rows, corner coordinates, cellsize, and missing
data value), followed by the actual data values, delimited with single
space characters.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a related binary format - but its proprietary, so nevermind.&lt;/p&gt;

&lt;p&gt;The workflow with &lt;code&gt;ccafs&lt;/code&gt; for most users will likely be as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search for data they want: &lt;code&gt;cc_search()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fetch/download data: &lt;code&gt;cc_data_fetch()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reaad data: &lt;code&gt;cc_data_read()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll dive into more details below.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;First, install the package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ccafs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then load &lt;code&gt;ccafs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;ccafs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;search-for-data&#34;&gt;Search for data&lt;/h2&gt;

&lt;p&gt;Searching CCAF&amp;rsquo;s data holdings is not as easy as it could be as they don&amp;rsquo;t
provide any programmatic way to do so. However, we provide a way to search
using their web interface from R.&lt;/p&gt;

&lt;p&gt;You can search by the numbers representing each possible value for
each parameter. See the &lt;code&gt;?&#39;ccafs-search&#39;&lt;/code&gt; for help on what the numbers
refer to.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(result1 &amp;lt;- cc_search(file_set = 4, scenario = 6, model = 2, extent = &amp;quot;global&amp;quot;,
  format = &amp;quot;ascii&amp;quot;, period = 5, variable = 2, resolution = 3))
#&amp;gt; [1] &amp;quot;http://gisweb.ciat.cgiar.org/ccafs_climate/files/data/ipcc_4ar_ciat/sres_b1/2040s/bccr_bcm2_0/5min/bccr_bcm2_0_sres_b1_2040s_prec_5min_no_tile_asc.zip&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, you can use the helper list &lt;code&gt;cc_params&lt;/code&gt; where you can reference
options by name; the downside is that this leads to very verbose code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(result2 &amp;lt;- cc_search(file_set = cc_params$file_set$`Delta method IPCC AR4`,
                  scenario = cc_params$scenario$`SRES B1`,
                  model = cc_params$model$bccr_bcm2_0,
                  extent = cc_params$extent$global,
                  format = cc_params$format$ascii,
                  period = cc_params$period$`2040s`,
                  variable = cc_params$variable$Precipitation,
                  resolution = cc_params$resolution$`5 minutes`))
#&amp;gt; [1] &amp;quot;http://gisweb.ciat.cgiar.org/ccafs_climate/files/data/ipcc_4ar_ciat/sres_b1/2040s/bccr_bcm2_0/5min/bccr_bcm2_0_sres_b1_2040s_prec_5min_no_tile_asc.zip&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you already know what you want in terms of file paths, you can query
Amazon S3 directly with &lt;code&gt;cc_list_keys()&lt;/code&gt; (the data file come from Amazon S3):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cc_list_keys(max = 3)
#&amp;gt; # A tibble: 3 × 5
#&amp;gt;                                              Key             LastModified
#&amp;gt;                                            &amp;lt;chr&amp;gt;                    &amp;lt;chr&amp;gt;
#&amp;gt; 1                                         ccafs/ 2014-02-28T15:15:45.000Z
#&amp;gt; 2 ccafs/2014-05-24-01-19-33-3A0DFF1F86F3E7F7.txt 2014-07-01T02:15:51.000Z
#&amp;gt; 3                                 ccafs/amzn.csv 2014-02-28T15:21:32.000Z
#&amp;gt; # ... with 3 more variables: ETag &amp;lt;chr&amp;gt;, Size &amp;lt;chr&amp;gt;, StorageClass &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using &lt;code&gt;cc_list_keys()&lt;/code&gt;, you&amp;rsquo;ll get not just &lt;code&gt;.zip&lt;/code&gt; files that can be
downloaded, but also directories. So beware that if you&amp;rsquo;re going after grabbing
&amp;ldquo;keys&amp;rdquo; for files that can be downloaded, you&amp;rsquo;re looking for &lt;code&gt;.zip&lt;/code&gt; files.&lt;/p&gt;

&lt;h2 id=&#34;fetch-and-read-data&#34;&gt;Fetch and read data&lt;/h2&gt;

&lt;p&gt;Once you get links from &lt;code&gt;cc_search()&lt;/code&gt; or &amp;ldquo;keys&amp;rdquo; from &lt;code&gt;cc_list_keys()&lt;/code&gt;, you
can pass either to &lt;code&gt;cc_data_fetch()&lt;/code&gt; - which normalizes the input - so it
doesn&amp;rsquo;t matter whether you pass in e.g.,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://gisweb.ciat.cgiar.org/ccafs_climate/files/data/ipcc_4ar_ciat/&lt;/code&gt;
&lt;code&gt;sres_b1/2040s/bccr_bcm2_0/5min/bccr_bcm2_0_sres_b1_2040s_prec_5min_no_tile_asc.zip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ccafs_climate/files/data/ipcc_4ar_ciat/sres_b1/2040s/bccr_bcm2_0/5min/&lt;/code&gt;
&lt;code&gt;bccr_bcm2_0_sres_b1_2040s_prec_5min_no_tile_asc.zip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s download data with &lt;code&gt;cc_data_fetch()&lt;/code&gt; using the result we got above
using &lt;code&gt;cc_search()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xx &amp;lt;- cc_data_fetch(result2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can read data with &lt;code&gt;cc_data_read()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(dat &amp;lt;- cc_data_read(xx))
#&amp;gt; class       : RasterStack
#&amp;gt; dimensions  : 1800, 4320, 7776000, 12  (nrow, ncol, ncell, nlayers)
#&amp;gt; resolution  : 0.08333333, 0.08333333  (x, y)
#&amp;gt; extent      : -180, 180, -60, 90  (xmin, xmax, ymin, ymax)
#&amp;gt; coord. ref. : NA
#&amp;gt; names       :      prec_1,     prec_10,     prec_11,     prec_12,      prec_2,      prec_3,      prec_4,      prec_5,      prec_6,      prec_7,      prec_8,      prec_9
#&amp;gt; min values  : -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648
#&amp;gt; max values  :  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647,  2147483647
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which gives a &lt;code&gt;raster&lt;/code&gt; class object, which you are likely familiar with - which
opens up all the tools that deal with &lt;code&gt;raster&lt;/code&gt; class objects, yay!&lt;/p&gt;

&lt;p&gt;You can easily plot the data with the &lt;code&gt;plot&lt;/code&gt; method from the  &lt;code&gt;raster&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;raster&amp;quot;)
plot(dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2017-03-01-ccafs-release/unnamed-chunk-9-1.png&#34; alt=&#34;plot&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;caching&#34;&gt;Caching&lt;/h2&gt;

&lt;p&gt;For a better user experience, we cache files for you. That means
when we download data, we put the files in a known location. When a
user tries to download the same data again, we look to see if it&amp;rsquo;s already
been downloaded, and use the cached version - if we don&amp;rsquo;t have it
already, we download it.&lt;/p&gt;

&lt;p&gt;Of course, CCAFS may change their files, so you may not want the cached
version, but the new version from them. We provide tools to inspect your
cached files, and delete them.&lt;/p&gt;

&lt;p&gt;List your cached files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cc_cache_list()
#&amp;gt;   [1] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc&amp;quot;
#&amp;gt;   [2] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc.zip&amp;quot;
#&amp;gt;   [3] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_1.asc&amp;quot;
#&amp;gt;   [4] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_10.asc&amp;quot;
#&amp;gt;   [5] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_11.asc&amp;quot;
#&amp;gt;   [6] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_12.asc&amp;quot;
#&amp;gt;   [7] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_13.asc&amp;quot;
#&amp;gt;   [8] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_14.asc&amp;quot;
#&amp;gt;   [9] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_15.asc&amp;quot;
#&amp;gt;  [10] &amp;quot;/Users/sacmac/Library/Caches/ccafs/bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc/bio_16.asc&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get details on all files or a specific file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# cc_cache_details() # details for all files
cc_cache_details(cc_cache_list()[1])
#&amp;gt; &amp;lt;ccafs cached files&amp;gt;
#&amp;gt;   directory: /Users/sacmac/Library/Caches/ccafs
#&amp;gt;
#&amp;gt;   file: /bcc_csm1_1_m_rcp2_6_2030s_bio_10min_r1i1p1_no_tile_asc
#&amp;gt;   size: 0.001 mb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be careful with &lt;code&gt;cc_cache_delete_all()&lt;/code&gt; as you will delete all your cached
files.&lt;/p&gt;

&lt;h2 id=&#34;ccafs-software-review&#34;&gt;ccafs software review&lt;/h2&gt;

&lt;p&gt;I want to touch briefly on the software review for this package. The reviews
for &lt;code&gt;ccafs&lt;/code&gt; were great, and I think the package was greatly improved via the
review process.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mikoontz&#34;&gt;Michael Koontz&lt;/a&gt; and &lt;a href=&#34;https://github.com/manuramon&#34;&gt;Manuel Ramon&lt;/a&gt;
did reviews for &lt;code&gt;ccafs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One thing in particular that improved about &lt;code&gt;ccafs&lt;/code&gt; was the user interface -
that is, the programmatic interface. One feature about the interface was
adding the &lt;code&gt;cc_search()&lt;/code&gt; function. When I started developing &lt;code&gt;ccafs&lt;/code&gt;, I didn&amp;rsquo;t
see a way to programmatically search CCAFS data - other than the Amazon S3
data, which isn&amp;rsquo;t really search, but more like listing files in a directory -
so I just left it at that. During the reviews, reviewers wanted a clear workflow
for potential users - the package as submitted for review didn&amp;rsquo;t really have a
clear workflow; it was&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Know what you want already (&lt;code&gt;cc_list_keys&lt;/code&gt; helped get real paths at least)&lt;/li&gt;
&lt;li&gt;Download data&lt;/li&gt;
&lt;li&gt;Read data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which is not ideal. There should be a discovery portion to the workflow. So
I decided to dig into possibly querying the CCAFS web portal itself. That panned
out, and the workflow we have now is much better:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search for data with all the same variables you would on the CCAFS website&lt;/li&gt;
&lt;li&gt;Download data&lt;/li&gt;
&lt;li&gt;Read data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is much better!&lt;/p&gt;

&lt;p&gt;As always, reviews improved the documentation a lot by pointing out areas that
could use improvement - which all users will greatly benefit from.&lt;/p&gt;

&lt;p&gt;A new vignette (&lt;a href=&#34;https://cran.rstudio.com/web/packages/ccafs/vignettes/amazon_s3_keys.html&#34;&gt;https://cran.rstudio.com/web/packages/ccafs/vignettes/amazon_s3_keys.html&lt;/a&gt;)
was added in the review process to explain how to get a &amp;ldquo;key&amp;rdquo;, a URL for CCAFS data.&lt;/p&gt;

&lt;h2 id=&#34;to-do-and-feedback&#34;&gt;To Do and Feedback&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s probably lots of improvements that can be made - I&amp;rsquo;m looking forward
to getting feedback from users on any bugs or feature requests. One immediate
thing is to &lt;a href=&#34;https://github.com/ropensci/ccafs/issues/22&#34;&gt;make the cache details more compact&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>The rOpenSci geospatial suite</title>
      <link>https://ropensci.org/blog/2016/11/22/geospatial-suite/</link>
      <pubDate>Tue, 22 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2016/11/22/geospatial-suite/</guid>
      <description>
        
        

&lt;p&gt;Geospatial data - data embedded in a spatial context - is used across disciplines, whether it be history, biology, business, tech, public health, etc. Along with community contributors, we&amp;rsquo;re working on a suite of tools to make working with spatial data in R as easy as possible.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not familiar with geospatial tools, it&amp;rsquo;s helpful to see what people do with them in the real world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of our geospatial packages, &lt;a href=&#34;https://github.com/ropensci/geonames&#34;&gt;geonames&lt;/a&gt;, is used for geocoding, the practice of either sorting out place names from geographic data, or vice versa. &lt;code&gt;geonames&lt;/code&gt; interfaces with the open database of the same name: &lt;a href=&#34;http://www.geonames.org/&#34;&gt;http://www.geonames.org/&lt;/a&gt;. A recent paper in PlosONE highlights a common use case. Harsch &amp;amp; HilleRisLambers&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; asked how plant species distributions have shifted due to climate warming. They used the &lt;code&gt;GNsrtm3()&lt;/code&gt; function in &lt;code&gt;geonames&lt;/code&gt;, which uses &lt;a href=&#34;http://www.geonames.org/export/web-services.html#srtm3&#34;&gt;Shuttle Radar Topography Mission&lt;/a&gt; elevation data, to fill in missing or incorrect elevation values in their dataset.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another of our packages, &lt;a href=&#34;https://github.com/ropensci/geojsonio&#34;&gt;geojsonio&lt;/a&gt;, is used as a tool to ingest GeoJSON, or make GeoJSON from various inputs. &lt;code&gt;geojsonio&lt;/code&gt; was used in Frankfurt&amp;rsquo;s Open Data Hackathon in March 2016 in a project to present users with random Google Streetview Images of Frankfurt. Check out the repo at &lt;a href=&#34;https://github.com/safferli/opendataday2016&#34;&gt;safferli/opendataday2016&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://ropensci.org/blog/blog/2016/03/17/ropensci-geospatial-stack&#34;&gt;We covered&lt;/a&gt; the state of our geospatial tools in March of this year, but a lot has changed since then so we thought it would be useful to do an overview of these tools and future work.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;https://en.wikipedia.org/wiki/GIS_file_formats&#34;&gt;many geospatial data formats&lt;/a&gt;,
including &lt;a href=&#34;https://en.wikipedia.org/wiki/Shapefile&#34;&gt;shapefiles&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/GeoTIFF&#34;&gt;GeoTIFF&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/NetCDF&#34;&gt;netCDF&lt;/a&gt;,
&lt;a href=&#34;https://en.wikipedia.org/wiki/Well-known_text&#34;&gt;Well-known text/Well-known binary&lt;/a&gt;,
&lt;a href=&#34;http://geojson.org/&#34;&gt;GeoJSON&lt;/a&gt;, and many more. Readers may be more familiar with shape files
than WKT or GeoJSON. There are  &lt;a href=&#34;https://cran.rstudio.com/web/views/Spatial.html&#34;&gt;R tools for shape files&lt;/a&gt;,
so our tools largely don&amp;rsquo;t concern themselves with shape files and other geospatial
data formats. Two formats in particular that we create tools for are GeoJSON and WKT.&lt;/p&gt;

&lt;h3 id=&#34;geojson&#34;&gt;GeoJSON&lt;/h3&gt;

&lt;p&gt;With the explosion of Javascript/Node and web-first tools, and increasing dominance of JSON as a data format, &lt;a href=&#34;http://geojson.org/&#34;&gt;GeoJSON&lt;/a&gt; as a spatial data format has seen increasing use. GeoJSON is a lightweight format based on JSON, and has a very new standard specification: &lt;a href=&#34;https://tools.ietf.org/html/rfc7946&#34;&gt;RFC 7946&lt;/a&gt;. Many of our geospatial tools center around GeoJSON. Our goal with GeoJSON focused tools is to create a pipeline in which users can process GeoJSON data without any headaches due to dependencies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;links: &lt;a href=&#34;https://tools.ietf.org/html/rfc7946&#34;&gt;specification&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/GeoJSON&#34;&gt;Wikipedia entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GeoJSON was inspired in part from Simple Features, but is not part of that specification. The most recent iteration is called &lt;a href=&#34;https://tools.ietf.org/html/rfc7946&#34;&gt;RFC 7946 GeoJSON&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Features of note:

&lt;ul&gt;
&lt;li&gt;JSON character representation only (though see &lt;a href=&#34;https://github.com/mapbox/geobuf&#34;&gt;geobuf&lt;/a&gt; for binary GeoJSON - not part of RFC 7946)&lt;/li&gt;
&lt;li&gt;All data is WGS84&lt;/li&gt;
&lt;li&gt;Often found in web applications&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wkt&#34;&gt;WKT&lt;/h3&gt;

&lt;p&gt;Well-known text is a plain text format, just like GeoJSON (WKB is a binary form of WKT). It is often used in SQL databases to store geospatial data. Many of the data sources our R packages work with, for example &lt;a href=&#34;http://www.gbif.org/&#34;&gt;http://www.gbif.org/&lt;/a&gt; (see our package &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;rgbif&lt;/a&gt;), use WKT to specify geospatial extent. Thus, &lt;code&gt;rgbif&lt;/code&gt; shouldn&amp;rsquo;t need to import an entire spatial stack that is hard for some to install only for dealing with a single spatial data format - and only some users will do geospatial queries wih WKT as you can constrain queries simply with country names, while others may not need to constrain spatially. We&amp;rsquo;ve been working on tools to make dealing with WKT more lightweight.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;links: &lt;a href=&#34;https://d17oy1vhnax1f7.cloudfront.net/items/291d412o1c3E3s0R112A/06-103r4_Implementation_Specification_for_Geographic_Information_-_Simple_feature_access_-_Part_1_Common_Architecture_v1.2.1%20(1).pdf&#34;&gt;specification&lt;/a&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Well-known_text&#34;&gt;Wikipedia entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WKT is part of &lt;a href=&#34;https://en.wikipedia.org/wiki/Simple_Features&#34;&gt;Simple Features&lt;/a&gt; (see &lt;code&gt;sf&lt;/code&gt; below)&lt;/li&gt;
&lt;li&gt;Features of note:

&lt;ul&gt;
&lt;li&gt;Character and binary representations&lt;/li&gt;
&lt;li&gt;Supports any coordinate reference system&lt;/li&gt;
&lt;li&gt;Often used in databases to store geospatial information&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ropensci-use-cases&#34;&gt;rOpenSci use cases&lt;/h2&gt;

&lt;p&gt;The motivation for our geospatial tools is supported in part by these use cases for software we make that use WKT and GeoJSON:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web services that some of our packages interact with accept a geospatial filter as a query component. This often means WKT. Having tools that are light weight is important here as we don&amp;rsquo;t need a full geospatial stack when we only need to lint (i.e., validate) WKT or create it from a bounding box, for example.&lt;/li&gt;
&lt;li&gt;Likewise, some web services only accept GeoJSON. Same argument as above applies here.&lt;/li&gt;
&lt;li&gt;Vizualize WKT and GeoJSON: given the above, users should be able to vizualize the area that they are defining with their WKT or GeoJSON.&lt;/li&gt;
&lt;li&gt;WKT-GeoJSON conversion: sometimes one needs to convert WKT to GeoJSON, or vice versa. Light weight tools to do that task are really useful.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;

&lt;p&gt;rOpenSci has a growing suite of database tools:&lt;/p&gt;

&lt;h3 id=&#34;geojson-wkt-tools&#34;&gt;GeoJSON/WKT Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/geojson&#34;&gt;geojson&lt;/a&gt; (geojson classes for R) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/geojsonio&#34;&gt;geojsonio&lt;/a&gt; (I/O for GeoJSON) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropenscilabs/geojsonlint&#34;&gt;geojsonlint&lt;/a&gt; (Lint GeoJSON) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/lawn&#34;&gt;lawn&lt;/a&gt; (Turf.js R client) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropenscilabs/geoaxe&#34;&gt;geoaxe&lt;/a&gt; (split up well known text into chunks) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropenscilabs/wellknown&#34;&gt;wellknown&lt;/a&gt; (Well-Known-Text &amp;lt;&amp;ndash;&amp;gt; GeoJSON) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropenscilabs/geoops&#34;&gt;geoops&lt;/a&gt; (Operations on GeoJSON, sort of like &lt;code&gt;rgeos&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data-data-services&#34;&gt;Data/Data Services&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropenscilabs/geoparser&#34;&gt;geoparser&lt;/a&gt; (Geoparser.io client for place names) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropenscilabs/rgeospatialquality&#34;&gt;rgeospatialquality&lt;/a&gt; (spatial quality of biodiversity records) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropenscilabs/getlandsat&#34;&gt;getlandsat&lt;/a&gt; (Landsat images) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropenscilabs/osmplotr&#34;&gt;osmplotr&lt;/a&gt; (OpenStreeMap data and vizualization) (on CRAN)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropenscilabs/rnaturalearth&#34;&gt;rnaturalearth&lt;/a&gt; (Natural Earth data)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/geonames&#34;&gt;geonames&lt;/a&gt; (Access Geonames.org API) (on CRAN)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;For each package below, there are 2-3 badges. One for whether the package is on CRAN
or not (&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt; if on CRAN, &lt;span class=&#34;label label-default&#34;&gt;cran&lt;/span&gt;
if not), another for link to source on GitHub (&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;),
and another when the package is community contributed (&lt;span class=&#34;label label-success&#34;&gt;community&lt;/span&gt;).&lt;/p&gt;

&lt;h2 id=&#34;geojson-1&#34;&gt;geojson&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/geojson/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/geojson&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re excited to announce a new package &lt;code&gt;geojson&lt;/code&gt;, which is now on CRAN. Check out the vignettes (&lt;a href=&#34;https://cran.rstudio.com/web/packages/geojson/vignettes/geojson.html&#34;&gt;geojson classes&lt;/a&gt;, &lt;a href=&#34;https://cran.rstudio.com/web/packages/geojson/vignettes/geojson-operations.html&#34;&gt;geojson operations&lt;/a&gt;) to get started.&lt;/p&gt;

&lt;p&gt;You can install the package from CRAN:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;geojson&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geojson&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;geojson&lt;/code&gt; package has functions for creating each of the GeoJSON classes from character strings of GeoJSON.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature()&lt;/code&gt; - Feature&lt;/li&gt;
&lt;li&gt;&lt;code&gt;featurecollection()&lt;/code&gt; - FeatureCollection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geometrycollection()&lt;/code&gt; - GeometryCollection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linestring()&lt;/code&gt; - LineString&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multilinestring()&lt;/code&gt; - MultiLineString&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipoint()&lt;/code&gt; - MultiPoint&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipolygon()&lt;/code&gt; - MultiPolygon&lt;/li&gt;
&lt;li&gt;&lt;code&gt;point()&lt;/code&gt; - Point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polygon()&lt;/code&gt; - Polygon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Internally, we perform some basic checks that the string is proper JSON, then if you want to lint
the GeoJSON (see the &lt;code&gt;linting_opts()&lt;/code&gt; function) we&amp;rsquo;ll lint the GeoJSON as well using our
&lt;code&gt;geojsonlint&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Make a &lt;code&gt;Point&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(x &amp;lt;- point(&#39;{ &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [100.0, 0.0] }&#39;))
#&amp;gt; &amp;lt;Point&amp;gt;
#&amp;gt;   coordinates:  [100,0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, you can perform some basic operations, such as adding (&lt;code&gt;properties_add()&lt;/code&gt;) or getting properties (&lt;code&gt;properties_get()&lt;/code&gt;), adding (&lt;code&gt;crs_add()&lt;/code&gt;) or getting CRS (&lt;code&gt;crs_get()&lt;/code&gt;), adding (&lt;code&gt;bbox_add()&lt;/code&gt;) or getting (&lt;code&gt;bbox_get()&lt;/code&gt;) a bounding box. You can calculate a bounding box on your GeoJSON with &lt;code&gt;geo_bbox()&lt;/code&gt;, prettify your GeoJSON with &lt;code&gt;geo_pretty()&lt;/code&gt;, and write your GeoJSON to disk with &lt;code&gt;geo_write()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add and get properties&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(y &amp;lt;- linestring(&#39;{ &amp;quot;type&amp;quot;: &amp;quot;LineString&amp;quot;, &amp;quot;coordinates&amp;quot;: [ [100.0, 0.0], [101.0, 1.0] ]}&#39;))
#&amp;gt; &amp;lt;LineString&amp;gt;
#&amp;gt;   coordinates:  [[100,0],[101,1]]
(z &amp;lt;- y %&amp;gt;% feature() %&amp;gt;% properties_add(population = 1000))
#&amp;gt; {
#&amp;gt;     &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;,
#&amp;gt;     &amp;quot;properties&amp;quot;: {
#&amp;gt;         &amp;quot;population&amp;quot;: 1000
#&amp;gt;     },
#&amp;gt;     &amp;quot;geometry&amp;quot;: {
#&amp;gt;         &amp;quot;type&amp;quot;: &amp;quot;LineString&amp;quot;,
#&amp;gt;         &amp;quot;coordinates&amp;quot;: [
#&amp;gt;             [
#&amp;gt;                 100,
#&amp;gt;                 0
#&amp;gt;             ],
#&amp;gt;             [
#&amp;gt;                 101,
#&amp;gt;                 1
#&amp;gt;             ]
#&amp;gt;         ]
#&amp;gt;     }
#&amp;gt; }
properties_get(z, property = &#39;population&#39;)
#&amp;gt; 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add bbox - without an input, we figure out the 2D bbox for you&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- &#39;{ &amp;quot;type&amp;quot;: &amp;quot;Polygon&amp;quot;,
&amp;quot;coordinates&amp;quot;: [
  [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]
  ]
}&#39;
y &amp;lt;- polygon(x)
y %&amp;gt;% feature() %&amp;gt;% bbox_add()
#&amp;gt; {
#&amp;gt;     &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;,
#&amp;gt;     &amp;quot;properties&amp;quot;: {
#&amp;gt;
#&amp;gt;     },
#&amp;gt;     &amp;quot;geometry&amp;quot;: {
#&amp;gt;         &amp;quot;type&amp;quot;: &amp;quot;Polygon&amp;quot;,
#&amp;gt;         &amp;quot;coordinates&amp;quot;: [
#&amp;gt;             [
#&amp;gt;                 [
#&amp;gt;                     100,
#&amp;gt;                     0
#&amp;gt;                 ],
#&amp;gt;                 [
#&amp;gt;                     101,
#&amp;gt;                     0
#&amp;gt;                 ],
#&amp;gt;                 [
#&amp;gt;                     101,
#&amp;gt;                     1
#&amp;gt;                 ],
#&amp;gt;                 [
#&amp;gt;                     100,
#&amp;gt;                     1
#&amp;gt;                 ],
#&amp;gt;                 [
#&amp;gt;                     100,
#&amp;gt;                     0
#&amp;gt;                 ]
#&amp;gt;             ]
#&amp;gt;         ]
#&amp;gt;     },
#&amp;gt;     &amp;quot;bbox&amp;quot;: [
#&amp;gt;         100,
#&amp;gt;         0,
#&amp;gt;         101,
#&amp;gt;         1
#&amp;gt;     ]
#&amp;gt; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the GeoJSON type&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geo_type(y)
#&amp;gt; [1] &amp;quot;Polygon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty print the GeoJSON&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geo_pretty(y)
#&amp;gt; {
#&amp;gt;     &amp;quot;type&amp;quot;: &amp;quot;Polygon&amp;quot;,
#&amp;gt;     &amp;quot;coordinates&amp;quot;: [
#&amp;gt;         [
#&amp;gt;             [
#&amp;gt;                 100.0,
#&amp;gt;                 0.0
#&amp;gt;             ],
#&amp;gt;             [
#&amp;gt;                 101.0,
#&amp;gt;                 0.0
#&amp;gt;             ],
#&amp;gt;             [
#&amp;gt;                 101.0,
#&amp;gt;                 1.0
#&amp;gt;             ],
#&amp;gt;             [
#&amp;gt;                 100.0,
#&amp;gt;                 1.0
#&amp;gt;             ],
#&amp;gt;             [
#&amp;gt;                 100.0,
#&amp;gt;                 0.0
#&amp;gt;             ]
#&amp;gt;         ]
#&amp;gt;     ]
#&amp;gt; }
#&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write to disk (and read back)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f &amp;lt;- tempfile(fileext = &amp;quot;.geojson&amp;quot;)
geo_write(y, f)
jsonlite::fromJSON(f, FALSE)
#&amp;gt; $type
#&amp;gt; [1] &amp;quot;Polygon&amp;quot;
#&amp;gt;
#&amp;gt; $coordinates
#&amp;gt; $coordinates[[1]]
#&amp;gt; $coordinates[[1]][[1]]
#&amp;gt; $coordinates[[1]][[1]][[1]]
#&amp;gt; [1] 100
#&amp;gt;
#&amp;gt; $coordinates[[1]][[1]][[2]]
#&amp;gt; [1] 0
#&amp;gt;
#&amp;gt;
#&amp;gt; $coordinates[[1]][[2]]
#&amp;gt; $coordinates[[1]][[2]][[1]]
#&amp;gt; [1] 101
#&amp;gt;
#&amp;gt; $coordinates[[1]][[2]][[2]]
#&amp;gt; [1] 0
#&amp;gt;
#&amp;gt;
#&amp;gt; $coordinates[[1]][[3]]
#&amp;gt; $coordinates[[1]][[3]][[1]]
#&amp;gt; [1] 101
#&amp;gt;
#&amp;gt; $coordinates[[1]][[3]][[2]]
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt;
#&amp;gt; $coordinates[[1]][[4]]
#&amp;gt; $coordinates[[1]][[4]][[1]]
#&amp;gt; [1] 100
#&amp;gt;
#&amp;gt; $coordinates[[1]][[4]][[2]]
#&amp;gt; [1] 1
#&amp;gt;
#&amp;gt;
#&amp;gt; $coordinates[[1]][[5]]
#&amp;gt; $coordinates[[1]][[5]][[1]]
#&amp;gt; [1] 100
#&amp;gt;
#&amp;gt; $coordinates[[1]][[5]][[2]]
#&amp;gt; [1] 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, the Mapbox folks have a compact binary encoding for geographic data (&lt;a href=&#34;https://github.com/mapbox/geobuf&#34;&gt;Geobuf&lt;/a&gt;) that provides lossless compression of GeoJSON data into protocol buffers. Our own &lt;a href=&#34;https://ropensci.org/about/#staff&#34;&gt;Jeroen Ooms&lt;/a&gt; added Geobuf serialization to his &lt;a href=&#34;https://github.com/jeroen/protolite&#34;&gt;protolite&lt;/a&gt; package, which we import in &lt;code&gt;geojson&lt;/code&gt; to allow you to read Geobuf with &lt;code&gt;from_geobuf()&lt;/code&gt; and write Geobuf with &lt;code&gt;to_geobuf()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- system.file(&amp;quot;examples/test.pb&amp;quot;, package = &amp;quot;geojson&amp;quot;)
from_geobuf(file, pretty = TRUE)
#&amp;gt; {
#&amp;gt;   &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot;,
#&amp;gt;   &amp;quot;features&amp;quot;: [
#&amp;gt;     {
#&amp;gt;       &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;,
#&amp;gt;       &amp;quot;geometry&amp;quot;: {
#&amp;gt;         &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;,
#&amp;gt;         &amp;quot;coordinates&amp;quot;: [102, 0.5]
#&amp;gt;       },
#&amp;gt;       &amp;quot;id&amp;quot;: 999,
...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;to_geobuf(from_geobuf(file))
#&amp;gt;   [1] 0a 05 70 72 6f 70 30 0a 06 64 6f 75 62 6c 65 0a 0c 6e 65 67 61 74 69
#&amp;gt;  [24] 76 65 5f 69 6e 74 0a 0c 70 6f 73 69 74 69 76 65 5f 69 6e 74 0a 0f 6e
#&amp;gt;  [47] 65 67 61 74 69 76 65 5f 64 6f 75 62 6c 65 0a 0f 70 6f 73 69 74 69 76
#&amp;gt;  [70] 65 5f 64 6f 75 62 6c 65 0a 04 6e 75 6c 6c 0a 05 61 72 72 61 79 0a 06
#&amp;gt;  [93] 6f 62 6a 65 63 74 0a 06 62 6c 61 62 6c 61 0a 07 63 75 73 74 6f 6d 31
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;geoops&#34;&gt;geoops&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;label label-default&#34;&gt;cran&lt;/span&gt; &lt;a href=&#34;https://github.com/ropenscilabs/geoops&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/geoops&#34;&gt;geoops&lt;/a&gt; - &lt;code&gt;geoops&lt;/code&gt; is not quite ready to use yet, but
the goal with &lt;code&gt;geoops&lt;/code&gt; is to provide spatial operations on GeoJSON that work with the &lt;code&gt;geojson&lt;/code&gt;
package. Example operations are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find the set of points that are also in a polygon&lt;/li&gt;
&lt;li&gt;Find centroid of a polygon&lt;/li&gt;
&lt;li&gt;Calculate distance between two points&lt;/li&gt;
&lt;li&gt;Calculate buffer of a given radius around a point&lt;/li&gt;
&lt;li&gt;Combine one or more polygons together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another feature of &lt;code&gt;geoops&lt;/code&gt; we&amp;rsquo;re excited about is slicing up GeoJSON easily by using our
package &lt;a href=&#34;https://github.com/ropensci/jqr&#34;&gt;jqr&lt;/a&gt;. It&amp;rsquo;s similar in concept to using &lt;code&gt;dplyr&lt;/code&gt; for drilling down into
a data.frame, but instead we can do that with GeoJSON.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;note: this package used to be called &lt;code&gt;siftgeojson&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;geojsonio&#34;&gt;geojsonio&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/geojsonio/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/geojsonio&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/geojsonio&#34;&gt;geojsonio&lt;/a&gt; - &lt;code&gt;geojsonio&lt;/code&gt; is a client for making it
easy to convert lots of different things to GeoJSON, and for reading/writing GeoJSON.&lt;/p&gt;

&lt;p&gt;We had a new version (&lt;code&gt;v0.2&lt;/code&gt;) come out in July this year, with major performance improvements to
&lt;code&gt;geojson_json()&lt;/code&gt; - and we&amp;rsquo;ve deprecated GeoJSON linting functionality and now point people
to our package &lt;code&gt;geojsonlint&lt;/code&gt; for all GeoJSON linting tasks.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;geojsonio&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;geojsonio&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geojsonio&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Convert a numeric vector to a GeoJSON &lt;code&gt;Point&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_json(c(32.45, -99.74))
#&amp;gt; {&amp;quot;type&amp;quot;:&amp;quot;FeatureCollection&amp;quot;,&amp;quot;features&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;Feature&amp;quot;,&amp;quot;geometry&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;Point&amp;quot;,&amp;quot;coordinates&amp;quot;:[32.45,-99.74]},&amp;quot;properties&amp;quot;:{}}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read GeoJSON from a file with one simple command and plot it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- system.file(&amp;quot;examples&amp;quot;, &amp;quot;california.geojson&amp;quot;, package = &amp;quot;geojsonio&amp;quot;)
out &amp;lt;- geojson_read(file, what = &amp;quot;sp&amp;quot;)
library(&#39;sp&#39;)
plot(out)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-11-22-geospatial-suite/unnamed-chunk-16-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-16&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;geojsonlint&#34;&gt;geojsonlint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/geojsonlint/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/geojsonlint&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/geojsonlint&#34;&gt;geojsonlint&lt;/a&gt; - &lt;code&gt;geojsonlint&lt;/code&gt; is a client for linting
GeoJSON. It provides three different ways to lint GeoJSON, using: the API at &lt;geojsonlint.com&gt;,
the JS library &lt;code&gt;geojsonhint&lt;/code&gt;, or the JS library &lt;code&gt;is-my-json-valid&lt;/code&gt;. The package provides a consistent
interface to the three different linters, always returning a boolean, and toggles provided for
verbose output and whether to stop when invalid GeoJSON is found.&lt;/p&gt;

&lt;p&gt;We released a new version (&lt;code&gt;v0.2&lt;/code&gt;) this month that uses the newer version of the JS
library &lt;code&gt;geojsonhint&lt;/code&gt;, affecting the &lt;code&gt;geojson_hint()&lt;/code&gt; function. Note that the dev version of
&lt;code&gt;geojsonlint&lt;/code&gt; has an even newer version of the JS &lt;code&gt;geojsonhint&lt;/code&gt; library, so you may want to
upgrade if you&amp;rsquo;re using that linter: &lt;code&gt;devtools::install_github(&amp;quot;ropensci/geojsonlint&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;example-1&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;geojsonlint&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;geojsonlint&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geojsonlint&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good GeoJSON&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_hint(x = &#39;{&amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;, &amp;quot;coordinates&amp;quot;: [-100, 80]}&#39;)
#&amp;gt; [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bad GeoJSON&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geojson_hint(&#39;{ &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot; }&#39;)
#&amp;gt; [1] FALSE
geojson_hint(&#39;{ &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot; }&#39;, verbose = TRUE)
#&amp;gt; [1] FALSE
#&amp;gt; attr(,&amp;quot;errors&amp;quot;)
#&amp;gt;   line                    message
#&amp;gt; 1    1 &amp;quot;features&amp;quot; member required
geojson_hint(&#39;{ &amp;quot;type&amp;quot;: &amp;quot;FeatureCollection&amp;quot; }&#39;, error = TRUE)
#&amp;gt; Error: Line 1
#&amp;gt;        - &amp;quot;features&amp;quot; member required
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lawn&#34;&gt;lawn&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/lawn/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/lawn&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/lawn&#34;&gt;lawn&lt;/a&gt; - &lt;code&gt;lawn&lt;/code&gt; is an R client wrapping &lt;a href=&#34;http://turfjs.org/&#34;&gt;Turf.js&lt;/a&gt;
from Mapbox. Turf is a JS library for doing advanced geospatial analysis. Using the great &lt;a href=&#34;https://github.com/jeroen/v8&#34;&gt;V8&lt;/a&gt;
R client from &lt;a href=&#34;https://ropensci.org/about/#staff&#34;&gt;Jeroen Ooms&lt;/a&gt; we can wrap Turf.js
in R.&lt;/p&gt;

&lt;p&gt;We released a new version (&lt;code&gt;v0.3&lt;/code&gt;) late last month that is a big change from the previous
version as we now wrap the newest version of Turf &lt;code&gt;v3.5.2&lt;/code&gt; that dropped a number of methods,
and introduced new ones.&lt;/p&gt;

&lt;h3 id=&#34;example-2&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;lawn&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;lawn&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;lawn&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calcuate distance (default: km) between two points&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;from &amp;lt;- &#39;{
 &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;,
 &amp;quot;properties&amp;quot;: {},
 &amp;quot;geometry&amp;quot;: {
   &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;,
   &amp;quot;coordinates&amp;quot;: [-75.343, 39.984]
 }
}&#39;
to &amp;lt;- &#39;{
  &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;,
  &amp;quot;properties&amp;quot;: {},
  &amp;quot;geometry&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;,
    &amp;quot;coordinates&amp;quot;: [-75.534, 39.123]
  }
}&#39;
lawn_distance(from, to)
#&amp;gt; [1] 97.15958
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Buffer a point (with distance of 5 km)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pt &amp;lt;- &#39;{
 &amp;quot;type&amp;quot;: &amp;quot;Feature&amp;quot;,
 &amp;quot;properties&amp;quot;: {},
 &amp;quot;geometry&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;Point&amp;quot;,
    &amp;quot;coordinates&amp;quot;: [-90.548630, 14.616599]
  }
}&#39;
lawn_buffer(pt, dist = 5)
#&amp;gt; &amp;lt;Feature&amp;gt;
#&amp;gt;   Type: Polygon
#&amp;gt;   Bounding box: -90.6 14.6 -90.5 14.7
#&amp;gt;   No. points: 66
#&amp;gt;   Properties: NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;geonames&#34;&gt;geonames&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/geonames/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/geonames&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;label label-success&#34;&gt;community&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/geonames&#34;&gt;geonames&lt;/a&gt; - &lt;code&gt;geonames&lt;/code&gt; is an R client for the
&lt;geonames.org&gt; web service, that allows you to query for global geographic data such
as administrative areas, populated places, and more.&lt;/p&gt;

&lt;h3 id=&#34;example-3&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;geonames&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;geonames&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geonames&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Search for place names with by place name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;GNsearch(q = &#39;london&#39;, maxRows = 10)
#&amp;gt;    adminCode1       lng geonameId             toponymName countryId fcl
#&amp;gt; 1         ENG  -0.12574   2643743                  London   2635167   P
#&amp;gt; 2          08 -81.23304   6058560                  London   6251999   P
#&amp;gt; 3         ENG  -0.09184   2643741          City of London   2635167   P
#&amp;gt; 4          05  27.91162   1006984             East London    953987   P
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the ISO country code for a given lat/long:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;GNcountryCode(lat = 47.03, lng = 10.2)
#&amp;gt; $languages
#&amp;gt; [1] &amp;quot;de-AT,hr,hu,sl&amp;quot;
#&amp;gt;
#&amp;gt; $distance
#&amp;gt; [1] &amp;quot;0&amp;quot;
#&amp;gt;
#&amp;gt; $countryCode
#&amp;gt; [1] &amp;quot;AT&amp;quot;
#&amp;gt;
#&amp;gt; $countryName
#&amp;gt; [1] &amp;quot;Republic of Austria&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;geoparser&#34;&gt;geoparser&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/geoparser/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropenscilabs/geoparser&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;label label-success&#34;&gt;community&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/geoparser&#34;&gt;geoparser&lt;/a&gt; - &lt;code&gt;geoparser&lt;/code&gt; is an interface
to the Geoparser.io API for Identifying and Disambiguating Places Mentioned in Text&lt;/p&gt;

&lt;h3 id=&#34;example-4&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;geoparser&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;geoparser&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;geoparser&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a very simple example, send a small string to get geoparsed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;output &amp;lt;- geoparser_q(&amp;quot;I was born in Vannes and I live in Barcelona&amp;quot;)
output$results
#&amp;gt; # A tibble: 2 × 11
#&amp;gt;   country confidence      name admin1                                           type geometry.type longitude latitude reference1 reference2
#&amp;gt; *   &amp;lt;chr&amp;gt;     &amp;lt;fctr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;                                          &amp;lt;chr&amp;gt;        &amp;lt;fctr&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
#&amp;gt; 1      FR          1    Vannes     A2 seat of a second-order administrative division         Point  -2.75000 47.66667         14         20
#&amp;gt; 2      ES          1 Barcelona     56  seat of a first-order administrative division         Point   2.15899 41.38879         35         44
#&amp;gt; # ... with 1 more variables: text_md5 &amp;lt;chr&amp;gt;
output$properties
#&amp;gt; # A tibble: 1 × 4
#&amp;gt;   apiVersion       source                    id                         text_md5
#&amp;gt; *     &amp;lt;fctr&amp;gt;       &amp;lt;fctr&amp;gt;                &amp;lt;fctr&amp;gt;                            &amp;lt;chr&amp;gt;
#&amp;gt; 1      0.4.1 geoparser.io 7Mp287nh6XbbH0QMojB6L 51e05aeb3366e55795a9729dd74ae901
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;properties&lt;/code&gt; data.frame gives some metadata for your request, while the
&lt;code&gt;results&lt;/code&gt; data.frame gives results of the geoparsing, including the
name found, the type of geospatial thing, geometry type, and coordinates.&lt;/p&gt;

&lt;h2 id=&#34;rgeospatialquality&#34;&gt;rgeospatialquality&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/rgeospatialquality/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropenscilabs/rgeospatialquality&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;label label-success&#34;&gt;community&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/rgeospatialquality&#34;&gt;rgeospatialquality&lt;/a&gt; - &lt;code&gt;rgeospatialquality&lt;/code&gt;
is an R client for the &lt;a href=&#34;http://api-geospatial.vertnet-portal.appspot.com/geospatial&#34;&gt;Geospatial Data Quality API&lt;/a&gt;
that detects geospatial quality issues with geostpaial biodiversity occurrence data.&lt;/p&gt;

&lt;h3 id=&#34;example-5&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;rgeospatialquality&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;rgeospatialquality&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;rgeospatialquality&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make a simple occurrence record:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rec &amp;lt;- list(
  decimalLatitude = 42.1833,
  decimalLongitude = -1.8332,
  countryCode = &amp;quot;ES&amp;quot;,
  scientificName = &amp;quot;Puma concolor&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pass the record to the API:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;parse_record(record = rec)
#&amp;gt; $hasCoordinates
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $validCountry
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $validCoordinates
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $hasCountry
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $coordinatesInsideCountry
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $hasScientificName
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $highPrecisionCoordinates
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $coordinatesInsideRangeMap
#&amp;gt; [1] FALSE
#&amp;gt;
#&amp;gt; $nonZeroCoordinates
#&amp;gt; [1] TRUE
#&amp;gt;
#&amp;gt; $distanceToRangeMapInKm
#&amp;gt; [1] 6874.023
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results is a named list, with results for various aspects of geospatial quality, including
whether the record has coordinates, whether the country is valid, whether the coordinates
are valid, and more.&lt;/p&gt;

&lt;h2 id=&#34;getlandsat&#34;&gt;getlandsat&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/getlandsat/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropenscilabs/getlandsat&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/getlandsat&#34;&gt;getlandsat&lt;/a&gt; - &lt;code&gt;getlandsat&lt;/code&gt; provides
access to Landsat &lt;a href=&#34;https://landsat.usgs.gov&#34;&gt;https://landsat.usgs.gov&lt;/a&gt; 8 metadata and images hosted on
AWS S3 at &lt;a href=&#34;https://aws.amazon.com/public-data-sets/landsat&#34;&gt;https://aws.amazon.com/public-data-sets/landsat&lt;/a&gt;. The package only
fetches data. It does not attempt to aid users in downstream usage.&lt;/p&gt;

&lt;h3 id=&#34;example-6&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;getlandsat&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;getlandsat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;getlandsat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get an image (see &lt;code&gt;lsat_list()&lt;/code&gt;, &lt;code&gt;lsat_scenes()&lt;/code&gt;, &lt;code&gt;lsat_scene_files()&lt;/code&gt; to find/search
for images):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lsat_image(&amp;quot;LC80101172015002LGN00_B5.TIF&amp;quot;)
#&amp;gt; [1] &amp;quot;/Users/sacmac/Library/Caches/landsat-pds/L8/010/117/LC80101172015002LGN00/LC80101172015002LGN00_B5.TIF&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make a plot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;raster&amp;quot;)
x &amp;lt;- lsat_cache_details()[[1]]
img &amp;lt;- raster(x$file)
plot(img)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-11-22-geospatial-suite/unnamed-chunk-39-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-39&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;osmplotr&#34;&gt;osmplotr&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/osmplotr/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropenscilabs/osmplotr&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;label label-success&#34;&gt;community&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/osmplotr&#34;&gt;osmplotr&lt;/a&gt; - &lt;code&gt;osmplotr&lt;/code&gt; produces customisable
images of &lt;a href=&#34;https://www.openstreetmap.org/&#34;&gt;OpenStreetMap (OSM)&lt;/a&gt; data and enables data
visualisation using OSM objects.&lt;/p&gt;

&lt;h3 id=&#34;example-7&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;osmplotr&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;osmplotr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;osmplotr&amp;quot;)
library(&amp;quot;maptools&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make a basic map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bbox &amp;lt;- get_bbox(latlon = c(-0.13,51.50,-0.11,51.52))
dat_B &amp;lt;- extract_osm_objects(key = &#39;building&#39;, bbox = bbox)
map &amp;lt;- osm_basemap(bbox = bbox, bg = &#39;gray20&#39;)
map &amp;lt;- add_osm_objects(map, dat_B, col = &#39;gray40&#39;)
print_osm_map(map)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-11-22-geospatial-suite/osmplotr_plot.png&#34; alt=&#34;osmplot&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;rnaturalearth&#34;&gt;rnaturalearth&lt;/h2&gt;

&lt;p&gt;&lt;span class=&#34;label label-default&#34;&gt;cran&lt;/span&gt; &lt;a href=&#34;https://github.com/ropenscilabs/rnaturalearth&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;label label-success&#34;&gt;community&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ropenscilabs/rnaturalearth&#34;&gt;rnaturalearth&lt;/a&gt; - &lt;code&gt;rnaturalearth&lt;/code&gt;
facilitates world mapping by making Natural Earth (&lt;a href=&#34;http://www.naturalearthdata.com/&#34;&gt;http://www.naturalearthdata.com/&lt;/a&gt;)
map data available in R.&lt;/p&gt;

&lt;h3 id=&#34;example-8&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;rnaturalearth&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;ropenscilabs/rnaturalearth&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;rnaturalearth&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some data comes installed with &lt;code&gt;rnaturalearth&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sp::plot(ne_countries())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-11-22-geospatial-suite/unnamed-chunk-45-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-45&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can also download specific data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rivers50 &amp;lt;- ne_download(scale = 50, type = &#39;rivers_lake_centerlines&#39;,
                        category = &#39;physical&#39;)
#&amp;gt; OGR data source with driver: ESRI Shapefile
#&amp;gt; Source: &amp;quot;/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//Rtmp8yl7Kj&amp;quot;, layer: &amp;quot;ne_50m_rivers_lake_centerlines&amp;quot;
#&amp;gt; with 460 features
#&amp;gt; It has 4 fields
sp::plot(rivers50)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2016-11-22-geospatial-suite/unnamed-chunk-46-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-46&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;future-ongoing-work&#34;&gt;Future/Ongoing work&lt;/h2&gt;

&lt;p&gt;We still have a lot that we&amp;rsquo;d like to do. Here&amp;rsquo;s a run down of some of the items on our list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geoops&lt;/code&gt; first version: We need to get &lt;code&gt;geoops&lt;/code&gt; to a first stable version on
CRAN. It will likely be a few months before that happens, as we&amp;rsquo;re experimenting
with how to achieve the best performance, whether that be via &lt;code&gt;jqr&lt;/code&gt; or dropping
down to C/C++.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geojson&lt;/code&gt; - We just released the first version - We&amp;rsquo;ll be integrating &lt;code&gt;geojson&lt;/code&gt;
into some of our other packages that deal with GeoJSON, and may hit upon
some improvements we can make to &lt;code&gt;geojson&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wellknown&lt;/code&gt; fixes: We&amp;rsquo;re working on our next version of this package, see
&lt;a href=&#34;https://github.com/ropensci/wellknown/milestone/2&#34;&gt;milestone v0.2&lt;/a&gt;, which includes
making sure we account for 3D/4D WKT (&lt;a href=&#34;https://github.com/ropensci/wellknown/issues/18&#34;&gt;issue #18&lt;/a&gt;),
among other things, and there&amp;rsquo;s a possibility of changing the package interface to be slightly
more intuitive (&lt;a href=&#34;https://github.com/ropensci/wellknown/issues/17&#34;&gt;issue #17&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geojsonio&lt;/code&gt;: &lt;a href=&#34;https://github.com/ropensci/geojsonio/milestone/3&#34;&gt;milestone v0.3&lt;/a&gt;
has a number of bug fixes, and includes methods integrating the new &lt;a href=&#34;https://cran.rstudio.com/web/packages/sf/&#34;&gt;sf&lt;/a&gt; package.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geojsonrewind&lt;/code&gt;: The new &lt;a href=&#34;https://tools.ietf.org/html/rfc7946&#34;&gt;GeoJSON specification&lt;/a&gt; now has a rule about
polygons following a &lt;a href=&#34;https://tools.ietf.org/html/rfc7946#section-3.1.6&#34;&gt;right-hand rule&lt;/a&gt;.
We&amp;rsquo;re porting some of Mapbox&amp;rsquo;s JS stuff to R in &lt;a href=&#34;https://github.com/ropenscilabs/geojsonrewind&#34;&gt;geojsonrewind&lt;/a&gt; package
to be help users fix winding order.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;takeaway-and-feedback&#34;&gt;Takeaway and Feedback&lt;/h2&gt;

&lt;p&gt;Our goal with our geospatial suite is to make your work &amp;ndash; whether it be serious
reproducible science, analysis of your company&amp;rsquo;s data, or just fooling around with
some data &amp;ndash; as easy as possible with as few installation headaches as possible.&lt;/p&gt;

&lt;p&gt;How are you using our geospatial tools? We&amp;rsquo;d love to hear about how you&amp;rsquo;re using
our packages, whether it be in blog posts, scholarly papers, shiny apps, business
use cases, etc.&lt;/p&gt;

&lt;p&gt;Let us know if you have any feedback on these packages, and/or if you think
there&amp;rsquo;s anything else we should be thinking about making in this space.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;community-contributors&#34;&gt;Community contributors&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re so so grateful to our community for their hard work on these packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/masalmon&#34;&gt;Maëlle Salmon&lt;/a&gt; - &lt;code&gt;geoparser&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ateucher&#34;&gt;Andy Teucher&lt;/a&gt; - &lt;code&gt;geojsonio&lt;/code&gt;, &lt;code&gt;geojsonlint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jhollist&#34;&gt;Jeff Hollister&lt;/a&gt; - &lt;code&gt;lawn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mpadge&#34;&gt;Mark Padgham&lt;/a&gt; - &lt;code&gt;osmplotr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AndySouth&#34;&gt;Andy South&lt;/a&gt; - &lt;code&gt;rnaturalearth&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jotegui&#34;&gt;Javier Otegui&lt;/a&gt; - &lt;code&gt;rgeospatialquality&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/barryrowlingson&#34;&gt;Barry Rowlingson&lt;/a&gt; - &lt;code&gt;geonames&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- links --&gt;

&lt;!-- references --&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Harsch, M. A., &amp;amp; HilleRisLambers, J. (2016). Climate Warming and Seasonal Precipitation Change Interact to Limit Species Distribution Shifts across Western North America. PLoS ONE, 11(7), e0159184. &lt;a href=&#34;https://doi.org/10.1371/journal.pone.0159184&#34;&gt;https://doi.org/10.1371/journal.pone.0159184&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
