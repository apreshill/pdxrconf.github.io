<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jsonlite on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/jsonlite/</link>
    <description>Recent content in Jsonlite on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 04 Jan 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/jsonlite/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Update jsonlite 1.2</title>
      <link>https://ropensci.org/technotes/2017/01/04/jsonlite-12/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/technotes/2017/01/04/jsonlite-12/</guid>
      <description>
        
        

&lt;p&gt;A new version of &lt;a href=&#34;https://cran.r-project.org/web/packages/jsonlite/index.html&#34;&gt;jsonlite&lt;/a&gt; package to CRAN. This is a maintenance release with enhancements and bug fixes. A summary of changes in v1.2 from the &lt;a href=&#34;https://cran.r-project.org/web/packages/jsonlite/NEWS&#34;&gt;NEWS&lt;/a&gt; file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;read_json&lt;/code&gt; and &lt;code&gt;write_json&lt;/code&gt; convenience wrappers, &lt;a href=&#34;https://github.com/jeroen/jsonlite/issues/161&#34;&gt;#161&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;modp_numtoa&lt;/code&gt; from upstream, fixes a rounding issue in &lt;a href=&#34;https://github.com/jeroen/jsonlite/issues/148&#34;&gt;#148&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ensure &lt;code&gt;asJSON.POSIXt&lt;/code&gt; does not use sci notation for negative values, &lt;a href=&#34;https://github.com/jeroen/jsonlite/issues/155&#34;&gt;#155&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tweak &lt;code&gt;num_to_char&lt;/code&gt; to properly print large negative numbers&lt;/li&gt;
&lt;li&gt;Performance optimization for simplyfing data frames (see below)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use the &lt;em&gt;Github compare&lt;/em&gt; page to see the full diff on &lt;a href=&#34;https://github.com/cran/jsonlite/compare/1.1...1.2&#34;&gt;metacran&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;new-read-write-api&#34;&gt;New read/write API&lt;/h2&gt;

&lt;p&gt;The package has gained new high level functions &lt;code&gt;read_json&lt;/code&gt; and &lt;code&gt;write_json&lt;/code&gt;. These are &lt;a href=&#34;https://github.com/cran/jsonlite/blob/1.2/R/read_json.R#L18-L29&#34;&gt;wrappers&lt;/a&gt; for &lt;code&gt;fromJSON&lt;/code&gt; and &lt;code&gt;toJSON&lt;/code&gt; which read/write json directly from/to disk. This API is consistent with tidyverse packages like readr, readxl and haven (see &lt;a href=&#34;https://github.com/jeroen/jsonlite/issues/161&#34;&gt;#161&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The only thing to note is that &lt;code&gt;read_json&lt;/code&gt; does not simplify by default, as is done by &lt;code&gt;fromJSON&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Write Data frame to a temp file
tmp &amp;lt;- tempfile()
write_json(iris, tmp)

# Nested lists
read_json(tmp)

# A data frame
read_json(tmp, simplifyVector = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how &lt;code&gt;read_json&lt;/code&gt; only returns a data frame when &lt;code&gt;simplifyVector&lt;/code&gt; is explicitly set to &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;performance-enhancements&#34;&gt;Performance enhancements&lt;/h2&gt;

&lt;p&gt;We have ported a bit of C code to optimize simplification for data frame structures. This script compares performance for both versions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# example json
json &amp;lt;- jsonlite::toJSON(ggplot2::diamonds)

# Test with jsonlite 1.1
devtools::install_github(&amp;quot;cran/jsonlite@1.1&amp;quot;)
microbenchmark::microbenchmark(jsonlite::fromJSON(json), times = 50)

# Unload jsonlite 1.1 (might need restart R on windows)
unloadNamespace(&amp;quot;jsonlite&amp;quot;)
library.dynam.unload(&#39;jsonlite&#39;, find.package(&#39;jsonlite&#39;))

# Test with jsonlite 1.2
devtools::install_github(&amp;quot;cran/jsonlite@1.2&amp;quot;)
microbenchmark::microbenchmark(jsonlite::fromJSON(json), times = 50)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On my Macbook this has reduced the median time from approx 0.91s to 0.76s.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
