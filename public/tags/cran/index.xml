<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cran on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/cran/</link>
    <description>Recent content in Cran on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 25 Jul 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/cran/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>notary - Signing &amp; Verification of R Packages</title>
      <link>https://ropensci.org/blog/2017/07/25/notary/</link>
      <pubDate>Tue, 25 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/07/25/notary/</guid>
      <description>
        
        

&lt;p&gt;Most of us who work in R just want to Get Stuff Done&amp;trade;. We want a minimum amount of friction between ourselves and the data we need to wrangle, analyze, and visualize. We&amp;rsquo;re focused on solving a problem or gaining insights into a new area of research. We rely on a rich, community-driven ecosystem of packages to help get our work done and likely make an unconscious assumption that there is a safety net out there, protecting us from harm.&lt;/p&gt;

&lt;p&gt;Unfortunately, I get to be &amp;ldquo;that guy&amp;rdquo; who comes along and shatters such assumptions. It&amp;rsquo;s time to put our hard hats on, get our clipboards out, and take a safety inspection tour of R. Along the way, we&amp;rsquo;ll introduce features and design concepts of our rOpenSci #runconf17 project &amp;mdash; the &lt;a href=&#34;https://github.com/ropenscilabs/notary&#34;&gt;&lt;code&gt;notary&lt;/code&gt; package&lt;/a&gt; &amp;mdash; that are aimed at making working in R a bit safer and more secure.&lt;/p&gt;

&lt;h2 id=&#34;meet-the-team&#34;&gt;Meet The Team&lt;/h2&gt;

&lt;p&gt;Since we say &amp;ldquo;we&amp;rdquo; quite a bit in this post, here are the folks that are represented by those two letters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/richfitz&#34;&gt;Rich FitzJohn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ironholds&#34;&gt;Oliver Keyes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stephlocke&#34;&gt;Stephanie Locke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jeroen&#34;&gt;Jeroen Ooms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hrbrmstr/&#34;&gt;Bob Rudis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Since &amp;ldquo;Bob&amp;rdquo; typed out the post, I get to insert what a privilege it was to work with those four folks. They&amp;rsquo;re incredibly talented individuals doing really great work for the R community.)&lt;/p&gt;

&lt;h2 id=&#34;cran-trust-needs-verification&#34;&gt;CRAN : Trust Needs Verification&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ropenscilabs/notary/master/img/trust.jpg&#34;/&gt;&lt;/center&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Before we go into the concept of package trust, we&amp;rsquo;d like you to put one finger on this blog post (to hold the page) and switch over to your R console and verify what CRAN mirror you are using. Since you&amp;rsquo;re down to one hand you can copy and paste this snippet: &lt;code&gt;options(&amp;quot;repos&amp;quot;)&lt;/code&gt; and review the results.&lt;/p&gt;

&lt;p&gt;If any URL in that list doesn&amp;rsquo;t start with &lt;code&gt;https://&lt;/code&gt; replace it with one from &lt;a href=&#34;https://cran.rstudio.com/mirrors.html&#34;&gt;this official mirror list&lt;/a&gt; that does (you will likely need to use both hands for that, so make sure you leave the browser tab open). If you don&amp;rsquo;t use a crytographically secure method of installing packages, then everyone from your ISP, to your employer, to the government (depending on where you reside) can see what packages you&amp;rsquo;re downloading and installing. Furthermore, using plain ol&amp;rsquo; &lt;code&gt;http://&lt;/code&gt; means it&amp;rsquo;s far easier for those who would seek to do you harm to intercept and switch out the contents of what you&amp;rsquo;re retrieving.&lt;/p&gt;

&lt;p&gt;Now, that you&amp;rsquo;re sure you&amp;rsquo;re using &lt;code&gt;https://&lt;/code&gt;, consider how much you know about the CRAN mirror you just picked. Are you &lt;em&gt;sure&lt;/em&gt; that you can either trust the site or at least trust that the site is maintained sufficiently to deter attackers who would seek to do you (or the community) harm? Running a secure site is non-trivial and, like it or not, &amp;ldquo;data science&amp;rdquo; is one of the fastest growth areas in virtually every modern organization (commercial or academic). Such a condition is a natural attractor for attackers and while the R package ecosystem may not be in the top ten most sinister threat scenarios (for now), it will be easy to take advantage of in its current state.&lt;/p&gt;

&lt;p&gt;To that end, the team came up with the concept of &lt;em&gt;signing&lt;/em&gt; packages (hence the &lt;code&gt;notary&lt;/code&gt; name). Without taking you down a deep dive into &lt;a href=&#34;https://en.wikipedia.org/wiki/Digital_signature&#34;&gt;digital signatures&lt;/a&gt;, you&amp;rsquo;re already familiar with this concept if you use something like an iOS-based device (i.e. iPhone or iPad) and have downloaded an app from the Apple app store. A developer applies for a developer account with Apple. They get a key. They make an app. They digitally sign the app with the key they received. Apple reviews the app and (usually)eventually approves it. The signed app goes into the store and your iOS device (if you haven&amp;rsquo;t &amp;ldquo;rooted&amp;rdquo; it) is configured to only run signed and approved apps.&lt;/p&gt;

&lt;p&gt;There are three functions in &lt;code&gt;notary&lt;/code&gt; to help facilitate a more secure package ecosystem &amp;mdash; &lt;code&gt;install_packages()&lt;/code&gt;, &lt;code&gt;download_packages()&lt;/code&gt; &amp;amp; &lt;code&gt;available_packages()&lt;/code&gt; &amp;mdash; each of which is a thin wrapper around their base, dotted counterparts which ultimately will require modifications to CRAN mirrors to house digital signatures for packages and CRAN mirror sites themselves.&lt;/p&gt;

&lt;p&gt;Why all this extra infrastructure and scaffolding? If we think of the R Core/CRAN team as the R equivalent of the Apple app store guardians, then when they review and approve a package that version becomes the gold standard. But, there&amp;rsquo;s no current, easy, complete way to know for sure that what&amp;rsquo;s on &lt;code&gt;cran.r-project.org&lt;/code&gt; is also what&amp;rsquo;s on one of the mirror sites.&lt;/p&gt;

&lt;p&gt;By having a similar set of signing and validation idioms, it will be possible to ensure that what you think you&amp;rsquo;re getting from a CRAN repository is what was approved by the CRAN team. We still need to get one &amp;ldquo;secure&amp;rdquo; mirror setup to enable a proof-of-concept, so stay tuned for advancements in this area.&lt;/p&gt;

&lt;h2 id=&#34;a-sheriff-for-the-wild-wild-west-i-e-making-github-safer&#34;&gt;A Sheriff for the Wild, Wild West (i.e. Making GitHub Safer)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ropenscilabs/notary/master/img/badge.png&#34; align=&#34;right&#34;/&gt; While the CRAN distribution model is not perfect, it&amp;rsquo;s Fort Knox compared to GitHub.&lt;/p&gt;

&lt;p&gt;Oh, but before we go into that, you should check out some extremely cutting edge functionality &lt;a href=&#34;https://github.com/hadley&#34;&gt;Hadley&lt;/a&gt; and others are putting into &lt;code&gt;purrr&lt;/code&gt;. Just do a quick &lt;code&gt;devtools::install_github(&amp;quot;hadlley/purrr&amp;quot;)&lt;/code&gt; bring up the help for the new &lt;em&gt;threaded&lt;/em&gt; parallel execution of &lt;code&gt;map()&lt;/code&gt;: &lt;code&gt;map_t()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, you know this is a post about security &amp;amp; R so hopefully your Spidey-sense was triggered and you knew enough not to even try that or you caught the &lt;code&gt;ll&lt;/code&gt; before you did the copy/paste. If you did end up doing the install attempt, be a &lt;em&gt;teensy&lt;/em&gt; bit thankful that I deleted the &lt;code&gt;hadlley&lt;/code&gt; account before I wrote the post.&lt;/p&gt;

&lt;p&gt;GitHub (and other public code repositories) are wonderful places where folks can collaborate and share creations. They are also fraught with peril. This is easily demonstrated by this proof-of-concept R package &lt;a href=&#34;https://github.com/hrbrmstr/rpwnd&#34;&gt;&lt;code&gt;rpwnd&lt;/code&gt;&lt;/a&gt;. Since GitHub is the most popular public R package development area, we&amp;rsquo;ll focus on it for the remainder of this section.&lt;/p&gt;

&lt;p&gt;One way to begin to mitigate the threat of GitHub package distribution is to impose some rules and provide a means to ensure some level of authenticity at the author and release level. To that end, we have two core functions: &lt;code&gt;install_release()&lt;/code&gt; and &lt;code&gt;validate_release()&lt;/code&gt; that rely on a setting that most of you likely do not have enabled in GitHub - &lt;a href=&#34;https://github.com/settings/keys&#34;&gt;PGP keys&lt;/a&gt;. You can read up on &lt;a href=&#34;https://help.github.com/articles/signing-commits-with-gpg/&#34;&gt;GitHub &amp;amp; PGP&lt;/a&gt; but you should really keep one finger on this page (again) and go check out &lt;a href=&#34;https://mikegerwitz.com/papers/git-horror-story.html&#34;&gt;&lt;em&gt;A Git Horror Story: Repository Integrity With Signed Commits&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Back? Good. Let&amp;rsquo;s continue.&lt;/p&gt;

&lt;p&gt;The premise is simple: only install actual releases (which is a good idea anyway) and only, then, install &lt;em&gt;signed&lt;/em&gt; releases. &lt;em&gt;This is not a panacea&lt;/em&gt; and does not fix all the security &amp;amp; integrity problems associated with the GitHub distribution model, but if combined with some manual inspection of the repository and repo owner profile it will help ensure that you&amp;rsquo;re somewhat closer to getting benign code.&lt;/p&gt;

&lt;p&gt;This functionality is available today. So go setup your own PGP keys, add them to your owner profile and start generating signed releases.&lt;/p&gt;

&lt;h2 id=&#34;source-sources-safely-with-signatures&#34;&gt;Source Sources Safely With Signatures&lt;/h2&gt;

&lt;p&gt;Rounding out the feature set are two functions &lt;code&gt;source_safe_sign()&lt;/code&gt; and &lt;code&gt;sys_source_safe_sign()&lt;/code&gt; which are more secure (well, at least safer) wrappers for their dotted base siblings.&lt;/p&gt;

&lt;p&gt;I literally break down into tears when I see a &lt;code&gt;source()&lt;/code&gt; suggestion posted anywhere, especially to non-&lt;code&gt;https://&lt;/code&gt; URLs. Why? Even if you did a manual inspection at one point in time that the code is not malicious, how do you know that it hasn&amp;rsquo;t been modified since then? Their &lt;code&gt;devtools&lt;/code&gt; counterparts (&lt;code&gt;source_gist()&lt;/code&gt;/&lt;code&gt;source_url()&lt;/code&gt;) are a tad better, provided they you use &lt;code&gt;sha1&lt;/code&gt; parameter to ensure that what you think you are sourcing hasn&amp;rsquo;t changed.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;notary&lt;/code&gt; sourcers go one step further and use a &lt;a href=&#34;https://github.com/jeroen/sodium&#34;&gt;&lt;code&gt;sodium&lt;/code&gt;&lt;/a&gt;-based signature to verify the integrity of the source code you so desperately want to use via this methodology. These functions need some kinder, gentler companion functions to make it easier for all users to sign scripts, so you&amp;rsquo;ll have to check back for those as we continue to poke at the project.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ropenscilabs/notary/master/img/reliable.png&#34;&gt;&lt;/center&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;collaborating-for-community-safety&#34;&gt;Collaborating for Community Safety&lt;/h2&gt;

&lt;p&gt;While we have a great start at building a foundation of safer and more secure R package and code delivery, the best part of building the &lt;code&gt;notary&lt;/code&gt; package was working with a team who genuinely wants to help ensure that the R community can operate as safely as possible without garish, creativity-crushing impediments. Rich, Oliver, Stephanie and Jeroen all had clever ideas for tough problems and we&amp;rsquo;ll hopefully be able to continue to make small steps towards progress.&lt;/p&gt;

&lt;h2 id=&#34;jump-on-the-crazy-train-with-us&#34;&gt;Jump on the Crazy Train With Us!&lt;/h2&gt;

&lt;p&gt;Hopefully we&amp;rsquo;ve helped folks understand some of the dangers that are out there and further demonstrated that we&amp;rsquo;ve begun to address some of them with the &lt;code&gt;notary&lt;/code&gt; package. If the idea of helping find ways to keep data science folks safer has piqued your interest, please do not hesitate to contact any of the team. We&amp;rsquo;d love to engage with more of the community on &lt;code&gt;notary&lt;/code&gt;, and would love feedback on usability and ideas for new or improved functionality.&lt;/p&gt;

&lt;p&gt;Thank you, again, to rOpenSci for the opportunity to come together and collaborate on this project.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advanced Image-Processing in R with Magick, Part I</title>
      <link>https://ropensci.org/blog/2016/08/23/z-magick-release/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2016/08/23/z-magick-release/</guid>
      <description>
        
        

&lt;p&gt;The new &lt;a href=&#34;https://cran.r-project.org/web/packages/magick/index.html&#34;&gt;magick&lt;/a&gt; package is an ambitious effort to modernize and simplify high-quality image processing in R. It wraps the &lt;a href=&#34;https://www.imagemagick.org/Magick++/STL.html&#34;&gt;ImageMagick STL&lt;/a&gt; which is perhaps the most comprehensive open-source image processing library available today.&lt;/p&gt;

&lt;p&gt;The ImageMagick library has an overwhelming amount of functionality. The current version of Magick exposes a decent chunk of it, but being a first release, documentation is still sparse. This post briefly introduces the most important concepts to get started. There will also be an &lt;a href=&#34;https://github.com/ropensci/commcalls/issues/11&#34;&gt;rOpenSci community call&lt;/a&gt; on Wednesday in which we demonstrate basic functionality.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;On Windows or OS-X the package is most easily installed via CRAN.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;magick&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Linux you need to install the ImageMagick++ library: on Debian/Ubuntu this is called &lt;a href=&#34;https://packages.debian.org/testing/libmagick++-dev&#34;&gt;libmagick++-dev&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install libmagick++-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Fedora or CentOS/RHEL we need &lt;a href=&#34;https://apps.fedoraproject.org/packages/ImageMagick-c++-devel&#34;&gt;ImageMagick-c++-devel&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install ImageMagick-c++-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install from source on OS-X you need &lt;code&gt;imagemagick&lt;/code&gt; from homebrew.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install imagemagick --with-fontconfig --with-librsvg --with-fftw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default imagemagick configuration on homebrew disables a bunch of features. I recommend you install &lt;code&gt;--with-fontconfig&lt;/code&gt; and &lt;code&gt;--with-librsvg&lt;/code&gt; to get high quality font / svg rendering (the CRAN OSX binary package enables these as well).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(magick)
magick_config()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;magick_config&lt;/code&gt; to see which features and formats are supported by your version of ImageMagick.&lt;/p&gt;

&lt;h2 id=&#34;reading-and-writing&#34;&gt;Reading and writing&lt;/h2&gt;

&lt;p&gt;Images can be read directly from a file path, URL, or raw vector with image data. Similarly we can write images back to disk, or in memory by setting &lt;code&gt;path=NULL&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Render svg to png
tiger &amp;lt;- image_read(&#39;https://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg&#39;)
image_write(tiger, path = &amp;quot;tiger.png&amp;quot;, format = &amp;quot;png&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IDE&amp;rsquo;s with a built-in web browser (such as RStudio) automatically display magick images in the viewer. This results in a neat interactive image editing environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/magick-rstudio.png&#34; alt=&#34;RStudio Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, on Linux you can use &lt;code&gt;image_display&lt;/code&gt; to preview the image in an X11 window. Finally &lt;code&gt;image_browse&lt;/code&gt; opens the image in your system&amp;rsquo;s default application for a given type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# X11 only
image_display(tiger)

# System dependent
image_browse(tiger)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is some functionality to convert images to R raster graphics and plot it on R&amp;rsquo;s graphics display, but this doesn&amp;rsquo;t always work too well yet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;frink &amp;lt;- image_read(&amp;quot;https://jeroen.github.io/images/frink.png&amp;quot;)
raster &amp;lt;- as.raster(frink)
plot(raster)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also the R graphics device is relatively slow for displaying bitmap images.&lt;/p&gt;

&lt;h2 id=&#34;transformations-and-effects&#34;&gt;Transformations and effects&lt;/h2&gt;

&lt;p&gt;The best way to get a sense of available transformations is walk through the examples in the &lt;code&gt;?transformations&lt;/code&gt; help page in RStudio. Below a few examples to get a sense of what is possible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Example image
frink &amp;lt;- image_read(&amp;quot;https://jeroen.github.io/images/frink.png&amp;quot;)

# Trim margins
image_trim(frink)

# Passport pica
image_crop(frink, &amp;quot;100x150+50&amp;quot;)

# Resize
image_scale(frink, &amp;quot;200x&amp;quot;) # width: 200px
image_scale(frink, &amp;quot;x200&amp;quot;) # height: 200px

# Rotate or mirror
image_rotate(frink, 45)
image_flip(frink)
image_flop(frink)

# Set a background color
image_background(frink, &amp;quot;pink&amp;quot;, flatten = TRUE)

# World-cup outfit (Flood fill)
image_fill(frink, &amp;quot;orange&amp;quot;, &amp;quot;+100+200&amp;quot;, 30000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ImageMagick also has a bunch of standard effects that are worth checking out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Add randomness
image_blur(frink, 10, 5)
image_noise(frink)

# Silly filters
image_charcoal(frink)
image_oilpaint(frink)
image_emboss(frink)
image_edge(frink)
image_negate(frink)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally it can be useful to print some text on top of images:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Add some text
image_annotate(frink, &amp;quot;I like R!&amp;quot;, size = 50)

# Customize text
image_annotate(frink, &amp;quot;CONFIDENTIAL&amp;quot;, size = 30, color = &amp;quot;red&amp;quot;, boxcolor = &amp;quot;pink&amp;quot;,
  degrees = 60, location = &amp;quot;+50+100&amp;quot;)

# Only works if ImageMagick has fontconfig
image_annotate(frink, &amp;quot;The quick brown fox&amp;quot;, font = &#39;times-new-roman&#39;, size = 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe this is enough to get started.&lt;/p&gt;

&lt;h2 id=&#34;layers-and-animation&#34;&gt;Layers and animation&lt;/h2&gt;

&lt;p&gt;The examples above concern single images. However all functions in magick have been vectorized to support working with layers, compositions or animation.&lt;/p&gt;

&lt;p&gt;The standard base vector methods &lt;code&gt;[&lt;/code&gt; &lt;code&gt;[[&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;c()&lt;/code&gt; and &lt;code&gt;length()&lt;/code&gt; are used to manipulate sets of images which can then be treated as layers or frames. This system is actually so extensive that we will do a separate blog post about it later.&lt;/p&gt;

&lt;p&gt;For now here is an example on how to generate the instant classic dancing banana on R logo (which is probably why you are here):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Background image
logo &amp;lt;- image_read(&amp;quot;https://www.r-project.org/logo/Rlogo.png&amp;quot;)
background &amp;lt;- image_scale(logo, &amp;quot;400&amp;quot;)

# Foreground image
banana &amp;lt;- image_read(system.file(&amp;quot;banana.gif&amp;quot;, package = &amp;quot;magick&amp;quot;))
front &amp;lt;- image_scale(banana, &amp;quot;300&amp;quot;)

# Combine and flatten frames
frames &amp;lt;- lapply(as.list(front), function(x) image_flatten(c(background, x)))

# Turn frames into animation
animation &amp;lt;- image_animate(image_join(frames))
print(animation)

# Save as GIF
image_write(animation, &amp;quot;Rlogo-banana.gif&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If time permits we will demonstrate more examples during our &lt;a href=&#34;https://github.com/ropensci/commcalls/issues/11&#34;&gt;community call&lt;/a&gt; on Wednesday!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Testing packages with R Travis for OS-X</title>
      <link>https://ropensci.org/blog/2016/07/12/travis-osx/</link>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2016/07/12/travis-osx/</guid>
      <description>
        
        

&lt;p&gt;Travis is a continuous integration service which allows for running automated testing code everytime you push to GitHub. Hadley&amp;rsquo;s &lt;a href=&#34;http://r-pkgs.had.co.nz/check.html&#34;&gt;book&lt;/a&gt; about R packages explains how and why R package authors should take advantage of this in their development process.&lt;/p&gt;

&lt;h2 id=&#34;the-build-matrix&#34;&gt;The build matrix&lt;/h2&gt;

&lt;p&gt;Travis is now providing support for &lt;a href=&#34;https://docs.travis-ci.com/user/multi-os/&#34;&gt;multiple operating systems&lt;/a&gt;, including Ubuntu 14.04 (Trusty) and various flavors of Mac OS-X. Jim Hester has done a great job of &lt;a href=&#34;https://github.com/travis-ci/travis-build/commits/master/lib/travis/build/script/r.rb&#34;&gt;tweaking&lt;/a&gt; the travis &lt;a href=&#34;https://github.com/travis-ci/travis-build/blob/master/lib/travis/build/script/r.rb&#34;&gt;R-language build script&lt;/a&gt; to automate building and checking of R packages on the various platforms.&lt;/p&gt;

&lt;p&gt;Cross system testing is mainly useful to check packages with compiled code (i.e. C or C++) against various combinations of compiler versions, external libraries or system services. However any R package can easily be configured to take advantage of these features immediately. It is free and easy to setup!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/rstats-db/RMySQL&#34;&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/travis.png&#34; alt=&#34;Travis Screenshot&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The R travis options are pretty well &lt;a href=&#34;https://docs.travis-ci.com/user/languages/r&#34;&gt;documented&lt;/a&gt;. The quickest way to get started is by borrowing a &lt;code&gt;.travis.yml&lt;/code&gt; configuration from another package. Below a few example packages with a multi-OS build matrix which illustrate various options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org/ropensci/jqr&#34;&gt;jqr&lt;/a&gt;: basic example with C code: &lt;a href=&#34;https://github.com/ropensci/jqr/blob/master/.travis.yml&#34;&gt;.travis.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org/jeroen/jsonlite&#34;&gt;jsonlite&lt;/a&gt;: also requires a custom Latex package (preprint): &lt;a href=&#34;https://github.com/jeroen/jsonlite/blob/master/.travis.yml&#34;&gt;.travis.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org/ropensci/pdftools&#34;&gt;pdftools&lt;/a&gt;: requires external library (libpoppler): &lt;a href=&#34;https://github.com/ropensci/pdftools/blob/master/.travis.yml&#34;&gt;.travis.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org/jeroen/curl&#34;&gt;curl&lt;/a&gt;: external library (libcurl) and custom options: &lt;a href=&#34;https://github.com/jeroen/curl/blob/master/.travis.yml&#34;&gt;.travis.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org/jeroen/sodium&#34;&gt;sodium&lt;/a&gt;: depends on an external library from a PPA. &lt;a href=&#34;https://github.com/jeroen/sodium/blob/master/.travis.yml&#34;&gt;.travis.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org/rstats-db/RMySQL&#34;&gt;RMySQL&lt;/a&gt;: package with unit-tests that require both mysql server and client library. Also checks alternative configurations with mariadb: &lt;a href=&#34;https://github.com/rstats-db/RMySQL/blob/master/.travis.yml&#34;&gt;.travis.yml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For extra credit also check out the &lt;a href=&#34;https://github.com/wesm/feather/blob/master/.travis.yml&#34;&gt;feather&lt;/a&gt; package which uses a single platform but has a very cool build matrix targeting multiple compilers with both the python and R interfaces.&lt;/p&gt;

&lt;h2 id=&#34;systems-and-libraries&#34;&gt;Systems and Libraries&lt;/h2&gt;

&lt;p&gt;Most configuration options can either be set within or outside the multi-system build matrix (the &lt;code&gt;include&lt;/code&gt; field in the yaml). Options which are set outside the matrix apply to each of the systems. If an option is both set within and outside the matrix the former overrides the latter.&lt;/p&gt;

&lt;p&gt;The default system on Travis is currently still Ubuntu 12.04 (Precise). To build on Ubuntu 14.04 (Trusty) set the &lt;code&gt;dist&lt;/code&gt; and &lt;code&gt;sudo&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;os: linux
dist: trusty
sudo: required
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;sudo&lt;/code&gt; field is required to disable the docker environment which currently &lt;a href=&#34;https://docs.travis-ci.com/user/trusty-ci-environment/&#34;&gt;does not support&lt;/a&gt; Trusty yet. This &lt;a href=&#34;https://blog.rstudio.org/2016/03/09/r-on-travis-ci/&#34;&gt;blog post&lt;/a&gt; by RStudio has some more information about docker on Travis.&lt;/p&gt;

&lt;p&gt;To build on OS-X set the &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;osx_image&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;os: osx
osx_image: xcode8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;osx_image&lt;/code&gt; field specifies which version of OS-X and X-code this system has. The Travis &lt;a href=&#34;https://docs.travis-ci.com/user/osx-ci-environment/&#34;&gt;OS-X manual&lt;/a&gt; lists which combinations are currently available.&lt;/p&gt;

&lt;h2 id=&#34;homebrew&#34;&gt;Homebrew&lt;/h2&gt;

&lt;p&gt;By default all OS-X images include a copy of homebrew. The &lt;code&gt;brew_packages&lt;/code&gt; field can be used to install brew packages before building and checking the R package, similar to &lt;code&gt;apt_packages&lt;/code&gt; on Linux. See &lt;a href=&#34;https://github.com/ropensci/pdftools/blob/master/.travis.yml&#34;&gt;pdftools&lt;/a&gt; or &lt;a href=&#34;https://github.com/jeroen/sodium/blob/master/.travis.yml&#34;&gt;sodium&lt;/a&gt; for examples.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;os: osx
osx_image: xcode8
brew_packages: poppler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set the &lt;code&gt;disable_homebrew&lt;/code&gt; option to specifically test on a system without brew. The following config simulates the CRAN mac-builder machine which runs OS-X Mavericks 10.9:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;os: osx
osx_image: beta-xcode6.1
disable_homebrew: true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;additional-os-x-options&#34;&gt;Additional OS-X options&lt;/h2&gt;

&lt;p&gt;Besides the version of OS-X and brew packages there are some additional options to customize the config. For example we can customize if Latex should be installed (defaults to true). Latex is huge and annoying so R packages that do not include pdf vignettes can significantly speed up the build process by disabling this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;latex: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When latex is disabled &lt;code&gt;R CMD check&lt;/code&gt; automatically runs with &lt;code&gt;--no-manual&lt;/code&gt; to prevent check from failing to build the PDF manual. And while we&amp;rsquo;re add it, to set additional custom &lt;code&gt;R CMD build&lt;/code&gt; and &lt;code&gt;R CMD check&lt;/code&gt; parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r_build_args: &#39;--no-build-vignettes&#39;
r_check_args: &#39;--ignore-vignettes --no-examples&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/jeroen/curl/blob/master/.travis.yml&#34;&gt;curl&lt;/a&gt; config has a real world example. Finally you can put almost anything in the before and after install scripts. Use the &lt;code&gt;TRAVIS_OS_NAME&lt;/code&gt; environment variable to run something only on OSX or Linux. An example from &lt;a href=&#34;https://github.com/jeroen/jsonlite/blob/master/.travis.yml&#34;&gt;jsonlite&lt;/a&gt; which installs a custom Latex package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;before_install:
  - if [ &amp;quot;${TRAVIS_OS_NAME}&amp;quot; == &amp;quot;osx&amp;quot; ]; then sudo tlmgr install preprint; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Travis R &lt;a href=&#34;https://docs.travis-ci.com/user/languages/r&#34;&gt;documentation&lt;/a&gt; has some more options.&lt;/p&gt;

&lt;p&gt;Big thanks to Jim Hester and Craig Citro who have done all this amazing work to get R to work on Travis!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Introducing pdftools - A fast and portable PDF extractor</title>
      <link>https://ropensci.org/blog/2016/03/01/pdftools-and-jeroen/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2016/03/01/pdftools-and-jeroen/</guid>
      <description>
        
        

&lt;p&gt;Scientific articles are typically locked away in PDF format, a format designed primarily for printing but not so great for searching or indexing. The new &lt;a href=&#34;https://cran.r-project.org/package=pdftools&#34;&gt;pdftools&lt;/a&gt; package allows for extracting text and metadata from pdf files in R. From the extracted plain-text one could find articles discussing a particular drug or species name, without having to rely on publishers providing metadata, or pay-walled search engines.&lt;/p&gt;

&lt;p&gt;The pdftools slightly overlaps with the &lt;a href=&#34;https://cran.r-project.org/web/packages/Rpoppler/index.html&#34;&gt;Rpoppler&lt;/a&gt; package by Kurt Hornik. The main motivation behind developing pdftools was that Rpoppler depends on glib, which does not work well on Mac and Windows. The pdftools package uses the poppler c++ interface together with Rcpp, which results in a lighter and more portable implementation.&lt;/p&gt;

&lt;h2 id=&#34;installing-pdftools&#34;&gt;Installing pdftools&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/pdftools/&#34;&gt;&lt;span class=&#34;label label-warning&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/pdftools&#34;&gt;&lt;span class=&#34;label label-info&#34;&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Windows and Mac the binary packages can be installed directly from CRAN:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;pdftools&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installation on Linux requires the poppler development library. On Debian/Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install libpoppler-cpp-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Fedora or CentOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install poppler-cpp-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to install the package from source on Mac OS-X you need brew:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install poppler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;?pdftools&lt;/code&gt; manual page shows a brief overview of the main utilities. The most important function is &lt;code&gt;pdf_text&lt;/code&gt; which returns a character vector of length equal to the number of pages in the pdf. Each string in the vector contains a plain text version of the text on that page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(pdftools)
download.file(&amp;quot;http://arxiv.org/pdf/1403.2805.pdf&amp;quot;, &amp;quot;1403.2805.pdf&amp;quot;, mode = &amp;quot;wb&amp;quot;)
txt &amp;lt;- pdf_text(&amp;quot;1403.2805.pdf&amp;quot;)

# first page text
cat(txt[1])

# second page text
cat(txt[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, the package has some utilities to extract other data from the PDF file. The &lt;code&gt;pdf_toc&lt;/code&gt; function shows the table of contents, i.e. the section headers which pdf readers usually display in a menu on the left. It looks pretty in JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Table of contents
toc &amp;lt;- pdf_toc(&amp;quot;1403.2805.pdf&amp;quot;)

# Show as JSON
jsonlite::toJSON(toc, auto_unbox = TRUE, pretty = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other functions provide information about fonts, attachments and metadata such as the author, creation date or tags.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Author, version, etc
info &amp;lt;- pdf_info(&amp;quot;1403.2805.pdf&amp;quot;)

# Table with fonts
fonts &amp;lt;- pdf_fonts(&amp;quot;1403.2805.pdf&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bonus-feature-rendering-pdf&#34;&gt;Bonus feature: rendering pdf&lt;/h2&gt;

&lt;p&gt;A bonus feature on most platforms is rendering of PDF files to bitmap arrays. The poppler library provides all functionality to implement a complete PDF reader, including graphical display of the content. In R we can use pdf_render_page to render a page of the PDF into a bitmap, which can be stored as e.g. png or jpeg.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# renders pdf to bitmap array
bitmap &amp;lt;- pdf_render_page(&amp;quot;1403.2805.pdf&amp;quot;, page = 1)

# save bitmap image
png::writePNG(bitmap, &amp;quot;page.png&amp;quot;)
jpeg::writeJPEG(bitmap, &amp;quot;page.jpeg&amp;quot;)
webp::write_webp(bitmap, &amp;quot;page.webp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This feature now works on all platforms.&lt;/p&gt;

&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;Data scientists are often interested in data from tables. Unfortunately the pdf format is pretty dumb and does not have notion of a table (unlike for example HTML). Tabular data in a pdf file is nothing more than strategically positioned lines and text, which makes it difficult to extract the raw data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;txt &amp;lt;- pdf_text(&amp;quot;http://arxiv.org/pdf/1406.4806.pdf&amp;quot;)

# some tables
cat(txt[18])
cat(txt[19])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pdftools usually does a decent job in retaining the positioning of table elements when converting from pdf to text. But the output is still very dependent on the formatting of the original pdf table, which makes it very difficult to write a generic table extractor. But with a little creativity you might be able to parse the table data from the text output of a given paper.&lt;/p&gt;

&lt;h2 id=&#34;jeroen-ooms-joins-team-ropensci&#34;&gt;Jeroen Ooms joins team rOpenSci!&lt;/h2&gt;

&lt;p&gt;A message from the team: We are happy to announce that &lt;a href=&#34;https://jeroen.github.io/&#34;&gt;Jeroen Ooms&lt;/a&gt; has joined the rOpenSci crew! Jeroen is a prolific programmer and author of numerous &lt;a href=&#34;https://cran.r-project.org/web/checks/check_results_jeroen.ooms_at_stat.ucla.edu.html&#34;&gt;widely used packages&lt;/a&gt;. At rOpenSci, he will continue to work on developing awesome packages and infrastructural software for improving the scientific tool chain.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Rentrez 1_0 released</title>
      <link>https://ropensci.org/blog/2015/09/24/rentrez-1_0-release/</link>
      <pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2015/09/24/rentrez-1_0-release/</guid>
      <description>
        
        

&lt;p&gt;A new version of &lt;code&gt;rentrez&lt;/code&gt;, our package for the NCBI&amp;rsquo;s EUtils API, is making
it&amp;rsquo;s way around the CRAN mirrors. This release represents a substantial
improvement to &lt;code&gt;rentrez&lt;/code&gt;, including a &lt;a href=&#34;https://cran.r-project.org/web/packages/rentrez/vignettes/rentrez_tutorial.html&#34;&gt;new vignette&lt;/a&gt;
that documents the whole package.&lt;/p&gt;

&lt;p&gt;This posts describes some of the new things in &lt;code&gt;rentrez&lt;/code&gt;, and gives us a chance
to thank some of the people that have contributed to this package&amp;rsquo;s development.&lt;/p&gt;

&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Thanks to everyone who has filed and issue or written us an email about &lt;code&gt;rentrez&lt;/code&gt;,
your contributions have been an important part of the package&amp;rsquo;s development. In particular, we welcome
&lt;a href=&#34;http://ewrebio.me&#34;&gt;Han Guangchun&lt;/a&gt; as a new contributor to &lt;code&gt;rentrez&lt;/code&gt; and thank
&lt;a href=&#34;http://docking.org/~momeara/&#34;&gt;Matthew O&amp;rsquo;Meara&lt;/a&gt; for posting
an issue that brought the &lt;code&gt;by_id&lt;/code&gt; mode for &lt;code&gt;entrez_link&lt;/code&gt;  (discussed below) to our
attention.&lt;/p&gt;

&lt;p&gt;##The New Stuff&lt;/p&gt;

&lt;p&gt;###Extract elements from the results of &lt;code&gt;entrez_summary()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The NCBI&amp;rsquo;s &amp;ldquo;summary records&amp;rdquo; are very useful &amp;ndash; they provide the most important
information about a given record in a relatively small and simple file. &lt;code&gt;rentrez&lt;/code&gt;
provides the function &lt;code&gt;entrez_summary()&lt;/code&gt; to retrieve these records. When more
than one unique ID is passed to &lt;code&gt;entrez_summary&lt;/code&gt; the function returns a list of
esummary objects. For instance, you could find all the genetic variants associated
with asthma by finding links between the &lt;a href=&#34;http://www.omim.org/entry/600807&#34;&gt;OMIM record for asthma&lt;/a&gt; and records in the database dbSNP:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;snps &amp;lt;- entrez_link(dbfrom=&amp;quot;omim&amp;quot;, db=&amp;quot;snp&amp;quot;, id= 600807)
snp_summs &amp;lt;- entrez_summary(db=&amp;quot;snp&amp;quot;, id=snps$links$omim_snp)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A very common use-case for &lt;code&gt;entrez_summary()&lt;/code&gt; is to extract a subset of the
elements from each record in that list. This release includes the function
&lt;code&gt;extract_from_esummary&lt;/code&gt; to make this as straightforward as possible. It works with
a single element to extract:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;extract_from_esummary(snp_summs, &amp;quot;chr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 11079657  2786098  1031772  1031771   545659
##     &amp;quot;17&amp;quot;      &amp;quot;1&amp;quot;      &amp;quot;2&amp;quot;      &amp;quot;2&amp;quot;     &amp;quot;11&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or with multiple elements&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary_table &amp;lt;- extract_from_esummary(snp_summs, c(&amp;quot;chr&amp;quot;, &amp;quot;global_maf&amp;quot;, &amp;quot;fxn_class&amp;quot;))
t(summary_table)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##          chr  global_maf      fxn_class
## 11079657 &amp;quot;17&amp;quot; &amp;quot;A=0.4295/2151&amp;quot; &amp;quot;intron-variant&amp;quot;
## 2786098  &amp;quot;1&amp;quot;  &amp;quot;T=0.1569/786&amp;quot;  &amp;quot;intron-variant&amp;quot;
## 1031772  &amp;quot;2&amp;quot;  &amp;quot;G=0.2131/1067&amp;quot; &amp;quot;downstream-variant-500B&amp;quot;
## 1031771  &amp;quot;2&amp;quot;  &amp;quot;T=0.2582/1293&amp;quot; &amp;quot;&amp;quot;
## 545659   &amp;quot;11&amp;quot; &amp;quot;C=0.3419/1712&amp;quot; &amp;quot;utr-variant-3-prime&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###&lt;code&gt;entrez_link&lt;/code&gt; can find external links&lt;/p&gt;

&lt;p&gt;In addition to discovering links between records in NCBI databases, the function
&lt;code&gt;entrez_link&lt;/code&gt; now provides support for finding external links (&amp;lsquo;linkouts&amp;rsquo; in
NCBI terminology). Perhaps the most interesting example is finding links for the
full text of articles in PubMed.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try and find the full text of the paper describing &lt;a href=&#34;https://github.com/ropensci/taxize&#34;&gt;taxize&lt;/a&gt; (using that article&amp;rsquo;s PMID). To
override the functions default behaviour (finding links within NCBI databases)
we set the &lt;code&gt;cmd&lt;/code&gt; argument to &lt;code&gt;llinks&lt;/code&gt; (short for library links):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;taxize_links &amp;lt;- entrez_link(dbfrom=&amp;quot;pubmed&amp;quot;, id= 24555091, cmd=&amp;quot;llinks&amp;quot;)
taxize_links
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## elink object with contents:
##  $linkouts: links to external websites
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The print function for this object tells you were the links live.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;taxize_links$linkouts
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $ID_24555091
## $ID_24555091[[1]]
## Linkout from F1000 Research Ltd
##  $Url: http://f1000research.com/a ...
##
## $ID_24555091[[2]]
## Linkout from Europe PubMed Central
##  $Url: http://europepmc.org/abstr ...
##
## $ID_24555091[[3]]
## Linkout from PubMed Central
##  $Url: http://www.ncbi.nlm.nih.go ...
##
## $ID_24555091[[4]]
## Linkout from PubMed Central Canada
##  $Url: http://pubmedcentralcanada ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of those elements has a lot of information, but the URLs for each object
are probably the most important. For this reason, &lt;code&gt;rentrez&lt;/code&gt; provides a function
to get just the URLs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;linkout_urls(taxize_links)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $ID_24555091
## [1] &amp;quot;http://f1000research.com/articles/10.12688/f1000research.2-191.v2/doi&amp;quot;
## [2] &amp;quot;http://europepmc.org/abstract/MED/24555091&amp;quot;
## [3] &amp;quot;http://www.ncbi.nlm.nih.gov/pmc/articles/pmid/24555091/&amp;quot;
## [4] &amp;quot;http://pubmedcentralcanada.ca/pmcc/articles/pmid/24555091&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Web History features are easier to use&lt;/p&gt;

&lt;p&gt;The NCBI provides a &amp;ldquo;Web History&amp;rdquo; feature to let users store the results of their
searches on the NCBI&amp;rsquo;s severs and refer to those results without having to
pass unique ID&amp;rsquo;s back and forth between computers. These features have always been
supported by &lt;code&gt;rentrez&lt;/code&gt; but this release makes them easier to use.&lt;/p&gt;

&lt;p&gt;Specifically, when the new optional argument &lt;code&gt;use_history&lt;/code&gt; is set to &lt;code&gt;TRUE&lt;/code&gt;
functions will return a &lt;code&gt;web_history&lt;/code&gt; object which can be used in the place of unique
IDs in calls to &lt;code&gt;entrez_fetch&lt;/code&gt;, &lt;code&gt;entrez_summary&lt;/code&gt; or &lt;code&gt;entrez_link&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To demonstrate, let&amp;rsquo;s search for PubMed articles about the ciliate genus
&lt;em&gt;Tetrahymena&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Tet_papers &amp;lt;- entrez_search(db=&amp;quot;pubmed&amp;quot;, term=&amp;quot;Tetrahymena[ORGN]&amp;quot;, use_history=TRUE)
Tet_papers
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Entrez search result with 6599 hits (object contains 20 IDs and a web_history object)
##  Search term (as translated):  &amp;quot;tetrahymena&amp;quot;[MeSH Terms] OR &amp;quot;tetrahymena&amp;quot;[All Fie ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have a web_history object, we can use that to retrieve XML representations
of the first 10 records:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;recs &amp;lt;- entrez_fetch(db=&amp;quot;pubmed&amp;quot;,
                     web_history=Tet_papers$web_history,
                     retmax=10, rettype=&amp;quot;xml&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###It&amp;rsquo;s easier to keep track of which records are linked to other records&lt;/p&gt;

&lt;p&gt;By default, when &lt;code&gt;entrez_link&lt;/code&gt; gets a vector of more than one unique ID, it
returns sets of linked-IDs that match &lt;em&gt;any&lt;/em&gt; of the IDs in the original call.
That means the user loses track of the mapping between the original IDs and those
from the linked database.&lt;/p&gt;

&lt;p&gt;As of this release, &lt;code&gt;rentrez&lt;/code&gt; supports the NCBI&amp;rsquo;s &lt;code&gt;by_id&lt;/code&gt; mode, which solves this problem.
Setting the new argument &lt;code&gt;by_id&lt;/code&gt; to &lt;code&gt;TRUE&lt;/code&gt; returns a list, with each element of
that list containing links for only one ID. To demonstrate, let&amp;rsquo;s find protein
sequences associated with specific genes in the NCBI &lt;code&gt;gene&lt;/code&gt; database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all_links  &amp;lt;- entrez_link(db=&amp;quot;protein&amp;quot;,
                          dbfrom=&amp;quot;gene&amp;quot;,
                          id=c(93100, 223646),
                          by_id=TRUE)

all_links
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## List of 2 elink objects,each containing
##   $links: IDs for linked records from NCBI
##
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, printing the returned object let&amp;rsquo;s you know what each element
contains, and you can extract the specific links you are looking for easily:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lapply(all_links, function(x) x$links$gene_protein)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [[1]]
##  [1] &amp;quot;768043930&amp;quot; &amp;quot;767953815&amp;quot; &amp;quot;558472750&amp;quot; &amp;quot;194394158&amp;quot; &amp;quot;166221824&amp;quot;
##  [6] &amp;quot;154936864&amp;quot; &amp;quot;119602646&amp;quot; &amp;quot;119602645&amp;quot; &amp;quot;119602644&amp;quot; &amp;quot;119602643&amp;quot;
## [11] &amp;quot;119602642&amp;quot; &amp;quot;37787309&amp;quot;  &amp;quot;37787307&amp;quot;  &amp;quot;37787305&amp;quot;  &amp;quot;33991172&amp;quot;
## [16] &amp;quot;21619615&amp;quot;  &amp;quot;10834676&amp;quot;
##
## [[2]]
##  [1] &amp;quot;148697547&amp;quot; &amp;quot;148697546&amp;quot; &amp;quot;81899807&amp;quot;  &amp;quot;74215266&amp;quot;  &amp;quot;74186774&amp;quot;
##  [6] &amp;quot;37787317&amp;quot;  &amp;quot;37589273&amp;quot;  &amp;quot;31982089&amp;quot;  &amp;quot;26339824&amp;quot;  &amp;quot;26329351&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-rest&#34;&gt;The rest&lt;/h2&gt;

&lt;p&gt;There are also numerous small changes that improve &lt;code&gt;rentrez&lt;/code&gt;, fix bugs and
extend the package&amp;rsquo;s documentation. We hope you find this new release helpful,
and as always we welcome bug reports via the &lt;a href=&#34;https://github.com/ropensci/rentrez/issues&#34;&gt;package&amp;rsquo;s github repository&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>A drat repository for rOpenSci</title>
      <link>https://ropensci.org/blog/2015/08/04/a-drat-repository-for-ropensci/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2015/08/04/a-drat-repository-for-ropensci/</guid>
      <description>
        
        

&lt;p&gt;We&amp;rsquo;re happy to announce the launch of a CRAN-style repository for rOpenSci at &lt;a href=&#34;http://packages.ropensci.org&#34;&gt;http://packages.ropensci.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains the latest nightly builds from the master branch of all rOpenSci packages currently on GitHub. This allows users to install development versions of our software without specialized functions such as &lt;code&gt;install_github()&lt;/code&gt;, allows
dependencies not hosted on CRAN to still be resolved automatically, and permits the use of &lt;code&gt;update.packages()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-the-repository&#34;&gt;Using the repository&lt;/h2&gt;

&lt;p&gt;To use, simply add
&lt;code&gt;packages.ropensci.org&lt;/code&gt; to your existing list of R repos, such as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(repos = c(&amp;quot;http://packages.ropensci.org&amp;quot;, getOption(&amp;quot;repos&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(If you don&amp;rsquo;t have any default CRAN mirrors selected yet by &lt;code&gt;getOption(&amp;quot;repos&amp;quot;)&lt;/code&gt;, you may want to add one now). You can also include this line in specific &lt;code&gt;install.packages()&lt;/code&gt; requests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;taxize&amp;quot;, repos = c(&amp;quot;http://packages.ropensci.org&amp;quot;, &amp;quot;http://cran.rstudio.com&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;design&#34;&gt;Design&lt;/h2&gt;

&lt;p&gt;Our goal in creating a CRAN-style package repository (yes, it&amp;rsquo;s confusing that we use the word &amp;ldquo;repository&amp;rdquo; to describe both an individual package source in a GitHub &lt;em&gt;repo&lt;/em&gt; as well as a collection of package binaries on a CRAN-like &lt;em&gt;repo&lt;/em&gt;&amp;hellip; sorry) was to provide users with a way to install the latest development versions of rOpenSci packages that offered an easier and more seamless alternative to the widely used method of &lt;code&gt;devtools::install_github()&lt;/code&gt;.  This would be particularly useful for updating all packages at once, or installing development versions that depended on other versions of packages not yet released to CRAN. As an added benefit, we also wanted a system that would allow us to compute anonymized download statistics, analogous to what RStudio provides for it&amp;rsquo;s CRAN mirror.  Getting this all to work required the introduction of a few additional technologies.&lt;/p&gt;

&lt;h3 id=&#34;drat-and-drat-builder&#34;&gt;&lt;code&gt;drat&lt;/code&gt; and &lt;code&gt;drat.builder&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;While the basic structure of a CRAN-like R repository is simple, and used by both platforms such as &lt;a href=&#34;https://r-forge.r-project.org/&#34;&gt;RForge&lt;/a&gt; and individual developers, kudos really goes to Dirk Eddelbuettel&amp;rsquo;s &lt;a href=&#34;https://github.com/eddelbuettel/drat&#34;&gt;drat&lt;/a&gt; package for really making this automated, simple, and fun.  While &lt;code&gt;drat&lt;/code&gt; makes it easy to toss individual packages into a CRAN-like repo (which we often refer to as a &lt;code&gt;drat&lt;/code&gt; repo), we needed an easy &amp;amp; automatic way to add a whole list of packages, given their GitHub repos.  Rich FitzJohn&amp;rsquo;s new &lt;a href=&#34;https://github.com/richfitz/drat.builder&#34;&gt;drat.builder&lt;/a&gt; package does precisely this; handling the downloading of packages with some clever record-keeping to avoid building and adding packages which have not changed since the last time the &lt;code&gt;drat&lt;/code&gt; repo was built.  The sources for building the rOpenSci packages repository can be found in our &amp;ldquo;drat&amp;rdquo; GitHub repo: &lt;a href=&#34;https://github.com/ropensci/drat&#34;&gt;https://github.com/ropensci/drat&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;dynamic-package-lists-ropkgs&#34;&gt;Dynamic package lists: &lt;code&gt;ropkgs&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;With rOpenSci, we wanted to take this one step further.  No one wants to have to maintain one more list that must be updated every time a package is successfully on-boarded to the project.  Scott Chamberlain&amp;rsquo;s work with &lt;a href=&#34;https://github.com/ropensci/ropkgs&#34;&gt;ropkgs&lt;/a&gt; provides a convenient way to query the rOpenSci software suite, automatically generating a list of available rOpenSci packages, and filtering them on relevant metadata, such as those that are in good status and installable condition, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;ropkgs&amp;quot;)
out &amp;lt;- ro_pkgs()
good &amp;lt;- out$packages$status == &amp;quot;good&amp;quot;
installable &amp;lt;- out$packages$installable
pkgs &amp;lt;- out$packages$name[installable &amp;amp; good]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-magic-of-continuous-integration-circleci&#34;&gt;The magic of continuous integration: CircleCI&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;ropkgs&lt;/code&gt;, &lt;code&gt;drat&lt;/code&gt; and &lt;code&gt;drat.builder&lt;/code&gt;, we now have everything we need to automate the building of the CRAN-like package repository.  Now we just need some computing resource that can do the hard work of pulling down all the GitHub packages, building the repository, and securely sending off the binaries somewhere they can be downloaded.  Continuous Integration systems turn out to be perfect for this.  My favorite CI platform at the moment is &lt;a href=&#34;https://circleci.com&#34;&gt;CircleCi&lt;/a&gt;, for several reasons particularly relevant here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it has a rich API which includes support for &lt;code&gt;POST&lt;/code&gt; requests which can trigger a build without making commits to GitHub&lt;/li&gt;
&lt;li&gt;it supports custom Docker containers, allowing us to just download a container with most or all the dependencies we need to build packages, etc., without having to wait for them to install manually from source first.&lt;/li&gt;
&lt;li&gt;it has a convenient web interface for providing secure credentials we&amp;rsquo;ll need to publish the binary repository to GitHub or Amazon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Circle has other advantages too, like great live help and the ability to ssh into your CI run to troubleshoot when all else fails, but otherwise works like most other CI platforms.  More on that another day. You can see the daily builds here: &lt;a href=&#34;https://circleci.com/gh/ropensci/drat/tree/gh-pages&#34;&gt;CircleCi&lt;/a&gt;, which are triggered by a simple &lt;code&gt;POST&lt;/code&gt; request running as a cron job.  The &lt;a href=&#34;https://github.com/ropensci/drat/blob/gh-pages/circle.yml&#34;&gt;circle.yml&lt;/a&gt; configuration file appears in the project&amp;rsquo;s drat repo &amp;ndash; check out how simple it is!&lt;/p&gt;

&lt;h3 id=&#34;publishing-to-amazon&#34;&gt;Publishing to Amazon&lt;/h3&gt;

&lt;p&gt;The last step would be getting download logs; which is somewhat more complicated than it sounds.  &lt;code&gt;drat&lt;/code&gt; conveniently already handles pushing packages to GitHub&amp;rsquo;s gh-pages, a free and easy way to provide static hosting.  This is free and easy, but isn&amp;rsquo;t ideal, particularly for large and frequently updated package collections.  Also, it is impossible to get download logs from this approach. To avoid these issues, we settled on pushing our package repository to a static site hosted through Amazon&amp;rsquo;s S3 data storage &amp;ldquo;buckets.&amp;rdquo;  It&amp;rsquo;s not free, but for at most a few gigs of space we&amp;rsquo;ll need it&amp;rsquo;s still very cost effective.  In particular, S3 buckets can generate their own log files, which provides a way to count package downloads.&lt;/p&gt;

&lt;p&gt;Secure communication with Amazon S3 system is accomplished using the very nascent / actively developing &lt;a href=&#34;https://github.com/cloudyr/aws.s3&#34;&gt;aws.s3&lt;/a&gt; R package from the awesome &lt;a href=&#34;https://cloudyr.github.io/&#34;&gt;cloudyr&lt;/a&gt; project.&lt;/p&gt;

&lt;h3 id=&#34;parsing-the-download-logs&#34;&gt;Parsing the download logs&lt;/h3&gt;

&lt;p&gt;Amazon&amp;rsquo;s S3 logs are rather raw and require some good ol data tidying work to transform them into the conveniently parsed, tidied and IP-address-anonymized format used by RStudio&amp;rsquo;s download logs.  Eventually this too can be accomplished by the CircleCI builds, but at the moment is too computationally intensive for them.  A script for this work-flow can be found in the project repo, &lt;a href=&#34;https://github.com/ropensci/drat/blob/gh-pages/parse_s3_logs.R&#34;&gt;parse_s3_logs.R&lt;/a&gt;.  As the data accumulate we should be able to start publishing the tidy logs.&lt;/p&gt;

&lt;p&gt;This project is still in it&amp;rsquo;s early days, and as ever, we welcome feedback, problems or ideas on the &lt;a href=&#34;https://github.com/ropensci/drat/issues&#34;&gt;issues tracker&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now go ahead and install or update some packages from the shiny new &lt;a href=&#34;http://packages.ropensci.org&#34;&gt;http://packages.ropensci.org&lt;/a&gt;!&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
