<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Occurrence on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/occurrence/</link>
    <description>Recent content in Occurrence on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 22 Apr 2014 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/occurrence/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overlaying species occurrence data with climate data</title>
      <link>https://ropensci.org/blog/2014/04/22/rwbclimate-sp/</link>
      <pubDate>Tue, 22 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/04/22/rwbclimate-sp/</guid>
      <description>
        
        &lt;p&gt;One of the goals of the rOpenSci is to facilitate interoperability between different data sources around web with our tools.  We can achieve this by providing functionality within our packages that converts data coming down via web APIs in one format (often a provider specific schema) into a standard format.  The new version of &lt;a href=&#34;http://github.com/ropensci/rwbclimate&#34;&gt;rWBclimate&lt;/a&gt; that we just posted to &lt;a href=&#34;http://cran.r-project.org/web/packages/rWBclimate/index.html&#34;&gt;CRAN&lt;/a&gt; does just that.  In an &lt;a href=&#34;http://www.ropensci.org/blog/2013/07/29/rWBclimate-rgbif/&#34;&gt;earlier post&lt;/a&gt; I wrote about how users could combine data from both &lt;a href=&#34;http://github.com/ropensci/rgbif&#34;&gt;rgbif&lt;/a&gt; and &lt;code&gt;rWBclimate&lt;/code&gt;. Back then I just thought it was pretty cool that you could overlay the points on a nice climate map.  Now we&amp;rsquo;ve come a long way, with the development of an easier to use and more comprehensive package for accessing species occurrence data, &lt;a href=&#34;http://github.com/ropensci/spocc&#34;&gt;spocc&lt;/a&gt;, and added conversion functions to create spatial objects out of both climate data maps, and species occurrence data.  The result is that you can grab data from both sources, and then extract climate information about your species occurrence data.&lt;/p&gt;

&lt;p&gt;In the example below I&amp;rsquo;m going to download climate data at the basin level for the US and Mexico, and then species occurrences for eight different tree species.  I&amp;rsquo;ll then extract the temperature from each point data with an spatial overlay and look at the distribution of temperatures for each species.  Furthermore the conversion to spatial objects functions will allow you to use our data with any &lt;a href=&#34;http://en.wikipedia.org/wiki/Shapefile&#34;&gt;shape files&lt;/a&gt; you might have.&lt;/p&gt;

&lt;p&gt;The first step is to grab the &lt;a href=&#34;https://developers.google.com/kml/documentation/&#34;&gt;KML&lt;/a&gt; files for each river basin making up the US and Mexico, which we &lt;a href=&#34;http://data.worldbank.org/sites/default/files/climate_data_api_basins.pdf&#34;&gt;identify with an integer&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
library(&amp;quot;rWBclimate&amp;quot;)
# Install spocc from our GitHub repo
# devtools::install_github(&amp;quot;spocc&amp;quot;, &amp;quot;ropensci&amp;quot;)
library(&amp;quot;spocc&amp;quot;)
library(&amp;quot;taxize&amp;quot;)
library(&amp;quot;plyr&amp;quot;)
library(&amp;quot;sp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(spocc)
### Create path to store kml&#39;s
dir.create(&amp;quot;~/kmltmp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(kmlpath = &amp;quot;~/kmltmp&amp;quot;)
options(stringsAsFactors = FALSE)

usmex &amp;lt;- c(273:284, 328:365)
### Download KML&#39;s and read them in.
usmex.basin &amp;lt;- create_map_df(usmex)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;

## Download temperature data
temp.dat &amp;lt;- get_historical_temp(usmex, &amp;quot;decade&amp;quot;)
temp.dat &amp;lt;- subset(temp.dat, temp.dat$year == 2000)


# Bind temperature data to map data frame

usmex.map.df &amp;lt;- climate_map(usmex.basin, temp.dat, return_map = F)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have created a map of the US and Mexico, downloaded the average temperature in each basin between 1990 and 2000, and bound them together.  Next let&amp;rsquo;s grab occurrence data using &lt;code&gt;spocc&lt;/code&gt; for our eight tree species (&lt;em&gt;Note:  &lt;code&gt;rgbif&lt;/code&gt; &amp;gt; 0.6.0 needs to be installed to work properly&lt;/em&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
## Grab some species occurrence data for the 8 tree species.

splist &amp;lt;- c(&amp;quot;Acer saccharum&amp;quot;, &amp;quot;Abies balsamea&amp;quot;, &amp;quot;Arbutus xalapensis&amp;quot;, &amp;quot;Betula alleghaniensis&amp;quot;, &amp;quot;Chilopsis linearis&amp;quot;, &amp;quot;Conocarpus erectus&amp;quot;, &amp;quot;Populus tremuloides&amp;quot;, &amp;quot;Larix laricina&amp;quot;)

## get data from bison and gbif
splist &amp;lt;- sort(splist)
out &amp;lt;- occ(query = splist, from = c(&amp;quot;bison&amp;quot;, &amp;quot;gbif&amp;quot;), limit = 100)

## scrub names
out &amp;lt;- fixnames(out, how = &amp;quot;query&amp;quot;)

## Create a data frame of all data.

out_df &amp;lt;- occ2df(out)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ve downloaded the data using their latin names, we might want to know the common names.  Luckily the &lt;code&gt;taxize&lt;/code&gt; package is great for that, and we can grab them with just a couple of lines of code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
### grab common names
cname &amp;lt;- ldply(sci2comm(get_tsn(splist), db = &amp;quot;itis&amp;quot;, simplify = TRUE), function(x) { return(x[1]) })[, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### Now let&#39;s create a vector of common names for easy plotting But first
### order on names so we can just add the names
out_df &amp;lt;- out_df[order(out_df$name), ]
### strip NA values and 0 values of coordinates
out_df &amp;lt;- out_df[!is.na(out_df$lat), ]
out_df &amp;lt;- out_df[out_df$lat &amp;gt; 0, ]
out_df$common &amp;lt;- rep(cname, table(out_df$name))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have all the components we need, species data and spatial polygons with temperature data bound to them.  Before we do the spatial over lay, let&amp;rsquo;s have do a quick visualization.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
## Now just create the base temperature map
usmex.map &amp;lt;- ggplot() +
  geom_polygon(data = usmex.map.df, aes(x = long, y = lat, group = group, fill = data, alpha = 0.9)) +
  scale_fill_continuous(&amp;quot;Average annual \n temp: 1990-2000&amp;quot;, low = &amp;quot;yellow&amp;quot;, high = &amp;quot;red&amp;quot;) +
  guides(alpha = F) +
  theme_bw(10)

## And overlay of gbif data
usmex.map &amp;lt;- usmex.map +
  geom_point(data = out_df, aes(y = latitude, x = longitude, group = common, colour = common)) +
  xlim(-125, -59) +
  ylim(5, 55)

print(usmex.map)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-04-22-rwbclimate-sp/mapping_2.png&#34; alt=&#34;plot of chunk mapping&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now the question is, what&amp;rsquo;s the temperature at each point for each tree species?  We can convert our species data to spatial points with &lt;code&gt;occ_to_sp&lt;/code&gt;, and our data from &lt;code&gt;rWBclimate&lt;/code&gt; can be converted to spatial polygons with &lt;code&gt;kml_to_sp&lt;/code&gt;.  Next we can loop through each grouping of species, and call the &lt;code&gt;over&lt;/code&gt; function to get the temperature at each point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Create a spatial polygon dataframe binding kml polygons to temperature
## data
temp_sdf &amp;lt;- kml_to_sp(usmex.basin, df = temp.dat)
### Now we can change the points to a spatial polygon:
sp_points &amp;lt;- occ_to_sp(out)

tdat &amp;lt;- vector()
### Get averages
for (i in 1:length(splist)) {
    tmp_sp &amp;lt;- sp_points[which(sp_points$name == splist[i]), ]
    tmp_t &amp;lt;- over(tmp_sp, temp_sdf)$data
    tdat &amp;lt;- c(tdat, tmp_t)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last step is to create a new data frame with our data.  Unfortunately the size of our old data frame &lt;code&gt;out_df&lt;/code&gt; won&amp;rsquo;t be the same size due to some invalid lat/long&amp;rsquo;s that came down with our data so the entire data frame will be reassembled.  After we assemble the data frame we can summarize our it with plyr, getting the mean temperature and latitude for each species.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
### Assemble new dataframe
spDF &amp;lt;- data.frame(matrix(nrow = dim(sp_points)[1], ncol = 0))
spDF$species &amp;lt;- sp_points$name
spDF &amp;lt;- cbind(coordinates(sp_points), spDF)

### This is important, be sure to order all the points alphebetically as we
### did earlier
spDF &amp;lt;- spDF[order(spDF$species), ]

spDF$cname &amp;lt;- rep(cname, table(sp_points$name))
spDF$temp &amp;lt;- tdat
### Strip NA&#39;s
spDF &amp;lt;- spDF[!is.na(spDF$temp), ]

## Create summary
summary_data &amp;lt;- ddply(spDF, .(cname), summarise, mlat = mean(latitude), mtemp = mean(temp),
    sdlat = sd(latitude), sdtemp = sd(temp))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First let&amp;rsquo;s look at a plot of mean temperature vs latititude, and to identify the points we&amp;rsquo;ll plot their common names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(summary_data, aes(x = mlat, y = mtemp, label = cname)) +
  geom_text() +
  xlab(&amp;quot;Mean Latitude&amp;quot;) +
  ylab(&amp;quot;Mean Temperature (C)&amp;quot;) +
  theme_bw() +
  xlim(10, 50)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-04-22-rwbclimate-sp/means.png&#34; alt=&#34;plot of chunk means&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This gives us a sense about how the means of each value are related, but we can also look at the distribution of temperatures with boxplots.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(spDF, aes(as.factor(cname), temp)) +
  geom_boxplot() +
  theme_bw(13) +
  ylab(&amp;quot;Temperature&amp;quot;) +
  xlab(&amp;quot;Common Name&amp;quot;) +
  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-04-22-rwbclimate-sp/boxplots.png&#34; alt=&#34;plot of chunk boxplots&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This gives a sense of how wide the temperature distributions are, as well as looking at some of the outliers.  The distributions look pretty skewed, and this probably reflects the large spatial granularity of our temperature data compared to the occurrence data.  However this example shows how you can easily combine data from multiple rOpenSci packages.  We will continue to work towards enhancing the interoperability of heterogeneous data streams via our tools.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Accessing iNaturalist data</title>
      <link>https://ropensci.org/blog/2014/03/26/rinat/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/03/26/rinat/</guid>
      <description>
        
        &lt;p&gt;The &lt;a href=&#34;http://www.inaturalist.org/&#34;&gt;iNaturalist&lt;/a&gt; project is a really cool way to both engage people in citizen science and collect species occurrence data.  The premise is pretty simple, users download an app for their smartphone, and then can easily geo reference any specimen they see, uploading it to the iNaturalist website.  It let&amp;rsquo;s users turn casual observations into meaningful crowdsourced species occurrence data. They also provide a nice robust API to access almost all of their data.  We&amp;rsquo;ve developed a package &lt;a href=&#34;https://github.com/ropensci/rinat&#34;&gt;&lt;code&gt;rinat&lt;/code&gt;&lt;/a&gt; that can easily access all of that data in R.  Our package &lt;a href=&#34;https://github.com/ropensci/spocc&#34;&gt;&lt;code&gt;spocc&lt;/code&gt;&lt;/a&gt; uses iNaturalist data as one of it&amp;rsquo;s sources, &lt;code&gt;rinat&lt;/code&gt; provides an interface for all the features available in the API.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Searching&lt;/em&gt;
Currently you can get access to iNaturalist occurrence records from our package &lt;code&gt;spocc&lt;/code&gt;, which works great for scenarios where you want lot&amp;rsquo;s of data from many sources, but &lt;code&gt;rinat&lt;/code&gt; will get you full details on every record and offers other searching on terms other than species names. First let&amp;rsquo;s see how this matches with what you can get with &lt;code&gt;spocc&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(stringsAsFactors = F)
library(spocc)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rinat)
out &amp;lt;- occ(query = &amp;quot;Accipiter striatus&amp;quot;, from = &amp;quot;inat&amp;quot;)
inat_out &amp;lt;- get_inat_obs(taxon = &amp;quot;Accipiter striatus&amp;quot;, maxresults = 25)
### Compare Id&#39;s and see that results are the same without viewing full tables
cbind(out$inat$data$Accipiter_striatus$Id[1:5], inat_out$Id[1:5])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##        [,1]   [,2]
## [1,] 581369 581369
## [2,] 574433 574433
## [3,] 570635 570635
## [4,] 555214 555214
## [5,] 551405 551405
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results are the same, the &lt;code&gt;rinat&lt;/code&gt; package will offer a bit more flexiblity in searching.  You can search for records by a fuzzy search query, a taxon (used above in &lt;code&gt;spocc&lt;/code&gt;), a location in a bounding box, or by date.  Let&amp;rsquo;s say you just want to search by for records of Mayflies, you can use the taxon parameter to search for all lower level taxonomic matches below order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;may_flies &amp;lt;- get_inat_obs(taxon = &amp;quot;Ephemeroptera&amp;quot;)
## See what species names come back.
may_flies$Species.guess[1:10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Mayfly&amp;quot;               &amp;quot;Heptageniidae&amp;quot;        &amp;quot;Ephemerella subvaria&amp;quot;
##  [4] &amp;quot;Ephemerella subvaria&amp;quot; &amp;quot;Mayflies&amp;quot;             &amp;quot;Stream Mayflies&amp;quot;
##  [7] &amp;quot;Mayflies&amp;quot;             &amp;quot;Mayflies&amp;quot;             &amp;quot;Mayflies&amp;quot;
## [10] &amp;quot;Hexagenia&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could also search using the fuzzy query parameter, looking for mentions of a specific habitat or a common name. Below I&amp;rsquo;ll search for one of my favorite habitats, vernal ponds and see what species come back.  Also we can search for common names and see the scientific names (which should be all the same).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vp_obs &amp;lt;- get_inat_obs(query = &amp;quot;vernal pool&amp;quot;)
vp_obs$Species.guess[1:10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Docks (Genus Rumex)&amp;quot;
##  [2] &amp;quot;Blennosperma bakeri&amp;quot;
##  [3] &amp;quot;Rails, Gallinules, and Coots&amp;quot;
##  [4] &amp;quot;Western Spadefoot&amp;quot;
##  [5] &amp;quot;Western Spadefoot&amp;quot;
##  [6] &amp;quot;Eupsilia&amp;quot;
##  [7] &amp;quot;upland chorus frog&amp;quot;
##  [8] &amp;quot;Wood Frog&amp;quot;
##  [9] &amp;quot;Striped Meadowhawk (Sympetrum pallipes)&amp;quot;
## [10] &amp;quot;Ambystoma maculatum&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
# Now le&#39;ts look up by common name:

deer &amp;lt;- get_inat_obs(query = &amp;quot;Mule Deer&amp;quot;)
deer$Scientific.name[1:10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot;
##  [4] &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot;
##  [7] &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus hemionus&amp;quot; &amp;quot;Odocoileus&amp;quot;
## [10] &amp;quot;Odocoileus hemionus&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of these general searching functions return a dataframe that is m x 32 (where m is the requested number of results).  The column names are mostly self-explanatory, including, common names, species names, observer id&amp;rsquo;s, observer names, data quality, licenses and url&amp;rsquo;s for images so you can go look at the photo a user took.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Filtering&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All searches can also be filtered by space and time.  You can search for records within a specific bounding box, or on a specific date (but not a range).  We can redo our deer search using a bounding box for the western United States.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bounds &amp;lt;- c(38.44047, -125, 40.86652, -121.837)
deer &amp;lt;- get_inat_obs(query = &amp;quot;Mule Deer&amp;quot;, bounds = bounds)
cat(paste(&amp;quot;The number of records found in your bunding box:&amp;quot;, dim(deer)[1],
    sep = &amp;quot; &amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The number of records found in your bunding box: 47
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By checking the dimensions, we can see only 47 records were found.  We could try the samething for a given day, month or year. Let&amp;rsquo;s try searhing for cumulative totals of observations of Ephemeroptera and see if we can detect seasonality.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
out &amp;lt;- rep(NA, 12)
for (i in 1:12) {
    out[i] &amp;lt;- dim(get_inat_obs(taxon = &amp;quot;Ephemeroptera&amp;quot;, month = i, maxresults = 200))[1]
}
out &amp;lt;- data.frame(out)
out$month &amp;lt;- factor(month.name, levels = month.name)
ggplot(out, aes(x = month, y = out, group = 1)) + geom_point() + stat_smooth(se = FALSE) +
    xlab(&amp;quot;Month&amp;quot;) + ylab(&amp;quot;Cumulative of Mayfly observations&amp;quot;) + theme_bw(16)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-26-rinat/filter_date.png&#34; alt=&#34;plot of chunk filter_date&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Exactly as you&amp;rsquo;d expect observations of this season insect tend to peak in the summer and then slowly decline.  Except for September peak, it follows the expected trend.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;User and project data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are several other functions from the API that allow you to access data about projects and users. You can grab detailed data about projects, users and observations.  Let&amp;rsquo;s look at the &lt;a href=&#34;http://www.inaturalist.org/projects/state-flowers-of-the-united-states-eol-collection&#34;&gt;EOL state flowers project&lt;/a&gt;.  First we can grab some basic info on the project by searching for it based on it&amp;rsquo;s &amp;ldquo;slug&amp;rdquo;.  You can find this in the URL of the project: &amp;ldquo;&lt;a href=&#34;http://www.inaturalist.org/projects/state-flowers-of-the-united-states-eol-collection&amp;quot;&#34;&gt;http://www.inaturalist.org/projects/state-flowers-of-the-united-states-eol-collection&amp;quot;&lt;/a&gt;, which is the section of text after &amp;ldquo;projects/&amp;rdquo;, so in this case it would be &amp;ldquo;state-flowers-of-the-united-states-eol-collection&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s grab some info on the project by getting observations but set the &lt;code&gt;type&lt;/code&gt; as &amp;ldquo;info&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eol_flow &amp;lt;- get_inat_obs_project(&amp;quot;state-flowers-of-the-united-states-eol-collection&amp;quot;,
    type = &amp;quot;info&amp;quot;, raw = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 204  Records
## 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### See how many taxa there are, and how many counts there have been
cat(paste(&amp;quot;The project has observed this many species:&amp;quot;, eol_flow$taxa_number,
    sep = &amp;quot; &amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The project has observed this many species: 20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cat(paste(&amp;quot;The project has observed this many occurrences:&amp;quot;, eol_flow$taxa_count,
    sep = &amp;quot; &amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The project has observed this many occurrences: 204
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can grab all the observations from the project as well just by setting the &lt;code&gt;type&lt;/code&gt; as &amp;ldquo;observations&amp;rdquo;.  Then it&amp;rsquo;s easy to to get details about specific observations or users.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eol_obs &amp;lt;- get_inat_obs_project(&amp;quot;state-flowers-of-the-united-states-eol-collection&amp;quot;,
    type = &amp;quot;observations&amp;quot;, raw = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 204  Records
## 0-100-200-300
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## See just the first few details of an observation.
head(get_inat_obs_id(eol_obs$Id[1]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $captive
## NULL
##
## $comments_count
## [1] 0
##
## $community_taxon_id
## [1] 48225
##
## $created_at
## [1] &amp;quot;2013-04-08T15:49:15-07:00&amp;quot;
##
## $delta
## [1] FALSE
##
## $description
## [1] &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## See the first five species this user has recorded
head(get_inat_obs_user(as.character(eol_obs$User.login[1]), maxresults = 20))[,
    1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Lynx rufus&amp;quot;              &amp;quot;Melanerpes formicivorus&amp;quot;
## [3] &amp;quot;Lontra canadensis&amp;quot;       &amp;quot;Buteo lineatus&amp;quot;
## [5] &amp;quot;Icteridae&amp;quot;               &amp;quot;Pelecanus occidentalis&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many more details that you can get, like counts of observations by place ID (extracted from the project or observation, but not well exposed to users), the most common species by date, or by user.  There is almost no end to the details you can extract.  If you ever wanted to do a case study of a citizen science project, you could get data to answer almost any question you had about the iNaturalist project with &lt;code&gt;rinat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, what species occurrence package wouldn&amp;rsquo;t be complete without some basic mapping.  This function will generate a quick map for you based on a data frame of observations from &lt;code&gt;rinat&lt;/code&gt;. These can be from functions such as &lt;code&gt;get_inat_obs&lt;/code&gt;, or &lt;code&gt;get_inat_obs_project&lt;/code&gt;.  Let&amp;rsquo;s end by plotting all the observations from the EOL state flowers project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### Set plot to false so it returns a ggplot2 object, and that let&#39;s us modify
### it.
eol_map &amp;lt;- inat_map(eol_obs, plot = FALSE)
### Now we can modify the returned map
eol_map + borders(&amp;quot;state&amp;quot;) + theme_bw() + xlim(-125, -65) + ylim(25, 50)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-26-rinat/eol_plot.png&#34; alt=&#34;plot of chunk eol_plot&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Species occurrence data</title>
      <link>https://ropensci.org/blog/2014/03/17/spocc/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/03/17/spocc/</guid>
      <description>
        
        

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
UPDATE: mapping functions are in a separate package now (&lt;a href=&#34;https://cran.rstudio.com/web/packages/mapr&#34;&gt;mapr&lt;/a&gt;). Examples that do mapping below have been updated.
&lt;/div&gt;

&lt;p&gt;The rOpenSci projects aims to provide programmatic access to scientific data repositories on the web. A vast majority of the packages in our current suite retrieve some form of biodiversity or taxonomic data. Since several of these datasets have been georeferenced, it provides numerous opportunities for visualizing species distributions, building species distribution maps, and for using it analyses such as species distribution models. In an effort to streamline access to these data, we have developed a package called Spocc, which provides a unified API to all the biodiversity sources that we provide. The obvious advantage is that a user can interact with a common API and not worry about the nuances in syntax that differ between packages. As more data sources come online, users can access even more data without significant changes to their code. However, it is important to note that spocc will never replicate the full functionality that exists within specific packages. Therefore users with a strong interest in one of the specific data sources listed below would benefit from familiarising themselves with the inner working of the appropriate packages.&lt;/p&gt;

&lt;h2 id=&#34;data-sources&#34;&gt;Data Sources&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;spocc&lt;/code&gt; currently interfaces with five major biodiversity repositories. Many of these packages have been part of the rOpenSci suite:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Global Biodiversity Information Facility (&lt;code&gt;rgbif&lt;/code&gt;)
&lt;a href=&#34;http://www.gbif.org/&#34;&gt;GBIF&lt;/a&gt; is a government funded open data repository with several partner organizations with the express goal of providing access to data on Earth&amp;rsquo;s biodiversity. The data are made available by a network of member nodes, coordinating information from various participant organizations and government agencies.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://ecoengine.berkeley.edu/&#34;&gt;Berkeley Ecoengine&lt;/a&gt; (&lt;code&gt;ecoengine&lt;/code&gt;)
The ecoengine is an open API built by the &lt;a href=&#34;http://globalchange.berkeley.edu/&#34;&gt;Berkeley Initiative for Global Change Biology&lt;/a&gt;. The repository provides access to over 3 million specimens from various Berkeley natural history museums. These data span more than a century and provide access to georeferenced specimens, species checklists, photographs, vegetation surveys and resurveys and a variety of measurements from environmental sensors located at reserves across University of California&amp;rsquo;s natural reserve system. (&lt;a href=&#34;http://ropensci.org/blog/2014/01/30/ecoengine/&#34;&gt;related blog post&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;iNaturalist&lt;/strong&gt; (&lt;code&gt;rinat&lt;/code&gt;)
iNaturalist provides access to crowd sourced citizen science data on species observations.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://vertnet.org/index.php&#34;&gt;VertNet&lt;/a&gt; (&lt;code&gt;rvertnet&lt;/code&gt;)
Similar to &lt;code&gt;rgbif&lt;/code&gt;, ecoengine, and &lt;code&gt;rbison&lt;/code&gt; (see below), VertNet provides access to more than 80 million vertebrate records spanning a large number of institutions and museums primarly covering four major disciplines (mammology, herpetology, ornithology, and icthyology). &lt;strong&gt;Note that we don&amp;rsquo;t currenlty support VertNet data in this package, but we should soon&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bison.usgs.ornl.gov/&#34;&gt;Biodiversity Information Serving Our Nation&lt;/a&gt; (&lt;code&gt;rbison&lt;/code&gt;)
Built by the US Geological Survey&amp;rsquo;s core science analytic team, BISON is a portal that provides access to species occurrence data from several participating institutions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://ebird.org/content/ebird/&#34;&gt;eBird&lt;/a&gt; (&lt;code&gt;rebird&lt;/code&gt;)
ebird is a database developed and maintained by the Cornell Lab of Ornithology and the National Audubon Society. It provides real-time access to checklist data, data on bird abundance and distribution, and communtiy reports from birders.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://antweb.org&#34;&gt;AntWeb&lt;/a&gt; (&lt;code&gt;AntWeb&lt;/code&gt;)
AntWeb is the world&amp;rsquo;s largest online database of images, specimen records, and natural history information on ants. It is community driven and open to contribution from anyone with specimen records, natural history comments, or images. (&lt;a href=&#34;http://ropensci.org/blog/2014/02/18/antweb/&#34;&gt;related blog post&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It&amp;rsquo;s important to keep in mind that several data providers interface with many of the above mentioned repositories. This means that occurence data obtained from BISON may be duplicates of data that are also available through GBIF. We do not have a way to resolve these duplicates or overlaps at this time but it is an issue we are hoping to address in future versions of the package.&lt;/p&gt;

&lt;h2 id=&#34;installing-the-package&#34;&gt;Installing the package&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;spocc&amp;quot;)
# or install the most recent version
devtools::install_github(&amp;quot;ropensci/spocc&amp;quot;)
library(spocc)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;spocc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;searching-species-occurrence-data&#34;&gt;Searching species occurrence data&lt;/h2&gt;

&lt;p&gt;The main workhorse function of the package is called &lt;code&gt;occ&lt;/code&gt;. The function allows you to search for occurrence records on a single species or list of species and from particular sources of interest or several. The main input is a &lt;code&gt;query&lt;/code&gt; with sources specified under the argument &lt;code&gt;from&lt;/code&gt;. So to look at a really simply query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;results &amp;lt;- occ(query = &#39;Accipiter striatus&#39;, from = &#39;gbif&#39;)
results
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; Searched: gbif
#&amp;gt; Occurrences - Found: 529,471, Returned: 500
#&amp;gt; Search type: Scientific
#&amp;gt;   gbif: Accipiter striatus (500)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This returns the results as an S3 class with a slot for each data source. Since we only requested data from &lt;code&gt;gbif&lt;/code&gt;, the remaining slots are empty. To view the data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;results$gbif
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; Species [Accipiter striatus (500)]
#&amp;gt; First 10 rows of [Accipiter_striatus]
#&amp;gt;
#&amp;gt; Source: local data frame [500 x 117]
#&amp;gt;
#&amp;gt;                  name  longitude latitude  prov                 issues
#&amp;gt;                 &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;
#&amp;gt; 1  Accipiter striatus  -97.94314 30.04580  gbif         cdround,gass84
#&amp;gt; 2  Accipiter striatus -122.40089 37.49201  gbif         cdround,gass84
#&amp;gt; 3  Accipiter striatus  -97.63810 30.24674  gbif    cdround,cudc,gass84
#&amp;gt; 4  Accipiter striatus  -81.85267 28.81852  gbif                 gass84
#&amp;gt; 5  Accipiter striatus -106.31531 31.71593  gbif         cdround,gass84
#&amp;gt; 6  Accipiter striatus  -97.81493 26.03150  gbif cdround,cucdmis,gass84
#&amp;gt; 7  Accipiter striatus  -95.50117 29.76086  gbif         cdround,gass84
#&amp;gt; 8  Accipiter striatus -116.67145 32.94147  gbif         cdround,gass84
#&amp;gt; 9  Accipiter striatus  -96.91463 32.82949  gbif         cdround,gass84
#&amp;gt; 10 Accipiter striatus  -75.65139 45.44557  gbif         cdround,gass84
#&amp;gt; ..                ...        ...      ...   ...                    ...
#&amp;gt; Variables not shown: key &amp;lt;int&amp;gt;, datasetKey &amp;lt;chr&amp;gt;, publishingOrgKey &amp;lt;chr&amp;gt;,
#&amp;gt;   publishingCountry &amp;lt;chr&amp;gt;, protocol &amp;lt;chr&amp;gt;, lastCrawled &amp;lt;chr&amp;gt;, lastParsed
#&amp;gt;   &amp;lt;chr&amp;gt;, extensions &amp;lt;chr&amp;gt;, basisOfRecord &amp;lt;chr&amp;gt;, taxonKey &amp;lt;int&amp;gt;, kingdomKey
#&amp;gt;   &amp;lt;int&amp;gt;, phylumKey &amp;lt;int&amp;gt;, classKey &amp;lt;int&amp;gt;, orderKey &amp;lt;int&amp;gt;, familyKey &amp;lt;int&amp;gt;,
#&amp;gt;   genusKey &amp;lt;int&amp;gt;, speciesKey &amp;lt;int&amp;gt;, scientificName &amp;lt;chr&amp;gt;, kingdom &amp;lt;chr&amp;gt;,
#&amp;gt;   phylum &amp;lt;chr&amp;gt;, order &amp;lt;chr&amp;gt;, family &amp;lt;chr&amp;gt;, genus &amp;lt;chr&amp;gt;, species &amp;lt;chr&amp;gt;,
#&amp;gt;   genericName &amp;lt;chr&amp;gt;, specificEpithet &amp;lt;chr&amp;gt;, taxonRank &amp;lt;chr&amp;gt;,
#&amp;gt;   dateIdentified &amp;lt;chr&amp;gt;, coordinateUncertaintyInMeters &amp;lt;dbl&amp;gt;, year &amp;lt;int&amp;gt;,
#&amp;gt;   month &amp;lt;int&amp;gt;, day &amp;lt;int&amp;gt;, eventDate &amp;lt;date&amp;gt;, modified &amp;lt;chr&amp;gt;,
#&amp;gt;   lastInterpreted &amp;lt;chr&amp;gt;, references &amp;lt;chr&amp;gt;, identifiers &amp;lt;chr&amp;gt;, facts &amp;lt;chr&amp;gt;,
#&amp;gt;   relations &amp;lt;chr&amp;gt;, geodeticDatum &amp;lt;chr&amp;gt;, class &amp;lt;chr&amp;gt;, countryCode &amp;lt;chr&amp;gt;,
#&amp;gt;   country &amp;lt;chr&amp;gt;, rightsHolder &amp;lt;chr&amp;gt;, identifier &amp;lt;chr&amp;gt;, informationWithheld
#&amp;gt;   &amp;lt;chr&amp;gt;, verbatimEventDate &amp;lt;chr&amp;gt;, datasetName &amp;lt;chr&amp;gt;, verbatimLocality
#&amp;gt;   &amp;lt;chr&amp;gt;, collectionCode &amp;lt;chr&amp;gt;, gbifID &amp;lt;chr&amp;gt;, occurrenceID &amp;lt;chr&amp;gt;, taxonID
#&amp;gt;   &amp;lt;chr&amp;gt;, license &amp;lt;chr&amp;gt;, catalogNumber &amp;lt;chr&amp;gt;, recordedBy &amp;lt;chr&amp;gt;,
#&amp;gt;   http...unknown.org.occurrenceDetails &amp;lt;chr&amp;gt;, institutionCode &amp;lt;chr&amp;gt;,
#&amp;gt;   rights &amp;lt;chr&amp;gt;, eventTime &amp;lt;chr&amp;gt;, identificationID &amp;lt;chr&amp;gt;, occurrenceRemarks
#&amp;gt;   &amp;lt;chr&amp;gt;, individualCount &amp;lt;int&amp;gt;, elevation &amp;lt;dbl&amp;gt;, elevationAccuracy &amp;lt;dbl&amp;gt;,
#&amp;gt;   continent &amp;lt;chr&amp;gt;, stateProvince &amp;lt;chr&amp;gt;, institutionID &amp;lt;chr&amp;gt;, county &amp;lt;chr&amp;gt;,
#&amp;gt;   identificationVerificationStatus &amp;lt;chr&amp;gt;, language &amp;lt;chr&amp;gt;, type &amp;lt;chr&amp;gt;,
#&amp;gt;   locationAccordingTo &amp;lt;chr&amp;gt;, preparations &amp;lt;chr&amp;gt;, identifiedBy &amp;lt;chr&amp;gt;,
#&amp;gt;   georeferencedDate &amp;lt;chr&amp;gt;, higherGeography &amp;lt;chr&amp;gt;, nomenclaturalCode &amp;lt;chr&amp;gt;,
#&amp;gt;   georeferencedBy &amp;lt;chr&amp;gt;, georeferenceProtocol &amp;lt;chr&amp;gt;, endDayOfYear &amp;lt;chr&amp;gt;,
#&amp;gt;   georeferenceVerificationStatus &amp;lt;chr&amp;gt;, locality &amp;lt;chr&amp;gt;,
#&amp;gt;   verbatimCoordinateSystem &amp;lt;chr&amp;gt;, otherCatalogNumbers &amp;lt;chr&amp;gt;, organismID
#&amp;gt;   &amp;lt;chr&amp;gt;, previousIdentifications &amp;lt;chr&amp;gt;, identificationQualifier &amp;lt;chr&amp;gt;,
#&amp;gt;   samplingProtocol &amp;lt;chr&amp;gt;, accessRights &amp;lt;chr&amp;gt;, higherClassification &amp;lt;chr&amp;gt;,
#&amp;gt;   georeferenceSources &amp;lt;chr&amp;gt;, sex &amp;lt;chr&amp;gt;, establishmentMeans &amp;lt;chr&amp;gt;,
#&amp;gt;   occurrenceStatus &amp;lt;chr&amp;gt;, disposition &amp;lt;chr&amp;gt;, startDayOfYear &amp;lt;chr&amp;gt;,
#&amp;gt;   dynamicProperties &amp;lt;chr&amp;gt;, infraspecificEpithet &amp;lt;chr&amp;gt;, georeferenceRemarks
#&amp;gt;   &amp;lt;chr&amp;gt;, and 12 more &amp;lt;...&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you prefer data from more than one source, simply pass a vector of source names for the &lt;code&gt;from&lt;/code&gt; argument. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;occ(query = &#39;Accipiter striatus&#39;, from = c(&#39;ecoengine&#39;, &#39;gbif&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; Searched: ecoengine, gbif
#&amp;gt; Occurrences - Found: 530,224, Returned: 1,000
#&amp;gt; Search type: Scientific
#&amp;gt;   gbif: Accipiter striatus (500)
#&amp;gt;   ecoengine: Accipiter striatus (500)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also search for multiple species across multiple engines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;species_list &amp;lt;- c(&amp;quot;Accipiter gentilis&amp;quot;, &amp;quot;Accipiter poliogaster&amp;quot;, &amp;quot;Accipiter badius&amp;quot;)
res_set &amp;lt;- occ(species_list, from = c(&#39;gbif&#39;, &#39;ecoengine&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, we can search for data on the Sharp-shinned Hawk from other data sources too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;occ(query = &#39;Accipiter striatus&#39;, from = &#39;ecoengine&#39;)
# or look for data on other species
occ(query = &#39;Danaus plexippus&#39;, from = &#39;inat&#39;)
occ(query = &#39;Bison bison&#39;, from = &#39;bison&#39;)
occ(query = &amp;quot;acanthognathus brevicornis&amp;quot;, from = &amp;quot;antweb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;occ&lt;/code&gt; is also extremely flexible and can take package specific arguments for any source you might be querying. You can pass these as a list under &lt;code&gt;package_name_opts&lt;/code&gt; (e.g. &lt;code&gt;antweb_opts&lt;/code&gt;, &lt;code&gt;ecoengine_opts&lt;/code&gt;). See the help file for &lt;code&gt;?occ&lt;/code&gt; for more information.&lt;/p&gt;

&lt;h2 id=&#34;visualizing-biodiversity-data&#34;&gt;Visualizing biodiversity data&lt;/h2&gt;

&lt;p&gt;We provide several methods to visualize the resulting data. Current options include Leaflet.js, ggmap, a Mapbox implementation in a GitHub gist, or a static map.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mapping with Leaflet&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UPDATE: mapping functions are in a separate package called &lt;code&gt;mapr&lt;/code&gt;. Eg below updated&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spp &amp;lt;- c(&amp;quot;Danaus plexippus&amp;quot;, &amp;quot;Accipiter striatus&amp;quot;, &amp;quot;Pinus contorta&amp;quot;)
dat &amp;lt;- occ(query = spp, from = &amp;quot;gbif&amp;quot;, has_coords = TRUE, limit = 50)
library(&amp;quot;mapr&amp;quot;)
map_leaflet(dat)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-17-spocc/leaflet_map.png&#34; alt=&#34;leaflet_map&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Render a geojson file automatically as a GitHub gist&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To have a map automatically posted as a gist, you&amp;rsquo;ll need to set up your GitHub credentials ahead of time. You can either pass these as variables &lt;code&gt;github.username&lt;/code&gt; and &lt;code&gt;github.password&lt;/code&gt;, or store them in your options (taking regular precautions as you would with passwords of course). If you don&amp;rsquo;t have these stored, you&amp;rsquo;ll be prompted to enter them before posting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spp &amp;lt;- c(&amp;quot;Danaus plexippus&amp;quot;, &amp;quot;Accipiter striatus&amp;quot;, &amp;quot;Pinus contorta&amp;quot;)
dat &amp;lt;- occ(query = spp, from = &amp;quot;gbif&amp;quot;, has_coords = TRUE)
dat &amp;lt;- fixnames(dat)
library(&amp;quot;mapr&amp;quot;)
map_gist(dat, color = c(&amp;quot;#976AAE&amp;quot;, &amp;quot;#6B944D&amp;quot;, &amp;quot;#BD5945&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/sckott/daa7077cf80f2d2fbf2c5a41a9a00836.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Static maps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If interactive maps aren&amp;rsquo;t your cup of tea, or you prefer to have one that you can embed in a paper, try one of our static map options. You can go with the more elegant &lt;code&gt;ggmap&lt;/code&gt; option or stick with something from base graphics.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ecoengine_data &amp;lt;- occ(query = &amp;quot;Lynx rufus californicus&amp;quot;, from = &amp;quot;ecoengine&amp;quot;, has_coords = TRUE)
map_ggplot(ecoengine_data, map = &amp;quot;usa&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-17-spocc/ggplot.png&#34; alt=&#34;ggplot_maps&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spnames &amp;lt;- c(&amp;quot;Accipiter striatus&amp;quot;, &amp;quot;Setophaga caerulescens&amp;quot;, &amp;quot;Spinus tristis&amp;quot;)
base_data &amp;lt;- occ(query = spnames, from = &amp;quot;gbif&amp;quot;, has_coords = TRUE)
map_plot(base_data, cex = 1, pch = 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-03-17-spocc/base_maps.png&#34; alt=&#34;base_maps&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As soon as we have an updated &lt;code&gt;rvertnet&lt;/code&gt; package, we&amp;rsquo;ll add the ability to query VertNet data from spocc.&lt;/li&gt;
&lt;li&gt;We will add &lt;code&gt;rCharts&lt;/code&gt; as an official import once the package is on CRAN (Eta end of March)&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;re helping on a new package rMaps to make interactive maps using various Javascript mapping libraries, which will give access to a variety of awesome interactive maps. We will integrate rMaps once it&amp;rsquo;s on CRAN.&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ll add a function to make interactive maps using RStudio&amp;rsquo;s Shiny in a future version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, &lt;a href=&#34;https://github.com/ropensci/spocc/issues?page=1&amp;amp;state=open&#34;&gt;issues&lt;/a&gt; or &lt;a href=&#34;https://github.com/ropensci/spocc/pulls&#34;&gt;pull requests&lt;/a&gt; are welcome directly on the &lt;a href=&#34;http://ropensci.org/spocc&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
