<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Taxize on rOpenSci - open tools for open science</title>
    <link>https://ropensci.org/tags/taxize/</link>
    <description>Recent content in Taxize on rOpenSci - open tools for open science</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 27 Jul 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ropensci.org/tags/taxize/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The rOpenSci Taxonomy Suite</title>
      <link>https://ropensci.org/blog/2017/07/27/taxonomy-suite/</link>
      <pubDate>Thu, 27 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/07/27/taxonomy-suite/</guid>
      <description>
        
        

&lt;h2 id=&#34;what-is-taxonomy&#34;&gt;What is Taxonomy?&lt;/h2&gt;

&lt;p&gt;Taxonomy in its most general sense is &lt;a href=&#34;https://en.wikipedia.org/wiki/Taxonomy_(general)&#34;&gt;the practice and science of classification&lt;/a&gt;. It can refer to many things. You may have heard or used the word &lt;em&gt;taxonomy&lt;/em&gt; used to indicate any sort of classification of things, whether it be companies or widgets. Here, we&amp;rsquo;re talking about &lt;a href=&#34;https://en.wikipedia.org/wiki/Taxonomy_(biology)&#34;&gt;biological taxonomy&lt;/a&gt;, the science of defining and naming groups of biological organisms.&lt;/p&gt;

&lt;p&gt;In case you aren&amp;rsquo;t familiar with the terminology, here&amp;rsquo;s a brief intro.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;species&lt;/code&gt; - the term you are likely most familiar with, usually defined as a group of individuals in which any 2 individuals can produce fertile offspring, although definitions can vary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;genus&lt;/code&gt;/&lt;code&gt;family&lt;/code&gt;/&lt;code&gt;order&lt;/code&gt;/&lt;code&gt;class&lt;/code&gt;/&lt;code&gt;phylum&lt;/code&gt;/&lt;code&gt;kingdom&lt;/code&gt; -  These are nested groupings of similar species. &lt;code&gt;genus&lt;/code&gt; (e.g. &lt;em&gt;Homo&lt;/em&gt;) is  restrictive grouping and &lt;code&gt;kingdom&lt;/code&gt; (e.g. &lt;em&gt;Animalia&lt;/em&gt;) is a much more inclusive grouping. There are genera in families, families in orders, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taxon&lt;/code&gt; - a species or grouping of species. e.g. &lt;em&gt;Homo sapiens&lt;/em&gt;, &lt;em&gt;Primates&lt;/em&gt;, and &lt;em&gt;Animalia&lt;/em&gt; are all taxa.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taxa&lt;/code&gt; - the plural of &lt;code&gt;taxon&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taxonomic hierarchy&lt;/code&gt; or &lt;code&gt;taxonomic classification&lt;/code&gt; - the list of groups a species (or other taxon) belongs to. For example the taxonomic classification of humans is: &lt;code&gt;Animalia;Chordata;Mammalia;Primates;Hominidae;Homo;sapiens&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ubiquity-and-importance-of-taxonomic-names&#34;&gt;Ubiquity and Importance of Taxonomic Names&lt;/h2&gt;

&lt;p&gt;We put a lot of time into our suite of taxonomic software for a good reason - probably all naturalists/biologists/environmental consultants/etc. will be confronted with taxonomic names in their research/work/surveys/etc. at some point or all along the way. Some people study a single species their entire career, likely having little trouble with taxonomic names - while others study entire communities or ecosystems, dealing with thousands of taxonomic names.&lt;/p&gt;

&lt;p&gt;Taxonomic names are not only ubiquitous but are incredibly important to get right. Just as the URL points to the correct page you want to view on the internet (an incorrect URL will not get you where you want to go), taxonomic names point to the right definition/description of a taxon, leading to lots of resources increasingly online including text, images, sounds, etc. If you get the taxonomic name wrong, all information downstream is likely to be wrong.&lt;/p&gt;

&lt;h2 id=&#34;why-r-for-taxonomic-names&#34;&gt;Why R for taxonomic names?&lt;/h2&gt;

&lt;p&gt;R is gaining in popularity in general (&lt;a href=&#34;https://www.tiobe.com/tiobe-index//&#34;&gt;TIOBE index&lt;/a&gt;, &lt;a href=&#34;http://r4stats.com/articles/popularity/&#34;&gt;Muenchen 2017&lt;/a&gt;), and in &lt;a href=&#34;http://www.nature.com/news/programming-tools-adventures-with-r-1.16609&#34;&gt;academia&lt;/a&gt;. At least in my graduate school experience (&amp;lsquo;06 - &amp;lsquo;12), most graduate students used R - despite their bosses often using other things.&lt;/p&gt;

&lt;p&gt;Given that R is widely used among biologists that have to deal with taxonomic names, it makes a lot of sense to build taxonomic tools in R.&lt;/p&gt;

&lt;h2 id=&#34;ropensci-taxonomy-suite&#34;&gt;rOpenSci Taxonomy Suite&lt;/h2&gt;

&lt;p&gt;We have an ever-growing suite of packages that enable users to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search for taxonomic names&lt;/li&gt;
&lt;li&gt;Correct taxonomic names&lt;/li&gt;
&lt;li&gt;Embed their taxonomic names in R classes that enable powerful downstream manipulations&lt;/li&gt;
&lt;li&gt;Leverage dozens of taxonomic data sources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;taxize&lt;/code&gt; - taxonomic data from many sources&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taxizedb&lt;/code&gt; - work with taxonomic SQL databases locally&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taxa&lt;/code&gt; - taxonomic classes and manipulation functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binomen&lt;/code&gt; - taxonomic name classes and parsing methods (getting folded into &lt;code&gt;taxa&lt;/code&gt;, will be archived on CRAN soon)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wikitaxa&lt;/code&gt; - taxonomic data from Wikipedia/Wikidata/Wikispecies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ritis&lt;/code&gt; - get ITIS (Integrated Taxonomic Information Service) taxonomic data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;worrms&lt;/code&gt; - get WORMS (World Register of Marine Species) taxonomic data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pegax&lt;/code&gt; - taxonomy PEG (Parsing Expression Grammar)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;For each package below, there are 2-3 badges. One for whether the package is on CRAN
&lt;br&gt;
&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312; color:white&#34;&gt;cran&lt;/span&gt;
&lt;br&gt;
a link to source on GitHub
&lt;br&gt;
&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB; color:white&#34;&gt;github&lt;/span&gt;
&lt;br&gt;
and another for when the package is community contributed:&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#19B698; color:white&#34;&gt;community&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;For each package we show a very brief example - all packages have much more functionality - check them out on CRAN or GitHub.&lt;/p&gt;

&lt;h2 id=&#34;taxize&#34;&gt;taxize&lt;/h2&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/taxize/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/taxize&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;This was our first package for taxonomy. It is a one stop shop for lots of different taxonomic data sources online, including NCBI, ITIS, GBIF, EOL, IUCN, and more - up to 22 data sources now.&lt;/p&gt;

&lt;p&gt;The canonical reference for &lt;code&gt;taxize&lt;/code&gt; is the paper we published in 2013:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chamberlain, S. A., &amp;amp; Sz√∂cs, E. (2013). taxize: taxonomic search and retrieval in R. F1000Research.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check it out at &lt;a href=&#34;https://doi.org/10.12688/f1000research.2-191.v1&#34;&gt;https://doi.org/10.12688/f1000research.2-191.v1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We released a new version (&lt;code&gt;v0.8.8&lt;/code&gt;) about a month ago (a tiny bug fix was pushed more recently (&lt;code&gt;v0.8.9&lt;/code&gt;)) with some new features requested by users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can now get downstream taxa from NCBI, see &lt;code&gt;ncbi_downstream&lt;/code&gt; and &lt;code&gt;downstream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia/Wikidata/Wikispecies are now data sources! via the &lt;code&gt;wikitaxa&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Now you can get IUCN IDs for taxa, see &lt;code&gt;get_iucn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tax_rank&lt;/code&gt; now works with many more data sources: ncbi, itis, eol, col, tropicos, gbif, nbn,
worms, natserv, and bold&lt;/li&gt;
&lt;li&gt;Many improvements and bug fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;taxize&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;taxize&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;taxize&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get WORMS identifiers for three taxa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ids &amp;lt;- get_wormsid(c(&amp;quot;Platanista gangetica&amp;quot;, &amp;quot;Lichenopora neapolitana&amp;quot;, &#39;Gadus morhua&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get classifications for each taxon&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clazz &amp;lt;- classification(ids, db = &#39;worms&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Combine all three into a single data.frame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(rbind(clazz))
#&amp;gt;            name       rank     id  query
#&amp;gt; 1      Animalia    Kingdom      2 254967
#&amp;gt; 2      Chordata     Phylum   1821 254967
#&amp;gt; 3    Vertebrata  Subphylum 146419 254967
#&amp;gt; 4 Gnathostomata Superclass   1828 254967
#&amp;gt; 5     Tetrapoda Superclass   1831 254967
#&amp;gt; 6      Mammalia      Class   1837 254967
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;taxizedb&#34;&gt;taxizedb&lt;/h2&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/taxizedb/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/taxizedb&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;taxizedb&lt;/code&gt; is a relatively new package. We just released a new version (&lt;code&gt;v0.1.4&lt;/code&gt;) about one month ago, with fixes for the new &lt;code&gt;dplyr&lt;/code&gt; version.&lt;/p&gt;

&lt;p&gt;The sole purpose of &lt;code&gt;taxizedb&lt;/code&gt; is to solve the use case where a user has a lot of taxonomic names, and thus using &lt;code&gt;taxize&lt;/code&gt; is too slow. Although &lt;code&gt;taxize&lt;/code&gt; is a powerful tool, every request is a transaction over the internet, and the speed of that transaction can vary from very fast to very slow, depending on three factors: data provider speed (including many things), your internet speed, and how much data you requested. &lt;code&gt;taxizedb&lt;/code&gt; gets around this problem by using a local SQL database of the same stuff the data providers have, so you can get things done much faster.&lt;/p&gt;

&lt;p&gt;The trade-off with &lt;code&gt;taxizedb&lt;/code&gt; is that the interface is quite different from &lt;code&gt;taxize&lt;/code&gt;.  So there is a learning curve. There are two options in &lt;code&gt;taxizedb&lt;/code&gt;: you can use SQL syntax, or &lt;code&gt;dplyr&lt;/code&gt; commands. I&amp;rsquo;m guessing people are more familiar with the latter.&lt;/p&gt;

&lt;h3 id=&#34;example-1&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Install &lt;code&gt;taxizedb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;taxizedb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;taxizedb&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we show working with the ITIS SQL database. Other sources work with the same workflow of function calls.&lt;/p&gt;

&lt;p&gt;Download ITIS SQL database&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- db_download_itis()
#&amp;gt; downloading...
#&amp;gt; unzipping...
#&amp;gt; cleaning up...
#&amp;gt; [1] &amp;quot;/Users/sacmac/Library/Caches/R/taxizedb/ITIS.sql&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;db_load_tpl()&lt;/code&gt; loads the SQL database into Postgres. Data sources vary in the SQL database used, see help for more.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;db_load_tpl(x, &amp;quot;&amp;lt;your Postgresql user name&amp;gt;&amp;quot;, &amp;quot;your Postgresql password, if any&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a &lt;code&gt;src&lt;/code&gt; object to connect to the SQL database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;src &amp;lt;- src_itis(&amp;quot;&amp;lt;your Postgresql user name&amp;gt;&amp;quot;, &amp;quot;your Postgresql password, if any&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Query!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dbplyr)
library(dplyr)
tbl(src, sql(&amp;quot;select * from taxonomic_units limit 10&amp;quot;))
# Source:   SQL [?? x 26]
# Database: postgres 9.6.0 [sacmac@localhost:5432/ITIS]
     tsn unit_ind1                          unit_name1 unit_ind2 unit_name2 unit_ind3 unit_name3 unit_ind4 unit_name4
   &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;                               &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;
 1    50      &amp;lt;NA&amp;gt; Bacteria                                 &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
 2    51      &amp;lt;NA&amp;gt; Schizomycetes                            &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
 3    52      &amp;lt;NA&amp;gt; Archangiaceae                            &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
 4    53      &amp;lt;NA&amp;gt; Pseudomonadales                          &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
 5    54      &amp;lt;NA&amp;gt; Rhodobacteriineae                        &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
 6    55      &amp;lt;NA&amp;gt; Pseudomonadineae                         &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
 7    56      &amp;lt;NA&amp;gt; Nitrobacteraceae                         &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
 8    57      &amp;lt;NA&amp;gt; Nitrobacter                              &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
 9    58      &amp;lt;NA&amp;gt; Nitrobacter                              &amp;lt;NA&amp;gt;     agilis      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
10    59      &amp;lt;NA&amp;gt; Nitrobacter                              &amp;lt;NA&amp;gt;     flavus      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
# ... with more rows, and 17 more variables: unnamed_taxon_ind &amp;lt;chr&amp;gt;, name_usage &amp;lt;chr&amp;gt;, unaccept_reason &amp;lt;chr&amp;gt;,
#   credibility_rtng &amp;lt;chr&amp;gt;, completeness_rtng &amp;lt;chr&amp;gt;, currency_rating &amp;lt;chr&amp;gt;, phylo_sort_seq &amp;lt;int&amp;gt;, initial_time_stamp &amp;lt;dttm&amp;gt;,
#   parent_tsn &amp;lt;int&amp;gt;, taxon_author_id &amp;lt;int&amp;gt;, hybrid_author_id &amp;lt;int&amp;gt;, kingdom_id &amp;lt;int&amp;gt;, rank_id &amp;lt;int&amp;gt;, update_date &amp;lt;date&amp;gt;,
#   uncertain_prnt_ind &amp;lt;chr&amp;gt;, n_usage &amp;lt;chr&amp;gt;, complete_name &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;taxa&#34;&gt;taxa&lt;/h2&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/taxa/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/taxa&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;taxa&lt;/code&gt; is our newest entry (hit CRAN just a few weeks ago) into the taxonomic R package space. It defines taxonomic classes for R, and basic, but powerful manipulations on those classes.&lt;/p&gt;

&lt;p&gt;It defines two broad types of classes: those with just taxonomic data, and a class with taxonomic data plus other associated data (such as traits, environmental data, etc.) called &lt;code&gt;taxmap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;taxa&lt;/code&gt; package includes functions to do various operations with these taxonomic classes. With the taxonomic classes, you can filter out or keep taxa based on various criteria. In the case of the &lt;code&gt;taxmap&lt;/code&gt; class, when you filter on taxa, the associated data is filtered the same way so taxa and data are in sync.&lt;/p&gt;

&lt;p&gt;A manuscript about &lt;code&gt;taxa&lt;/code&gt; is being prepared at the moment - so look out for that.&lt;/p&gt;

&lt;p&gt;Most of the hard work in &lt;code&gt;taxa&lt;/code&gt; has been done by my co-maintainer &lt;a href=&#34;https://github.com/zachary-foster&#34;&gt;Zachary Foster&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;example-2&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;taxa&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;taxa&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;taxa&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example &lt;code&gt;Hierarchy&lt;/code&gt; data object that comes with the package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ex_hierarchy1
#&amp;gt; &amp;lt;Hierarchy&amp;gt;
#&amp;gt;   no. taxon&#39;s:  3
#&amp;gt;   Poaceae / family / 4479
#&amp;gt;   Poa / genus / 4544
#&amp;gt;   Poa annua / species / 93036
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can remove taxa like the following, combining criteria targeting ranks, taxonomic names, or IDs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ex_hierarchy1 %&amp;gt;% pop(ranks(&amp;quot;family&amp;quot;), ids(4544))
#&amp;gt; &amp;lt;Hierarchy&amp;gt;
#&amp;gt;   no. taxon&#39;s:  1
#&amp;gt;   Poa annua / species / 93036
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example &lt;code&gt;taxmap&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ex_taxmap
#&amp;gt; &amp;lt;Taxmap&amp;gt;
#&amp;gt;   17 taxa: b. Mammalia ... q. lycopersicum, r. tuberosum
#&amp;gt;   17 edges: NA-&amp;gt;b, NA-&amp;gt;c, b-&amp;gt;d ... j-&amp;gt;o, k-&amp;gt;p, l-&amp;gt;q, l-&amp;gt;r
#&amp;gt;   4 data sets:
#&amp;gt;     info:
#&amp;gt;       # A tibble: 6 x 4
#&amp;gt;           name n_legs dangerous taxon_id
#&amp;gt;         &amp;lt;fctr&amp;gt;  &amp;lt;dbl&amp;gt;     &amp;lt;lgl&amp;gt;    &amp;lt;chr&amp;gt;
#&amp;gt;       1  tiger      4      TRUE        m
#&amp;gt;       2    cat      4     FALSE        n
#&amp;gt;       3   mole      4     FALSE        o
#&amp;gt;       # ... with 3 more rows
#&amp;gt;     phylopic_ids:  e148eabb-f138-43c6-b1e4-5cda2180485a ... 63604565-0406-460b-8cb8-1abe954b3f3a
#&amp;gt;     foods: a list with 6 items
#&amp;gt;     And 1 more data sets: abund
#&amp;gt;   1 functions:
#&amp;gt;  reaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, filter by taxonomic names to those starting with the letter &lt;code&gt;t&lt;/code&gt; (notice the taxa, edgelist, and datasets have changed)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;filter_taxa(ex_taxmap, startsWith(taxon_names, &amp;quot;t&amp;quot;))
#&amp;gt; &amp;lt;Taxmap&amp;gt;
#&amp;gt;   3 taxa: m. tigris, o. typhlops, r. tuberosum
#&amp;gt;   3 edges: NA-&amp;gt;m, NA-&amp;gt;o, NA-&amp;gt;r
#&amp;gt;   4 data sets:
#&amp;gt;     info:
#&amp;gt;       # A tibble: 3 x 4
#&amp;gt;           name n_legs dangerous taxon_id
#&amp;gt;         &amp;lt;fctr&amp;gt;  &amp;lt;dbl&amp;gt;     &amp;lt;lgl&amp;gt;    &amp;lt;chr&amp;gt;
#&amp;gt;       1  tiger      4      TRUE        m
#&amp;gt;       2   mole      4     FALSE        o
#&amp;gt;       3 potato      0     FALSE        r
#&amp;gt;     phylopic_ids:  e148eabb-f138-43c6-b1e4-5cda2180485a ... 63604565-0406-460b-8cb8-1abe954b3f3a
#&amp;gt;     foods: a list with 3 items
#&amp;gt;     And 1 more data sets: abund
#&amp;gt;   1 functions:
#&amp;gt;  reaction
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wikitaxa&#34;&gt;wikitaxa&lt;/h2&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/wikitaxa/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/wikitaxa&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;wikitaxa&lt;/code&gt; is a client that allows you to get taxonomic data from four different Wiki-* sites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wikipedia&lt;/li&gt;
&lt;li&gt;Wikispecies&lt;/li&gt;
&lt;li&gt;Wikidata&lt;/li&gt;
&lt;li&gt;Wikicommons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only Wikispecies is focused on taxonomy - for the others you could use &lt;code&gt;wikitaxa&lt;/code&gt; to do any searches, but we look for and parse out taxonomic specific items in the wiki objects that are returned.&lt;/p&gt;

&lt;p&gt;We released a new version (&lt;code&gt;v0.1.4&lt;/code&gt;) earlier this year. Big thanks to &lt;a href=&#34;https://github.com/ezwelty&#34;&gt;Ethan Welty&lt;/a&gt; for help on this package.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wikitaxa&lt;/code&gt; is used in &lt;code&gt;taxize&lt;/code&gt; to get Wiki* data.&lt;/p&gt;

&lt;h3 id=&#34;example-3&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;wikitaxa&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;wikitaxa&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;wikitaxa&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Search for &lt;em&gt;Malus domestica&lt;/em&gt; (apple):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- wt_wikispecies(name = &amp;quot;Malus domestica&amp;quot;)
# links to language sites for the taxon
res$langlinks
#&amp;gt; # A tibble: 12 x 5
#&amp;gt;     lang                                                   url    langname
#&amp;gt;  * &amp;lt;chr&amp;gt;                                                 &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;
#&amp;gt;  1   ast        https://ast.wikipedia.org/wiki/Malus_domestica    Asturian
#&amp;gt;  2    es         https://es.wikipedia.org/wiki/Malus_domestica     Spanish
#&amp;gt;  3    hu              https://hu.wikipedia.org/wiki/Nemes_alma   Hungarian
#&amp;gt;  4    ia         https://ia.wikipedia.org/wiki/Malus_domestica Interlingua
#&amp;gt;  5    it         https://it.wikipedia.org/wiki/Malus_domestica     Italian
#&amp;gt;  6   nds              https://nds.wikipedia.org/wiki/Huusappel  Low German
#&amp;gt;  7    nl           https://nl.wikipedia.org/wiki/Appel_(plant)       Dutch
#&amp;gt;  8    pl https://pl.wikipedia.org/wiki/Jab%C5%82o%C5%84_domowa      Polish
#&amp;gt;  9   pms        https://pms.wikipedia.org/wiki/Malus_domestica Piedmontese
#&amp;gt; 10    pt         https://pt.wikipedia.org/wiki/Malus_domestica  Portuguese
#&amp;gt; 11    sk https://sk.wikipedia.org/wiki/Jablo%C5%88_dom%C3%A1ca      Slovak
#&amp;gt; 12    vi         https://vi.wikipedia.org/wiki/Malus_domestica  Vietnamese
#&amp;gt; # ... with 2 more variables: autonym &amp;lt;chr&amp;gt;, `*` &amp;lt;chr&amp;gt;
# any external links on the page
res$externallinks
#&amp;gt; [1] &amp;quot;https://web.archive.org/web/20090115062704/http://www.ars-grin.gov/cgi-bin/npgs/html/taxon.pl?104681&amp;quot;
# any common names, and the language they are from
res$common_names
#&amp;gt; # A tibble: 19 x 2
#&amp;gt;               name   language
#&amp;gt;              &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;
#&amp;gt;  1          –Ø–±—ä–ª–∫–∞  –±—ä–ª–≥–∞—Ä—Å–∫–∏
#&amp;gt;  2    Poma, pomera     catal√†
#&amp;gt;  3           Apfel    Deutsch
#&amp;gt;  4     Aed-√µunapuu      eesti
#&amp;gt;  5           ŒúŒ∑ŒªŒπŒ¨   ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨
#&amp;gt;  6           Apple    English
#&amp;gt;  7         Manzano    espa√±ol
#&amp;gt;  8           Pomme   fran√ßais
#&amp;gt;  9           Mel√¢r     furlan
#&amp;gt; 10        ÏÇ¨Í≥ºÎÇòÎ¨¥     ÌïúÍµ≠Ïñ¥
#&amp;gt; 11          ‚ÄòƒÄpala    Hawai ªi
#&amp;gt; 12            Melo   italiano
#&amp;gt; 13           Aapel Nordfriisk
#&amp;gt; 14  Ma√ß√£, Macieira  portugu√™s
#&amp;gt; 15 –Ø–±–ª–æ–Ω—è –¥–æ–º–∞—à–Ω—è—è    —Ä—É—Å—Å–∫–∏–π
#&amp;gt; 16   Tarhaomenapuu      suomi
#&amp;gt; 17            Elma     T√ºrk√ße
#&amp;gt; 18  –Ø–±–ª—É–Ω—è –¥–æ–º–∞—à–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
#&amp;gt; 19          Pomaro     v√®neto
# the taxonomic hierarchy - or classification
res$classification
#&amp;gt; # A tibble: 8 x 2
#&amp;gt;          rank          name
#&amp;gt;         &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;
#&amp;gt; 1 Superregnum     Eukaryota
#&amp;gt; 2      Regnum       Plantae
#&amp;gt; 3      Cladus   Angiosperms
#&amp;gt; 4      Cladus      Eudicots
#&amp;gt; 5      Cladus Core eudicots
#&amp;gt; 6      Cladus        Rosids
#&amp;gt; 7      Cladus    Eurosids I
#&amp;gt; 8        Ordo       Rosales
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ritis&#34;&gt;ritis&lt;/h2&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/ritis/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/ritis&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ritis&lt;/code&gt; is a client for ITIS (Integrated Taxonomic Information Service), part of &lt;a href=&#34;https://www.usgs.gov/&#34;&gt;USGS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a number of different ways to get ITIS data, one of which (local SQL dump) is available in &lt;code&gt;taxizedb&lt;/code&gt;, while the others are covered in &lt;code&gt;ritis&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SOLR web service &lt;a href=&#34;https://www.itis.gov/solr_documentation.html&#34;&gt;https://www.itis.gov/solr_documentation.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RESTful web service &lt;a href=&#34;https://www.itis.gov/web_service.html&#34;&gt;https://www.itis.gov/web_service.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The functions that use the SOLR service are: &lt;code&gt;itis_search&lt;/code&gt;, &lt;code&gt;itis_facet&lt;/code&gt;, &lt;code&gt;itis_group&lt;/code&gt;, and &lt;code&gt;itis_highlight&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All other functions interact with the RESTful web service.&lt;/p&gt;

&lt;p&gt;We released a new version (&lt;code&gt;v0.5.4&lt;/code&gt;) late last year.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ritis&lt;/code&gt; is used in &lt;code&gt;taxize&lt;/code&gt; to get ITIS data.&lt;/p&gt;

&lt;h3 id=&#34;example-4&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;ritis&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ritis&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;ritis&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Search for blue oak ( &lt;em&gt;Quercus douglasii&lt;/em&gt; )&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;search_scientific(&amp;quot;Quercus douglasii&amp;quot;)
#&amp;gt; # A tibble: 1 x 12
#&amp;gt;         author      combinedName kingdom   tsn unitInd1 unitInd2 unitInd3
#&amp;gt; *        &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;lgl&amp;gt;    &amp;lt;lgl&amp;gt;    &amp;lt;lgl&amp;gt;
#&amp;gt; 1 Hook. &amp;amp; Arn. Quercus douglasii Plantae 19322       NA       NA       NA
#&amp;gt; # ... with 5 more variables: unitInd4 &amp;lt;lgl&amp;gt;, unitName1 &amp;lt;chr&amp;gt;,
#&amp;gt; #   unitName2 &amp;lt;chr&amp;gt;, unitName3 &amp;lt;lgl&amp;gt;, unitName4 &amp;lt;lgl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get taxonomic hierarchy down from the Oak genus - that is, since it&amp;rsquo;s a genus, get all species in the Oak genus&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- search_scientific(&amp;quot;Quercus&amp;quot;)
hierarchy_down(res[1,]$tsn)
#&amp;gt; # A tibble: 207 x 5
#&amp;gt;    parentname parenttsn rankname          taxonname   tsn
#&amp;gt;  *      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
#&amp;gt;  1    Quercus     19276  Species    Quercus falcata 19277
#&amp;gt;  2    Quercus     19276  Species     Quercus lyrata 19278
#&amp;gt;  3    Quercus     19276  Species  Quercus michauxii 19279
#&amp;gt;  4    Quercus     19276  Species      Quercus nigra 19280
#&amp;gt;  5    Quercus     19276  Species  Quercus palustris 19281
#&amp;gt;  6    Quercus     19276  Species    Quercus phellos 19282
#&amp;gt;  7    Quercus     19276  Species Quercus virginiana 19283
#&amp;gt;  8    Quercus     19276  Species Quercus macrocarpa 19287
#&amp;gt;  9    Quercus     19276  Species   Quercus coccinea 19288
#&amp;gt; 10    Quercus     19276  Species  Quercus agrifolia 19289
#&amp;gt; # ... with 197 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;worrms&#34;&gt;worrms&lt;/h2&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/worrms/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/worrms&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;worrms&lt;/code&gt; is a client for working with data from World Register of Marine Species (WoRMS).&lt;/p&gt;

&lt;p&gt;WoRMS is the most authoritative list of names of all marine species globally.&lt;/p&gt;

&lt;p&gt;We released our first version (&lt;code&gt;v0.1.0&lt;/code&gt;) earlier this year.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;worrms&lt;/code&gt; is used in &lt;code&gt;taxize&lt;/code&gt; to get WoRMS data.&lt;/p&gt;

&lt;h3 id=&#34;example-5&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;worrms&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;worrms&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;worrms&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get taxonomic name synonyms for salmon ( &lt;em&gt;Oncorhynchus&lt;/em&gt; )&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xx &amp;lt;- wm_records_name(&amp;quot;Oncorhynchus&amp;quot;, fuzzy = FALSE)
wm_synonyms(id = xx$AphiaID)
#&amp;gt; # A tibble: 4 x 25
#&amp;gt;   AphiaID                                                           url
#&amp;gt; *   &amp;lt;int&amp;gt;                                                         &amp;lt;chr&amp;gt;
#&amp;gt; 1  296858 http://www.marinespecies.org/aphia.php?p=taxdetails&amp;amp;id=296858
#&amp;gt; 2  397908 http://www.marinespecies.org/aphia.php?p=taxdetails&amp;amp;id=397908
#&amp;gt; 3  397909 http://www.marinespecies.org/aphia.php?p=taxdetails&amp;amp;id=397909
#&amp;gt; 4  297397 http://www.marinespecies.org/aphia.php?p=taxdetails&amp;amp;id=297397
#&amp;gt; # ... with 23 more variables: scientificname &amp;lt;chr&amp;gt;, authority &amp;lt;chr&amp;gt;,
#&amp;gt; #   status &amp;lt;chr&amp;gt;, unacceptreason &amp;lt;chr&amp;gt;, rank &amp;lt;chr&amp;gt;, valid_AphiaID &amp;lt;int&amp;gt;,
#&amp;gt; #   valid_name &amp;lt;chr&amp;gt;, valid_authority &amp;lt;chr&amp;gt;, kingdom &amp;lt;chr&amp;gt;, phylum &amp;lt;chr&amp;gt;,
#&amp;gt; #   class &amp;lt;chr&amp;gt;, order &amp;lt;chr&amp;gt;, family &amp;lt;chr&amp;gt;, genus &amp;lt;chr&amp;gt;, citation &amp;lt;chr&amp;gt;,
#&amp;gt; #   lsid &amp;lt;chr&amp;gt;, isMarine &amp;lt;int&amp;gt;, isBrackish &amp;lt;lgl&amp;gt;, isFreshwater &amp;lt;lgl&amp;gt;,
#&amp;gt; #   isTerrestrial &amp;lt;int&amp;gt;, isExtinct &amp;lt;lgl&amp;gt;, match_type &amp;lt;chr&amp;gt;, modified &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pegax&#34;&gt;pegax&lt;/h2&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://github.com/ropensci/pegax&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;pegax&lt;/code&gt; aims to be a powerful taxonomic name parser for R. This package started at &lt;a href=&#34;http://unconf17.ropensci.org/&#34;&gt;#runconf17&lt;/a&gt; - was made possible because the talented &lt;a href=&#34;https://github.com/Ironholds/&#34;&gt;Oliver Keyes&lt;/a&gt; created a &lt;a href=&#34;https://en.wikipedia.org/wiki/Parsing_expression_grammar&#34;&gt;Parsing Expression Grammar&lt;/a&gt; package for R: &lt;a href=&#34;https://github.com/Ironholds/piton&#34;&gt;piton&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From &lt;code&gt;piton&lt;/code&gt; PEGs are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a way of defining formal grammars for formatted data that allow you to identify matched structures and then take actions on them&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some great taxonomic name parsing does exist already. &lt;a href=&#34;https://github.com/GlobalNamesArchitecture/gnparser&#34;&gt;Global Names Parser, gnparser&lt;/a&gt; is a great effort by &lt;a href=&#34;https://github.com/dimus&#34;&gt;Dmitry Mozzherin&lt;/a&gt; and others. The only problem is Java does not play nice with R - thus &lt;code&gt;pegax&lt;/code&gt;, implementing in C++. We&amp;rsquo;ll definitely try to learn alot from the work they have done on &lt;code&gt;gnparser&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pegax&lt;/code&gt; is not on CRAN yet.  The package is in very very early days, so expect lots of changes.&lt;/p&gt;

&lt;h3 id=&#34;example-6&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;A quick example of the power of &lt;code&gt;pegax&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;ropenscilabs/pegax&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;pegax&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parse out authority name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;authority_names(&amp;quot;Linnaeus, 1758&amp;quot;)
#&amp;gt; [1] &amp;quot;Linnaeus&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parse out authority year&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;authority_years(&amp;quot;Linnaeus, 1758&amp;quot;)
#&amp;gt; [1] &amp;quot;1758&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;taxonomic-adjacent-packages&#34;&gt;Taxonomic adjacent packages&lt;/h2&gt;

&lt;p&gt;These packages do not primarily deal with taxonomy, but do include taxonomic data. No examples are included below, but do check out their vignettes and other documentation to get started.&lt;/p&gt;

&lt;h3 id=&#34;rotl&#34;&gt;rotl&lt;/h3&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/rotl/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/rotl&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt; &lt;span class=&#34;label&#34; style=&#34;background-color:#19B698&#34;&gt;community&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;rotl&lt;/code&gt; is maintained by &lt;a href=&#34;https://github.com/fmichonneau&#34;&gt;Francois Michonneau&lt;/a&gt;, &lt;a href=&#34;https://github.com/josephwb&#34;&gt;Joseph Brown&lt;/a&gt;, and &lt;a href=&#34;https://github.com/dwinter&#34;&gt;David Winter&lt;/a&gt;, and is a package to interact with the &lt;a href=&#34;https://opentreeoflife.org/&#34;&gt;Open Tree of Life (OTL)&lt;/a&gt;. OTL main purpose is perhaps about phylogeny data, but they do have a taxonomy they maintain, and &lt;code&gt;rotl&lt;/code&gt; has functions that let you access that taxonomic data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rotl&lt;/code&gt; is used in &lt;code&gt;taxize&lt;/code&gt; to get OTL data.&lt;/p&gt;

&lt;h3 id=&#34;rredlist&#34;&gt;rredlist&lt;/h3&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/rredlist/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/rredlist&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;rredlist&lt;/code&gt; is an interface to the &lt;a href=&#34;http://www.iucnredlist.org/&#34;&gt;IUCN Redlist of Threatened Species&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;which provides taxonomic, conservation status and distribution information on plants, fungi and animals that have been globally evaluated using the IUCN Red List Categories and Criteria.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;rredlist&lt;/code&gt; is used in &lt;code&gt;taxize&lt;/code&gt; to get IUCN Redlist Taxonomy data.&lt;/p&gt;

&lt;h3 id=&#34;bold&#34;&gt;bold&lt;/h3&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/bold/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/bold&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;bold&lt;/code&gt; is an interface to the &lt;a href=&#34;http://www.iucnredlist.org/&#34;&gt;IUCN Redlist of Threatened Species&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;which provides taxonomic, conservation status and distribution information on plants, fungi and animals that have been globally evaluated using the IUCN Red List Categories and Criteria.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;bold&lt;/code&gt; is used in &lt;code&gt;taxize&lt;/code&gt; to get BOLD taxonomy data.&lt;/p&gt;

&lt;h3 id=&#34;rgbif&#34;&gt;rgbif&lt;/h3&gt;

&lt;div class=&#34;labels&#34;&gt;
&lt;a href=&#34;https://cran.rstudio.com/web/packages/rgbif/&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#F1C312&#34;&gt;cran&lt;/span&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;&lt;span class=&#34;label&#34; style=&#34;background-color:#3598DB&#34;&gt;github&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;rgbif&lt;/code&gt; is an interface to the &lt;a href=&#34;http://www.gbif.org/&#34;&gt;Global Biodiversity Information Facility&lt;/a&gt;, the largest provider of free and open access biodiversity data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rgbif&lt;/code&gt; is used in &lt;code&gt;taxize&lt;/code&gt; to get GBIF taxonomy data.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Together, the rOpenSci taxonomy suite of packages make it much easier to work with taxonomy data in R. We hope you agree :)&lt;/p&gt;

&lt;p&gt;Despite all of the above, we still have some things to work on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;taxa&lt;/code&gt; taxonomy classes where appropriate. We plan to deploy &lt;code&gt;taxa&lt;/code&gt; classes inside of the &lt;code&gt;taxize&lt;/code&gt; package very soon, but they may be appropriate elsewhere as well. Using the same classes in many packages will make working with taxonomic data more consistent across packages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;taxizedb&lt;/code&gt; needs to be more robust. Given that the package not only touches your file system, and for some databases depends on different SQL databases, we likely will run into many problems with various operating system + database combinations. Please do kick the tires and get back to us!&lt;/li&gt;
&lt;li&gt;Once &lt;code&gt;pegax&lt;/code&gt; is ready for use, we&amp;rsquo;ll be able to use it in many packages whenever we need to parse taxonomic names.&lt;/li&gt;
&lt;li&gt;They&amp;rsquo;ll always be more data sources that we can potentially add to &lt;code&gt;taxize&lt;/code&gt; - get in touch and let us know.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you think about the taxonomic suite of packages?  Anything we&amp;rsquo;re missing? Anything we can be doing better with any of the packages?  Are you working on a taxonomic R package? Consider &lt;a href=&#34;https://github.com/ropensci/onboarding&#34;&gt;submitting to rOpenSci&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Extracting and Enriching Ocean Biogeographic Information System (OBIS) Data with R</title>
      <link>https://ropensci.org/blog/2017/01/25/obis/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2017/01/25/obis/</guid>
      <description>
        
        &lt;p&gt;Programmatic access to biodiversity data is revolutionising large-scale, reproducible biodiversity research. In the marine realm, the largest global database of species occurrence records is the Ocean Biogeographic Information System, &lt;a href=&#34;http://www.iobis.org/&#34;&gt;OBIS&lt;/a&gt;. As of January 2017, OBIS contains 47.78 million occurrences of 117,345 species, all openly available and accessible via the &lt;a href=&#34;http://www.iobis.org/manual/api/&#34;&gt;OBIS API&lt;/a&gt;. The number of questions to address using these kinds of resources is as large as the number of investigators, but certain operations commonly crop up in many workflows. In my group, &lt;a href=&#34;https://shefmeme.org/&#34;&gt;shefmeme.org&lt;/a&gt;, these typically involve checking the taxonomy of a list of species, extracting occurrence records for each species, mapping these and matching them to various environmental and geographic data layers, all using R. I recently wrote up these common operations in a &lt;a href=&#34;http://www.iobis.org/2016/11/22/sorbycollection/&#34;&gt;detailed tutorial for OBIS&lt;/a&gt;, with &lt;a href=&#34;https://github.com/iobis/training/tree/master/sorbycollection&#34;&gt;associated code and data on GitHub&lt;/a&gt;. This tutorial made extensive use of &lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt; packages and expertise, and so I‚Äôm delighted to have the opportunity to present an edited version here. (Please note that the code chunks included here are a subset of our original code, and are for illustration - if you want to run these examples we suggest visiting the original post.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Starting point, journey, and destination&lt;/p&gt;

&lt;p&gt;We start with a list of taxonomic names of unknown quality. In our experience this is a common situation: you may have obtained a dataset from a collaborator, or from the literature, which documents some characteristics of a number of taxa, and you wish to tidy up this dataset and enrich it with some occurrence data. We generated a taxon list from a museum exhibit in the &lt;a href=&#34;http://www.sheffield.ac.uk/aps&#34;&gt;Department of Animal and Plant Sciences at the University of Sheffield&lt;/a&gt;: a collection of 80 marine specimens created by the 19th Century Sheffield microscopist, geologist, and naturalist &lt;a href=&#34;https://en.wikipedia.org/wiki/Henry_Clifton_Sorby&#34;&gt;Henry Clifton Sorby&lt;/a&gt;. This provides a useful test-case for modern biodiversity computational methods, as there is considerable taxonomic breadth (including fish as well as numerous invertebrate groups), but the names recorded are of inconsistent taxonomic rank, and - having been recorded well over 100 years ago - many are almost certainly no longer current.&lt;/p&gt;

&lt;p&gt;The first stage of our journey then - after transcribing the names into a spreadsheet - is to check their &lt;strong&gt;taxonomy&lt;/strong&gt;. Once we are confident in the names, and have restricted the dataset to a suitable taxonomic rank (species, here), we can start to examine &lt;strong&gt;occurrences&lt;/strong&gt; as recorded in OBIS. Once we have done this, for individual species and for groups of species, we can start to enrich the basic occurrence data in various ways. In particular, we show how to match the occurrences to various &lt;strong&gt;environmental layers&lt;/strong&gt;, including depth and climate. And we show how to perform more sophisticated geographic searches using &lt;strong&gt;georeferenced boundaries and regions&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Taxonomy&lt;/p&gt;

&lt;p&gt;OBIS uses the &lt;a href=&#34;http://www.marinespecies.org/&#34;&gt;WoRMS&lt;/a&gt; standard taxonomy. This means that names within OBIS‚Äôs realisation of the WoRMS Aphia database will be matched correctly, but it is still often worthwhile to check your taxonomy in advance, especially if you are working with large sets of taxa (as macroecologists frequently are), or with unusual sets of names, such as the Sorby Collection. This will help to identify any potential problems or ambiguities, and also gives more flexibility for identifying and dealing with minor typos and misspellings. The tools provided by rOpenSci have made it possible to rapidly match names to WoRMS by calling the WoRMS web services directly from within R. In our original post, we provide examples using the &lt;a href=&#34;https://github.com/ropensci/taxizesoap&#34;&gt;taxizesoap&lt;/a&gt; package. WoRMS have recently updated their web services, and here we use instead the new rOpenSci package &lt;a href=&#34;https://github.com/ropensci/worrms&#34;&gt;worrms&lt;/a&gt; - now incorporated into &lt;a href=&#34;https://github.com/ropensci/taxize&#34;&gt;taxize&lt;/a&gt;. Both options provide much of the WoRMS taxon matching functionality, for instance fuzzy (or approximate) name matching is possible, and is a convenient, scripted way of generating a taxonomically robust dataset.&lt;/p&gt;

&lt;p&gt;First, load the required libraries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(worrms)
library(dplyr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Check taxonomy of a single taxon&lt;/p&gt;

&lt;p&gt;Get the WoRMS ID for a single species - here, Atlantic cod, &lt;em&gt;Gadus morhua&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_aphia &amp;lt;- wm_name2id(name = &amp;quot;Gadus morhua&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then get the full WoRMS record, as a list by Aphia ID:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- wm_record(id = my_sp_aphia)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or as a tibble by name - here specifying exact match only &lt;code&gt;(fuzzy = FALSE)&lt;/code&gt; and restricting to marine species &lt;code&gt;(marine_only = TRUE)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- wm_records_names(name = &amp;quot;Gadus morhua&amp;quot;, fuzzy = FALSE, marine_only = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Get taxonomy for multiple species&lt;/p&gt;

&lt;p&gt;Start with a data frame of species names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp &amp;lt;- data_frame(sciname = c(&amp;quot;Gadus morhua&amp;quot;, &amp;quot;Solea vulgaris&amp;quot;, &amp;quot;Pleuronectes platessa&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then get the WoRMS records for each:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- wm_records_names(name = my_sp$sciname, fuzzy = FALSE, marine_only = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For &amp;lsquo;n&amp;rsquo; species this returns a list of &amp;lsquo;n&amp;rsquo; tables. Convert these into a single table with &amp;lsquo;n&amp;rsquo; rows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sp_taxo &amp;lt;- bind_rows(my_sp_taxo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And look at the results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;glimpse(my_sp_taxo)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Observations: 3
## Variables: 25
## $ AphiaID         &amp;lt;int&amp;gt; 126436, 154712, 127143
## $ url             &amp;lt;chr&amp;gt; &amp;quot;http://www.marinespecies.org/aphia.php?p=taxd...
## $ scientificname  &amp;lt;chr&amp;gt; &amp;quot;Gadus morhua&amp;quot;, &amp;quot;Solea vulgaris&amp;quot;, &amp;quot;Pleuronecte...
## $ authority       &amp;lt;chr&amp;gt; &amp;quot;Linnaeus, 1758&amp;quot;, &amp;quot;Quensel, 1806&amp;quot;, &amp;quot;Linnaeus, ...
## $ status          &amp;lt;chr&amp;gt; &amp;quot;accepted&amp;quot;, &amp;quot;unaccepted&amp;quot;, &amp;quot;accepted&amp;quot;
## $ unacceptreason  &amp;lt;chr&amp;gt; NA, &amp;quot;synonym&amp;quot;, NA
## $ rank            &amp;lt;chr&amp;gt; &amp;quot;Species&amp;quot;, &amp;quot;Species&amp;quot;, &amp;quot;Species&amp;quot;
## $ valid_AphiaID   &amp;lt;int&amp;gt; 126436, 127160, 127143
## $ valid_name      &amp;lt;chr&amp;gt; &amp;quot;Gadus morhua&amp;quot;, &amp;quot;Solea solea&amp;quot;, &amp;quot;Pleuronectes p...
## $ valid_authority &amp;lt;chr&amp;gt; &amp;quot;Linnaeus, 1758&amp;quot;, &amp;quot;(Linnaeus, 1758)&amp;quot;, &amp;quot;Linnaeu...
## $ kingdom         &amp;lt;chr&amp;gt; &amp;quot;Animalia&amp;quot;, &amp;quot;Animalia&amp;quot;, &amp;quot;Animalia&amp;quot;
## $ phylum          &amp;lt;chr&amp;gt; &amp;quot;Chordata&amp;quot;, &amp;quot;Chordata&amp;quot;, &amp;quot;Chordata&amp;quot;
## $ class           &amp;lt;chr&amp;gt; &amp;quot;Actinopteri&amp;quot;, &amp;quot;Actinopteri&amp;quot;, &amp;quot;Actinopteri&amp;quot;
## $ order           &amp;lt;chr&amp;gt; &amp;quot;Gadiformes&amp;quot;, &amp;quot;Pleuronectiformes&amp;quot;, &amp;quot;Pleuronect...
## $ family          &amp;lt;chr&amp;gt; &amp;quot;Gadidae&amp;quot;, &amp;quot;Soleidae&amp;quot;, &amp;quot;Pleuronectidae&amp;quot;
## $ genus           &amp;lt;chr&amp;gt; &amp;quot;Gadus&amp;quot;, &amp;quot;Solea&amp;quot;, &amp;quot;Pleuronectes&amp;quot;
## $ citation        &amp;lt;chr&amp;gt; &amp;quot;Bailly, N. (2008). Gadus morhua Linnaeus, 175...
## $ lsid            &amp;lt;chr&amp;gt; &amp;quot;urn:lsid:marinespecies.org:taxname:126436&amp;quot;, &amp;quot;...
## $ isMarine        &amp;lt;int&amp;gt; 1, 1, 1
## $ isBrackish      &amp;lt;int&amp;gt; 1, 1, 1
## $ isFreshwater    &amp;lt;int&amp;gt; 0, 0, 0
## $ isTerrestrial   &amp;lt;int&amp;gt; 0, 0, 0
## $ isExtinct       &amp;lt;lgl&amp;gt; NA, NA, NA
## $ match_type      &amp;lt;chr&amp;gt; &amp;quot;exact&amp;quot;, &amp;quot;exact&amp;quot;, &amp;quot;exact&amp;quot;
## $ modified        &amp;lt;chr&amp;gt; &amp;quot;2008-01-15T18:27:08Z&amp;quot;, &amp;quot;2008-02-28T14:41:08Z&amp;quot;...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the name we supplied is correct for cod and plaice, but &lt;em&gt;Solea vulgaris&lt;/em&gt; is not valid and has the valid name &lt;em&gt;Solea solea&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Getting occurrences&lt;/p&gt;

&lt;p&gt;Once you have your taxon name, or list of names, it is straightforward to extract their OBIS occurrences using the &lt;a href=&#34;https://github.com/iobis/robis&#34;&gt;robis&lt;/a&gt; package. And armed with a list of occurrences for a given taxon, or list of species, you probably want to map them. Here we show how to obtain and map occurrence records for a single species.&lt;/p&gt;

&lt;p&gt;First install and load additional required packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install robis package using devtools
library(devtools)
devtools::install_github(&amp;quot;iobis/robis&amp;quot;)
# NB - you also need the dev version of ggmap for the satellite maps to work
devtools::install_github(&amp;quot;dkahle/ggmap&amp;quot;)
library(robis)
library(ggmap)
library(raster)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get occurrences for sole - note that this may take some time to run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_occs &amp;lt;- occurrence(scientificname = my_sp_taxo$valid_name[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is the bounding box for these occurrences?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bb_occs &amp;lt;- bbox(cbind(my_occs$decimalLongitude, my_occs$decimalLatitude))
bb_occs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##        min     max
## x -42.0288 151.639
## y -33.0868  61.250
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get a base world map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;world &amp;lt;- map_data(&amp;quot;world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a map from these data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;worldmap &amp;lt;- ggplot(world, aes(x=long, y=lat)) +
  geom_polygon(aes(group=group)) +
  scale_y_continuous(breaks = (-2:2) * 30) +
  scale_x_continuous(breaks = (-4:4) * 45) +
  theme(panel.background = element_rect(fill = &amp;quot;steelblue&amp;quot;)) +
  coord_equal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plot the map and add the occurrence data for sole that we have just returned:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(occ_map &amp;lt;- worldmap + geom_point(data = my_occs, aes(x = decimalLongitude, y = decimalLatitude),
                                 colour = &amp;quot;darkorange&amp;quot;, shape = 21, alpha = 2/3)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/occurrence-data-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can wrap this in a function to rapidly plot occurrences returned from OBIS onto a map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;obis_map &amp;lt;- function(occ_dat, map_type = c(&amp;quot;satellite&amp;quot;, &amp;quot;world&amp;quot;), map_zoom = NULL, plotit = TRUE){

  bb_occ &amp;lt;- bbox(cbind(occ_dat$decimalLongitude, occ_dat$decimalLatitude))

  if(map_type == &amp;quot;satellite&amp;quot;){
    if(is.null(map_zoom)){
      base_map &amp;lt;- get_map(location = bb_occ, maptype = &amp;quot;satellite&amp;quot;)
    } else {
      base_map &amp;lt;- get_map(location = bb_occ, maptype = &amp;quot;satellite&amp;quot;, zoom = map_zoom)
    }
    obis_map &amp;lt;- ggmap(base_map)
  } else if(map_type == &amp;quot;world&amp;quot;){
    base_map &amp;lt;- map_data(&amp;quot;world&amp;quot;)
    obis_map &amp;lt;- ggplot(base_map, aes(x=long, y=lat)) +
      geom_polygon(aes(group=group)) +
      scale_y_continuous(breaks = (-2:2) * 30) +
      scale_x_continuous(breaks = (-4:4) * 45) +
      theme(panel.background = element_rect(fill = &amp;quot;steelblue&amp;quot;)) +
      coord_equal()
  } else {
    stop(&amp;quot;map_type must be one of &#39;satellite&#39; or &#39;world&#39;&amp;quot;,
         call. = FALSE)
  }

  # Now add the occurrence points
  obis_map &amp;lt;- obis_map + geom_point(data = occ_dat, aes(x = decimalLongitude, y = decimalLatitude),
                                    colour = &amp;quot;darkorange&amp;quot;, shape = 21, alpha = 2/3)

  if(plotit == T){print(obis_map)}

  return(obis_map)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_map &amp;lt;- obis_map(my_occs, map_type = &amp;quot;world&amp;quot;, plotit = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/plot using this function-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In our original post we give more examples of plotting records from individual species and multiple species, including gridded richness maps. We &lt;a href=&#34;http://www.iobis.org/2016/11/22/sorbycollection/#understanding&#34;&gt;also explain&lt;/a&gt; the many fields returned by OBIS for each record, and provide examples of filtering results both pre- and post-query on a number of criteria (e.g. date, dataset, and various quality control flags), which can bring important memory savings when the returned set of occurrences is very large.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Enriching occurrence data&lt;/p&gt;

&lt;p&gt;Matching species occurrences to environmental variables is a very common requirement of macroecological analyses, particularly those considering environmental drivers of species distributions, and how distributions are expected to shift as the climate changes. Environmental or geographical data layers of interest may be purely spatial (e.g. bathymetry), or spatio-temporal (e.g. sea surface temperature, SST). In our original post we show how to use the packages &lt;a href=&#34;https://github.com/iobis/robis&#34;&gt;robis&lt;/a&gt; and &lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0073051&#34;&gt;marmap (Pante &amp;amp; Simon-Bouhet 2013)&lt;/a&gt; to match occurrence records to bathymetry, necessary to perform the kinds of analyses we published &lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0010223&#34;&gt;here&lt;/a&gt;. We also show how to match occurrence records to locally-stored spatial datasets, such as the global marine environmental layers that can be downloaded from &lt;a href=&#34;http://gmed.auckland.ac.nz/&#34;&gt;GMED&lt;/a&gt;. In this post, we focus on obtaining &lt;a href=&#34;http://www.esrl.noaa.gov/psd/data/gridded/data.noaa.oisst.v2.html&#34;&gt;NOAA gridded monthly mean Sea Surface Temperature&lt;/a&gt; data and show how to match occurrence records to temperature in both space and time. This code is from a package in development with ROpenSci called spenv, see &lt;a href=&#34;https://github.com/ropenscilabs/spenv&#34;&gt;here&lt;/a&gt;, but we use slightly modified versions of spenv functions here.&lt;/p&gt;

&lt;p&gt;First, we use a function to download SST data from NOAA. Specifically, it downloads monthly mean data at 1 degree resolution from the Optimum Interpolation Seas Surface Temperature V2 dataset, see &lt;a href=&#34;http://www.esrl.noaa.gov/psd/data/gridded/data.noaa.oisst.v2.html&#34;&gt;here&lt;/a&gt;. The data are served as a NetCDF file, but for convenience we transform this into a raster brick - this is essentially a stacked set of global rasters, each layer representing a single month in the time series. The first time you run this the file will be downloaded (takes ~10 seconds). It will then be stored locally for future use.&lt;/p&gt;

&lt;p&gt;Start by loading additional required packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ncdf4)
library(lubridate)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtain the SST data from NOAA and convert to raster brick format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sst_prep &amp;lt;- function(path = &amp;quot;~/.spenv/noaa_sst&amp;quot;) {
  x &amp;lt;- file.path(path, &amp;quot;sst.mnmean.nc&amp;quot;)
  if (!file.exists(x)) {
    dir.create(dirname(x), recursive = TRUE, showWarnings = FALSE)
    download.file(&amp;quot;ftp://ftp.cdc.noaa.gov/Datasets/noaa.oisst.v2/sst.mnmean.nc&amp;quot;, destfile = x)
  }
  raster::brick(x, varname = &amp;quot;sst&amp;quot;)
}
sst_dat &amp;lt;- sst_prep()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View the structure of the data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sst_dat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## class       : RasterBrick
## dimensions  : 180, 360, 64800, 417  (nrow, ncol, ncell, nlayers)
## resolution  : 1, 1  (x, y)
## extent      : 0, 360, -90, 90  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0
## data source : /Users/alunjones/.spenv/noaa_sst/sst.mnmean.nc
## names       : X1981.12.01, X1982.01.01, X1982.02.01, X1982.03.01, X1982.04.01, X1982.05.01, X1982.06.01, X1982.07.01, X1982.08.01, X1982.09.01, X1982.10.01, X1982.11.01, X1982.12.01, X1983.01.01, X1983.02.01, ...
## Date        : 1981-12-01, 2016-08-01 (min, max)
## varname     : sst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is a wrapper function that takes your input data (x), together with identifiers for latitude, longitude, and date, and gets SST data from the NOAA SST gridded dataset. The origin argument enables conversion between the date formats of the NOAA data and your occurrence data. Note that this data also calculates an adjusted longitude, as occupancy data typically come with longitude in the range -180 (180 West) to +180 (180 East), whereas the NOAA data codes longitude as 0 to 360 degrees (running eastwards from 0 degrees):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sp_extract_gridded_date &amp;lt;- function(x, from = &amp;quot;noaa_sst&amp;quot;, latitude = NULL,
                                    longitude = NULL, samp_date = NULL, origin = as.Date(&amp;quot;1800-1-1&amp;quot;)) {

  x &amp;lt;- spenv_guess_latlondate(x, latitude, longitude, samp_date)
  switch(from,
         noaa_sst = {
           mb &amp;lt;- sst_prep()
           out &amp;lt;- list()
           x &amp;lt;- x[ !is.na(x$date), ]
           x$date &amp;lt;- as.Date(x$date)
           x &amp;lt;- x[x$date &amp;gt;= min(mb@z[[&amp;quot;Date&amp;quot;]]), ]
           x$lon_adj &amp;lt;- x$longitude
           x$lon_adj[x$lon_adj &amp;lt; 0] &amp;lt;- x$lon_adj[x$lon_adj &amp;lt; 0] + 360
           for (i in seq_len(NROW(x))) {
             out[[i]] &amp;lt;- get_env_par_space_x_time(mb, x[i, ], origin = origin)
           }
           x$sst &amp;lt;- unlist(out)
           x
         }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also need these utility functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spenv_guess_latlondate &amp;lt;- function(x, lat = NULL, lon = NULL, samp_date = NULL) {
  xnames &amp;lt;- names(x)
  if (is.null(lat) &amp;amp;&amp;amp; is.null(lon)) {
    lats &amp;lt;- xnames[grep(&amp;quot;^(lat|latitude)$&amp;quot;, xnames, ignore.case = TRUE)]
    lngs &amp;lt;- xnames[grep(&amp;quot;^(lon|lng|long|longitude)$&amp;quot;, xnames, ignore.case = TRUE)]

    if (length(lats) == 1 &amp;amp;&amp;amp; length(lngs) == 1) {
      if (length(x) &amp;gt; 2) {
        message(&amp;quot;Assuming &#39;&amp;quot;, lngs, &amp;quot;&#39; and &#39;&amp;quot;, lats,
                &amp;quot;&#39; are longitude and latitude, respectively&amp;quot;)
      }
      x &amp;lt;- rename(x, setNames(&#39;latitude&#39;, eval(lats)))
      x &amp;lt;- rename(x, setNames(&#39;longitude&#39;, eval(lngs)))
    } else {
      stop(&amp;quot;Couldn&#39;t infer longitude/latitude columns, please specify with &#39;lat&#39;/&#39;lon&#39; parameters&amp;quot;, call. = FALSE)
    }
  } else {
    message(&amp;quot;Using user input &#39;&amp;quot;, lon, &amp;quot;&#39; and &#39;&amp;quot;, lat,
            &amp;quot;&#39; as longitude and latitude, respectively&amp;quot;)
    x &amp;lt;- plyr::rename(x, setNames(&#39;latitude&#39;, eval(lat)))
    x &amp;lt;- plyr::rename(x, setNames(&#39;longitude&#39;, eval(lon)))
  }

  if(is.null(samp_date)){
    dates &amp;lt;- xnames[grep(&amp;quot;date&amp;quot;, xnames, ignore.case = TRUE)]
    if(length(dates) == 1){
      if(length(x) &amp;gt; 2){
        message(&amp;quot;Assuming &#39;&amp;quot;, dates, &amp;quot;&#39; are sample dates&amp;quot;)
      }
      x &amp;lt;- rename(x, setNames(&#39;date&#39;, eval(dates)))
    } else {
      stop(&amp;quot;Couldn&#39;t infer sample date column, please specify with &#39;date&#39; parameter&amp;quot;, call. = FALSE)
    }

  } else {
    message(&amp;quot;Using user input &#39;&amp;quot;, samp_date, &amp;quot;&#39; as sample date&amp;quot;)
    x &amp;lt;- plyr::rename(x, setNames(&#39;date&#39;, eval(samp_date)))
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_env_par_space_x_time &amp;lt;- function(
  env_dat, occ_dat, origin = as.Date(&amp;quot;1800-1-1&amp;quot;)){

  # calculate starting julian day for each month in env_dat
  month_intervals &amp;lt;- as.numeric(env_dat@z[[&amp;quot;Date&amp;quot;]] - origin)
  # calculate julian day for the focal date (eventDate in occ_dat)
  focal_date &amp;lt;- as.numeric(occ_dat$date - origin)

  # extract environmental variable (SST here) for this point
  as.numeric(raster::extract(
    env_dat,
    cbind(occ_dat$lon_adj, occ_dat$latitude),
    layer = findInterval(focal_date, month_intervals),
    nl = 1
  ))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Get SST values associated with the sole occupancy data&lt;/p&gt;

&lt;p&gt;First, do some cleaning of the sole data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_occs &amp;lt;- as_data_frame(filter(
  my_occs, !is.na(depth) &amp;amp; !is.na(yearcollected) &amp;amp; !is.na(individualCount) &amp;amp; depth != -9 &amp;amp; yearcollected &amp;gt;= 1981))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will now add an SST value for each occurrence. CAUTION - this may take a while to run. See our original post for a trick to speed this up!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_sst &amp;lt;- sp_extract_gridded_date(x = sole_occs,
                                    latitude = &amp;quot;decimalLatitude&amp;quot;, longitude = &amp;quot;decimalLongitude&amp;quot;, samp_date = &amp;quot;eventDate&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now plot sole occurrences by lon and lat, colour coded by temperature, faceted by month (1 = Jan to 12 = Dec) - this first requires defining a month variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sole_sst$month &amp;lt;- month(sole_sst$date)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create the plot like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(sole_sst_plot &amp;lt;- (ggplot(sole_sst, aes(x = longitude, y = latitude)) +
                     geom_point(aes(colour = sst), alpha = 2/3) +
                     scale_colour_gradient(low = &amp;quot;blue&amp;quot;, high = &amp;quot;red&amp;quot;) +
                     facet_wrap(~ month))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/create the plot-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you may want to look at trends over time in SST matched to sole occurrences, again faceted by month:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(sole_sst_trends &amp;lt;- ggplot(sole_sst, aes(x = yearcollected, y = sst)) +
  geom_point(colour = &amp;quot;steelblue&amp;quot;, alpha = 1/3) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, colour = &amp;quot;darkorange&amp;quot;) +
  facet_wrap(~ month)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/look at trends in SST matched to sole occurrences-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Adding geography&lt;/p&gt;

&lt;p&gt;All of the examples above have been global in scale, meaning that we have placed no spatial restrictions on the queries to OBIS - we have simply requested all occurrences that have been recorded anywhere on earth. However, we are frequently interested in sub-global analyses, either extracting data for an individual region of interest (such as a specific country‚Äôs EEZ), or summarising global data by region (e.g. records per regional sea). Here we show how OBIS queries can be refined using specific geometries, either supplied manually or as named regions obtained from the &lt;a href=&#34;http://www.marineregions.org/&#34;&gt;Marine Regions database&lt;/a&gt;. In these examples we return all records for a focal species within a region of interest, and also return a full species list for a focal region. In our original post we also showed how to combine geographic and environmental filters, for example returning all species occurring in regions of the North Atlantic that are &amp;lt;1000m deep.&lt;/p&gt;

&lt;p&gt;Start by loading additional required packages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgdal)
library(mregions)
library(rgeos)
library(broom)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the UK EEZ shape file from marineregions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;uk_eez &amp;lt;- mr_shp(&amp;quot;MarineRegions:eez&amp;quot;,
	maxFeatures = NULL, filter = &amp;quot;United Kingdom Exclusive Economic Zone&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For convenience, simplify this and convert it to a data frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;uk_eez_simple &amp;lt;- SpatialPolygonsDataFrame(gSimplify(
	uk_eez, tol = 0.01, topologyPreserve = TRUE), data = uk_eez@data)
uk_eez_df &amp;lt;- tidy(uk_eez_simple)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get occurrences for a species (here, basking shark) within the UK EEZ:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;basking_shark &amp;lt;- occurrence(
	scientificname = &amp;quot;Cetorhinus maximus&amp;quot;, geometry = mr_as_wkt(uk_eez_simple))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the occurrence plot, then add the EEZ:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;basking_map &amp;lt;- obis_map(basking_shark, map_type = &amp;quot;satellite&amp;quot;, map_zoom = 4, plotit = F)
basking_map +
  geom_polygon(data = uk_eez_df, aes(x = long, y = lat, group = group),
               colour = &amp;quot;green&amp;quot;, fill = NA, size = 0.25)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/obis-images/p1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To get a list of species for a given region, use checklist, and specify your geometry (here an arbitrary 5 x 5 degree square in the NE Atlantic):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_taxa &amp;lt;- tbl_df(checklist(
	geometry = &amp;quot;POLYGON ((-20 50, -20 55, -15 55, -15 50, -20 50))&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then filter this to taxa with species rank:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_species &amp;lt;- filter(my_taxa, rank_name == &amp;quot;Species&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is a tibble of the 930 species found in this grid square, plus their full taxonomy and some additional summary information, including the number of records in OBIS (&lt;code&gt;records&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_species
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 930 √ó 18
##        id valid_id parent_id rank_name                   tname
##     &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt;                   &amp;lt;chr&amp;gt;
## 1  395754   395754    695236   Species     Acanthephyra eximia
## 2  395764   395764    695236   Species   Acanthephyra pelagica
## 3  395973   395973    395971   Species Acanthoica quattrospina
## 4  396173   396173    767483   Species Acanthoscina acanthodes
## 5  398225   398225    767500   Species      Adagnesia charcoti
## 6  398227   398227    767500   Species        Adagnesia rimosa
## 7  398647   398647    398644   Species        Aetideus armatus
## 8  400887   400887    400884   Species          Amperima rosea
## 9  401559   401559    738082   Species   Amphissa acutecostata
## 10 402079   402079    768595   Species      Amuletta abyssorum
## # ... with 920 more rows, and 13 more variables: tauthor &amp;lt;chr&amp;gt;,
## #   worms_id &amp;lt;int&amp;gt;, records &amp;lt;int&amp;gt;, datasets &amp;lt;int&amp;gt;, phylum &amp;lt;chr&amp;gt;,
## #   order &amp;lt;chr&amp;gt;, family &amp;lt;chr&amp;gt;, genus &amp;lt;chr&amp;gt;, species &amp;lt;chr&amp;gt;, class &amp;lt;chr&amp;gt;,
## #   redlist &amp;lt;lgl&amp;gt;, status &amp;lt;chr&amp;gt;, hab &amp;lt;lgl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#Next steps
The above describes some of the kinds of procedures that we use regularly in our group. Next steps could include further enrichment of occurrence data. For instance, there is a major initiative within WoRMS to link biological trait data to the existing taxonomy (see &lt;a href=&#34;http://www.marinespecies.org/traits/&#34;&gt;http://www.marinespecies.org/traits/&lt;/a&gt;) and we are thinking about how to filter OBIS queries by particular kinds of traits, or mapping the distribution of traits. We are also investigating how to mine the temporal dimension of OBIS data to &lt;a href=&#34;http://www.iobis.org/2016/11/15/occmod/&#34;&gt;derive robust estimates of trends in marine biodiversity&lt;/a&gt;. Keep an eye out for these developments on the &lt;a href=&#34;http://www.iobis.org/news/&#34;&gt;OBIS news site&lt;/a&gt;, and please do get in touch with requests or suggestions for improvements!&lt;/p&gt;

&lt;hr /&gt;

      </description>
    </item>
    
    <item>
      <title>taxize v0.3.0 update - a new data source, taxonomy in writing, and uBio examples</title>
      <link>https://ropensci.org/blog/2014/05/20/taxize_v03/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/05/20/taxize_v03/</guid>
      <description>
        
        

&lt;p&gt;We just released &lt;code&gt;v0.3&lt;/code&gt; of &lt;code&gt;taxize&lt;/code&gt;. For details on the update, see the &lt;a href=&#34;https://github.com/ropensci/taxize/releases/tag/v0.3.0&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;some-new-features&#34;&gt;Some new features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;New function &lt;code&gt;iplant_resolve()&lt;/code&gt; to do name resolution using the iPlant name resolution service. Note, this is different from &lt;a href=&#34;http://taxosaurus.org/&#34;&gt;http://taxosaurus.org/&lt;/a&gt; that is wrapped in the &lt;code&gt;tnrs()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;New function &lt;code&gt;ipni_search()&lt;/code&gt; to search for names in the International Plant Names Index (IPNI). See below for more.&lt;/li&gt;
&lt;li&gt;New function &lt;code&gt;resolve()&lt;/code&gt; that unifies name resolution services from iPlant&amp;rsquo;s name resolution service (via &lt;code&gt;iplant_resolve()&lt;/code&gt;), Taxosaurus&amp;rsquo; TNRS (via &lt;code&gt;tnrs()&lt;/code&gt;), and GNR&amp;rsquo;s name resolution service (via &lt;code&gt;gnr_resolve()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;get_&lt;/code&gt; functions now returning a new &lt;em&gt;uri&lt;/em&gt; attribute that is a link to the taxon on the web. If NA is given back (e.g. nothing found), the uri attribute is blank. You can go directly to the uri in your default browser by doing, for example: &lt;code&gt;browseURL(attr(result, &amp;quot;uri&amp;quot;))&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;updating-to-v0-3&#34;&gt;Updating to v0.3&lt;/h2&gt;

&lt;p&gt;Since &lt;code&gt;taxize&lt;/code&gt; is not updated to &lt;code&gt;v0.3&lt;/code&gt; on CRAN yet at the time of writing this, install &lt;code&gt;taxize&lt;/code&gt; from GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;ropensci/taxize&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then load &lt;code&gt;taxize&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;taxize&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;international-plant-names-index-ipni&#34;&gt;International Plant Names Index (IPNI)&lt;/h2&gt;

&lt;p&gt;We added the IPNI as a new data source in &lt;code&gt;taxize&lt;/code&gt; in &lt;code&gt;v0.3&lt;/code&gt;. Currently, there is only one function to interact with IPNI: &lt;code&gt;ipni_search()&lt;/code&gt;. What follows are a few examples of how you can use &lt;code&gt;ipni_search()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Search for the genus &lt;em&gt;Brintonia&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ipni_search(genus=&#39;Brintonia&#39;)[,c(1:3)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##         id version     family
## 1   7996-1     1.3 Asteraceae
## 2 296073-2     1.3 Asteraceae
## 3  36551-2     1.3 Asteraceae
## 4 186337-1     1.3 Asteraceae
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Search for the species &lt;em&gt;Pinus contorta&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(ipni_search(genus=&#39;Pinus&#39;, species=&#39;contorta&#39;)[,c(1:3)])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##           id     version   family
## 1   262873-1 1.1.2.1.1.2 Pinaceae
## 2   262872-1 1.2.2.1.1.1 Pinaceae
## 3 30000492-2     1.1.2.1 Pinaceae
## 4   196950-2         1.4 Pinaceae
## 5   921291-1         1.4 Pinaceae
## 6   196949-2         1.5 Pinaceae
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Different output formats (the default is &lt;em&gt;minimal&lt;/em&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(ipni_search(genus=&#39;Ceanothus&#39;)[,c(1:3)])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##           id     version     family
## 1    55268-3         1.1 Rhamnaceae
## 2 30006383-2 1.1.2.1.1.3 Rhamnaceae
## 3    55269-3         1.1 Rhamnaceae
## 4    33421-1         1.5 Rhamnaceae
## 5 60461578-2         1.1 Rhamnaceae
## 6   331948-2         1.4 Rhamnaceae
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(ipni_search(genus=&#39;Ceanothus&#39;, output=&#39;extended&#39;))[,c(1:3)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##           id     version     family
## 1    55269-3         1.1 Rhamnaceae
## 2    33421-1         1.5 Rhamnaceae
## 3    55268-3         1.1 Rhamnaceae
## 4 30006383-2 1.1.2.1.1.3 Rhamnaceae
## 5 60461578-2         1.1 Rhamnaceae
## 6   331948-2         1.4 Rhamnaceae
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do something wrong, you get a message, and the actual output is &lt;code&gt;NA&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ipni_search(genus=&#39;Brintoniaasasf&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning: No data found
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ubio-examples&#34;&gt;uBio examples&lt;/h2&gt;

&lt;p&gt;Until now, we have had functions to interact with uBio&amp;rsquo;s API, but it probably hasn&amp;rsquo;t been too clear how to use them, and they were a little buggy for sure. We have squashed many bugs in ubio functions. Here is an example workflow of how to use ubio functions.&lt;/p&gt;

&lt;h3 id=&#34;ubio-search&#34;&gt;ubio_search&lt;/h3&gt;

&lt;p&gt;Search uBio by taxonomic name. This is sort of the entry point for uBio where you can search by taxonomic name, from which  you can get namebankID&amp;rsquo;s that can be passed to the &lt;code&gt;ubio_classification_search&lt;/code&gt; and &lt;code&gt;ubio_namebankID&lt;/code&gt; functions&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lapply(ubio_search(searchName = &#39;elephant&#39;), head)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $scientific
##   namebankid       namestring   fullnamestring packageid packagename
## 1    6938660 Cerylon elephant Cerylon elephant        80 Cerylonidae
##   basionymunit rankid rankname
## 1      6938660     24  species
##
## $vernacular
##   namebankid    namestring languagecode    languagename packageid
## 1    8118711 Elephant fish          115 Creole, English         3
## 2    8118714 Elephant fish          115 Creole, English         3
## 3    8118726 Elephant fish          115 Creole, English         3
## 4    8115700 Elephant fish          115 Creole, English         3
## 5    8115663 Elephant fish          115 Creole, English         3
## 6    8114377 Elephant fish          115 Creole, English      2463
##   packagename namebankidlink   namestringlink
## 1      Pisces         132263 Mormyrus tapirus
## 2      Pisces         132258 Mormyrus tapirus
## 3      Pisces         181174 Mormyrus tapirus
## 4      Pisces         128971 Mormyrus tapirus
## 5      Pisces         128972 Mormyrus tapirus
## 6  Mormyridae        2299821 Mormyrus tapirus
##                  fullnamestringlink
## 1 Mormyrus tapirus Pappenheim, 1905
## 2 Mormyrus tapirus Pappenheim, 1905
## 3 Mormyrus tapirus Pappenheim, 1905
## 4 Mormyrus tapirus Pappenheim, 1905
## 5 Mormyrus tapirus Pappenheim, 1905
## 6 Mormyrus tapirus Pappenheim, 1905
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;id &amp;lt;- ubio_search(searchName = &#39;elephant&#39;)$scientific$namebankid[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Error: CHAR() can only be applied to a &#39;CHARSXP&#39;, not a &#39;NULL&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubio-id&#34;&gt;ubio_id&lt;/h3&gt;

&lt;p&gt;Get data on a specific uBio &lt;code&gt;namebankID&lt;/code&gt;. Use the id from the previous code block&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ubio_id(namebankID = id)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $data
##   namebankid       namestring   fullnamestring packageid packagename
## 1    6938660 Cerylon elephant Cerylon elephant        80 Cerylonidae
##   basionymunit rankid rankname
## 1      6938660     24  Species
##
## $synonyms
## NULL
##
## $vernaculars
## NULL
##
## $cites
## NULL
##
## $mappings
## NULL
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubio-classification-search&#34;&gt;ubio_classification_search&lt;/h3&gt;

&lt;p&gt;Return &lt;code&gt;hierarchiesID&lt;/code&gt; that refer to the given &lt;code&gt;namebankID&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ubio_classification_search(namebankID = 3070378)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##   hierarchiesid classificationtitleid              classificationtitle
## 1       2477072                    84                    NCBI Taxonomy
## 2      11166818                   100                    NCBI Taxonomy
## 3      17950600                   104 uBiota 2008-03-20T10:36:50-04:00
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubio-classification&#34;&gt;ubio_classification&lt;/h3&gt;

&lt;p&gt;Return all ClassificationBank data pertaining to a particular &lt;code&gt;hierarchiesID&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ubio_classification(hierarchiesID = 2483153)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Error: XML content does not seem to be XML: &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubio-synonyms&#34;&gt;ubio_synonyms&lt;/h3&gt;

&lt;p&gt;Search for taxonomic synonyms by &lt;code&gt;hierarchiesID&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ubio_synonyms(hierarchiesID = 4091702)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Error: invalid subscript type &#39;list&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;examples-of-using-taxize-in-writing&#34;&gt;Examples of using taxize in writing&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s say one is writing a paragraph in which you are using taxonomic or common names, and perhaps you want to have the number of taxa in a particular group. You can write a paragaph like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;I studied the common weed species _Tragopogon dubius_ (`r sci2comm(&#39;Tragopogon dubius&#39;, db=&#39;itis&#39;)[[1]][1]`; `r tax_name(query = &amp;quot;Tragopogon dubius&amp;quot;, get = &amp;quot;family&amp;quot;, db = &amp;quot;ncbi&amp;quot;)[[1]]`) and _Cirsium arvense_ (`r sci2comm(&#39;Cirsium arvense&#39;, db=&#39;itis&#39;)[[1]][1]`; `r tax_name(query = &amp;quot;Cirsium arvense&amp;quot;, get = &amp;quot;family&amp;quot;, db = &amp;quot;ncbi&amp;quot;)[[1]]`).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which renders to:&lt;/p&gt;

&lt;p&gt;I studied the common weed species &lt;em&gt;Tragopogon dubius&lt;/em&gt; (yellow salsify; Asteraceae) and &lt;em&gt;Cirsium arvense&lt;/em&gt; (Canada thistle; Asteraceae).&lt;/p&gt;

&lt;p&gt;Notice how inside backticks you can execute code by starting with an &lt;em&gt;r&lt;/em&gt;, then doing something like searching for common names for a taxon.&lt;/p&gt;

&lt;h3 id=&#34;another-example&#34;&gt;Another example:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;We found that `r sci2comm(&#39;Tragopogon dubius&#39;, db=&#39;itis&#39;)[[1]][1]` was very invasive.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Renders to:&lt;/p&gt;

&lt;p&gt;We found that yellow salsify was very invasive.&lt;/p&gt;

&lt;h3 id=&#34;another-example-1&#34;&gt;Another example:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;There are `r nrow(downstream(&#39;Tragopogon&#39;, db = &amp;quot;col&amp;quot;, downto = &amp;quot;Species&amp;quot;)$Tragopogon)` species (source: Catalogue of Life) in the _Tragopogon_ genus, meaning there is much more to study :)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Renders to:&lt;/p&gt;

&lt;p&gt;There are 142 species (source: Catalogue of Life) in the &lt;em&gt;Tragopogon&lt;/em&gt; genus, meaning there is much more to study :)&lt;/p&gt;

&lt;h2 id=&#34;el-fin&#34;&gt;el fin&lt;/h2&gt;

&lt;p&gt;Please do update to &lt;code&gt;v0.3&lt;/code&gt;, try it out, report bugs, and get back to us with any questions!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>New features in the most recent taxize update, v0.2</title>
      <link>https://ropensci.org/blog/2014/02/19/taxize-update/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2014/02/19/taxize-update/</guid>
      <description>
        
        

&lt;p&gt;We just released a new version of &lt;code&gt;taxize&lt;/code&gt; - version 0.2.0. This release contains a number of new features, and bug fixes. Here is a run down of some of the changes:&lt;/p&gt;

&lt;h2 id=&#34;first-install-and-load-taxize&#34;&gt;First, install and load taxize&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;rgbif&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(taxize)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;new-things&#34;&gt;New things&lt;/h2&gt;

&lt;h3 id=&#34;new-functions-class2tree&#34;&gt;New functions: class2tree&lt;/h3&gt;

&lt;p&gt;Sometimes you just want to have a visual of the taxonomic relationships among taxa. If you don&amp;rsquo;t know how to build a molecular phylogeny, don&amp;rsquo;t have time, or there just isn&amp;rsquo;t molecular data, you can sorta build one using taxonomy. Building on our &lt;code&gt;classification&lt;/code&gt; function, you can get a bunch of taxonomic hierarchies from the &lt;code&gt;classification&lt;/code&gt; function, then pass them to the new function &lt;code&gt;class2tree&lt;/code&gt;. Like so:&lt;/p&gt;

&lt;p&gt;Define a species list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spnames &amp;lt;- c(&amp;quot;Latania lontaroides&amp;quot;, &amp;quot;Randia cubana&amp;quot;, &amp;quot;Blumea brevipes&amp;quot;, &amp;quot;Commelina erecta&amp;quot;,
    &amp;quot;Miconia pyramidalis&amp;quot;, &amp;quot;Aquilegia moorcroftiana&amp;quot;, &amp;quot;Acridocarpus austrocaledonicus&amp;quot;,
    &amp;quot;Vaccinium wrightii&amp;quot;, &amp;quot;Riocreuxia flanaganii&amp;quot;, &amp;quot;Macroditassa adnata&amp;quot;, &amp;quot;Acianthera ochreata&amp;quot;,
    &amp;quot;Spathodea campanulata&amp;quot;, &amp;quot;Leucadendron salicifolium&amp;quot;, &amp;quot;Habenaria fluminensis&amp;quot;,
    &amp;quot;Platostoma siamense&amp;quot;, &amp;quot;Bulbophyllum hoehnei&amp;quot;, &amp;quot;Aspidosperma polyneuron&amp;quot;,
    &amp;quot;Rhynchospora fascicularis&amp;quot;, &amp;quot;Sida lonchitis&amp;quot;, &amp;quot;Ardisia cymosa&amp;quot;, &amp;quot;Morinda brachycalyx&amp;quot;,
    &amp;quot;Tetrastigma hypoglaucum&amp;quot;, &amp;quot;Paphiopedilum vietnamense&amp;quot;, &amp;quot;Goodenia glabra&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then collect taxonomic hierarchies for each taxon, and remove those with no results (those with no results are just &lt;code&gt;NA&lt;/code&gt;) (I&amp;rsquo;m setting &lt;code&gt;verbose=TRUE&lt;/code&gt; to suppress messages for this example)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out &amp;lt;- classification(spnames, db = &amp;quot;ncbi&amp;quot;, verbose = FALSE)
out &amp;lt;- out[!is.na(out)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;class2tree&lt;/code&gt; to automagically convert the list of hierarchies to a ape &lt;code&gt;phylo&lt;/code&gt; object, then plot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tr &amp;lt;- class2tree(out)
plot(tr, no.margin = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/2014-02-19-taxize-update/unnamed-chunk-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;new-functions-get-gbfid&#34;&gt;New functions: get_gbfid&lt;/h3&gt;

&lt;p&gt;The Global Biodiversity Information Facility (GBIF) has their own taxonomy. They allow programmatic access to their taxonomy, see &lt;a href=&#34;http://www.gbif.org/developer/summary&#34;&gt;here&lt;/a&gt; for details. Also see our &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;&lt;code&gt;rgbif&lt;/code&gt; package&lt;/a&gt; that wraps all their API services.&lt;/p&gt;

&lt;p&gt;We added a similar function to our &lt;code&gt;get_tsn&lt;/code&gt;, &lt;code&gt;get_uid&lt;/code&gt;, etc. functions for various taxonomies, but for the GBIF taxonomy. Here are some example calls:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_gbifid(sciname = &amp;quot;Poa annua&amp;quot;, verbose = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##         1
## &amp;quot;2704179&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;gbifid&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_gbifid(sciname = &amp;quot;Pinus contorta&amp;quot;, verbose = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##         1
## &amp;quot;5285750&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;gbifid&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_gbifid(sciname = &amp;quot;Puma concolor&amp;quot;, verbose = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##         1
## &amp;quot;2435099&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;gbifid&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_gbifid(c(&amp;quot;Poa annua&amp;quot;, &amp;quot;Pinus contorta&amp;quot;), verbose = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2704179&amp;quot; &amp;quot;5285750&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;gbifid&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could be useful if you for example, want to have the exact IDs GBIF uses for your set of species to use at some later point - and at that later point you could use our &lt;code&gt;rgbif&lt;/code&gt; package and search for biodiversity occurrence data with the IDs you collected. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgbif)
(id &amp;lt;- get_gbifid(sciname = &amp;quot;Puma concolor&amp;quot;, verbose = FALSE))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##         1
## &amp;quot;2435099&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;gbifid&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;occ_search(id)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $meta
## $meta$offset
## [1] 0
##
## $meta$limit
## [1] 20
##
## $meta$endOfRecords
## [1] FALSE
##
## $meta$count
## [1] 8392
##
##
## $hierarchy
## $hierarchy[[1]]
##            name     key    rank
## 1      Animalia       1 kingdom
## 2      Chordata      44  phylum
## 3      Mammalia     359   clazz
## 4     Carnivora     732   order
## 5       Felidae    9703  family
## 6          Puma 2435098   genus
## 7 Puma concolor 2435099 species
##
##
## $data
##             name       key longitude latitude
## 1  Puma concolor 866527350   -110.58    31.85
## 2  Puma concolor 866545169   -103.60    29.16
## 3  Puma concolor 866495627   -106.39    35.13
## 4  Puma concolor 866498665    -89.43    20.31
## 5  Puma concolor 866508658   -105.04    19.47
## 6  Puma concolor 866523280   -118.24    34.06
## 7  Puma concolor 866526517   -104.45    29.92
## 8  Puma concolor 866530535   -118.30    34.07
## 9  Puma concolor 860790696    -77.35     2.77
## 10 Puma concolor        NA        NA       NA
## 11 Puma concolor        NA        NA       NA
## 12 Puma concolor        NA        NA       NA
## 13 Puma concolor 866525528   -123.83    40.13
## 14 Puma concolor 866531329   -123.83    40.13
## 15 Puma concolor 866519497   -118.90    34.54
## 16 Puma concolor 866601452   -122.52    38.45
## 17 Puma concolor 866547065   -110.30    41.88
## 18 Puma concolor 866562541   -123.83    40.13
## 19 Puma concolor 866562081   -123.82    40.13
## 20 Puma concolor 866558112   -103.13    29.65
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, &lt;code&gt;get_ids&lt;/code&gt; now accepts &amp;lsquo;gbif&amp;rsquo; as an option for the &lt;code&gt;db&lt;/code&gt; parameter - &lt;code&gt;get_ids&lt;/code&gt; is our omnibus function to search for taxon ids across all sources available in &lt;code&gt;taxize&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;new-functions-rbind-and-cbind-for-classification&#34;&gt;New functions: rbind and cbind for classification&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;classification&lt;/code&gt; function gives back taxonomic hierarchies from a variety of sources, including NCBI, ITIS, Catalogue of Life, Tropicos, EOL, and now GBIF. If you pass in many taxonomic IDs or taxon names, you get back a list of hierarchies. We added two functions to make it convenient to mash these outputs together, &lt;code&gt;rbind&lt;/code&gt; for basically stacking hierarchies on top of one another, and &lt;code&gt;cbind&lt;/code&gt; for making a width-wise combination of hierarchies. Our &lt;code&gt;cbind&lt;/code&gt; doesn&amp;rsquo;t do exactly what your used to cbind doing for data.frame&amp;rsquo;s. The examples below are based on some changed code since the newest CRAN version, but you can install the development version with the changes from Github (see &lt;a href=&#34;https://github.com/ropensci/taxize#install-taxize&#34;&gt;here&lt;/a&gt; for instructions).&lt;/p&gt;

&lt;p&gt;From a call to &lt;code&gt;get_ids&lt;/code&gt;, then passed on to &lt;code&gt;classification&lt;/code&gt;, we get a object of class &lt;code&gt;classification_ids&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(out &amp;lt;- get_ids(names = &amp;quot;Puma concolor&amp;quot;, db = c(&amp;quot;ncbi&amp;quot;, &amp;quot;gbif&amp;quot;), verbose = FALSE))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $ncbi
## Puma concolor
##        &amp;quot;9696&amp;quot;
## attr(,&amp;quot;match&amp;quot;)
## [1] &amp;quot;found&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;uid&amp;quot;
##
## $gbif
## Puma concolor
##     &amp;quot;2435099&amp;quot;
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;gbifid&amp;quot;
##
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;ids&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(cl &amp;lt;- classification(out, verbose = FALSE))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## $ncbi
## $`9696`
##                    name         rank
## 1    cellular organisms      no rank
## 2             Eukaryota superkingdom
## 3          Opisthokonta      no rank
## 4               Metazoa      kingdom
## 5             Eumetazoa      no rank
## 6             Bilateria      no rank
## 7         Deuterostomia      no rank
## 8              Chordata       phylum
## 9              Craniata    subphylum
## 10           Vertebrata      no rank
## 11        Gnathostomata   superclass
## 12           Teleostomi      no rank
## 13         Euteleostomi      no rank
## 14        Sarcopterygii      no rank
## 15 Dipnotetrapodomorpha      no rank
## 16            Tetrapoda      no rank
## 17              Amniota      no rank
## 18             Mammalia        class
## 19               Theria      no rank
## 20             Eutheria      no rank
## 21        Boreoeutheria      no rank
## 22       Laurasiatheria   superorder
## 23            Carnivora        order
## 24           Feliformia     suborder
## 25              Felidae       family
## 26              Felinae    subfamily
## 27                 Puma        genus
## 28        Puma concolor      species
##
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;classification&amp;quot;
## attr(,&amp;quot;db&amp;quot;)
## [1] &amp;quot;ncbi&amp;quot;
##
## $gbif
## $`2435099`
##            name    rank
## 1      Animalia kingdom
## 2      Chordata  phylum
## 3      Mammalia   clazz
## 4     Carnivora   order
## 5       Felidae  family
## 6          Puma   genus
## 7 Puma concolor species
##
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;classification&amp;quot;
##
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;classification_ids&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can bind width-wise&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cbind(cl)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##              no rank superkingdom  kingdom   phylum subphylum
## 1 cellular organisms    Eukaryota  Metazoa Chordata  Craniata
## 2               &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt; Animalia Chordata      &amp;lt;NA&amp;gt;
##      superclass    class     superorder     order   suborder  family
## 1 Gnathostomata Mammalia Laurasiatheria Carnivora Feliformia Felidae
## 2          &amp;lt;NA&amp;gt;     &amp;lt;NA&amp;gt;           &amp;lt;NA&amp;gt; Carnivora       &amp;lt;NA&amp;gt; Felidae
##   subfamily genus       species    clazz
## 1   Felinae  Puma Puma concolor     &amp;lt;NA&amp;gt;
## 2      &amp;lt;NA&amp;gt;  Puma Puma concolor Mammalia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or bind length-wise&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rbind(cl)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    source taxonid                 name         rank
## 1    ncbi    9696   cellular organisms      no rank
## 2    ncbi    9696            Eukaryota superkingdom
## 3    ncbi    9696         Opisthokonta      no rank
## 4    ncbi    9696              Metazoa      kingdom
## 5    ncbi    9696            Eumetazoa      no rank
## 6    ncbi    9696            Bilateria      no rank
## 7    ncbi    9696        Deuterostomia      no rank
## 8    ncbi    9696             Chordata       phylum
## 9    ncbi    9696             Craniata    subphylum
## 10   ncbi    9696           Vertebrata      no rank
## 11   ncbi    9696        Gnathostomata   superclass
## 12   ncbi    9696           Teleostomi      no rank
## 13   ncbi    9696         Euteleostomi      no rank
## 14   ncbi    9696        Sarcopterygii      no rank
## 15   ncbi    9696 Dipnotetrapodomorpha      no rank
## 16   ncbi    9696            Tetrapoda      no rank
## 17   ncbi    9696              Amniota      no rank
## 18   ncbi    9696             Mammalia        class
## 19   ncbi    9696               Theria      no rank
## 20   ncbi    9696             Eutheria      no rank
## 21   ncbi    9696        Boreoeutheria      no rank
## 22   ncbi    9696       Laurasiatheria   superorder
## 23   ncbi    9696            Carnivora        order
## 24   ncbi    9696           Feliformia     suborder
## 25   ncbi    9696              Felidae       family
## 26   ncbi    9696              Felinae    subfamily
## 27   ncbi    9696                 Puma        genus
## 28   ncbi    9696        Puma concolor      species
## 29   gbif 2435099             Animalia      kingdom
## 30   gbif 2435099             Chordata       phylum
## 31   gbif 2435099             Mammalia        clazz
## 32   gbif 2435099            Carnivora        order
## 33   gbif 2435099              Felidae       family
## 34   gbif 2435099                 Puma        genus
## 35   gbif 2435099        Puma concolor      species
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we can do the same thing on the class &lt;code&gt;classification&lt;/code&gt; that we get back from a call to one of &lt;code&gt;get_colid&lt;/code&gt;, &lt;code&gt;get_tsn&lt;/code&gt;, &lt;code&gt;get_eolid&lt;/code&gt;, &lt;code&gt;get_tpsid&lt;/code&gt;, &lt;code&gt;get_gbifid&lt;/code&gt;, or &lt;code&gt;get_uid&lt;/code&gt;, that&amp;rsquo;s then passed on to &lt;code&gt;classification&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cl_col &amp;lt;- classification(get_colid(c(&amp;quot;Puma concolor&amp;quot;, &amp;quot;Accipiter striatus&amp;quot;),
    verbose = FALSE))
rbind(cl_col)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    source  taxonid            name    rank
## 1     col  6862841        Animalia Kingdom
## 2     col  6862841        Chordata  Phylum
## 3     col  6862841        Mammalia   Class
## 4     col  6862841       Carnivora   Order
## 5     col  6862841         Felidae  Family
## 6     col  6862841            Puma   Genus
## 7     col 11909487        Animalia Kingdom
## 8     col 11909487        Chordata  Phylum
## 9     col 11909487            Aves   Class
## 10    col 11909487 Accipitriformes   Order
## 11    col 11909487    Accipitridae  Family
## 12    col 11909487       Accipiter   Genus
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cbind(cl_col)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    kingdom   phylum    class           order       family     genus
## 1 Animalia Chordata Mammalia       Carnivora      Felidae      Puma
## 2 Animalia Chordata     Aves Accipitriformes Accipitridae Accipiter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read more about changes in v0.2 &lt;a href=&#34;https://github.com/ropensci/taxize/releases/tag/v0.2.0&#34;&gt;at Github&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Revisiting our USGS app</title>
      <link>https://ropensci.org/blog/2013/06/19/usgs-app/</link>
      <pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2013/06/19/usgs-app/</guid>
      <description>
        
        &lt;p&gt;R has a reputation of not playing nice on the web. At rOpenSci, we write R pacakages to bring data from around the web into R on your local machine - so we mostly don&amp;rsquo;t do any dev for the web. However, the United States Geological Survey (USGS) recenty held &lt;a href=&#34;http://applifyingusgsdata.challenge.gov/submissions/14242-taxaviewer&#34;&gt;an app competition&lt;/a&gt; - it was a good opportunity to play with R on the web. We won best overall app as described in &lt;a href=&#34;http://ropensci.org/blog/2013/04/22/usgs_app/&#34;&gt;an earlier post on this blog&lt;/a&gt;. Check out our app &lt;strong&gt;TaxaViewer&lt;/strong&gt; &lt;a href=&#34;http://glimmer.rstudio.com/ropensci/usgs_app/&#34;&gt;here&lt;/a&gt;. Last week we presented the app to the USGS - a video of the presentation will be coming soon. A screenshot:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
{{ &amp;ldquo;assets/blog-images/usgsapp.png&amp;rdquo; | image_url }}
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;When we submitted the app we had static ggplot2 maps, but now the app has interactive maps that are a much better fit for a browser that isn&amp;rsquo;t restrained to static images. Ramnath Vaidyanathan helped us use &lt;a href=&#34;http://rcharts.github.io/&#34;&gt;rCharts&lt;/a&gt; to pass data from queries to the GBIF and BISON APIs to functions in rCharts to prepare the map page you see in the app. rCharts isn&amp;rsquo;t restricted to just maps - think interactive bar charts, scatter plots, etc.&lt;/p&gt;

&lt;p&gt;We didn&amp;rsquo;t originally have a tab for searching for mentions of taxonomic names in the literature - we added it in later (see the &lt;em&gt;Papers&lt;/em&gt; tab on the &lt;a href=&#34;http://glimmer.rstudio.com/ropensci/usgs_app/&#34;&gt;app&lt;/a&gt;), and people really liked it, suggesting that&amp;rsquo;s something we should explore more. How does it work? We take the list of taxonomic names input in the text box in the upper left, and query the &lt;a href=&#34;http://api.plos.org/&#34;&gt;PLOS search API&lt;/a&gt;, and return a table of papers listing the journal name and paper title. We provide a link to open an article from the search results in Macrodocs (thx &lt;a href=&#34;https://twitter.com/invisiblecomma&#34;&gt;@invisiblecomma&lt;/a&gt;!), like &lt;a href=&#34;http://macrodocs.org/?doi=10.1371/journal.pone.0017580&#34;&gt;this example&lt;/a&gt;. We chose PLOS as they have a relatively large set of articles, and they are all open access = immediate access to the text. Any interest in an app just for literature? Maybe litereature + metadata? And perhaps some text mining using the &lt;a href=&#34;http://cran.r-project.org/web/packages/tm/index.html&#34;&gt;tm package&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;We think of the USGS app as a visual interface to show what can be do in R on the command line, and give the code to do it. See the code (&amp;lt;/&amp;gt;) buttons that drop down in this screenshot below. This is a compelling use case for Shiny apps - show people what they can do visually - then give them the code to do it on their own machine.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
{{ &amp;ldquo;assets/blog-images/codemodal.png&amp;rdquo; | image_url }}
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>is.invasive()</title>
      <link>https://ropensci.org/blog/2012/11/26/is-invasive/</link>
      <pubDate>Mon, 26 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ropensci.org/blog/2012/11/26/is-invasive/</guid>
      <description>
        
        

&lt;p&gt;The following is a guest post from &lt;a href=&#34;http://www.bartomeus.cat/es/ignasi/&#34;&gt;Ignasi Bartomeus&lt;/a&gt;, originally &lt;a href=&#34;http://ibartomeus.wordpress.com/2012/11/26/is-invasive/&#34;&gt;posted&lt;/a&gt; on &lt;a href=&#34;http://ibartomeus.wordpress.com/&#34;&gt;his blog&lt;/a&gt; on 26 Nov, 2012. Check out a related blog post &lt;a href=&#34;http://sckott.github.com/2012/12/is-invasive/&#34;&gt;here&lt;/a&gt;. Note the functionality discussed in this post is now in our &lt;a href=&#34;https://github.com/ropensci/taxize_&#34;&gt;taxize&lt;/a&gt; package under the function &lt;a href=&#34;https://github.com/ropensci/taxize_/blob/master/R/gisd_isinvasive.R&#34;&gt;&lt;code&gt;gisd_isinvasive&lt;/code&gt;&lt;/a&gt;. We hacked out a quick &lt;a href=&#34;http://www.rstudio.com/shiny/&#34;&gt;Shiny&lt;/a&gt; app so you can play around with the below function in taxize on the web to get invasive status and plot it on a phylogeny. Check it out &lt;a href=&#34;http://glimmer.rstudio.com/ropensci/taxize_invasive/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ignasi-bartomeus&#34;&gt;Ignasi Bartomeus&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ropensci.org/assets/blog-images/ignasi_bartomeus.png&#34; alt=&#34;ignasi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Celebrating that I am contributing to the R-bloggers.com blog aggregator I am going to post a very simple function to check which species (both plants and animals) are considered ‚Äúinvaders‚Äù somewhere in the world. Basically the function asks that to the &lt;a href=&#34;http://www.issg.org/database/welcome/&#34;&gt;Global Invasive Species Database (GISD)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I coded this because a friend of mine aks me precisely that question [Yes, friends assumes you should know this kind of stuff (and also why the plants of their balcony are dying) off the top of your head just because you are a biologist]. However, I do not know much things and I am too lazy to check all 250 species one by one on the GISD webpage. Also is a good R practice, and I am ok investing some work time on personal projects. Google (and other big companies) encourage it‚Äôs employees to spend 20% of the time working on projects that aren‚Äôt necessarily in their job descriptions in order to bust its innovation power, so that should be even more important in science!&lt;/p&gt;

&lt;p&gt;Hope it can be useful to more people, I uploaded the code as a Gist:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/ibartomeus/4136068.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;UPDATE: The function is now available on &lt;a href=&#34;https://github.com/ropensci/taxize/&#34;&gt;taxize R package&lt;/a&gt; developed by the rOpenScience people!&lt;/p&gt;

&lt;hr /&gt;

      </description>
    </item>
    
  </channel>
</rss>
